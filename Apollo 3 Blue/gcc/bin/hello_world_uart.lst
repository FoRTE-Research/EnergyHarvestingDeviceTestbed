
bin/hello_world_uart.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 3d e0 00 00 a5 e0 00 00 1d df 00 00     ....=...........
    c010:	a9 e0 00 00 a9 e0 00 00 a9 e0 00 00 00 00 00 00     ................
	...
    c02c:	ad e0 00 00 ad e0 00 00 00 00 00 00 ad e0 00 00     ................
    c03c:	ad e0 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c04c:	ad e0 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c05c:	ad e0 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c06c:	ad e0 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c07c:	b5 dc 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c08c:	ad e0 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c09c:	ad e0 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c0ac:	ad e0 00 00 ad e0 00 00 ad e0 00 00 ad e0 00 00     ................
    c0bc:	ad e0 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcpy>:
    c100:	4684      	mov	ip, r0
    c102:	ea41 0300 	orr.w	r3, r1, r0
    c106:	f013 0303 	ands.w	r3, r3, #3
    c10a:	d16d      	bne.n	c1e8 <memcpy+0xe8>
    c10c:	3a40      	subs	r2, #64	; 0x40
    c10e:	d341      	bcc.n	c194 <memcpy+0x94>
    c110:	f851 3b04 	ldr.w	r3, [r1], #4
    c114:	f840 3b04 	str.w	r3, [r0], #4
    c118:	f851 3b04 	ldr.w	r3, [r1], #4
    c11c:	f840 3b04 	str.w	r3, [r0], #4
    c120:	f851 3b04 	ldr.w	r3, [r1], #4
    c124:	f840 3b04 	str.w	r3, [r0], #4
    c128:	f851 3b04 	ldr.w	r3, [r1], #4
    c12c:	f840 3b04 	str.w	r3, [r0], #4
    c130:	f851 3b04 	ldr.w	r3, [r1], #4
    c134:	f840 3b04 	str.w	r3, [r0], #4
    c138:	f851 3b04 	ldr.w	r3, [r1], #4
    c13c:	f840 3b04 	str.w	r3, [r0], #4
    c140:	f851 3b04 	ldr.w	r3, [r1], #4
    c144:	f840 3b04 	str.w	r3, [r0], #4
    c148:	f851 3b04 	ldr.w	r3, [r1], #4
    c14c:	f840 3b04 	str.w	r3, [r0], #4
    c150:	f851 3b04 	ldr.w	r3, [r1], #4
    c154:	f840 3b04 	str.w	r3, [r0], #4
    c158:	f851 3b04 	ldr.w	r3, [r1], #4
    c15c:	f840 3b04 	str.w	r3, [r0], #4
    c160:	f851 3b04 	ldr.w	r3, [r1], #4
    c164:	f840 3b04 	str.w	r3, [r0], #4
    c168:	f851 3b04 	ldr.w	r3, [r1], #4
    c16c:	f840 3b04 	str.w	r3, [r0], #4
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	3a40      	subs	r2, #64	; 0x40
    c192:	d2bd      	bcs.n	c110 <memcpy+0x10>
    c194:	3230      	adds	r2, #48	; 0x30
    c196:	d311      	bcc.n	c1bc <memcpy+0xbc>
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	3a10      	subs	r2, #16
    c1ba:	d2ed      	bcs.n	c198 <memcpy+0x98>
    c1bc:	320c      	adds	r2, #12
    c1be:	d305      	bcc.n	c1cc <memcpy+0xcc>
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	3a04      	subs	r2, #4
    c1ca:	d2f9      	bcs.n	c1c0 <memcpy+0xc0>
    c1cc:	3204      	adds	r2, #4
    c1ce:	d008      	beq.n	c1e2 <memcpy+0xe2>
    c1d0:	07d2      	lsls	r2, r2, #31
    c1d2:	bf1c      	itt	ne
    c1d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c1d8:	f800 3b01 	strbne.w	r3, [r0], #1
    c1dc:	d301      	bcc.n	c1e2 <memcpy+0xe2>
    c1de:	880b      	ldrh	r3, [r1, #0]
    c1e0:	8003      	strh	r3, [r0, #0]
    c1e2:	4660      	mov	r0, ip
    c1e4:	4770      	bx	lr
    c1e6:	bf00      	nop
    c1e8:	2a08      	cmp	r2, #8
    c1ea:	d313      	bcc.n	c214 <memcpy+0x114>
    c1ec:	078b      	lsls	r3, r1, #30
    c1ee:	d08d      	beq.n	c10c <memcpy+0xc>
    c1f0:	f010 0303 	ands.w	r3, r0, #3
    c1f4:	d08a      	beq.n	c10c <memcpy+0xc>
    c1f6:	f1c3 0304 	rsb	r3, r3, #4
    c1fa:	1ad2      	subs	r2, r2, r3
    c1fc:	07db      	lsls	r3, r3, #31
    c1fe:	bf1c      	itt	ne
    c200:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c204:	f800 3b01 	strbne.w	r3, [r0], #1
    c208:	d380      	bcc.n	c10c <memcpy+0xc>
    c20a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c20e:	f820 3b02 	strh.w	r3, [r0], #2
    c212:	e77b      	b.n	c10c <memcpy+0xc>
    c214:	3a04      	subs	r2, #4
    c216:	d3d9      	bcc.n	c1cc <memcpy+0xcc>
    c218:	3a01      	subs	r2, #1
    c21a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c21e:	f800 3b01 	strb.w	r3, [r0], #1
    c222:	d2f9      	bcs.n	c218 <memcpy+0x118>
    c224:	780b      	ldrb	r3, [r1, #0]
    c226:	7003      	strb	r3, [r0, #0]
    c228:	784b      	ldrb	r3, [r1, #1]
    c22a:	7043      	strb	r3, [r0, #1]
    c22c:	788b      	ldrb	r3, [r1, #2]
    c22e:	7083      	strb	r3, [r0, #2]
    c230:	4660      	mov	r0, ip
    c232:	4770      	bx	lr

0000c234 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    c234:	b084      	sub	sp, #16
    c236:	9001      	str	r0, [sp, #4]
    c238:	9100      	str	r1, [sp, #0]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    c23a:	9b01      	ldr	r3, [sp, #4]
    c23c:	9303      	str	r3, [sp, #12]
    c23e:	e004      	b.n	c24a <mbedtls_zeroize+0x16>
    c240:	9b03      	ldr	r3, [sp, #12]
    c242:	1c5a      	adds	r2, r3, #1
    c244:	9203      	str	r2, [sp, #12]
    c246:	2200      	movs	r2, #0
    c248:	701a      	strb	r2, [r3, #0]
    c24a:	9b00      	ldr	r3, [sp, #0]
    c24c:	1e5a      	subs	r2, r3, #1
    c24e:	9200      	str	r2, [sp, #0]
    c250:	2b00      	cmp	r3, #0
    c252:	d1f5      	bne.n	c240 <mbedtls_zeroize+0xc>
}
    c254:	bf00      	nop
    c256:	bf00      	nop
    c258:	b004      	add	sp, #16
    c25a:	4770      	bx	lr

0000c25c <mbedtls_sha256_free>:
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    c25c:	b500      	push	{lr}
    c25e:	b083      	sub	sp, #12
    c260:	9001      	str	r0, [sp, #4]
    if( ctx == NULL )
    c262:	9b01      	ldr	r3, [sp, #4]
    c264:	2b00      	cmp	r3, #0
    c266:	d004      	beq.n	c272 <mbedtls_sha256_free+0x16>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
    c268:	216c      	movs	r1, #108	; 0x6c
    c26a:	9801      	ldr	r0, [sp, #4]
    c26c:	f7ff ffe2 	bl	c234 <mbedtls_zeroize>
    c270:	e000      	b.n	c274 <mbedtls_sha256_free+0x18>
        return;
    c272:	bf00      	nop
}
    c274:	b003      	add	sp, #12
    c276:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c27c <mbedtls_sha256_starts>:

/*
 * SHA-256 context setup
 */
void mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
    c27c:	b082      	sub	sp, #8
    c27e:	9001      	str	r0, [sp, #4]
    c280:	9100      	str	r1, [sp, #0]
    ctx->total[0] = 0;
    c282:	9b01      	ldr	r3, [sp, #4]
    c284:	2200      	movs	r2, #0
    c286:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
    c288:	9b01      	ldr	r3, [sp, #4]
    c28a:	2200      	movs	r2, #0
    c28c:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
    c28e:	9b00      	ldr	r3, [sp, #0]
    c290:	2b00      	cmp	r3, #0
    c292:	d118      	bne.n	c2c6 <mbedtls_sha256_starts+0x4a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    c294:	9b01      	ldr	r3, [sp, #4]
    c296:	4a1b      	ldr	r2, [pc, #108]	; (c304 <mbedtls_sha256_starts+0x88>)
    c298:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
    c29a:	9b01      	ldr	r3, [sp, #4]
    c29c:	4a1a      	ldr	r2, [pc, #104]	; (c308 <mbedtls_sha256_starts+0x8c>)
    c29e:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
    c2a0:	9b01      	ldr	r3, [sp, #4]
    c2a2:	4a1a      	ldr	r2, [pc, #104]	; (c30c <mbedtls_sha256_starts+0x90>)
    c2a4:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
    c2a6:	9b01      	ldr	r3, [sp, #4]
    c2a8:	4a19      	ldr	r2, [pc, #100]	; (c310 <mbedtls_sha256_starts+0x94>)
    c2aa:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
    c2ac:	9b01      	ldr	r3, [sp, #4]
    c2ae:	4a19      	ldr	r2, [pc, #100]	; (c314 <mbedtls_sha256_starts+0x98>)
    c2b0:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
    c2b2:	9b01      	ldr	r3, [sp, #4]
    c2b4:	4a18      	ldr	r2, [pc, #96]	; (c318 <mbedtls_sha256_starts+0x9c>)
    c2b6:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
    c2b8:	9b01      	ldr	r3, [sp, #4]
    c2ba:	4a18      	ldr	r2, [pc, #96]	; (c31c <mbedtls_sha256_starts+0xa0>)
    c2bc:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
    c2be:	9b01      	ldr	r3, [sp, #4]
    c2c0:	4a17      	ldr	r2, [pc, #92]	; (c320 <mbedtls_sha256_starts+0xa4>)
    c2c2:	625a      	str	r2, [r3, #36]	; 0x24
    c2c4:	e017      	b.n	c2f6 <mbedtls_sha256_starts+0x7a>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    c2c6:	9b01      	ldr	r3, [sp, #4]
    c2c8:	4a16      	ldr	r2, [pc, #88]	; (c324 <mbedtls_sha256_starts+0xa8>)
    c2ca:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
    c2cc:	9b01      	ldr	r3, [sp, #4]
    c2ce:	4a16      	ldr	r2, [pc, #88]	; (c328 <mbedtls_sha256_starts+0xac>)
    c2d0:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
    c2d2:	9b01      	ldr	r3, [sp, #4]
    c2d4:	4a15      	ldr	r2, [pc, #84]	; (c32c <mbedtls_sha256_starts+0xb0>)
    c2d6:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
    c2d8:	9b01      	ldr	r3, [sp, #4]
    c2da:	4a15      	ldr	r2, [pc, #84]	; (c330 <mbedtls_sha256_starts+0xb4>)
    c2dc:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
    c2de:	9b01      	ldr	r3, [sp, #4]
    c2e0:	4a14      	ldr	r2, [pc, #80]	; (c334 <mbedtls_sha256_starts+0xb8>)
    c2e2:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
    c2e4:	9b01      	ldr	r3, [sp, #4]
    c2e6:	4a14      	ldr	r2, [pc, #80]	; (c338 <mbedtls_sha256_starts+0xbc>)
    c2e8:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
    c2ea:	9b01      	ldr	r3, [sp, #4]
    c2ec:	4a13      	ldr	r2, [pc, #76]	; (c33c <mbedtls_sha256_starts+0xc0>)
    c2ee:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	4a13      	ldr	r2, [pc, #76]	; (c340 <mbedtls_sha256_starts+0xc4>)
    c2f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    ctx->is224 = is224;
    c2f6:	9b01      	ldr	r3, [sp, #4]
    c2f8:	9a00      	ldr	r2, [sp, #0]
    c2fa:	669a      	str	r2, [r3, #104]	; 0x68
}
    c2fc:	bf00      	nop
    c2fe:	b002      	add	sp, #8
    c300:	4770      	bx	lr
    c302:	bf00      	nop
    c304:	6a09e667 	.word	0x6a09e667
    c308:	bb67ae85 	.word	0xbb67ae85
    c30c:	3c6ef372 	.word	0x3c6ef372
    c310:	a54ff53a 	.word	0xa54ff53a
    c314:	510e527f 	.word	0x510e527f
    c318:	9b05688c 	.word	0x9b05688c
    c31c:	1f83d9ab 	.word	0x1f83d9ab
    c320:	5be0cd19 	.word	0x5be0cd19
    c324:	c1059ed8 	.word	0xc1059ed8
    c328:	367cd507 	.word	0x367cd507
    c32c:	3070dd17 	.word	0x3070dd17
    c330:	f70e5939 	.word	0xf70e5939
    c334:	ffc00b31 	.word	0xffc00b31
    c338:	68581511 	.word	0x68581511
    c33c:	64f98fa7 	.word	0x64f98fa7
    c340:	befa4fa4 	.word	0xbefa4fa4

0000c344 <mbedtls_sha256_process>:
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

void mbedtls_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[64] )
{
    c344:	b410      	push	{r4}
    c346:	b0cf      	sub	sp, #316	; 0x13c
    c348:	ab4e      	add	r3, sp, #312	; 0x138
    c34a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
    c34e:	6018      	str	r0, [r3, #0]
    c350:	ab4e      	add	r3, sp, #312	; 0x138
    c352:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
    c356:	6019      	str	r1, [r3, #0]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
    c358:	2300      	movs	r3, #0
    c35a:	934d      	str	r3, [sp, #308]	; 0x134
    c35c:	e010      	b.n	c380 <mbedtls_sha256_process+0x3c>
        A[i] = ctx->state[i];
    c35e:	ab4e      	add	r3, sp, #312	; 0x138
    c360:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
    c364:	681b      	ldr	r3, [r3, #0]
    c366:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    c368:	3202      	adds	r2, #2
    c36a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c36e:	ab4e      	add	r3, sp, #312	; 0x138
    c370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c374:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    c376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    c37a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c37c:	3301      	adds	r3, #1
    c37e:	934d      	str	r3, [sp, #308]	; 0x134
    c380:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c382:	2b07      	cmp	r3, #7
    c384:	d9eb      	bls.n	c35e <mbedtls_sha256_process+0x1a>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
    c386:	2300      	movs	r3, #0
    c388:	934d      	str	r3, [sp, #308]	; 0x134
    c38a:	e032      	b.n	c3f2 <mbedtls_sha256_process+0xae>
        GET_UINT32_BE( W[i], data, 4 * i );
    c38c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c38e:	009b      	lsls	r3, r3, #2
    c390:	aa4e      	add	r2, sp, #312	; 0x138
    c392:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
    c396:	6812      	ldr	r2, [r2, #0]
    c398:	4413      	add	r3, r2
    c39a:	781b      	ldrb	r3, [r3, #0]
    c39c:	061a      	lsls	r2, r3, #24
    c39e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c3a0:	009b      	lsls	r3, r3, #2
    c3a2:	3301      	adds	r3, #1
    c3a4:	a94e      	add	r1, sp, #312	; 0x138
    c3a6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
    c3aa:	6809      	ldr	r1, [r1, #0]
    c3ac:	440b      	add	r3, r1
    c3ae:	781b      	ldrb	r3, [r3, #0]
    c3b0:	041b      	lsls	r3, r3, #16
    c3b2:	431a      	orrs	r2, r3
    c3b4:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c3b6:	009b      	lsls	r3, r3, #2
    c3b8:	3302      	adds	r3, #2
    c3ba:	a94e      	add	r1, sp, #312	; 0x138
    c3bc:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
    c3c0:	6809      	ldr	r1, [r1, #0]
    c3c2:	440b      	add	r3, r1
    c3c4:	781b      	ldrb	r3, [r3, #0]
    c3c6:	021b      	lsls	r3, r3, #8
    c3c8:	4313      	orrs	r3, r2
    c3ca:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    c3cc:	0092      	lsls	r2, r2, #2
    c3ce:	3203      	adds	r2, #3
    c3d0:	a94e      	add	r1, sp, #312	; 0x138
    c3d2:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
    c3d6:	6809      	ldr	r1, [r1, #0]
    c3d8:	440a      	add	r2, r1
    c3da:	7812      	ldrb	r2, [r2, #0]
    c3dc:	ea43 0102 	orr.w	r1, r3, r2
    c3e0:	ab4e      	add	r3, sp, #312	; 0x138
    c3e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    c3e6:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    c3e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
    c3ec:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c3ee:	3301      	adds	r3, #1
    c3f0:	934d      	str	r3, [sp, #308]	; 0x134
    c3f2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c3f4:	2b0f      	cmp	r3, #15
    c3f6:	d9c9      	bls.n	c38c <mbedtls_sha256_process+0x48>

    for( i = 0; i < 16; i += 8 )
    c3f8:	2300      	movs	r3, #0
    c3fa:	934d      	str	r3, [sp, #308]	; 0x134
    c3fc:	e3de      	b.n	cbbc <mbedtls_sha256_process+0x878>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    c3fe:	ab4e      	add	r3, sp, #312	; 0x138
    c400:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c404:	69da      	ldr	r2, [r3, #28]
    c406:	ab4e      	add	r3, sp, #312	; 0x138
    c408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c40c:	691b      	ldr	r3, [r3, #16]
    c40e:	ea4f 11b3 	mov.w	r1, r3, ror #6
    c412:	ab4e      	add	r3, sp, #312	; 0x138
    c414:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c418:	691b      	ldr	r3, [r3, #16]
    c41a:	ea4f 23f3 	mov.w	r3, r3, ror #11
    c41e:	4059      	eors	r1, r3
    c420:	ab4e      	add	r3, sp, #312	; 0x138
    c422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c426:	691b      	ldr	r3, [r3, #16]
    c428:	ea4f 6373 	mov.w	r3, r3, ror #25
    c42c:	404b      	eors	r3, r1
    c42e:	441a      	add	r2, r3
    c430:	ab4e      	add	r3, sp, #312	; 0x138
    c432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c436:	6999      	ldr	r1, [r3, #24]
    c438:	ab4e      	add	r3, sp, #312	; 0x138
    c43a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c43e:	6918      	ldr	r0, [r3, #16]
    c440:	ab4e      	add	r3, sp, #312	; 0x138
    c442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c446:	695c      	ldr	r4, [r3, #20]
    c448:	ab4e      	add	r3, sp, #312	; 0x138
    c44a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c44e:	699b      	ldr	r3, [r3, #24]
    c450:	4063      	eors	r3, r4
    c452:	4003      	ands	r3, r0
    c454:	404b      	eors	r3, r1
    c456:	441a      	add	r2, r3
    c458:	49b7      	ldr	r1, [pc, #732]	; (c738 <mbedtls_sha256_process+0x3f4>)
    c45a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c45c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    c460:	441a      	add	r2, r3
    c462:	ab4e      	add	r3, sp, #312	; 0x138
    c464:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    c468:	994d      	ldr	r1, [sp, #308]	; 0x134
    c46a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    c46e:	4413      	add	r3, r2
    c470:	934c      	str	r3, [sp, #304]	; 0x130
    c472:	ab4e      	add	r3, sp, #312	; 0x138
    c474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	ea4f 02b3 	mov.w	r2, r3, ror #2
    c47e:	ab4e      	add	r3, sp, #312	; 0x138
    c480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c484:	681b      	ldr	r3, [r3, #0]
    c486:	ea4f 3373 	mov.w	r3, r3, ror #13
    c48a:	405a      	eors	r2, r3
    c48c:	ab4e      	add	r3, sp, #312	; 0x138
    c48e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c492:	681b      	ldr	r3, [r3, #0]
    c494:	ea4f 53b3 	mov.w	r3, r3, ror #22
    c498:	405a      	eors	r2, r3
    c49a:	ab4e      	add	r3, sp, #312	; 0x138
    c49c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4a0:	6819      	ldr	r1, [r3, #0]
    c4a2:	ab4e      	add	r3, sp, #312	; 0x138
    c4a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4a8:	685b      	ldr	r3, [r3, #4]
    c4aa:	4019      	ands	r1, r3
    c4ac:	ab4e      	add	r3, sp, #312	; 0x138
    c4ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4b2:	6898      	ldr	r0, [r3, #8]
    c4b4:	ab4e      	add	r3, sp, #312	; 0x138
    c4b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4ba:	681c      	ldr	r4, [r3, #0]
    c4bc:	ab4e      	add	r3, sp, #312	; 0x138
    c4be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4c2:	685b      	ldr	r3, [r3, #4]
    c4c4:	4323      	orrs	r3, r4
    c4c6:	4003      	ands	r3, r0
    c4c8:	430b      	orrs	r3, r1
    c4ca:	4413      	add	r3, r2
    c4cc:	934b      	str	r3, [sp, #300]	; 0x12c
    c4ce:	ab4e      	add	r3, sp, #312	; 0x138
    c4d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4d4:	68da      	ldr	r2, [r3, #12]
    c4d6:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    c4d8:	441a      	add	r2, r3
    c4da:	ab4e      	add	r3, sp, #312	; 0x138
    c4dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4e0:	60da      	str	r2, [r3, #12]
    c4e2:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    c4e4:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    c4e6:	441a      	add	r2, r3
    c4e8:	ab4e      	add	r3, sp, #312	; 0x138
    c4ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4ee:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    c4f0:	ab4e      	add	r3, sp, #312	; 0x138
    c4f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4f6:	699a      	ldr	r2, [r3, #24]
    c4f8:	ab4e      	add	r3, sp, #312	; 0x138
    c4fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c4fe:	68db      	ldr	r3, [r3, #12]
    c500:	ea4f 11b3 	mov.w	r1, r3, ror #6
    c504:	ab4e      	add	r3, sp, #312	; 0x138
    c506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c50a:	68db      	ldr	r3, [r3, #12]
    c50c:	ea4f 23f3 	mov.w	r3, r3, ror #11
    c510:	4059      	eors	r1, r3
    c512:	ab4e      	add	r3, sp, #312	; 0x138
    c514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c518:	68db      	ldr	r3, [r3, #12]
    c51a:	ea4f 6373 	mov.w	r3, r3, ror #25
    c51e:	404b      	eors	r3, r1
    c520:	441a      	add	r2, r3
    c522:	ab4e      	add	r3, sp, #312	; 0x138
    c524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c528:	6959      	ldr	r1, [r3, #20]
    c52a:	ab4e      	add	r3, sp, #312	; 0x138
    c52c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c530:	68d8      	ldr	r0, [r3, #12]
    c532:	ab4e      	add	r3, sp, #312	; 0x138
    c534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c538:	691c      	ldr	r4, [r3, #16]
    c53a:	ab4e      	add	r3, sp, #312	; 0x138
    c53c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c540:	695b      	ldr	r3, [r3, #20]
    c542:	4063      	eors	r3, r4
    c544:	4003      	ands	r3, r0
    c546:	404b      	eors	r3, r1
    c548:	441a      	add	r2, r3
    c54a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c54c:	3301      	adds	r3, #1
    c54e:	497a      	ldr	r1, [pc, #488]	; (c738 <mbedtls_sha256_process+0x3f4>)
    c550:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    c554:	441a      	add	r2, r3
    c556:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c558:	1c59      	adds	r1, r3, #1
    c55a:	ab4e      	add	r3, sp, #312	; 0x138
    c55c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    c560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    c564:	4413      	add	r3, r2
    c566:	934c      	str	r3, [sp, #304]	; 0x130
    c568:	ab4e      	add	r3, sp, #312	; 0x138
    c56a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c56e:	69db      	ldr	r3, [r3, #28]
    c570:	ea4f 02b3 	mov.w	r2, r3, ror #2
    c574:	ab4e      	add	r3, sp, #312	; 0x138
    c576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c57a:	69db      	ldr	r3, [r3, #28]
    c57c:	ea4f 3373 	mov.w	r3, r3, ror #13
    c580:	405a      	eors	r2, r3
    c582:	ab4e      	add	r3, sp, #312	; 0x138
    c584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c588:	69db      	ldr	r3, [r3, #28]
    c58a:	ea4f 53b3 	mov.w	r3, r3, ror #22
    c58e:	405a      	eors	r2, r3
    c590:	ab4e      	add	r3, sp, #312	; 0x138
    c592:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c596:	69d9      	ldr	r1, [r3, #28]
    c598:	ab4e      	add	r3, sp, #312	; 0x138
    c59a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	4019      	ands	r1, r3
    c5a2:	ab4e      	add	r3, sp, #312	; 0x138
    c5a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5a8:	6858      	ldr	r0, [r3, #4]
    c5aa:	ab4e      	add	r3, sp, #312	; 0x138
    c5ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5b0:	69dc      	ldr	r4, [r3, #28]
    c5b2:	ab4e      	add	r3, sp, #312	; 0x138
    c5b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5b8:	681b      	ldr	r3, [r3, #0]
    c5ba:	4323      	orrs	r3, r4
    c5bc:	4003      	ands	r3, r0
    c5be:	430b      	orrs	r3, r1
    c5c0:	4413      	add	r3, r2
    c5c2:	934b      	str	r3, [sp, #300]	; 0x12c
    c5c4:	ab4e      	add	r3, sp, #312	; 0x138
    c5c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5ca:	689a      	ldr	r2, [r3, #8]
    c5cc:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    c5ce:	441a      	add	r2, r3
    c5d0:	ab4e      	add	r3, sp, #312	; 0x138
    c5d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5d6:	609a      	str	r2, [r3, #8]
    c5d8:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    c5da:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    c5dc:	441a      	add	r2, r3
    c5de:	ab4e      	add	r3, sp, #312	; 0x138
    c5e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5e4:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    c5e6:	ab4e      	add	r3, sp, #312	; 0x138
    c5e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5ec:	695a      	ldr	r2, [r3, #20]
    c5ee:	ab4e      	add	r3, sp, #312	; 0x138
    c5f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c5f4:	689b      	ldr	r3, [r3, #8]
    c5f6:	ea4f 11b3 	mov.w	r1, r3, ror #6
    c5fa:	ab4e      	add	r3, sp, #312	; 0x138
    c5fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c600:	689b      	ldr	r3, [r3, #8]
    c602:	ea4f 23f3 	mov.w	r3, r3, ror #11
    c606:	4059      	eors	r1, r3
    c608:	ab4e      	add	r3, sp, #312	; 0x138
    c60a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c60e:	689b      	ldr	r3, [r3, #8]
    c610:	ea4f 6373 	mov.w	r3, r3, ror #25
    c614:	404b      	eors	r3, r1
    c616:	441a      	add	r2, r3
    c618:	ab4e      	add	r3, sp, #312	; 0x138
    c61a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c61e:	6919      	ldr	r1, [r3, #16]
    c620:	ab4e      	add	r3, sp, #312	; 0x138
    c622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c626:	6898      	ldr	r0, [r3, #8]
    c628:	ab4e      	add	r3, sp, #312	; 0x138
    c62a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c62e:	68dc      	ldr	r4, [r3, #12]
    c630:	ab4e      	add	r3, sp, #312	; 0x138
    c632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c636:	691b      	ldr	r3, [r3, #16]
    c638:	4063      	eors	r3, r4
    c63a:	4003      	ands	r3, r0
    c63c:	404b      	eors	r3, r1
    c63e:	441a      	add	r2, r3
    c640:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c642:	3302      	adds	r3, #2
    c644:	493c      	ldr	r1, [pc, #240]	; (c738 <mbedtls_sha256_process+0x3f4>)
    c646:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    c64a:	441a      	add	r2, r3
    c64c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c64e:	1c99      	adds	r1, r3, #2
    c650:	ab4e      	add	r3, sp, #312	; 0x138
    c652:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    c656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    c65a:	4413      	add	r3, r2
    c65c:	934c      	str	r3, [sp, #304]	; 0x130
    c65e:	ab4e      	add	r3, sp, #312	; 0x138
    c660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c664:	699b      	ldr	r3, [r3, #24]
    c666:	ea4f 02b3 	mov.w	r2, r3, ror #2
    c66a:	ab4e      	add	r3, sp, #312	; 0x138
    c66c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c670:	699b      	ldr	r3, [r3, #24]
    c672:	ea4f 3373 	mov.w	r3, r3, ror #13
    c676:	405a      	eors	r2, r3
    c678:	ab4e      	add	r3, sp, #312	; 0x138
    c67a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c67e:	699b      	ldr	r3, [r3, #24]
    c680:	ea4f 53b3 	mov.w	r3, r3, ror #22
    c684:	405a      	eors	r2, r3
    c686:	ab4e      	add	r3, sp, #312	; 0x138
    c688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c68c:	6999      	ldr	r1, [r3, #24]
    c68e:	ab4e      	add	r3, sp, #312	; 0x138
    c690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c694:	69db      	ldr	r3, [r3, #28]
    c696:	4019      	ands	r1, r3
    c698:	ab4e      	add	r3, sp, #312	; 0x138
    c69a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c69e:	6818      	ldr	r0, [r3, #0]
    c6a0:	ab4e      	add	r3, sp, #312	; 0x138
    c6a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6a6:	699c      	ldr	r4, [r3, #24]
    c6a8:	ab4e      	add	r3, sp, #312	; 0x138
    c6aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6ae:	69db      	ldr	r3, [r3, #28]
    c6b0:	4323      	orrs	r3, r4
    c6b2:	4003      	ands	r3, r0
    c6b4:	430b      	orrs	r3, r1
    c6b6:	4413      	add	r3, r2
    c6b8:	934b      	str	r3, [sp, #300]	; 0x12c
    c6ba:	ab4e      	add	r3, sp, #312	; 0x138
    c6bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6c0:	685a      	ldr	r2, [r3, #4]
    c6c2:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    c6c4:	441a      	add	r2, r3
    c6c6:	ab4e      	add	r3, sp, #312	; 0x138
    c6c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6cc:	605a      	str	r2, [r3, #4]
    c6ce:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    c6d0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    c6d2:	441a      	add	r2, r3
    c6d4:	ab4e      	add	r3, sp, #312	; 0x138
    c6d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6da:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    c6dc:	ab4e      	add	r3, sp, #312	; 0x138
    c6de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6e2:	691a      	ldr	r2, [r3, #16]
    c6e4:	ab4e      	add	r3, sp, #312	; 0x138
    c6e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6ea:	685b      	ldr	r3, [r3, #4]
    c6ec:	ea4f 11b3 	mov.w	r1, r3, ror #6
    c6f0:	ab4e      	add	r3, sp, #312	; 0x138
    c6f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c6f6:	685b      	ldr	r3, [r3, #4]
    c6f8:	ea4f 23f3 	mov.w	r3, r3, ror #11
    c6fc:	4059      	eors	r1, r3
    c6fe:	ab4e      	add	r3, sp, #312	; 0x138
    c700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c704:	685b      	ldr	r3, [r3, #4]
    c706:	ea4f 6373 	mov.w	r3, r3, ror #25
    c70a:	404b      	eors	r3, r1
    c70c:	441a      	add	r2, r3
    c70e:	ab4e      	add	r3, sp, #312	; 0x138
    c710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c714:	68d9      	ldr	r1, [r3, #12]
    c716:	ab4e      	add	r3, sp, #312	; 0x138
    c718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c71c:	6858      	ldr	r0, [r3, #4]
    c71e:	ab4e      	add	r3, sp, #312	; 0x138
    c720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c724:	689c      	ldr	r4, [r3, #8]
    c726:	ab4e      	add	r3, sp, #312	; 0x138
    c728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c72c:	68db      	ldr	r3, [r3, #12]
    c72e:	4063      	eors	r3, r4
    c730:	4003      	ands	r3, r0
    c732:	404b      	eors	r3, r1
    c734:	441a      	add	r2, r3
    c736:	e001      	b.n	c73c <mbedtls_sha256_process+0x3f8>
    c738:	0000f248 	.word	0x0000f248
    c73c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c73e:	3303      	adds	r3, #3
    c740:	49b7      	ldr	r1, [pc, #732]	; (ca20 <mbedtls_sha256_process+0x6dc>)
    c742:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    c746:	441a      	add	r2, r3
    c748:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c74a:	1cd9      	adds	r1, r3, #3
    c74c:	ab4e      	add	r3, sp, #312	; 0x138
    c74e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    c752:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    c756:	4413      	add	r3, r2
    c758:	934c      	str	r3, [sp, #304]	; 0x130
    c75a:	ab4e      	add	r3, sp, #312	; 0x138
    c75c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c760:	695b      	ldr	r3, [r3, #20]
    c762:	ea4f 02b3 	mov.w	r2, r3, ror #2
    c766:	ab4e      	add	r3, sp, #312	; 0x138
    c768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c76c:	695b      	ldr	r3, [r3, #20]
    c76e:	ea4f 3373 	mov.w	r3, r3, ror #13
    c772:	405a      	eors	r2, r3
    c774:	ab4e      	add	r3, sp, #312	; 0x138
    c776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c77a:	695b      	ldr	r3, [r3, #20]
    c77c:	ea4f 53b3 	mov.w	r3, r3, ror #22
    c780:	405a      	eors	r2, r3
    c782:	ab4e      	add	r3, sp, #312	; 0x138
    c784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c788:	6959      	ldr	r1, [r3, #20]
    c78a:	ab4e      	add	r3, sp, #312	; 0x138
    c78c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c790:	699b      	ldr	r3, [r3, #24]
    c792:	4019      	ands	r1, r3
    c794:	ab4e      	add	r3, sp, #312	; 0x138
    c796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c79a:	69d8      	ldr	r0, [r3, #28]
    c79c:	ab4e      	add	r3, sp, #312	; 0x138
    c79e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7a2:	695c      	ldr	r4, [r3, #20]
    c7a4:	ab4e      	add	r3, sp, #312	; 0x138
    c7a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7aa:	699b      	ldr	r3, [r3, #24]
    c7ac:	4323      	orrs	r3, r4
    c7ae:	4003      	ands	r3, r0
    c7b0:	430b      	orrs	r3, r1
    c7b2:	4413      	add	r3, r2
    c7b4:	934b      	str	r3, [sp, #300]	; 0x12c
    c7b6:	ab4e      	add	r3, sp, #312	; 0x138
    c7b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7bc:	681a      	ldr	r2, [r3, #0]
    c7be:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    c7c0:	441a      	add	r2, r3
    c7c2:	ab4e      	add	r3, sp, #312	; 0x138
    c7c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7c8:	601a      	str	r2, [r3, #0]
    c7ca:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    c7cc:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    c7ce:	441a      	add	r2, r3
    c7d0:	ab4e      	add	r3, sp, #312	; 0x138
    c7d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7d6:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    c7d8:	ab4e      	add	r3, sp, #312	; 0x138
    c7da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7de:	68da      	ldr	r2, [r3, #12]
    c7e0:	ab4e      	add	r3, sp, #312	; 0x138
    c7e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7e6:	681b      	ldr	r3, [r3, #0]
    c7e8:	ea4f 11b3 	mov.w	r1, r3, ror #6
    c7ec:	ab4e      	add	r3, sp, #312	; 0x138
    c7ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c7f2:	681b      	ldr	r3, [r3, #0]
    c7f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
    c7f8:	4059      	eors	r1, r3
    c7fa:	ab4e      	add	r3, sp, #312	; 0x138
    c7fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c800:	681b      	ldr	r3, [r3, #0]
    c802:	ea4f 6373 	mov.w	r3, r3, ror #25
    c806:	404b      	eors	r3, r1
    c808:	441a      	add	r2, r3
    c80a:	ab4e      	add	r3, sp, #312	; 0x138
    c80c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c810:	6899      	ldr	r1, [r3, #8]
    c812:	ab4e      	add	r3, sp, #312	; 0x138
    c814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c818:	6818      	ldr	r0, [r3, #0]
    c81a:	ab4e      	add	r3, sp, #312	; 0x138
    c81c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c820:	685c      	ldr	r4, [r3, #4]
    c822:	ab4e      	add	r3, sp, #312	; 0x138
    c824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c828:	689b      	ldr	r3, [r3, #8]
    c82a:	4063      	eors	r3, r4
    c82c:	4003      	ands	r3, r0
    c82e:	404b      	eors	r3, r1
    c830:	441a      	add	r2, r3
    c832:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c834:	3304      	adds	r3, #4
    c836:	497a      	ldr	r1, [pc, #488]	; (ca20 <mbedtls_sha256_process+0x6dc>)
    c838:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    c83c:	441a      	add	r2, r3
    c83e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c840:	1d19      	adds	r1, r3, #4
    c842:	ab4e      	add	r3, sp, #312	; 0x138
    c844:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    c848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    c84c:	4413      	add	r3, r2
    c84e:	934c      	str	r3, [sp, #304]	; 0x130
    c850:	ab4e      	add	r3, sp, #312	; 0x138
    c852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c856:	691b      	ldr	r3, [r3, #16]
    c858:	ea4f 02b3 	mov.w	r2, r3, ror #2
    c85c:	ab4e      	add	r3, sp, #312	; 0x138
    c85e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c862:	691b      	ldr	r3, [r3, #16]
    c864:	ea4f 3373 	mov.w	r3, r3, ror #13
    c868:	405a      	eors	r2, r3
    c86a:	ab4e      	add	r3, sp, #312	; 0x138
    c86c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c870:	691b      	ldr	r3, [r3, #16]
    c872:	ea4f 53b3 	mov.w	r3, r3, ror #22
    c876:	405a      	eors	r2, r3
    c878:	ab4e      	add	r3, sp, #312	; 0x138
    c87a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c87e:	6919      	ldr	r1, [r3, #16]
    c880:	ab4e      	add	r3, sp, #312	; 0x138
    c882:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c886:	695b      	ldr	r3, [r3, #20]
    c888:	4019      	ands	r1, r3
    c88a:	ab4e      	add	r3, sp, #312	; 0x138
    c88c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c890:	6998      	ldr	r0, [r3, #24]
    c892:	ab4e      	add	r3, sp, #312	; 0x138
    c894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c898:	691c      	ldr	r4, [r3, #16]
    c89a:	ab4e      	add	r3, sp, #312	; 0x138
    c89c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8a0:	695b      	ldr	r3, [r3, #20]
    c8a2:	4323      	orrs	r3, r4
    c8a4:	4003      	ands	r3, r0
    c8a6:	430b      	orrs	r3, r1
    c8a8:	4413      	add	r3, r2
    c8aa:	934b      	str	r3, [sp, #300]	; 0x12c
    c8ac:	ab4e      	add	r3, sp, #312	; 0x138
    c8ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8b2:	69da      	ldr	r2, [r3, #28]
    c8b4:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    c8b6:	441a      	add	r2, r3
    c8b8:	ab4e      	add	r3, sp, #312	; 0x138
    c8ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8be:	61da      	str	r2, [r3, #28]
    c8c0:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    c8c2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    c8c4:	441a      	add	r2, r3
    c8c6:	ab4e      	add	r3, sp, #312	; 0x138
    c8c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8cc:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    c8ce:	ab4e      	add	r3, sp, #312	; 0x138
    c8d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8d4:	689a      	ldr	r2, [r3, #8]
    c8d6:	ab4e      	add	r3, sp, #312	; 0x138
    c8d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8dc:	69db      	ldr	r3, [r3, #28]
    c8de:	ea4f 11b3 	mov.w	r1, r3, ror #6
    c8e2:	ab4e      	add	r3, sp, #312	; 0x138
    c8e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8e8:	69db      	ldr	r3, [r3, #28]
    c8ea:	ea4f 23f3 	mov.w	r3, r3, ror #11
    c8ee:	4059      	eors	r1, r3
    c8f0:	ab4e      	add	r3, sp, #312	; 0x138
    c8f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c8f6:	69db      	ldr	r3, [r3, #28]
    c8f8:	ea4f 6373 	mov.w	r3, r3, ror #25
    c8fc:	404b      	eors	r3, r1
    c8fe:	441a      	add	r2, r3
    c900:	ab4e      	add	r3, sp, #312	; 0x138
    c902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c906:	6859      	ldr	r1, [r3, #4]
    c908:	ab4e      	add	r3, sp, #312	; 0x138
    c90a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c90e:	69d8      	ldr	r0, [r3, #28]
    c910:	ab4e      	add	r3, sp, #312	; 0x138
    c912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c916:	681c      	ldr	r4, [r3, #0]
    c918:	ab4e      	add	r3, sp, #312	; 0x138
    c91a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c91e:	685b      	ldr	r3, [r3, #4]
    c920:	4063      	eors	r3, r4
    c922:	4003      	ands	r3, r0
    c924:	404b      	eors	r3, r1
    c926:	441a      	add	r2, r3
    c928:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c92a:	3305      	adds	r3, #5
    c92c:	493c      	ldr	r1, [pc, #240]	; (ca20 <mbedtls_sha256_process+0x6dc>)
    c92e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    c932:	441a      	add	r2, r3
    c934:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    c936:	1d59      	adds	r1, r3, #5
    c938:	ab4e      	add	r3, sp, #312	; 0x138
    c93a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    c93e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    c942:	4413      	add	r3, r2
    c944:	934c      	str	r3, [sp, #304]	; 0x130
    c946:	ab4e      	add	r3, sp, #312	; 0x138
    c948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c94c:	68db      	ldr	r3, [r3, #12]
    c94e:	ea4f 02b3 	mov.w	r2, r3, ror #2
    c952:	ab4e      	add	r3, sp, #312	; 0x138
    c954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c958:	68db      	ldr	r3, [r3, #12]
    c95a:	ea4f 3373 	mov.w	r3, r3, ror #13
    c95e:	405a      	eors	r2, r3
    c960:	ab4e      	add	r3, sp, #312	; 0x138
    c962:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c966:	68db      	ldr	r3, [r3, #12]
    c968:	ea4f 53b3 	mov.w	r3, r3, ror #22
    c96c:	405a      	eors	r2, r3
    c96e:	ab4e      	add	r3, sp, #312	; 0x138
    c970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c974:	68d9      	ldr	r1, [r3, #12]
    c976:	ab4e      	add	r3, sp, #312	; 0x138
    c978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c97c:	691b      	ldr	r3, [r3, #16]
    c97e:	4019      	ands	r1, r3
    c980:	ab4e      	add	r3, sp, #312	; 0x138
    c982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c986:	6958      	ldr	r0, [r3, #20]
    c988:	ab4e      	add	r3, sp, #312	; 0x138
    c98a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c98e:	68dc      	ldr	r4, [r3, #12]
    c990:	ab4e      	add	r3, sp, #312	; 0x138
    c992:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c996:	691b      	ldr	r3, [r3, #16]
    c998:	4323      	orrs	r3, r4
    c99a:	4003      	ands	r3, r0
    c99c:	430b      	orrs	r3, r1
    c99e:	4413      	add	r3, r2
    c9a0:	934b      	str	r3, [sp, #300]	; 0x12c
    c9a2:	ab4e      	add	r3, sp, #312	; 0x138
    c9a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9a8:	699a      	ldr	r2, [r3, #24]
    c9aa:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    c9ac:	441a      	add	r2, r3
    c9ae:	ab4e      	add	r3, sp, #312	; 0x138
    c9b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9b4:	619a      	str	r2, [r3, #24]
    c9b6:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    c9b8:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    c9ba:	441a      	add	r2, r3
    c9bc:	ab4e      	add	r3, sp, #312	; 0x138
    c9be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9c2:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    c9c4:	ab4e      	add	r3, sp, #312	; 0x138
    c9c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9ca:	685a      	ldr	r2, [r3, #4]
    c9cc:	ab4e      	add	r3, sp, #312	; 0x138
    c9ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9d2:	699b      	ldr	r3, [r3, #24]
    c9d4:	ea4f 11b3 	mov.w	r1, r3, ror #6
    c9d8:	ab4e      	add	r3, sp, #312	; 0x138
    c9da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9de:	699b      	ldr	r3, [r3, #24]
    c9e0:	ea4f 23f3 	mov.w	r3, r3, ror #11
    c9e4:	4059      	eors	r1, r3
    c9e6:	ab4e      	add	r3, sp, #312	; 0x138
    c9e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9ec:	699b      	ldr	r3, [r3, #24]
    c9ee:	ea4f 6373 	mov.w	r3, r3, ror #25
    c9f2:	404b      	eors	r3, r1
    c9f4:	441a      	add	r2, r3
    c9f6:	ab4e      	add	r3, sp, #312	; 0x138
    c9f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    c9fc:	6819      	ldr	r1, [r3, #0]
    c9fe:	ab4e      	add	r3, sp, #312	; 0x138
    ca00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca04:	6998      	ldr	r0, [r3, #24]
    ca06:	ab4e      	add	r3, sp, #312	; 0x138
    ca08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca0c:	69dc      	ldr	r4, [r3, #28]
    ca0e:	ab4e      	add	r3, sp, #312	; 0x138
    ca10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca14:	681b      	ldr	r3, [r3, #0]
    ca16:	4063      	eors	r3, r4
    ca18:	4003      	ands	r3, r0
    ca1a:	404b      	eors	r3, r1
    ca1c:	441a      	add	r2, r3
    ca1e:	e001      	b.n	ca24 <mbedtls_sha256_process+0x6e0>
    ca20:	0000f248 	.word	0x0000f248
    ca24:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ca26:	3306      	adds	r3, #6
    ca28:	4968      	ldr	r1, [pc, #416]	; (cbcc <mbedtls_sha256_process+0x888>)
    ca2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    ca2e:	441a      	add	r2, r3
    ca30:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ca32:	1d99      	adds	r1, r3, #6
    ca34:	ab4e      	add	r3, sp, #312	; 0x138
    ca36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ca3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    ca3e:	4413      	add	r3, r2
    ca40:	934c      	str	r3, [sp, #304]	; 0x130
    ca42:	ab4e      	add	r3, sp, #312	; 0x138
    ca44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca48:	689b      	ldr	r3, [r3, #8]
    ca4a:	ea4f 02b3 	mov.w	r2, r3, ror #2
    ca4e:	ab4e      	add	r3, sp, #312	; 0x138
    ca50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca54:	689b      	ldr	r3, [r3, #8]
    ca56:	ea4f 3373 	mov.w	r3, r3, ror #13
    ca5a:	405a      	eors	r2, r3
    ca5c:	ab4e      	add	r3, sp, #312	; 0x138
    ca5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca62:	689b      	ldr	r3, [r3, #8]
    ca64:	ea4f 53b3 	mov.w	r3, r3, ror #22
    ca68:	405a      	eors	r2, r3
    ca6a:	ab4e      	add	r3, sp, #312	; 0x138
    ca6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca70:	6899      	ldr	r1, [r3, #8]
    ca72:	ab4e      	add	r3, sp, #312	; 0x138
    ca74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca78:	68db      	ldr	r3, [r3, #12]
    ca7a:	4019      	ands	r1, r3
    ca7c:	ab4e      	add	r3, sp, #312	; 0x138
    ca7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca82:	6918      	ldr	r0, [r3, #16]
    ca84:	ab4e      	add	r3, sp, #312	; 0x138
    ca86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca8a:	689c      	ldr	r4, [r3, #8]
    ca8c:	ab4e      	add	r3, sp, #312	; 0x138
    ca8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ca92:	68db      	ldr	r3, [r3, #12]
    ca94:	4323      	orrs	r3, r4
    ca96:	4003      	ands	r3, r0
    ca98:	430b      	orrs	r3, r1
    ca9a:	4413      	add	r3, r2
    ca9c:	934b      	str	r3, [sp, #300]	; 0x12c
    ca9e:	ab4e      	add	r3, sp, #312	; 0x138
    caa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    caa4:	695a      	ldr	r2, [r3, #20]
    caa6:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    caa8:	441a      	add	r2, r3
    caaa:	ab4e      	add	r3, sp, #312	; 0x138
    caac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cab0:	615a      	str	r2, [r3, #20]
    cab2:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    cab4:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    cab6:	441a      	add	r2, r3
    cab8:	ab4e      	add	r3, sp, #312	; 0x138
    caba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cabe:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    cac0:	ab4e      	add	r3, sp, #312	; 0x138
    cac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cac6:	681a      	ldr	r2, [r3, #0]
    cac8:	ab4e      	add	r3, sp, #312	; 0x138
    caca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cace:	695b      	ldr	r3, [r3, #20]
    cad0:	ea4f 11b3 	mov.w	r1, r3, ror #6
    cad4:	ab4e      	add	r3, sp, #312	; 0x138
    cad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cada:	695b      	ldr	r3, [r3, #20]
    cadc:	ea4f 23f3 	mov.w	r3, r3, ror #11
    cae0:	4059      	eors	r1, r3
    cae2:	ab4e      	add	r3, sp, #312	; 0x138
    cae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cae8:	695b      	ldr	r3, [r3, #20]
    caea:	ea4f 6373 	mov.w	r3, r3, ror #25
    caee:	404b      	eors	r3, r1
    caf0:	441a      	add	r2, r3
    caf2:	ab4e      	add	r3, sp, #312	; 0x138
    caf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    caf8:	69d9      	ldr	r1, [r3, #28]
    cafa:	ab4e      	add	r3, sp, #312	; 0x138
    cafc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb00:	6958      	ldr	r0, [r3, #20]
    cb02:	ab4e      	add	r3, sp, #312	; 0x138
    cb04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb08:	699c      	ldr	r4, [r3, #24]
    cb0a:	ab4e      	add	r3, sp, #312	; 0x138
    cb0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb10:	69db      	ldr	r3, [r3, #28]
    cb12:	4063      	eors	r3, r4
    cb14:	4003      	ands	r3, r0
    cb16:	404b      	eors	r3, r1
    cb18:	441a      	add	r2, r3
    cb1a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cb1c:	3307      	adds	r3, #7
    cb1e:	492b      	ldr	r1, [pc, #172]	; (cbcc <mbedtls_sha256_process+0x888>)
    cb20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cb24:	441a      	add	r2, r3
    cb26:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cb28:	1dd9      	adds	r1, r3, #7
    cb2a:	ab4e      	add	r3, sp, #312	; 0x138
    cb2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cb30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    cb34:	4413      	add	r3, r2
    cb36:	934c      	str	r3, [sp, #304]	; 0x130
    cb38:	ab4e      	add	r3, sp, #312	; 0x138
    cb3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb3e:	685b      	ldr	r3, [r3, #4]
    cb40:	ea4f 02b3 	mov.w	r2, r3, ror #2
    cb44:	ab4e      	add	r3, sp, #312	; 0x138
    cb46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb4a:	685b      	ldr	r3, [r3, #4]
    cb4c:	ea4f 3373 	mov.w	r3, r3, ror #13
    cb50:	405a      	eors	r2, r3
    cb52:	ab4e      	add	r3, sp, #312	; 0x138
    cb54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb58:	685b      	ldr	r3, [r3, #4]
    cb5a:	ea4f 53b3 	mov.w	r3, r3, ror #22
    cb5e:	405a      	eors	r2, r3
    cb60:	ab4e      	add	r3, sp, #312	; 0x138
    cb62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb66:	6859      	ldr	r1, [r3, #4]
    cb68:	ab4e      	add	r3, sp, #312	; 0x138
    cb6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb6e:	689b      	ldr	r3, [r3, #8]
    cb70:	4019      	ands	r1, r3
    cb72:	ab4e      	add	r3, sp, #312	; 0x138
    cb74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb78:	68d8      	ldr	r0, [r3, #12]
    cb7a:	ab4e      	add	r3, sp, #312	; 0x138
    cb7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb80:	685c      	ldr	r4, [r3, #4]
    cb82:	ab4e      	add	r3, sp, #312	; 0x138
    cb84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb88:	689b      	ldr	r3, [r3, #8]
    cb8a:	4323      	orrs	r3, r4
    cb8c:	4003      	ands	r3, r0
    cb8e:	430b      	orrs	r3, r1
    cb90:	4413      	add	r3, r2
    cb92:	934b      	str	r3, [sp, #300]	; 0x12c
    cb94:	ab4e      	add	r3, sp, #312	; 0x138
    cb96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cb9a:	691a      	ldr	r2, [r3, #16]
    cb9c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    cb9e:	441a      	add	r2, r3
    cba0:	ab4e      	add	r3, sp, #312	; 0x138
    cba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cba6:	611a      	str	r2, [r3, #16]
    cba8:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    cbaa:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    cbac:	441a      	add	r2, r3
    cbae:	ab4e      	add	r3, sp, #312	; 0x138
    cbb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cbb4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
    cbb6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cbb8:	3308      	adds	r3, #8
    cbba:	934d      	str	r3, [sp, #308]	; 0x134
    cbbc:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cbbe:	2b0f      	cmp	r3, #15
    cbc0:	f67f ac1d 	bls.w	c3fe <mbedtls_sha256_process+0xba>
    }

    for( i = 16; i < 64; i += 8 )
    cbc4:	2310      	movs	r3, #16
    cbc6:	934d      	str	r3, [sp, #308]	; 0x134
    cbc8:	f000 be73 	b.w	d8b2 <mbedtls_sha256_process+0x156e>
    cbcc:	0000f248 	.word	0x0000f248
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    cbd0:	ab4e      	add	r3, sp, #312	; 0x138
    cbd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cbd6:	69da      	ldr	r2, [r3, #28]
    cbd8:	ab4e      	add	r3, sp, #312	; 0x138
    cbda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cbde:	691b      	ldr	r3, [r3, #16]
    cbe0:	ea4f 11b3 	mov.w	r1, r3, ror #6
    cbe4:	ab4e      	add	r3, sp, #312	; 0x138
    cbe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cbea:	691b      	ldr	r3, [r3, #16]
    cbec:	ea4f 23f3 	mov.w	r3, r3, ror #11
    cbf0:	4059      	eors	r1, r3
    cbf2:	ab4e      	add	r3, sp, #312	; 0x138
    cbf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cbf8:	691b      	ldr	r3, [r3, #16]
    cbfa:	ea4f 6373 	mov.w	r3, r3, ror #25
    cbfe:	404b      	eors	r3, r1
    cc00:	441a      	add	r2, r3
    cc02:	ab4e      	add	r3, sp, #312	; 0x138
    cc04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cc08:	6999      	ldr	r1, [r3, #24]
    cc0a:	ab4e      	add	r3, sp, #312	; 0x138
    cc0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cc10:	6918      	ldr	r0, [r3, #16]
    cc12:	ab4e      	add	r3, sp, #312	; 0x138
    cc14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cc18:	695c      	ldr	r4, [r3, #20]
    cc1a:	ab4e      	add	r3, sp, #312	; 0x138
    cc1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cc20:	699b      	ldr	r3, [r3, #24]
    cc22:	4063      	eors	r3, r4
    cc24:	4003      	ands	r3, r0
    cc26:	404b      	eors	r3, r1
    cc28:	441a      	add	r2, r3
    cc2a:	49c2      	ldr	r1, [pc, #776]	; (cf34 <mbedtls_sha256_process+0xbf0>)
    cc2c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cc2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cc32:	441a      	add	r2, r3
    cc34:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cc36:	1e99      	subs	r1, r3, #2
    cc38:	ab4e      	add	r3, sp, #312	; 0x138
    cc3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cc3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    cc42:	ea4f 4173 	mov.w	r1, r3, ror #17
    cc46:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cc48:	1e98      	subs	r0, r3, #2
    cc4a:	ab4e      	add	r3, sp, #312	; 0x138
    cc4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cc50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cc54:	ea4f 43f3 	mov.w	r3, r3, ror #19
    cc58:	4059      	eors	r1, r3
    cc5a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cc5c:	1e98      	subs	r0, r3, #2
    cc5e:	ab4e      	add	r3, sp, #312	; 0x138
    cc60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cc64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cc68:	0a9b      	lsrs	r3, r3, #10
    cc6a:	4059      	eors	r1, r3
    cc6c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cc6e:	1fd8      	subs	r0, r3, #7
    cc70:	ab4e      	add	r3, sp, #312	; 0x138
    cc72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cc76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cc7a:	4419      	add	r1, r3
    cc7c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cc7e:	f1a3 000f 	sub.w	r0, r3, #15
    cc82:	ab4e      	add	r3, sp, #312	; 0x138
    cc84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cc88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cc8c:	ea4f 10f3 	mov.w	r0, r3, ror #7
    cc90:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cc92:	f1a3 040f 	sub.w	r4, r3, #15
    cc96:	ab4e      	add	r3, sp, #312	; 0x138
    cc98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cc9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    cca0:	ea4f 43b3 	mov.w	r3, r3, ror #18
    cca4:	4058      	eors	r0, r3
    cca6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cca8:	f1a3 040f 	sub.w	r4, r3, #15
    ccac:	ab4e      	add	r3, sp, #312	; 0x138
    ccae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ccb2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    ccb6:	08db      	lsrs	r3, r3, #3
    ccb8:	4043      	eors	r3, r0
    ccba:	4419      	add	r1, r3
    ccbc:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ccbe:	f1a3 0010 	sub.w	r0, r3, #16
    ccc2:	ab4e      	add	r3, sp, #312	; 0x138
    ccc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ccc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cccc:	18c8      	adds	r0, r1, r3
    ccce:	ab4e      	add	r3, sp, #312	; 0x138
    ccd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ccd4:	994d      	ldr	r1, [sp, #308]	; 0x134
    ccd6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    ccda:	ab4e      	add	r3, sp, #312	; 0x138
    ccdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cce0:	994d      	ldr	r1, [sp, #308]	; 0x134
    cce2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    cce6:	4413      	add	r3, r2
    cce8:	934c      	str	r3, [sp, #304]	; 0x130
    ccea:	ab4e      	add	r3, sp, #312	; 0x138
    ccec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ccf0:	681b      	ldr	r3, [r3, #0]
    ccf2:	ea4f 02b3 	mov.w	r2, r3, ror #2
    ccf6:	ab4e      	add	r3, sp, #312	; 0x138
    ccf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ccfc:	681b      	ldr	r3, [r3, #0]
    ccfe:	ea4f 3373 	mov.w	r3, r3, ror #13
    cd02:	405a      	eors	r2, r3
    cd04:	ab4e      	add	r3, sp, #312	; 0x138
    cd06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd0a:	681b      	ldr	r3, [r3, #0]
    cd0c:	ea4f 53b3 	mov.w	r3, r3, ror #22
    cd10:	405a      	eors	r2, r3
    cd12:	ab4e      	add	r3, sp, #312	; 0x138
    cd14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd18:	6819      	ldr	r1, [r3, #0]
    cd1a:	ab4e      	add	r3, sp, #312	; 0x138
    cd1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd20:	685b      	ldr	r3, [r3, #4]
    cd22:	4019      	ands	r1, r3
    cd24:	ab4e      	add	r3, sp, #312	; 0x138
    cd26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd2a:	6898      	ldr	r0, [r3, #8]
    cd2c:	ab4e      	add	r3, sp, #312	; 0x138
    cd2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd32:	681c      	ldr	r4, [r3, #0]
    cd34:	ab4e      	add	r3, sp, #312	; 0x138
    cd36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd3a:	685b      	ldr	r3, [r3, #4]
    cd3c:	4323      	orrs	r3, r4
    cd3e:	4003      	ands	r3, r0
    cd40:	430b      	orrs	r3, r1
    cd42:	4413      	add	r3, r2
    cd44:	934b      	str	r3, [sp, #300]	; 0x12c
    cd46:	ab4e      	add	r3, sp, #312	; 0x138
    cd48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd4c:	68da      	ldr	r2, [r3, #12]
    cd4e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    cd50:	441a      	add	r2, r3
    cd52:	ab4e      	add	r3, sp, #312	; 0x138
    cd54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd58:	60da      	str	r2, [r3, #12]
    cd5a:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    cd5c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    cd5e:	441a      	add	r2, r3
    cd60:	ab4e      	add	r3, sp, #312	; 0x138
    cd62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd66:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    cd68:	ab4e      	add	r3, sp, #312	; 0x138
    cd6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd6e:	699a      	ldr	r2, [r3, #24]
    cd70:	ab4e      	add	r3, sp, #312	; 0x138
    cd72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd76:	68db      	ldr	r3, [r3, #12]
    cd78:	ea4f 11b3 	mov.w	r1, r3, ror #6
    cd7c:	ab4e      	add	r3, sp, #312	; 0x138
    cd7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd82:	68db      	ldr	r3, [r3, #12]
    cd84:	ea4f 23f3 	mov.w	r3, r3, ror #11
    cd88:	4059      	eors	r1, r3
    cd8a:	ab4e      	add	r3, sp, #312	; 0x138
    cd8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cd90:	68db      	ldr	r3, [r3, #12]
    cd92:	ea4f 6373 	mov.w	r3, r3, ror #25
    cd96:	404b      	eors	r3, r1
    cd98:	441a      	add	r2, r3
    cd9a:	ab4e      	add	r3, sp, #312	; 0x138
    cd9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cda0:	6959      	ldr	r1, [r3, #20]
    cda2:	ab4e      	add	r3, sp, #312	; 0x138
    cda4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cda8:	68d8      	ldr	r0, [r3, #12]
    cdaa:	ab4e      	add	r3, sp, #312	; 0x138
    cdac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cdb0:	691c      	ldr	r4, [r3, #16]
    cdb2:	ab4e      	add	r3, sp, #312	; 0x138
    cdb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cdb8:	695b      	ldr	r3, [r3, #20]
    cdba:	4063      	eors	r3, r4
    cdbc:	4003      	ands	r3, r0
    cdbe:	404b      	eors	r3, r1
    cdc0:	441a      	add	r2, r3
    cdc2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cdc4:	3301      	adds	r3, #1
    cdc6:	495b      	ldr	r1, [pc, #364]	; (cf34 <mbedtls_sha256_process+0xbf0>)
    cdc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cdcc:	441a      	add	r2, r3
    cdce:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cdd0:	1e59      	subs	r1, r3, #1
    cdd2:	ab4e      	add	r3, sp, #312	; 0x138
    cdd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cdd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    cddc:	ea4f 4173 	mov.w	r1, r3, ror #17
    cde0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cde2:	1e58      	subs	r0, r3, #1
    cde4:	ab4e      	add	r3, sp, #312	; 0x138
    cde6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cdea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cdee:	ea4f 43f3 	mov.w	r3, r3, ror #19
    cdf2:	4059      	eors	r1, r3
    cdf4:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cdf6:	1e58      	subs	r0, r3, #1
    cdf8:	ab4e      	add	r3, sp, #312	; 0x138
    cdfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cdfe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    ce02:	0a9b      	lsrs	r3, r3, #10
    ce04:	4059      	eors	r1, r3
    ce06:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ce08:	1f98      	subs	r0, r3, #6
    ce0a:	ab4e      	add	r3, sp, #312	; 0x138
    ce0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ce10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    ce14:	4419      	add	r1, r3
    ce16:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ce18:	f1a3 000e 	sub.w	r0, r3, #14
    ce1c:	ab4e      	add	r3, sp, #312	; 0x138
    ce1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ce22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    ce26:	ea4f 10f3 	mov.w	r0, r3, ror #7
    ce2a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ce2c:	f1a3 040e 	sub.w	r4, r3, #14
    ce30:	ab4e      	add	r3, sp, #312	; 0x138
    ce32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ce36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    ce3a:	ea4f 43b3 	mov.w	r3, r3, ror #18
    ce3e:	4058      	eors	r0, r3
    ce40:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ce42:	f1a3 040e 	sub.w	r4, r3, #14
    ce46:	ab4e      	add	r3, sp, #312	; 0x138
    ce48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ce4c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    ce50:	08db      	lsrs	r3, r3, #3
    ce52:	4043      	eors	r3, r0
    ce54:	18c8      	adds	r0, r1, r3
    ce56:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ce58:	f1a3 010f 	sub.w	r1, r3, #15
    ce5c:	ab4e      	add	r3, sp, #312	; 0x138
    ce5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    ce62:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    ce66:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    ce68:	3301      	adds	r3, #1
    ce6a:	4408      	add	r0, r1
    ce6c:	a94e      	add	r1, sp, #312	; 0x138
    ce6e:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    ce72:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    ce76:	a94e      	add	r1, sp, #312	; 0x138
    ce78:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    ce7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    ce80:	4413      	add	r3, r2
    ce82:	934c      	str	r3, [sp, #304]	; 0x130
    ce84:	ab4e      	add	r3, sp, #312	; 0x138
    ce86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ce8a:	69db      	ldr	r3, [r3, #28]
    ce8c:	ea4f 02b3 	mov.w	r2, r3, ror #2
    ce90:	ab4e      	add	r3, sp, #312	; 0x138
    ce92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ce96:	69db      	ldr	r3, [r3, #28]
    ce98:	ea4f 3373 	mov.w	r3, r3, ror #13
    ce9c:	405a      	eors	r2, r3
    ce9e:	ab4e      	add	r3, sp, #312	; 0x138
    cea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cea4:	69db      	ldr	r3, [r3, #28]
    cea6:	ea4f 53b3 	mov.w	r3, r3, ror #22
    ceaa:	405a      	eors	r2, r3
    ceac:	ab4e      	add	r3, sp, #312	; 0x138
    ceae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ceb2:	69d9      	ldr	r1, [r3, #28]
    ceb4:	ab4e      	add	r3, sp, #312	; 0x138
    ceb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ceba:	681b      	ldr	r3, [r3, #0]
    cebc:	4019      	ands	r1, r3
    cebe:	ab4e      	add	r3, sp, #312	; 0x138
    cec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cec4:	6858      	ldr	r0, [r3, #4]
    cec6:	ab4e      	add	r3, sp, #312	; 0x138
    cec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cecc:	69dc      	ldr	r4, [r3, #28]
    cece:	ab4e      	add	r3, sp, #312	; 0x138
    ced0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    ced4:	681b      	ldr	r3, [r3, #0]
    ced6:	4323      	orrs	r3, r4
    ced8:	4003      	ands	r3, r0
    ceda:	430b      	orrs	r3, r1
    cedc:	4413      	add	r3, r2
    cede:	934b      	str	r3, [sp, #300]	; 0x12c
    cee0:	ab4e      	add	r3, sp, #312	; 0x138
    cee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cee6:	689a      	ldr	r2, [r3, #8]
    cee8:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    ceea:	441a      	add	r2, r3
    ceec:	ab4e      	add	r3, sp, #312	; 0x138
    ceee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cef2:	609a      	str	r2, [r3, #8]
    cef4:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    cef6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    cef8:	441a      	add	r2, r3
    cefa:	ab4e      	add	r3, sp, #312	; 0x138
    cefc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf00:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    cf02:	ab4e      	add	r3, sp, #312	; 0x138
    cf04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf08:	695a      	ldr	r2, [r3, #20]
    cf0a:	ab4e      	add	r3, sp, #312	; 0x138
    cf0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf10:	689b      	ldr	r3, [r3, #8]
    cf12:	ea4f 11b3 	mov.w	r1, r3, ror #6
    cf16:	ab4e      	add	r3, sp, #312	; 0x138
    cf18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf1c:	689b      	ldr	r3, [r3, #8]
    cf1e:	ea4f 23f3 	mov.w	r3, r3, ror #11
    cf22:	4059      	eors	r1, r3
    cf24:	ab4e      	add	r3, sp, #312	; 0x138
    cf26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf2a:	689b      	ldr	r3, [r3, #8]
    cf2c:	ea4f 6373 	mov.w	r3, r3, ror #25
    cf30:	e002      	b.n	cf38 <mbedtls_sha256_process+0xbf4>
    cf32:	bf00      	nop
    cf34:	0000f248 	.word	0x0000f248
    cf38:	404b      	eors	r3, r1
    cf3a:	441a      	add	r2, r3
    cf3c:	ab4e      	add	r3, sp, #312	; 0x138
    cf3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf42:	6919      	ldr	r1, [r3, #16]
    cf44:	ab4e      	add	r3, sp, #312	; 0x138
    cf46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf4a:	6898      	ldr	r0, [r3, #8]
    cf4c:	ab4e      	add	r3, sp, #312	; 0x138
    cf4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf52:	68dc      	ldr	r4, [r3, #12]
    cf54:	ab4e      	add	r3, sp, #312	; 0x138
    cf56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    cf5a:	691b      	ldr	r3, [r3, #16]
    cf5c:	4063      	eors	r3, r4
    cf5e:	4003      	ands	r3, r0
    cf60:	404b      	eors	r3, r1
    cf62:	441a      	add	r2, r3
    cf64:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cf66:	3302      	adds	r3, #2
    cf68:	49c2      	ldr	r1, [pc, #776]	; (d274 <mbedtls_sha256_process+0xf30>)
    cf6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    cf6e:	441a      	add	r2, r3
    cf70:	ab4e      	add	r3, sp, #312	; 0x138
    cf72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cf76:	994d      	ldr	r1, [sp, #308]	; 0x134
    cf78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    cf7c:	ea4f 4173 	mov.w	r1, r3, ror #17
    cf80:	ab4e      	add	r3, sp, #312	; 0x138
    cf82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cf86:	984d      	ldr	r0, [sp, #308]	; 0x134
    cf88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cf8c:	ea4f 43f3 	mov.w	r3, r3, ror #19
    cf90:	4059      	eors	r1, r3
    cf92:	ab4e      	add	r3, sp, #312	; 0x138
    cf94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cf98:	984d      	ldr	r0, [sp, #308]	; 0x134
    cf9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cf9e:	0a9b      	lsrs	r3, r3, #10
    cfa0:	4059      	eors	r1, r3
    cfa2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cfa4:	1f58      	subs	r0, r3, #5
    cfa6:	ab4e      	add	r3, sp, #312	; 0x138
    cfa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cfac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cfb0:	4419      	add	r1, r3
    cfb2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cfb4:	f1a3 000d 	sub.w	r0, r3, #13
    cfb8:	ab4e      	add	r3, sp, #312	; 0x138
    cfba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cfbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cfc2:	ea4f 10f3 	mov.w	r0, r3, ror #7
    cfc6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cfc8:	f1a3 040d 	sub.w	r4, r3, #13
    cfcc:	ab4e      	add	r3, sp, #312	; 0x138
    cfce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cfd2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    cfd6:	ea4f 43b3 	mov.w	r3, r3, ror #18
    cfda:	4058      	eors	r0, r3
    cfdc:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cfde:	f1a3 040d 	sub.w	r4, r3, #13
    cfe2:	ab4e      	add	r3, sp, #312	; 0x138
    cfe4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cfe8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    cfec:	08db      	lsrs	r3, r3, #3
    cfee:	4043      	eors	r3, r0
    cff0:	18c8      	adds	r0, r1, r3
    cff2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    cff4:	f1a3 010e 	sub.w	r1, r3, #14
    cff8:	ab4e      	add	r3, sp, #312	; 0x138
    cffa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    cffe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    d002:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d004:	3302      	adds	r3, #2
    d006:	4408      	add	r0, r1
    d008:	a94e      	add	r1, sp, #312	; 0x138
    d00a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d00e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    d012:	a94e      	add	r1, sp, #312	; 0x138
    d014:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d018:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d01c:	4413      	add	r3, r2
    d01e:	934c      	str	r3, [sp, #304]	; 0x130
    d020:	ab4e      	add	r3, sp, #312	; 0x138
    d022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d026:	699b      	ldr	r3, [r3, #24]
    d028:	ea4f 02b3 	mov.w	r2, r3, ror #2
    d02c:	ab4e      	add	r3, sp, #312	; 0x138
    d02e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d032:	699b      	ldr	r3, [r3, #24]
    d034:	ea4f 3373 	mov.w	r3, r3, ror #13
    d038:	405a      	eors	r2, r3
    d03a:	ab4e      	add	r3, sp, #312	; 0x138
    d03c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d040:	699b      	ldr	r3, [r3, #24]
    d042:	ea4f 53b3 	mov.w	r3, r3, ror #22
    d046:	405a      	eors	r2, r3
    d048:	ab4e      	add	r3, sp, #312	; 0x138
    d04a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d04e:	6999      	ldr	r1, [r3, #24]
    d050:	ab4e      	add	r3, sp, #312	; 0x138
    d052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d056:	69db      	ldr	r3, [r3, #28]
    d058:	4019      	ands	r1, r3
    d05a:	ab4e      	add	r3, sp, #312	; 0x138
    d05c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d060:	6818      	ldr	r0, [r3, #0]
    d062:	ab4e      	add	r3, sp, #312	; 0x138
    d064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d068:	699c      	ldr	r4, [r3, #24]
    d06a:	ab4e      	add	r3, sp, #312	; 0x138
    d06c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d070:	69db      	ldr	r3, [r3, #28]
    d072:	4323      	orrs	r3, r4
    d074:	4003      	ands	r3, r0
    d076:	430b      	orrs	r3, r1
    d078:	4413      	add	r3, r2
    d07a:	934b      	str	r3, [sp, #300]	; 0x12c
    d07c:	ab4e      	add	r3, sp, #312	; 0x138
    d07e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d082:	685a      	ldr	r2, [r3, #4]
    d084:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    d086:	441a      	add	r2, r3
    d088:	ab4e      	add	r3, sp, #312	; 0x138
    d08a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d08e:	605a      	str	r2, [r3, #4]
    d090:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    d092:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    d094:	441a      	add	r2, r3
    d096:	ab4e      	add	r3, sp, #312	; 0x138
    d098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d09c:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    d09e:	ab4e      	add	r3, sp, #312	; 0x138
    d0a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0a4:	691a      	ldr	r2, [r3, #16]
    d0a6:	ab4e      	add	r3, sp, #312	; 0x138
    d0a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0ac:	685b      	ldr	r3, [r3, #4]
    d0ae:	ea4f 11b3 	mov.w	r1, r3, ror #6
    d0b2:	ab4e      	add	r3, sp, #312	; 0x138
    d0b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0b8:	685b      	ldr	r3, [r3, #4]
    d0ba:	ea4f 23f3 	mov.w	r3, r3, ror #11
    d0be:	4059      	eors	r1, r3
    d0c0:	ab4e      	add	r3, sp, #312	; 0x138
    d0c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0c6:	685b      	ldr	r3, [r3, #4]
    d0c8:	ea4f 6373 	mov.w	r3, r3, ror #25
    d0cc:	404b      	eors	r3, r1
    d0ce:	441a      	add	r2, r3
    d0d0:	ab4e      	add	r3, sp, #312	; 0x138
    d0d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0d6:	68d9      	ldr	r1, [r3, #12]
    d0d8:	ab4e      	add	r3, sp, #312	; 0x138
    d0da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0de:	6858      	ldr	r0, [r3, #4]
    d0e0:	ab4e      	add	r3, sp, #312	; 0x138
    d0e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0e6:	689c      	ldr	r4, [r3, #8]
    d0e8:	ab4e      	add	r3, sp, #312	; 0x138
    d0ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d0ee:	68db      	ldr	r3, [r3, #12]
    d0f0:	4063      	eors	r3, r4
    d0f2:	4003      	ands	r3, r0
    d0f4:	404b      	eors	r3, r1
    d0f6:	441a      	add	r2, r3
    d0f8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d0fa:	3303      	adds	r3, #3
    d0fc:	495d      	ldr	r1, [pc, #372]	; (d274 <mbedtls_sha256_process+0xf30>)
    d0fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d102:	441a      	add	r2, r3
    d104:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d106:	1c59      	adds	r1, r3, #1
    d108:	ab4e      	add	r3, sp, #312	; 0x138
    d10a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d10e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    d112:	ea4f 4173 	mov.w	r1, r3, ror #17
    d116:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d118:	1c58      	adds	r0, r3, #1
    d11a:	ab4e      	add	r3, sp, #312	; 0x138
    d11c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d120:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d124:	ea4f 43f3 	mov.w	r3, r3, ror #19
    d128:	4059      	eors	r1, r3
    d12a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d12c:	1c58      	adds	r0, r3, #1
    d12e:	ab4e      	add	r3, sp, #312	; 0x138
    d130:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d134:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d138:	0a9b      	lsrs	r3, r3, #10
    d13a:	4059      	eors	r1, r3
    d13c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d13e:	1f18      	subs	r0, r3, #4
    d140:	ab4e      	add	r3, sp, #312	; 0x138
    d142:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d146:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d14a:	4419      	add	r1, r3
    d14c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d14e:	f1a3 000c 	sub.w	r0, r3, #12
    d152:	ab4e      	add	r3, sp, #312	; 0x138
    d154:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d158:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d15c:	ea4f 10f3 	mov.w	r0, r3, ror #7
    d160:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d162:	f1a3 040c 	sub.w	r4, r3, #12
    d166:	ab4e      	add	r3, sp, #312	; 0x138
    d168:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d16c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d170:	ea4f 43b3 	mov.w	r3, r3, ror #18
    d174:	4058      	eors	r0, r3
    d176:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d178:	f1a3 040c 	sub.w	r4, r3, #12
    d17c:	ab4e      	add	r3, sp, #312	; 0x138
    d17e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d182:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d186:	08db      	lsrs	r3, r3, #3
    d188:	4043      	eors	r3, r0
    d18a:	18c8      	adds	r0, r1, r3
    d18c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d18e:	f1a3 010d 	sub.w	r1, r3, #13
    d192:	ab4e      	add	r3, sp, #312	; 0x138
    d194:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d198:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    d19c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d19e:	3303      	adds	r3, #3
    d1a0:	4408      	add	r0, r1
    d1a2:	a94e      	add	r1, sp, #312	; 0x138
    d1a4:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d1a8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    d1ac:	a94e      	add	r1, sp, #312	; 0x138
    d1ae:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d1b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d1b6:	4413      	add	r3, r2
    d1b8:	934c      	str	r3, [sp, #304]	; 0x130
    d1ba:	ab4e      	add	r3, sp, #312	; 0x138
    d1bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d1c0:	695b      	ldr	r3, [r3, #20]
    d1c2:	ea4f 02b3 	mov.w	r2, r3, ror #2
    d1c6:	ab4e      	add	r3, sp, #312	; 0x138
    d1c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d1cc:	695b      	ldr	r3, [r3, #20]
    d1ce:	ea4f 3373 	mov.w	r3, r3, ror #13
    d1d2:	405a      	eors	r2, r3
    d1d4:	ab4e      	add	r3, sp, #312	; 0x138
    d1d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d1da:	695b      	ldr	r3, [r3, #20]
    d1dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
    d1e0:	405a      	eors	r2, r3
    d1e2:	ab4e      	add	r3, sp, #312	; 0x138
    d1e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d1e8:	6959      	ldr	r1, [r3, #20]
    d1ea:	ab4e      	add	r3, sp, #312	; 0x138
    d1ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d1f0:	699b      	ldr	r3, [r3, #24]
    d1f2:	4019      	ands	r1, r3
    d1f4:	ab4e      	add	r3, sp, #312	; 0x138
    d1f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d1fa:	69d8      	ldr	r0, [r3, #28]
    d1fc:	ab4e      	add	r3, sp, #312	; 0x138
    d1fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d202:	695c      	ldr	r4, [r3, #20]
    d204:	ab4e      	add	r3, sp, #312	; 0x138
    d206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d20a:	699b      	ldr	r3, [r3, #24]
    d20c:	4323      	orrs	r3, r4
    d20e:	4003      	ands	r3, r0
    d210:	430b      	orrs	r3, r1
    d212:	4413      	add	r3, r2
    d214:	934b      	str	r3, [sp, #300]	; 0x12c
    d216:	ab4e      	add	r3, sp, #312	; 0x138
    d218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d21c:	681a      	ldr	r2, [r3, #0]
    d21e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    d220:	441a      	add	r2, r3
    d222:	ab4e      	add	r3, sp, #312	; 0x138
    d224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d228:	601a      	str	r2, [r3, #0]
    d22a:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    d22c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    d22e:	441a      	add	r2, r3
    d230:	ab4e      	add	r3, sp, #312	; 0x138
    d232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d236:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    d238:	ab4e      	add	r3, sp, #312	; 0x138
    d23a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d23e:	68da      	ldr	r2, [r3, #12]
    d240:	ab4e      	add	r3, sp, #312	; 0x138
    d242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d246:	681b      	ldr	r3, [r3, #0]
    d248:	ea4f 11b3 	mov.w	r1, r3, ror #6
    d24c:	ab4e      	add	r3, sp, #312	; 0x138
    d24e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d252:	681b      	ldr	r3, [r3, #0]
    d254:	ea4f 23f3 	mov.w	r3, r3, ror #11
    d258:	4059      	eors	r1, r3
    d25a:	ab4e      	add	r3, sp, #312	; 0x138
    d25c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d260:	681b      	ldr	r3, [r3, #0]
    d262:	ea4f 6373 	mov.w	r3, r3, ror #25
    d266:	404b      	eors	r3, r1
    d268:	441a      	add	r2, r3
    d26a:	ab4e      	add	r3, sp, #312	; 0x138
    d26c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d270:	e002      	b.n	d278 <mbedtls_sha256_process+0xf34>
    d272:	bf00      	nop
    d274:	0000f248 	.word	0x0000f248
    d278:	6899      	ldr	r1, [r3, #8]
    d27a:	ab4e      	add	r3, sp, #312	; 0x138
    d27c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d280:	6818      	ldr	r0, [r3, #0]
    d282:	ab4e      	add	r3, sp, #312	; 0x138
    d284:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d288:	685c      	ldr	r4, [r3, #4]
    d28a:	ab4e      	add	r3, sp, #312	; 0x138
    d28c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d290:	689b      	ldr	r3, [r3, #8]
    d292:	4063      	eors	r3, r4
    d294:	4003      	ands	r3, r0
    d296:	404b      	eors	r3, r1
    d298:	441a      	add	r2, r3
    d29a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d29c:	3304      	adds	r3, #4
    d29e:	49c2      	ldr	r1, [pc, #776]	; (d5a8 <mbedtls_sha256_process+0x1264>)
    d2a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d2a4:	441a      	add	r2, r3
    d2a6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d2a8:	1c99      	adds	r1, r3, #2
    d2aa:	ab4e      	add	r3, sp, #312	; 0x138
    d2ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d2b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    d2b4:	ea4f 4173 	mov.w	r1, r3, ror #17
    d2b8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d2ba:	1c98      	adds	r0, r3, #2
    d2bc:	ab4e      	add	r3, sp, #312	; 0x138
    d2be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d2c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d2c6:	ea4f 43f3 	mov.w	r3, r3, ror #19
    d2ca:	4059      	eors	r1, r3
    d2cc:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d2ce:	1c98      	adds	r0, r3, #2
    d2d0:	ab4e      	add	r3, sp, #312	; 0x138
    d2d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d2d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d2da:	0a9b      	lsrs	r3, r3, #10
    d2dc:	4059      	eors	r1, r3
    d2de:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d2e0:	1ed8      	subs	r0, r3, #3
    d2e2:	ab4e      	add	r3, sp, #312	; 0x138
    d2e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d2e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d2ec:	4419      	add	r1, r3
    d2ee:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d2f0:	f1a3 000b 	sub.w	r0, r3, #11
    d2f4:	ab4e      	add	r3, sp, #312	; 0x138
    d2f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d2fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d2fe:	ea4f 10f3 	mov.w	r0, r3, ror #7
    d302:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d304:	f1a3 040b 	sub.w	r4, r3, #11
    d308:	ab4e      	add	r3, sp, #312	; 0x138
    d30a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d30e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d312:	ea4f 43b3 	mov.w	r3, r3, ror #18
    d316:	4058      	eors	r0, r3
    d318:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d31a:	f1a3 040b 	sub.w	r4, r3, #11
    d31e:	ab4e      	add	r3, sp, #312	; 0x138
    d320:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d324:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d328:	08db      	lsrs	r3, r3, #3
    d32a:	4043      	eors	r3, r0
    d32c:	18c8      	adds	r0, r1, r3
    d32e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d330:	f1a3 010c 	sub.w	r1, r3, #12
    d334:	ab4e      	add	r3, sp, #312	; 0x138
    d336:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d33a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    d33e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d340:	3304      	adds	r3, #4
    d342:	4408      	add	r0, r1
    d344:	a94e      	add	r1, sp, #312	; 0x138
    d346:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d34a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    d34e:	a94e      	add	r1, sp, #312	; 0x138
    d350:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d354:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d358:	4413      	add	r3, r2
    d35a:	934c      	str	r3, [sp, #304]	; 0x130
    d35c:	ab4e      	add	r3, sp, #312	; 0x138
    d35e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d362:	691b      	ldr	r3, [r3, #16]
    d364:	ea4f 02b3 	mov.w	r2, r3, ror #2
    d368:	ab4e      	add	r3, sp, #312	; 0x138
    d36a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d36e:	691b      	ldr	r3, [r3, #16]
    d370:	ea4f 3373 	mov.w	r3, r3, ror #13
    d374:	405a      	eors	r2, r3
    d376:	ab4e      	add	r3, sp, #312	; 0x138
    d378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d37c:	691b      	ldr	r3, [r3, #16]
    d37e:	ea4f 53b3 	mov.w	r3, r3, ror #22
    d382:	405a      	eors	r2, r3
    d384:	ab4e      	add	r3, sp, #312	; 0x138
    d386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d38a:	6919      	ldr	r1, [r3, #16]
    d38c:	ab4e      	add	r3, sp, #312	; 0x138
    d38e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d392:	695b      	ldr	r3, [r3, #20]
    d394:	4019      	ands	r1, r3
    d396:	ab4e      	add	r3, sp, #312	; 0x138
    d398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d39c:	6998      	ldr	r0, [r3, #24]
    d39e:	ab4e      	add	r3, sp, #312	; 0x138
    d3a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3a4:	691c      	ldr	r4, [r3, #16]
    d3a6:	ab4e      	add	r3, sp, #312	; 0x138
    d3a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3ac:	695b      	ldr	r3, [r3, #20]
    d3ae:	4323      	orrs	r3, r4
    d3b0:	4003      	ands	r3, r0
    d3b2:	430b      	orrs	r3, r1
    d3b4:	4413      	add	r3, r2
    d3b6:	934b      	str	r3, [sp, #300]	; 0x12c
    d3b8:	ab4e      	add	r3, sp, #312	; 0x138
    d3ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3be:	69da      	ldr	r2, [r3, #28]
    d3c0:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    d3c2:	441a      	add	r2, r3
    d3c4:	ab4e      	add	r3, sp, #312	; 0x138
    d3c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3ca:	61da      	str	r2, [r3, #28]
    d3cc:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    d3ce:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    d3d0:	441a      	add	r2, r3
    d3d2:	ab4e      	add	r3, sp, #312	; 0x138
    d3d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3d8:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    d3da:	ab4e      	add	r3, sp, #312	; 0x138
    d3dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3e0:	689a      	ldr	r2, [r3, #8]
    d3e2:	ab4e      	add	r3, sp, #312	; 0x138
    d3e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3e8:	69db      	ldr	r3, [r3, #28]
    d3ea:	ea4f 11b3 	mov.w	r1, r3, ror #6
    d3ee:	ab4e      	add	r3, sp, #312	; 0x138
    d3f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d3f4:	69db      	ldr	r3, [r3, #28]
    d3f6:	ea4f 23f3 	mov.w	r3, r3, ror #11
    d3fa:	4059      	eors	r1, r3
    d3fc:	ab4e      	add	r3, sp, #312	; 0x138
    d3fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d402:	69db      	ldr	r3, [r3, #28]
    d404:	ea4f 6373 	mov.w	r3, r3, ror #25
    d408:	404b      	eors	r3, r1
    d40a:	441a      	add	r2, r3
    d40c:	ab4e      	add	r3, sp, #312	; 0x138
    d40e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d412:	6859      	ldr	r1, [r3, #4]
    d414:	ab4e      	add	r3, sp, #312	; 0x138
    d416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d41a:	69d8      	ldr	r0, [r3, #28]
    d41c:	ab4e      	add	r3, sp, #312	; 0x138
    d41e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d422:	681c      	ldr	r4, [r3, #0]
    d424:	ab4e      	add	r3, sp, #312	; 0x138
    d426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d42a:	685b      	ldr	r3, [r3, #4]
    d42c:	4063      	eors	r3, r4
    d42e:	4003      	ands	r3, r0
    d430:	404b      	eors	r3, r1
    d432:	441a      	add	r2, r3
    d434:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d436:	3305      	adds	r3, #5
    d438:	495b      	ldr	r1, [pc, #364]	; (d5a8 <mbedtls_sha256_process+0x1264>)
    d43a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d43e:	441a      	add	r2, r3
    d440:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d442:	1cd9      	adds	r1, r3, #3
    d444:	ab4e      	add	r3, sp, #312	; 0x138
    d446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d44a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    d44e:	ea4f 4173 	mov.w	r1, r3, ror #17
    d452:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d454:	1cd8      	adds	r0, r3, #3
    d456:	ab4e      	add	r3, sp, #312	; 0x138
    d458:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d45c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d460:	ea4f 43f3 	mov.w	r3, r3, ror #19
    d464:	4059      	eors	r1, r3
    d466:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d468:	1cd8      	adds	r0, r3, #3
    d46a:	ab4e      	add	r3, sp, #312	; 0x138
    d46c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d470:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d474:	0a9b      	lsrs	r3, r3, #10
    d476:	4059      	eors	r1, r3
    d478:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d47a:	1e98      	subs	r0, r3, #2
    d47c:	ab4e      	add	r3, sp, #312	; 0x138
    d47e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d482:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d486:	4419      	add	r1, r3
    d488:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d48a:	f1a3 000a 	sub.w	r0, r3, #10
    d48e:	ab4e      	add	r3, sp, #312	; 0x138
    d490:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d494:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d498:	ea4f 10f3 	mov.w	r0, r3, ror #7
    d49c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d49e:	f1a3 040a 	sub.w	r4, r3, #10
    d4a2:	ab4e      	add	r3, sp, #312	; 0x138
    d4a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d4a8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d4ac:	ea4f 43b3 	mov.w	r3, r3, ror #18
    d4b0:	4058      	eors	r0, r3
    d4b2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d4b4:	f1a3 040a 	sub.w	r4, r3, #10
    d4b8:	ab4e      	add	r3, sp, #312	; 0x138
    d4ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d4be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d4c2:	08db      	lsrs	r3, r3, #3
    d4c4:	4043      	eors	r3, r0
    d4c6:	18c8      	adds	r0, r1, r3
    d4c8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d4ca:	f1a3 010b 	sub.w	r1, r3, #11
    d4ce:	ab4e      	add	r3, sp, #312	; 0x138
    d4d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d4d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    d4d8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d4da:	3305      	adds	r3, #5
    d4dc:	4408      	add	r0, r1
    d4de:	a94e      	add	r1, sp, #312	; 0x138
    d4e0:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d4e4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    d4e8:	a94e      	add	r1, sp, #312	; 0x138
    d4ea:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d4ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d4f2:	4413      	add	r3, r2
    d4f4:	934c      	str	r3, [sp, #304]	; 0x130
    d4f6:	ab4e      	add	r3, sp, #312	; 0x138
    d4f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d4fc:	68db      	ldr	r3, [r3, #12]
    d4fe:	ea4f 02b3 	mov.w	r2, r3, ror #2
    d502:	ab4e      	add	r3, sp, #312	; 0x138
    d504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d508:	68db      	ldr	r3, [r3, #12]
    d50a:	ea4f 3373 	mov.w	r3, r3, ror #13
    d50e:	405a      	eors	r2, r3
    d510:	ab4e      	add	r3, sp, #312	; 0x138
    d512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d516:	68db      	ldr	r3, [r3, #12]
    d518:	ea4f 53b3 	mov.w	r3, r3, ror #22
    d51c:	405a      	eors	r2, r3
    d51e:	ab4e      	add	r3, sp, #312	; 0x138
    d520:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d524:	68d9      	ldr	r1, [r3, #12]
    d526:	ab4e      	add	r3, sp, #312	; 0x138
    d528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d52c:	691b      	ldr	r3, [r3, #16]
    d52e:	4019      	ands	r1, r3
    d530:	ab4e      	add	r3, sp, #312	; 0x138
    d532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d536:	6958      	ldr	r0, [r3, #20]
    d538:	ab4e      	add	r3, sp, #312	; 0x138
    d53a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d53e:	68dc      	ldr	r4, [r3, #12]
    d540:	ab4e      	add	r3, sp, #312	; 0x138
    d542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d546:	691b      	ldr	r3, [r3, #16]
    d548:	4323      	orrs	r3, r4
    d54a:	4003      	ands	r3, r0
    d54c:	430b      	orrs	r3, r1
    d54e:	4413      	add	r3, r2
    d550:	934b      	str	r3, [sp, #300]	; 0x12c
    d552:	ab4e      	add	r3, sp, #312	; 0x138
    d554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d558:	699a      	ldr	r2, [r3, #24]
    d55a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    d55c:	441a      	add	r2, r3
    d55e:	ab4e      	add	r3, sp, #312	; 0x138
    d560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d564:	619a      	str	r2, [r3, #24]
    d566:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    d568:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    d56a:	441a      	add	r2, r3
    d56c:	ab4e      	add	r3, sp, #312	; 0x138
    d56e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d572:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    d574:	ab4e      	add	r3, sp, #312	; 0x138
    d576:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d57a:	685a      	ldr	r2, [r3, #4]
    d57c:	ab4e      	add	r3, sp, #312	; 0x138
    d57e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d582:	699b      	ldr	r3, [r3, #24]
    d584:	ea4f 11b3 	mov.w	r1, r3, ror #6
    d588:	ab4e      	add	r3, sp, #312	; 0x138
    d58a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d58e:	699b      	ldr	r3, [r3, #24]
    d590:	ea4f 23f3 	mov.w	r3, r3, ror #11
    d594:	4059      	eors	r1, r3
    d596:	ab4e      	add	r3, sp, #312	; 0x138
    d598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d59c:	699b      	ldr	r3, [r3, #24]
    d59e:	ea4f 6373 	mov.w	r3, r3, ror #25
    d5a2:	404b      	eors	r3, r1
    d5a4:	441a      	add	r2, r3
    d5a6:	e001      	b.n	d5ac <mbedtls_sha256_process+0x1268>
    d5a8:	0000f248 	.word	0x0000f248
    d5ac:	ab4e      	add	r3, sp, #312	; 0x138
    d5ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d5b2:	6819      	ldr	r1, [r3, #0]
    d5b4:	ab4e      	add	r3, sp, #312	; 0x138
    d5b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d5ba:	6998      	ldr	r0, [r3, #24]
    d5bc:	ab4e      	add	r3, sp, #312	; 0x138
    d5be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d5c2:	69dc      	ldr	r4, [r3, #28]
    d5c4:	ab4e      	add	r3, sp, #312	; 0x138
    d5c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d5ca:	681b      	ldr	r3, [r3, #0]
    d5cc:	4063      	eors	r3, r4
    d5ce:	4003      	ands	r3, r0
    d5d0:	404b      	eors	r3, r1
    d5d2:	441a      	add	r2, r3
    d5d4:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d5d6:	3306      	adds	r3, #6
    d5d8:	49b9      	ldr	r1, [pc, #740]	; (d8c0 <mbedtls_sha256_process+0x157c>)
    d5da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d5de:	441a      	add	r2, r3
    d5e0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d5e2:	1d19      	adds	r1, r3, #4
    d5e4:	ab4e      	add	r3, sp, #312	; 0x138
    d5e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d5ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    d5ee:	ea4f 4173 	mov.w	r1, r3, ror #17
    d5f2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d5f4:	1d18      	adds	r0, r3, #4
    d5f6:	ab4e      	add	r3, sp, #312	; 0x138
    d5f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d5fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d600:	ea4f 43f3 	mov.w	r3, r3, ror #19
    d604:	4059      	eors	r1, r3
    d606:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d608:	1d18      	adds	r0, r3, #4
    d60a:	ab4e      	add	r3, sp, #312	; 0x138
    d60c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d610:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d614:	0a9b      	lsrs	r3, r3, #10
    d616:	4059      	eors	r1, r3
    d618:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d61a:	1e58      	subs	r0, r3, #1
    d61c:	ab4e      	add	r3, sp, #312	; 0x138
    d61e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d622:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d626:	4419      	add	r1, r3
    d628:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d62a:	f1a3 0009 	sub.w	r0, r3, #9
    d62e:	ab4e      	add	r3, sp, #312	; 0x138
    d630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d634:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d638:	ea4f 10f3 	mov.w	r0, r3, ror #7
    d63c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d63e:	f1a3 0409 	sub.w	r4, r3, #9
    d642:	ab4e      	add	r3, sp, #312	; 0x138
    d644:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d648:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d64c:	ea4f 43b3 	mov.w	r3, r3, ror #18
    d650:	4058      	eors	r0, r3
    d652:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d654:	f1a3 0409 	sub.w	r4, r3, #9
    d658:	ab4e      	add	r3, sp, #312	; 0x138
    d65a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d65e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d662:	08db      	lsrs	r3, r3, #3
    d664:	4043      	eors	r3, r0
    d666:	18c8      	adds	r0, r1, r3
    d668:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d66a:	f1a3 010a 	sub.w	r1, r3, #10
    d66e:	ab4e      	add	r3, sp, #312	; 0x138
    d670:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d674:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    d678:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d67a:	3306      	adds	r3, #6
    d67c:	4408      	add	r0, r1
    d67e:	a94e      	add	r1, sp, #312	; 0x138
    d680:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d684:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    d688:	a94e      	add	r1, sp, #312	; 0x138
    d68a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d68e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d692:	4413      	add	r3, r2
    d694:	934c      	str	r3, [sp, #304]	; 0x130
    d696:	ab4e      	add	r3, sp, #312	; 0x138
    d698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d69c:	689b      	ldr	r3, [r3, #8]
    d69e:	ea4f 02b3 	mov.w	r2, r3, ror #2
    d6a2:	ab4e      	add	r3, sp, #312	; 0x138
    d6a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6a8:	689b      	ldr	r3, [r3, #8]
    d6aa:	ea4f 3373 	mov.w	r3, r3, ror #13
    d6ae:	405a      	eors	r2, r3
    d6b0:	ab4e      	add	r3, sp, #312	; 0x138
    d6b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6b6:	689b      	ldr	r3, [r3, #8]
    d6b8:	ea4f 53b3 	mov.w	r3, r3, ror #22
    d6bc:	405a      	eors	r2, r3
    d6be:	ab4e      	add	r3, sp, #312	; 0x138
    d6c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6c4:	6899      	ldr	r1, [r3, #8]
    d6c6:	ab4e      	add	r3, sp, #312	; 0x138
    d6c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6cc:	68db      	ldr	r3, [r3, #12]
    d6ce:	4019      	ands	r1, r3
    d6d0:	ab4e      	add	r3, sp, #312	; 0x138
    d6d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6d6:	6918      	ldr	r0, [r3, #16]
    d6d8:	ab4e      	add	r3, sp, #312	; 0x138
    d6da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6de:	689c      	ldr	r4, [r3, #8]
    d6e0:	ab4e      	add	r3, sp, #312	; 0x138
    d6e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6e6:	68db      	ldr	r3, [r3, #12]
    d6e8:	4323      	orrs	r3, r4
    d6ea:	4003      	ands	r3, r0
    d6ec:	430b      	orrs	r3, r1
    d6ee:	4413      	add	r3, r2
    d6f0:	934b      	str	r3, [sp, #300]	; 0x12c
    d6f2:	ab4e      	add	r3, sp, #312	; 0x138
    d6f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d6f8:	695a      	ldr	r2, [r3, #20]
    d6fa:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    d6fc:	441a      	add	r2, r3
    d6fe:	ab4e      	add	r3, sp, #312	; 0x138
    d700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d704:	615a      	str	r2, [r3, #20]
    d706:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    d708:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    d70a:	441a      	add	r2, r3
    d70c:	ab4e      	add	r3, sp, #312	; 0x138
    d70e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d712:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    d714:	ab4e      	add	r3, sp, #312	; 0x138
    d716:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d71a:	681a      	ldr	r2, [r3, #0]
    d71c:	ab4e      	add	r3, sp, #312	; 0x138
    d71e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d722:	695b      	ldr	r3, [r3, #20]
    d724:	ea4f 11b3 	mov.w	r1, r3, ror #6
    d728:	ab4e      	add	r3, sp, #312	; 0x138
    d72a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d72e:	695b      	ldr	r3, [r3, #20]
    d730:	ea4f 23f3 	mov.w	r3, r3, ror #11
    d734:	4059      	eors	r1, r3
    d736:	ab4e      	add	r3, sp, #312	; 0x138
    d738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d73c:	695b      	ldr	r3, [r3, #20]
    d73e:	ea4f 6373 	mov.w	r3, r3, ror #25
    d742:	404b      	eors	r3, r1
    d744:	441a      	add	r2, r3
    d746:	ab4e      	add	r3, sp, #312	; 0x138
    d748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d74c:	69d9      	ldr	r1, [r3, #28]
    d74e:	ab4e      	add	r3, sp, #312	; 0x138
    d750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d754:	6958      	ldr	r0, [r3, #20]
    d756:	ab4e      	add	r3, sp, #312	; 0x138
    d758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d75c:	699c      	ldr	r4, [r3, #24]
    d75e:	ab4e      	add	r3, sp, #312	; 0x138
    d760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d764:	69db      	ldr	r3, [r3, #28]
    d766:	4063      	eors	r3, r4
    d768:	4003      	ands	r3, r0
    d76a:	404b      	eors	r3, r1
    d76c:	441a      	add	r2, r3
    d76e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d770:	3307      	adds	r3, #7
    d772:	4953      	ldr	r1, [pc, #332]	; (d8c0 <mbedtls_sha256_process+0x157c>)
    d774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d778:	441a      	add	r2, r3
    d77a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d77c:	1d59      	adds	r1, r3, #5
    d77e:	ab4e      	add	r3, sp, #312	; 0x138
    d780:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d784:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    d788:	ea4f 4173 	mov.w	r1, r3, ror #17
    d78c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d78e:	1d58      	adds	r0, r3, #5
    d790:	ab4e      	add	r3, sp, #312	; 0x138
    d792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d796:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d79a:	ea4f 43f3 	mov.w	r3, r3, ror #19
    d79e:	4059      	eors	r1, r3
    d7a0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d7a2:	1d58      	adds	r0, r3, #5
    d7a4:	ab4e      	add	r3, sp, #312	; 0x138
    d7a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d7aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d7ae:	0a9b      	lsrs	r3, r3, #10
    d7b0:	4059      	eors	r1, r3
    d7b2:	ab4e      	add	r3, sp, #312	; 0x138
    d7b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d7b8:	984d      	ldr	r0, [sp, #308]	; 0x134
    d7ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d7be:	4419      	add	r1, r3
    d7c0:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d7c2:	f1a3 0008 	sub.w	r0, r3, #8
    d7c6:	ab4e      	add	r3, sp, #312	; 0x138
    d7c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d7cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d7d0:	ea4f 10f3 	mov.w	r0, r3, ror #7
    d7d4:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d7d6:	f1a3 0408 	sub.w	r4, r3, #8
    d7da:	ab4e      	add	r3, sp, #312	; 0x138
    d7dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d7e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d7e4:	ea4f 43b3 	mov.w	r3, r3, ror #18
    d7e8:	4058      	eors	r0, r3
    d7ea:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d7ec:	f1a3 0408 	sub.w	r4, r3, #8
    d7f0:	ab4e      	add	r3, sp, #312	; 0x138
    d7f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d7f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    d7fa:	08db      	lsrs	r3, r3, #3
    d7fc:	4043      	eors	r3, r0
    d7fe:	18c8      	adds	r0, r1, r3
    d800:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d802:	f1a3 0109 	sub.w	r1, r3, #9
    d806:	ab4e      	add	r3, sp, #312	; 0x138
    d808:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
    d80c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    d810:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d812:	3307      	adds	r3, #7
    d814:	4408      	add	r0, r1
    d816:	a94e      	add	r1, sp, #312	; 0x138
    d818:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d81c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    d820:	a94e      	add	r1, sp, #312	; 0x138
    d822:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
    d826:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    d82a:	4413      	add	r3, r2
    d82c:	934c      	str	r3, [sp, #304]	; 0x130
    d82e:	ab4e      	add	r3, sp, #312	; 0x138
    d830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d834:	685b      	ldr	r3, [r3, #4]
    d836:	ea4f 02b3 	mov.w	r2, r3, ror #2
    d83a:	ab4e      	add	r3, sp, #312	; 0x138
    d83c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d840:	685b      	ldr	r3, [r3, #4]
    d842:	ea4f 3373 	mov.w	r3, r3, ror #13
    d846:	405a      	eors	r2, r3
    d848:	ab4e      	add	r3, sp, #312	; 0x138
    d84a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d84e:	685b      	ldr	r3, [r3, #4]
    d850:	ea4f 53b3 	mov.w	r3, r3, ror #22
    d854:	405a      	eors	r2, r3
    d856:	ab4e      	add	r3, sp, #312	; 0x138
    d858:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d85c:	6859      	ldr	r1, [r3, #4]
    d85e:	ab4e      	add	r3, sp, #312	; 0x138
    d860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d864:	689b      	ldr	r3, [r3, #8]
    d866:	4019      	ands	r1, r3
    d868:	ab4e      	add	r3, sp, #312	; 0x138
    d86a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d86e:	68d8      	ldr	r0, [r3, #12]
    d870:	ab4e      	add	r3, sp, #312	; 0x138
    d872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d876:	685c      	ldr	r4, [r3, #4]
    d878:	ab4e      	add	r3, sp, #312	; 0x138
    d87a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d87e:	689b      	ldr	r3, [r3, #8]
    d880:	4323      	orrs	r3, r4
    d882:	4003      	ands	r3, r0
    d884:	430b      	orrs	r3, r1
    d886:	4413      	add	r3, r2
    d888:	934b      	str	r3, [sp, #300]	; 0x12c
    d88a:	ab4e      	add	r3, sp, #312	; 0x138
    d88c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d890:	691a      	ldr	r2, [r3, #16]
    d892:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    d894:	441a      	add	r2, r3
    d896:	ab4e      	add	r3, sp, #312	; 0x138
    d898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d89c:	611a      	str	r2, [r3, #16]
    d89e:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    d8a0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    d8a2:	441a      	add	r2, r3
    d8a4:	ab4e      	add	r3, sp, #312	; 0x138
    d8a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d8aa:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
    d8ac:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d8ae:	3308      	adds	r3, #8
    d8b0:	934d      	str	r3, [sp, #308]	; 0x134
    d8b2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d8b4:	2b3f      	cmp	r3, #63	; 0x3f
    d8b6:	f67f a98b 	bls.w	cbd0 <mbedtls_sha256_process+0x88c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    d8ba:	2300      	movs	r3, #0
    d8bc:	934d      	str	r3, [sp, #308]	; 0x134
    d8be:	e01b      	b.n	d8f8 <mbedtls_sha256_process+0x15b4>
    d8c0:	0000f248 	.word	0x0000f248
        ctx->state[i] += A[i];
    d8c4:	ab4e      	add	r3, sp, #312	; 0x138
    d8c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
    d8ca:	681b      	ldr	r3, [r3, #0]
    d8cc:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    d8ce:	3202      	adds	r2, #2
    d8d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d8d4:	ab4e      	add	r3, sp, #312	; 0x138
    d8d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
    d8da:	994d      	ldr	r1, [sp, #308]	; 0x134
    d8dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    d8e0:	18d1      	adds	r1, r2, r3
    d8e2:	ab4e      	add	r3, sp, #312	; 0x138
    d8e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
    d8e8:	681b      	ldr	r3, [r3, #0]
    d8ea:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    d8ec:	3202      	adds	r2, #2
    d8ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    d8f2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d8f4:	3301      	adds	r3, #1
    d8f6:	934d      	str	r3, [sp, #308]	; 0x134
    d8f8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    d8fa:	2b07      	cmp	r3, #7
    d8fc:	d9e2      	bls.n	d8c4 <mbedtls_sha256_process+0x1580>
}
    d8fe:	bf00      	nop
    d900:	bf00      	nop
    d902:	b04f      	add	sp, #316	; 0x13c
    d904:	f85d 4b04 	ldr.w	r4, [sp], #4
    d908:	4770      	bx	lr
    d90a:	bf00      	nop

0000d90c <mbedtls_sha256_update>:
/*
 * SHA-256 process buffer
 */
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
                    size_t ilen )
{
    d90c:	b500      	push	{lr}
    d90e:	b087      	sub	sp, #28
    d910:	9003      	str	r0, [sp, #12]
    d912:	9102      	str	r1, [sp, #8]
    d914:	9201      	str	r2, [sp, #4]
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    d916:	9b01      	ldr	r3, [sp, #4]
    d918:	2b00      	cmp	r3, #0
    d91a:	d059      	beq.n	d9d0 <mbedtls_sha256_update+0xc4>
        return;

    left = ctx->total[0] & 0x3F;
    d91c:	9b03      	ldr	r3, [sp, #12]
    d91e:	681b      	ldr	r3, [r3, #0]
    d920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d924:	9305      	str	r3, [sp, #20]
    fill = 64 - left;
    d926:	9b05      	ldr	r3, [sp, #20]
    d928:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    d92c:	9304      	str	r3, [sp, #16]

    ctx->total[0] += (uint32_t) ilen;
    d92e:	9b03      	ldr	r3, [sp, #12]
    d930:	681a      	ldr	r2, [r3, #0]
    d932:	9b01      	ldr	r3, [sp, #4]
    d934:	441a      	add	r2, r3
    d936:	9b03      	ldr	r3, [sp, #12]
    d938:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
    d93a:	9b03      	ldr	r3, [sp, #12]
    d93c:	681a      	ldr	r2, [r3, #0]
    d93e:	9b03      	ldr	r3, [sp, #12]
    d940:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
    d942:	9b03      	ldr	r3, [sp, #12]
    d944:	681b      	ldr	r3, [r3, #0]
    d946:	9a01      	ldr	r2, [sp, #4]
    d948:	429a      	cmp	r2, r3
    d94a:	d904      	bls.n	d956 <mbedtls_sha256_update+0x4a>
        ctx->total[1]++;
    d94c:	9b03      	ldr	r3, [sp, #12]
    d94e:	685b      	ldr	r3, [r3, #4]
    d950:	1c5a      	adds	r2, r3, #1
    d952:	9b03      	ldr	r3, [sp, #12]
    d954:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
    d956:	9b05      	ldr	r3, [sp, #20]
    d958:	2b00      	cmp	r3, #0
    d95a:	d028      	beq.n	d9ae <mbedtls_sha256_update+0xa2>
    d95c:	9a01      	ldr	r2, [sp, #4]
    d95e:	9b04      	ldr	r3, [sp, #16]
    d960:	429a      	cmp	r2, r3
    d962:	d324      	bcc.n	d9ae <mbedtls_sha256_update+0xa2>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    d964:	9b03      	ldr	r3, [sp, #12]
    d966:	f103 0228 	add.w	r2, r3, #40	; 0x28
    d96a:	9b05      	ldr	r3, [sp, #20]
    d96c:	4413      	add	r3, r2
    d96e:	9a04      	ldr	r2, [sp, #16]
    d970:	9902      	ldr	r1, [sp, #8]
    d972:	4618      	mov	r0, r3
    d974:	f7fe fbc4 	bl	c100 <memcpy>
        mbedtls_sha256_process( ctx, ctx->buffer );
    d978:	9b03      	ldr	r3, [sp, #12]
    d97a:	3328      	adds	r3, #40	; 0x28
    d97c:	4619      	mov	r1, r3
    d97e:	9803      	ldr	r0, [sp, #12]
    d980:	f7fe fce0 	bl	c344 <mbedtls_sha256_process>
        input += fill;
    d984:	9a02      	ldr	r2, [sp, #8]
    d986:	9b04      	ldr	r3, [sp, #16]
    d988:	4413      	add	r3, r2
    d98a:	9302      	str	r3, [sp, #8]
        ilen  -= fill;
    d98c:	9a01      	ldr	r2, [sp, #4]
    d98e:	9b04      	ldr	r3, [sp, #16]
    d990:	1ad3      	subs	r3, r2, r3
    d992:	9301      	str	r3, [sp, #4]
        left = 0;
    d994:	2300      	movs	r3, #0
    d996:	9305      	str	r3, [sp, #20]
    }

    while( ilen >= 64 )
    d998:	e009      	b.n	d9ae <mbedtls_sha256_update+0xa2>
    {
        mbedtls_sha256_process( ctx, input );
    d99a:	9902      	ldr	r1, [sp, #8]
    d99c:	9803      	ldr	r0, [sp, #12]
    d99e:	f7fe fcd1 	bl	c344 <mbedtls_sha256_process>
        input += 64;
    d9a2:	9b02      	ldr	r3, [sp, #8]
    d9a4:	3340      	adds	r3, #64	; 0x40
    d9a6:	9302      	str	r3, [sp, #8]
        ilen  -= 64;
    d9a8:	9b01      	ldr	r3, [sp, #4]
    d9aa:	3b40      	subs	r3, #64	; 0x40
    d9ac:	9301      	str	r3, [sp, #4]
    while( ilen >= 64 )
    d9ae:	9b01      	ldr	r3, [sp, #4]
    d9b0:	2b3f      	cmp	r3, #63	; 0x3f
    d9b2:	d8f2      	bhi.n	d99a <mbedtls_sha256_update+0x8e>
    }

    if( ilen > 0 )
    d9b4:	9b01      	ldr	r3, [sp, #4]
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d00b      	beq.n	d9d2 <mbedtls_sha256_update+0xc6>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    d9ba:	9b03      	ldr	r3, [sp, #12]
    d9bc:	f103 0228 	add.w	r2, r3, #40	; 0x28
    d9c0:	9b05      	ldr	r3, [sp, #20]
    d9c2:	4413      	add	r3, r2
    d9c4:	9a01      	ldr	r2, [sp, #4]
    d9c6:	9902      	ldr	r1, [sp, #8]
    d9c8:	4618      	mov	r0, r3
    d9ca:	f7fe fb99 	bl	c100 <memcpy>
    d9ce:	e000      	b.n	d9d2 <mbedtls_sha256_update+0xc6>
        return;
    d9d0:	bf00      	nop
}
    d9d2:	b007      	add	sp, #28
    d9d4:	f85d fb04 	ldr.w	pc, [sp], #4

0000d9d8 <mbedtls_sha256_finish>:

/*
 * SHA-256 final digest
 */
void mbedtls_sha256_finish( mbedtls_sha256_context *ctx, unsigned char output[32] )
{
    d9d8:	b500      	push	{lr}
    d9da:	b089      	sub	sp, #36	; 0x24
    d9dc:	9001      	str	r0, [sp, #4]
    d9de:	9100      	str	r1, [sp, #0]
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
    d9e0:	9b01      	ldr	r3, [sp, #4]
    d9e2:	681b      	ldr	r3, [r3, #0]
    d9e4:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
    d9e6:	9b01      	ldr	r3, [sp, #4]
    d9e8:	685b      	ldr	r3, [r3, #4]
    d9ea:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    d9ec:	4313      	orrs	r3, r2
    d9ee:	9307      	str	r3, [sp, #28]
    low  = ( ctx->total[0] <<  3 );
    d9f0:	9b01      	ldr	r3, [sp, #4]
    d9f2:	681b      	ldr	r3, [r3, #0]
    d9f4:	00db      	lsls	r3, r3, #3
    d9f6:	9306      	str	r3, [sp, #24]

    PUT_UINT32_BE( high, msglen, 0 );
    d9f8:	9b07      	ldr	r3, [sp, #28]
    d9fa:	0e1b      	lsrs	r3, r3, #24
    d9fc:	b2db      	uxtb	r3, r3
    d9fe:	f88d 3008 	strb.w	r3, [sp, #8]
    da02:	9b07      	ldr	r3, [sp, #28]
    da04:	0c1b      	lsrs	r3, r3, #16
    da06:	b2db      	uxtb	r3, r3
    da08:	f88d 3009 	strb.w	r3, [sp, #9]
    da0c:	9b07      	ldr	r3, [sp, #28]
    da0e:	0a1b      	lsrs	r3, r3, #8
    da10:	b2db      	uxtb	r3, r3
    da12:	f88d 300a 	strb.w	r3, [sp, #10]
    da16:	9b07      	ldr	r3, [sp, #28]
    da18:	b2db      	uxtb	r3, r3
    da1a:	f88d 300b 	strb.w	r3, [sp, #11]
    PUT_UINT32_BE( low,  msglen, 4 );
    da1e:	9b06      	ldr	r3, [sp, #24]
    da20:	0e1b      	lsrs	r3, r3, #24
    da22:	b2db      	uxtb	r3, r3
    da24:	f88d 300c 	strb.w	r3, [sp, #12]
    da28:	9b06      	ldr	r3, [sp, #24]
    da2a:	0c1b      	lsrs	r3, r3, #16
    da2c:	b2db      	uxtb	r3, r3
    da2e:	f88d 300d 	strb.w	r3, [sp, #13]
    da32:	9b06      	ldr	r3, [sp, #24]
    da34:	0a1b      	lsrs	r3, r3, #8
    da36:	b2db      	uxtb	r3, r3
    da38:	f88d 300e 	strb.w	r3, [sp, #14]
    da3c:	9b06      	ldr	r3, [sp, #24]
    da3e:	b2db      	uxtb	r3, r3
    da40:	f88d 300f 	strb.w	r3, [sp, #15]

    last = ctx->total[0] & 0x3F;
    da44:	9b01      	ldr	r3, [sp, #4]
    da46:	681b      	ldr	r3, [r3, #0]
    da48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    da4c:	9305      	str	r3, [sp, #20]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
    da4e:	9b05      	ldr	r3, [sp, #20]
    da50:	2b37      	cmp	r3, #55	; 0x37
    da52:	d803      	bhi.n	da5c <mbedtls_sha256_finish+0x84>
    da54:	9b05      	ldr	r3, [sp, #20]
    da56:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
    da5a:	e002      	b.n	da62 <mbedtls_sha256_finish+0x8a>
    da5c:	9b05      	ldr	r3, [sp, #20]
    da5e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
    da62:	9304      	str	r3, [sp, #16]

    mbedtls_sha256_update( ctx, sha256_padding, padn );
    da64:	9a04      	ldr	r2, [sp, #16]
    da66:	4974      	ldr	r1, [pc, #464]	; (dc38 <mbedtls_sha256_finish+0x260>)
    da68:	9801      	ldr	r0, [sp, #4]
    da6a:	f7ff ff4f 	bl	d90c <mbedtls_sha256_update>
    mbedtls_sha256_update( ctx, msglen, 8 );
    da6e:	ab02      	add	r3, sp, #8
    da70:	2208      	movs	r2, #8
    da72:	4619      	mov	r1, r3
    da74:	9801      	ldr	r0, [sp, #4]
    da76:	f7ff ff49 	bl	d90c <mbedtls_sha256_update>

    PUT_UINT32_BE( ctx->state[0], output,  0 );
    da7a:	9b01      	ldr	r3, [sp, #4]
    da7c:	689b      	ldr	r3, [r3, #8]
    da7e:	0e1b      	lsrs	r3, r3, #24
    da80:	b2da      	uxtb	r2, r3
    da82:	9b00      	ldr	r3, [sp, #0]
    da84:	701a      	strb	r2, [r3, #0]
    da86:	9b01      	ldr	r3, [sp, #4]
    da88:	689b      	ldr	r3, [r3, #8]
    da8a:	0c1a      	lsrs	r2, r3, #16
    da8c:	9b00      	ldr	r3, [sp, #0]
    da8e:	3301      	adds	r3, #1
    da90:	b2d2      	uxtb	r2, r2
    da92:	701a      	strb	r2, [r3, #0]
    da94:	9b01      	ldr	r3, [sp, #4]
    da96:	689b      	ldr	r3, [r3, #8]
    da98:	0a1a      	lsrs	r2, r3, #8
    da9a:	9b00      	ldr	r3, [sp, #0]
    da9c:	3302      	adds	r3, #2
    da9e:	b2d2      	uxtb	r2, r2
    daa0:	701a      	strb	r2, [r3, #0]
    daa2:	9b01      	ldr	r3, [sp, #4]
    daa4:	689a      	ldr	r2, [r3, #8]
    daa6:	9b00      	ldr	r3, [sp, #0]
    daa8:	3303      	adds	r3, #3
    daaa:	b2d2      	uxtb	r2, r2
    daac:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    daae:	9b01      	ldr	r3, [sp, #4]
    dab0:	68db      	ldr	r3, [r3, #12]
    dab2:	0e1a      	lsrs	r2, r3, #24
    dab4:	9b00      	ldr	r3, [sp, #0]
    dab6:	3304      	adds	r3, #4
    dab8:	b2d2      	uxtb	r2, r2
    daba:	701a      	strb	r2, [r3, #0]
    dabc:	9b01      	ldr	r3, [sp, #4]
    dabe:	68db      	ldr	r3, [r3, #12]
    dac0:	0c1a      	lsrs	r2, r3, #16
    dac2:	9b00      	ldr	r3, [sp, #0]
    dac4:	3305      	adds	r3, #5
    dac6:	b2d2      	uxtb	r2, r2
    dac8:	701a      	strb	r2, [r3, #0]
    daca:	9b01      	ldr	r3, [sp, #4]
    dacc:	68db      	ldr	r3, [r3, #12]
    dace:	0a1a      	lsrs	r2, r3, #8
    dad0:	9b00      	ldr	r3, [sp, #0]
    dad2:	3306      	adds	r3, #6
    dad4:	b2d2      	uxtb	r2, r2
    dad6:	701a      	strb	r2, [r3, #0]
    dad8:	9b01      	ldr	r3, [sp, #4]
    dada:	68da      	ldr	r2, [r3, #12]
    dadc:	9b00      	ldr	r3, [sp, #0]
    dade:	3307      	adds	r3, #7
    dae0:	b2d2      	uxtb	r2, r2
    dae2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    dae4:	9b01      	ldr	r3, [sp, #4]
    dae6:	691b      	ldr	r3, [r3, #16]
    dae8:	0e1a      	lsrs	r2, r3, #24
    daea:	9b00      	ldr	r3, [sp, #0]
    daec:	3308      	adds	r3, #8
    daee:	b2d2      	uxtb	r2, r2
    daf0:	701a      	strb	r2, [r3, #0]
    daf2:	9b01      	ldr	r3, [sp, #4]
    daf4:	691b      	ldr	r3, [r3, #16]
    daf6:	0c1a      	lsrs	r2, r3, #16
    daf8:	9b00      	ldr	r3, [sp, #0]
    dafa:	3309      	adds	r3, #9
    dafc:	b2d2      	uxtb	r2, r2
    dafe:	701a      	strb	r2, [r3, #0]
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	691b      	ldr	r3, [r3, #16]
    db04:	0a1a      	lsrs	r2, r3, #8
    db06:	9b00      	ldr	r3, [sp, #0]
    db08:	330a      	adds	r3, #10
    db0a:	b2d2      	uxtb	r2, r2
    db0c:	701a      	strb	r2, [r3, #0]
    db0e:	9b01      	ldr	r3, [sp, #4]
    db10:	691a      	ldr	r2, [r3, #16]
    db12:	9b00      	ldr	r3, [sp, #0]
    db14:	330b      	adds	r3, #11
    db16:	b2d2      	uxtb	r2, r2
    db18:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    db1a:	9b01      	ldr	r3, [sp, #4]
    db1c:	695b      	ldr	r3, [r3, #20]
    db1e:	0e1a      	lsrs	r2, r3, #24
    db20:	9b00      	ldr	r3, [sp, #0]
    db22:	330c      	adds	r3, #12
    db24:	b2d2      	uxtb	r2, r2
    db26:	701a      	strb	r2, [r3, #0]
    db28:	9b01      	ldr	r3, [sp, #4]
    db2a:	695b      	ldr	r3, [r3, #20]
    db2c:	0c1a      	lsrs	r2, r3, #16
    db2e:	9b00      	ldr	r3, [sp, #0]
    db30:	330d      	adds	r3, #13
    db32:	b2d2      	uxtb	r2, r2
    db34:	701a      	strb	r2, [r3, #0]
    db36:	9b01      	ldr	r3, [sp, #4]
    db38:	695b      	ldr	r3, [r3, #20]
    db3a:	0a1a      	lsrs	r2, r3, #8
    db3c:	9b00      	ldr	r3, [sp, #0]
    db3e:	330e      	adds	r3, #14
    db40:	b2d2      	uxtb	r2, r2
    db42:	701a      	strb	r2, [r3, #0]
    db44:	9b01      	ldr	r3, [sp, #4]
    db46:	695a      	ldr	r2, [r3, #20]
    db48:	9b00      	ldr	r3, [sp, #0]
    db4a:	330f      	adds	r3, #15
    db4c:	b2d2      	uxtb	r2, r2
    db4e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    db50:	9b01      	ldr	r3, [sp, #4]
    db52:	699b      	ldr	r3, [r3, #24]
    db54:	0e1a      	lsrs	r2, r3, #24
    db56:	9b00      	ldr	r3, [sp, #0]
    db58:	3310      	adds	r3, #16
    db5a:	b2d2      	uxtb	r2, r2
    db5c:	701a      	strb	r2, [r3, #0]
    db5e:	9b01      	ldr	r3, [sp, #4]
    db60:	699b      	ldr	r3, [r3, #24]
    db62:	0c1a      	lsrs	r2, r3, #16
    db64:	9b00      	ldr	r3, [sp, #0]
    db66:	3311      	adds	r3, #17
    db68:	b2d2      	uxtb	r2, r2
    db6a:	701a      	strb	r2, [r3, #0]
    db6c:	9b01      	ldr	r3, [sp, #4]
    db6e:	699b      	ldr	r3, [r3, #24]
    db70:	0a1a      	lsrs	r2, r3, #8
    db72:	9b00      	ldr	r3, [sp, #0]
    db74:	3312      	adds	r3, #18
    db76:	b2d2      	uxtb	r2, r2
    db78:	701a      	strb	r2, [r3, #0]
    db7a:	9b01      	ldr	r3, [sp, #4]
    db7c:	699a      	ldr	r2, [r3, #24]
    db7e:	9b00      	ldr	r3, [sp, #0]
    db80:	3313      	adds	r3, #19
    db82:	b2d2      	uxtb	r2, r2
    db84:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    db86:	9b01      	ldr	r3, [sp, #4]
    db88:	69db      	ldr	r3, [r3, #28]
    db8a:	0e1a      	lsrs	r2, r3, #24
    db8c:	9b00      	ldr	r3, [sp, #0]
    db8e:	3314      	adds	r3, #20
    db90:	b2d2      	uxtb	r2, r2
    db92:	701a      	strb	r2, [r3, #0]
    db94:	9b01      	ldr	r3, [sp, #4]
    db96:	69db      	ldr	r3, [r3, #28]
    db98:	0c1a      	lsrs	r2, r3, #16
    db9a:	9b00      	ldr	r3, [sp, #0]
    db9c:	3315      	adds	r3, #21
    db9e:	b2d2      	uxtb	r2, r2
    dba0:	701a      	strb	r2, [r3, #0]
    dba2:	9b01      	ldr	r3, [sp, #4]
    dba4:	69db      	ldr	r3, [r3, #28]
    dba6:	0a1a      	lsrs	r2, r3, #8
    dba8:	9b00      	ldr	r3, [sp, #0]
    dbaa:	3316      	adds	r3, #22
    dbac:	b2d2      	uxtb	r2, r2
    dbae:	701a      	strb	r2, [r3, #0]
    dbb0:	9b01      	ldr	r3, [sp, #4]
    dbb2:	69da      	ldr	r2, [r3, #28]
    dbb4:	9b00      	ldr	r3, [sp, #0]
    dbb6:	3317      	adds	r3, #23
    dbb8:	b2d2      	uxtb	r2, r2
    dbba:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    dbbc:	9b01      	ldr	r3, [sp, #4]
    dbbe:	6a1b      	ldr	r3, [r3, #32]
    dbc0:	0e1a      	lsrs	r2, r3, #24
    dbc2:	9b00      	ldr	r3, [sp, #0]
    dbc4:	3318      	adds	r3, #24
    dbc6:	b2d2      	uxtb	r2, r2
    dbc8:	701a      	strb	r2, [r3, #0]
    dbca:	9b01      	ldr	r3, [sp, #4]
    dbcc:	6a1b      	ldr	r3, [r3, #32]
    dbce:	0c1a      	lsrs	r2, r3, #16
    dbd0:	9b00      	ldr	r3, [sp, #0]
    dbd2:	3319      	adds	r3, #25
    dbd4:	b2d2      	uxtb	r2, r2
    dbd6:	701a      	strb	r2, [r3, #0]
    dbd8:	9b01      	ldr	r3, [sp, #4]
    dbda:	6a1b      	ldr	r3, [r3, #32]
    dbdc:	0a1a      	lsrs	r2, r3, #8
    dbde:	9b00      	ldr	r3, [sp, #0]
    dbe0:	331a      	adds	r3, #26
    dbe2:	b2d2      	uxtb	r2, r2
    dbe4:	701a      	strb	r2, [r3, #0]
    dbe6:	9b01      	ldr	r3, [sp, #4]
    dbe8:	6a1a      	ldr	r2, [r3, #32]
    dbea:	9b00      	ldr	r3, [sp, #0]
    dbec:	331b      	adds	r3, #27
    dbee:	b2d2      	uxtb	r2, r2
    dbf0:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
    dbf2:	9b01      	ldr	r3, [sp, #4]
    dbf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dbf6:	2b00      	cmp	r3, #0
    dbf8:	d11a      	bne.n	dc30 <mbedtls_sha256_finish+0x258>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    dbfa:	9b01      	ldr	r3, [sp, #4]
    dbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dbfe:	0e1a      	lsrs	r2, r3, #24
    dc00:	9b00      	ldr	r3, [sp, #0]
    dc02:	331c      	adds	r3, #28
    dc04:	b2d2      	uxtb	r2, r2
    dc06:	701a      	strb	r2, [r3, #0]
    dc08:	9b01      	ldr	r3, [sp, #4]
    dc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dc0c:	0c1a      	lsrs	r2, r3, #16
    dc0e:	9b00      	ldr	r3, [sp, #0]
    dc10:	331d      	adds	r3, #29
    dc12:	b2d2      	uxtb	r2, r2
    dc14:	701a      	strb	r2, [r3, #0]
    dc16:	9b01      	ldr	r3, [sp, #4]
    dc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dc1a:	0a1a      	lsrs	r2, r3, #8
    dc1c:	9b00      	ldr	r3, [sp, #0]
    dc1e:	331e      	adds	r3, #30
    dc20:	b2d2      	uxtb	r2, r2
    dc22:	701a      	strb	r2, [r3, #0]
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    dc28:	9b00      	ldr	r3, [sp, #0]
    dc2a:	331f      	adds	r3, #31
    dc2c:	b2d2      	uxtb	r2, r2
    dc2e:	701a      	strb	r2, [r3, #0]
}
    dc30:	bf00      	nop
    dc32:	b009      	add	sp, #36	; 0x24
    dc34:	f85d fb04 	ldr.w	pc, [sp], #4
    dc38:	0000f348 	.word	0x0000f348

0000dc3c <mbedtls_sha256>:
/*
 * output = SHA-256( input buffer )
 */
void mbedtls_sha256( const unsigned char *input, size_t ilen,
             unsigned char output[32], int is224, mbedtls_sha256_context ctx)
{
    dc3c:	b500      	push	{lr}
    dc3e:	b085      	sub	sp, #20
    dc40:	9003      	str	r0, [sp, #12]
    dc42:	9102      	str	r1, [sp, #8]
    dc44:	9201      	str	r2, [sp, #4]
    dc46:	9300      	str	r3, [sp, #0]
//    mbedtls_sha256_context ctx;

//    mbedtls_sha256_init( &ctx );
    mbedtls_sha256_starts( &ctx, is224 );
    dc48:	9900      	ldr	r1, [sp, #0]
    dc4a:	a806      	add	r0, sp, #24
    dc4c:	f7fe fb16 	bl	c27c <mbedtls_sha256_starts>
    mbedtls_sha256_update( &ctx, input, ilen );
    dc50:	9a02      	ldr	r2, [sp, #8]
    dc52:	9903      	ldr	r1, [sp, #12]
    dc54:	a806      	add	r0, sp, #24
    dc56:	f7ff fe59 	bl	d90c <mbedtls_sha256_update>
    mbedtls_sha256_finish( &ctx, output );
    dc5a:	9901      	ldr	r1, [sp, #4]
    dc5c:	a806      	add	r0, sp, #24
    dc5e:	f7ff febb 	bl	d9d8 <mbedtls_sha256_finish>
    mbedtls_sha256_free( &ctx );
    dc62:	a806      	add	r0, sp, #24
    dc64:	f7fe fafa 	bl	c25c <mbedtls_sha256_free>
}
    dc68:	bf00      	nop
    dc6a:	b005      	add	sp, #20
    dc6c:	f85d fb04 	ldr.w	pc, [sp], #4

0000dc70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    dc70:	b082      	sub	sp, #8
    dc72:	4603      	mov	r3, r0
    dc74:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
    dc78:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	db0c      	blt.n	dc9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dc84:	f003 021f 	and.w	r2, r3, #31
    dc88:	4905      	ldr	r1, [pc, #20]	; (dca0 <__NVIC_EnableIRQ+0x30>)
    dc8a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    dc8e:	095b      	lsrs	r3, r3, #5
    dc90:	2001      	movs	r0, #1
    dc92:	fa00 f202 	lsl.w	r2, r0, r2
    dc96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
    dc9a:	bf00      	nop
    dc9c:	b002      	add	sp, #8
    dc9e:	4770      	bx	lr
    dca0:	e000e100 	.word	0xe000e100

0000dca4 <error_handler>:

volatile uint32_t ui32LastError;

// Catch HAL errors
void error_handler(uint32_t ui32ErrorStatus)
{
    dca4:	b082      	sub	sp, #8
    dca6:	9001      	str	r0, [sp, #4]
    ui32LastError = ui32ErrorStatus;
    dca8:	4a01      	ldr	r2, [pc, #4]	; (dcb0 <error_handler+0xc>)
    dcaa:	9b01      	ldr	r3, [sp, #4]
    dcac:	6013      	str	r3, [r2, #0]
    while (1);
    dcae:	e7fe      	b.n	dcae <error_handler+0xa>
    dcb0:	1000100c 	.word	0x1000100c

0000dcb4 <am_uart_isr>:
    .ui32RxBufferSize = sizeof(g_pui8RxBuffer),
};

// UART0 interrupt handler
void am_uart_isr(void)
{
    dcb4:	b500      	push	{lr}
    dcb6:	b083      	sub	sp, #12
    // Service the FIFOs as necessary, and clear the interrupts
    uint32_t ui32Status, ui32Idle;
    am_hal_uart_interrupt_status_get(phUART, &ui32Status, true);
    dcb8:	4b0c      	ldr	r3, [pc, #48]	; (dcec <am_uart_isr+0x38>)
    dcba:	681b      	ldr	r3, [r3, #0]
    dcbc:	a901      	add	r1, sp, #4
    dcbe:	2201      	movs	r2, #1
    dcc0:	4618      	mov	r0, r3
    dcc2:	f001 f993 	bl	efec <am_hal_uart_interrupt_status_get>
    am_hal_uart_interrupt_clear(phUART, ui32Status);
    dcc6:	4b09      	ldr	r3, [pc, #36]	; (dcec <am_uart_isr+0x38>)
    dcc8:	681b      	ldr	r3, [r3, #0]
    dcca:	9a01      	ldr	r2, [sp, #4]
    dccc:	4611      	mov	r1, r2
    dcce:	4618      	mov	r0, r3
    dcd0:	f001 f97a 	bl	efc8 <am_hal_uart_interrupt_clear>
    am_hal_uart_interrupt_service(phUART, ui32Status, &ui32Idle);
    dcd4:	4b05      	ldr	r3, [pc, #20]	; (dcec <am_uart_isr+0x38>)
    dcd6:	681b      	ldr	r3, [r3, #0]
    dcd8:	9901      	ldr	r1, [sp, #4]
    dcda:	466a      	mov	r2, sp
    dcdc:	4618      	mov	r0, r3
    dcde:	f001 f8d7 	bl	ee90 <am_hal_uart_interrupt_service>
}
    dce2:	bf00      	nop
    dce4:	b003      	add	sp, #12
    dce6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcea:	bf00      	nop
    dcec:	10001008 	.word	0x10001008

0000dcf0 <uart_print>:

// UART print string
void uart_print(char *pcStr)
{
    dcf0:	b500      	push	{lr}
    dcf2:	b08b      	sub	sp, #44	; 0x2c
    dcf4:	9001      	str	r0, [sp, #4]
    uint32_t ui32StrLen = 0;
    dcf6:	2300      	movs	r3, #0
    dcf8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t ui32BytesWritten = 0;
    dcfa:	2300      	movs	r3, #0
    dcfc:	9308      	str	r3, [sp, #32]

    // Measure the length of the string
    while (pcStr[ui32StrLen] != 0){
    dcfe:	e002      	b.n	dd06 <uart_print+0x16>
        ui32StrLen++;
    dd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd02:	3301      	adds	r3, #1
    dd04:	9309      	str	r3, [sp, #36]	; 0x24
    while (pcStr[ui32StrLen] != 0){
    dd06:	9a01      	ldr	r2, [sp, #4]
    dd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd0a:	4413      	add	r3, r2
    dd0c:	781b      	ldrb	r3, [r3, #0]
    dd0e:	2b00      	cmp	r3, #0
    dd10:	d1f6      	bne.n	dd00 <uart_print+0x10>
    }

    // Print the string via the UART
    const am_hal_uart_transfer_t sUartWrite =
    dd12:	2300      	movs	r3, #0
    dd14:	9303      	str	r3, [sp, #12]
    dd16:	9b01      	ldr	r3, [sp, #4]
    dd18:	9304      	str	r3, [sp, #16]
    dd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd1c:	9305      	str	r3, [sp, #20]
    dd1e:	2300      	movs	r3, #0
    dd20:	9306      	str	r3, [sp, #24]
    dd22:	ab08      	add	r3, sp, #32
    dd24:	9307      	str	r3, [sp, #28]
        .ui32NumBytes = ui32StrLen,
        .ui32TimeoutMs = 0,
        .pui32BytesTransferred = &ui32BytesWritten,
    };

    CHECK_ERRORS(am_hal_uart_transfer(phUART, &sUartWrite));
    dd26:	4b0f      	ldr	r3, [pc, #60]	; (dd64 <uart_print+0x74>)
    dd28:	681b      	ldr	r3, [r3, #0]
    dd2a:	aa03      	add	r2, sp, #12
    dd2c:	4611      	mov	r1, r2
    dd2e:	4618      	mov	r0, r3
    dd30:	f000 feae 	bl	ea90 <am_hal_uart_transfer>
    dd34:	4603      	mov	r3, r0
    dd36:	2b00      	cmp	r3, #0
    dd38:	d00a      	beq.n	dd50 <uart_print+0x60>
    dd3a:	4b0a      	ldr	r3, [pc, #40]	; (dd64 <uart_print+0x74>)
    dd3c:	681b      	ldr	r3, [r3, #0]
    dd3e:	aa03      	add	r2, sp, #12
    dd40:	4611      	mov	r1, r2
    dd42:	4618      	mov	r0, r3
    dd44:	f000 fea4 	bl	ea90 <am_hal_uart_transfer>
    dd48:	4603      	mov	r3, r0
    dd4a:	4618      	mov	r0, r3
    dd4c:	f7ff ffaa 	bl	dca4 <error_handler>

    if (ui32BytesWritten != ui32StrLen)
    dd50:	9b08      	ldr	r3, [sp, #32]
    dd52:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dd54:	429a      	cmp	r2, r3
    dd56:	d000      	beq.n	dd5a <uart_print+0x6a>
    {
        // Couldn't send the whole string!!
        while(1);
    dd58:	e7fe      	b.n	dd58 <uart_print+0x68>
    }
}
    dd5a:	bf00      	nop
    dd5c:	b00b      	add	sp, #44	; 0x2c
    dd5e:	f85d fb04 	ldr.w	pc, [sp], #4
    dd62:	bf00      	nop
    dd64:	10001008 	.word	0x10001008

0000dd68 <init_sha>:
    sha256_init(&ctx);
#endif
#ifdef mbedtls_aes
    mbedtls_sha256_init(&ctx);
#endif
}
    dd68:	bf00      	nop
    dd6a:	4770      	bx	lr

0000dd6c <test_sha256>:

void test_sha256()
{
    dd6c:	b510      	push	{r4, lr}
    dd6e:	b09c      	sub	sp, #112	; 0x70
#ifdef saddi_sha
    sha256_update(&ctx, data, len);
    sha256_final(&ctx, hash);
#endif
#ifdef mbedtls_sha
    mbedtls_sha256(data, len, hash, 0, ctx);
    dd70:	4b08      	ldr	r3, [pc, #32]	; (dd94 <test_sha256+0x28>)
    dd72:	681c      	ldr	r4, [r3, #0]
    dd74:	4a08      	ldr	r2, [pc, #32]	; (dd98 <test_sha256+0x2c>)
    dd76:	466b      	mov	r3, sp
    dd78:	4611      	mov	r1, r2
    dd7a:	226c      	movs	r2, #108	; 0x6c
    dd7c:	4618      	mov	r0, r3
    dd7e:	f7fe f9bf 	bl	c100 <memcpy>
    dd82:	2300      	movs	r3, #0
    dd84:	4a05      	ldr	r2, [pc, #20]	; (dd9c <test_sha256+0x30>)
    dd86:	4621      	mov	r1, r4
    dd88:	4805      	ldr	r0, [pc, #20]	; (dda0 <test_sha256+0x34>)
    dd8a:	f7ff ff57 	bl	dc3c <mbedtls_sha256>
#endif
// hash now contains the output of SHA-256
}
    dd8e:	bf00      	nop
    dd90:	b01c      	add	sp, #112	; 0x70
    dd92:	bd10      	pop	{r4, pc}
    dd94:	10001004 	.word	0x10001004
    dd98:	10001134 	.word	0x10001134
    dd9c:	10001114 	.word	0x10001114
    dda0:	10001000 	.word	0x10001000

0000dda4 <init>:
//int check_result()
//{
//    return memcmp((uint8_t*) hash, (uint8_t*) check_sha256, DIGEST_BYTES);
//}

void init(void){
    dda4:	b500      	push	{lr}
    dda6:	b093      	sub	sp, #76	; 0x4c
    am_util_id_t sIdDevice;
    uint32_t ui32StrBuf;

    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    dda8:	2100      	movs	r1, #0
    ddaa:	2000      	movs	r0, #0
    ddac:	f000 f9ae 	bl	e10c <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    ddb0:	482a      	ldr	r0, [pc, #168]	; (de5c <init+0xb8>)
    ddb2:	f000 f97d 	bl	e0b0 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    ddb6:	f000 f99f 	bl	e0f8 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    // am_bsp_low_power_init();

    // Initialize the printf interface for UART output
    CHECK_ERRORS(am_hal_uart_initialize(0, &phUART));
    ddba:	4929      	ldr	r1, [pc, #164]	; (de60 <init+0xbc>)
    ddbc:	2000      	movs	r0, #0
    ddbe:	f000 fcab 	bl	e718 <am_hal_uart_initialize>
    ddc2:	4603      	mov	r3, r0
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d007      	beq.n	ddd8 <init+0x34>
    ddc8:	4925      	ldr	r1, [pc, #148]	; (de60 <init+0xbc>)
    ddca:	2000      	movs	r0, #0
    ddcc:	f000 fca4 	bl	e718 <am_hal_uart_initialize>
    ddd0:	4603      	mov	r3, r0
    ddd2:	4618      	mov	r0, r3
    ddd4:	f7ff ff66 	bl	dca4 <error_handler>
    CHECK_ERRORS(am_hal_uart_power_control(phUART, AM_HAL_SYSCTRL_WAKE, false));
    ddd8:	4b21      	ldr	r3, [pc, #132]	; (de60 <init+0xbc>)
    ddda:	681b      	ldr	r3, [r3, #0]
    dddc:	2200      	movs	r2, #0
    ddde:	2100      	movs	r1, #0
    dde0:	4618      	mov	r0, r3
    dde2:	f000 fcc1 	bl	e768 <am_hal_uart_power_control>
    dde6:	4603      	mov	r3, r0
    dde8:	2b00      	cmp	r3, #0
    ddea:	d00a      	beq.n	de02 <init+0x5e>
    ddec:	4b1c      	ldr	r3, [pc, #112]	; (de60 <init+0xbc>)
    ddee:	681b      	ldr	r3, [r3, #0]
    ddf0:	2200      	movs	r2, #0
    ddf2:	2100      	movs	r1, #0
    ddf4:	4618      	mov	r0, r3
    ddf6:	f000 fcb7 	bl	e768 <am_hal_uart_power_control>
    ddfa:	4603      	mov	r3, r0
    ddfc:	4618      	mov	r0, r3
    ddfe:	f7ff ff51 	bl	dca4 <error_handler>
    CHECK_ERRORS(am_hal_uart_configure(phUART, &g_sUartConfig));
    de02:	4b17      	ldr	r3, [pc, #92]	; (de60 <init+0xbc>)
    de04:	681b      	ldr	r3, [r3, #0]
    de06:	4917      	ldr	r1, [pc, #92]	; (de64 <init+0xc0>)
    de08:	4618      	mov	r0, r3
    de0a:	f000 fd31 	bl	e870 <am_hal_uart_configure>
    de0e:	4603      	mov	r3, r0
    de10:	2b00      	cmp	r3, #0
    de12:	d009      	beq.n	de28 <init+0x84>
    de14:	4b12      	ldr	r3, [pc, #72]	; (de60 <init+0xbc>)
    de16:	681b      	ldr	r3, [r3, #0]
    de18:	4912      	ldr	r1, [pc, #72]	; (de64 <init+0xc0>)
    de1a:	4618      	mov	r0, r3
    de1c:	f000 fd28 	bl	e870 <am_hal_uart_configure>
    de20:	4603      	mov	r3, r0
    de22:	4618      	mov	r0, r3
    de24:	f7ff ff3e 	bl	dca4 <error_handler>

    // Enable the UART pins
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_TX, g_AM_BSP_GPIO_COM_UART_TX);
    de28:	4b0f      	ldr	r3, [pc, #60]	; (de68 <init+0xc4>)
    de2a:	6819      	ldr	r1, [r3, #0]
    de2c:	2016      	movs	r0, #22
    de2e:	f000 fa37 	bl	e2a0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_COM_UART_RX, g_AM_BSP_GPIO_COM_UART_RX);
    de32:	4b0e      	ldr	r3, [pc, #56]	; (de6c <init+0xc8>)
    de34:	6819      	ldr	r1, [r3, #0]
    de36:	2017      	movs	r0, #23
    de38:	f000 fa32 	bl	e2a0 <am_hal_gpio_pinconfig>

    // Enable interrupts
    NVIC_EnableIRQ((IRQn_Type)(UART0_IRQn + AM_BSP_UART_PRINT_INST));
    de3c:	200f      	movs	r0, #15
    de3e:	f7ff ff17 	bl	dc70 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    de42:	f000 fba7 	bl	e594 <am_hal_interrupt_master_enable>

    // Set the main print interface to use the UART print function we defined
    am_util_stdio_printf_init(uart_print);
    de46:	480a      	ldr	r0, [pc, #40]	; (de70 <init+0xcc>)
    de48:	f000 f8ee 	bl	e028 <am_util_stdio_printf_init>
    //// Configure GPIO for measurement
    //am_hal_gpio_pinconfig(1, g_AM_HAL_GPIO_OUTPUT);
    //am_hal_gpio_state_write(1, AM_HAL_GPIO_OUTPUT_CLEAR);

    // Configure the system timer
    am_hal_stimer_config(AM_HAL_STIMER_CFG_THAW | AM_HAL_STIMER_HFRC_3MHZ);
    de4c:	2001      	movs	r0, #1
    de4e:	f000 fc49 	bl	e6e4 <am_hal_stimer_config>

}
    de52:	bf00      	nop
    de54:	b013      	add	sp, #76	; 0x4c
    de56:	f85d fb04 	ldr.w	pc, [sp], #4
    de5a:	bf00      	nop
    de5c:	0000f3b0 	.word	0x0000f3b0
    de60:	10001008 	.word	0x10001008
    de64:	0000f388 	.word	0x0000f388
    de68:	0000f664 	.word	0x0000f664
    de6c:	0000f660 	.word	0x0000f660
    de70:	0000dcf1 	.word	0x0000dcf1

0000de74 <main>:
//
// Main
//
//*****************************************************************************
int main(void)
{
    de74:	b500      	push	{lr}
    de76:	b085      	sub	sp, #20
  init();
    de78:	f7ff ff94 	bl	dda4 <init>
  am_hal_gpio_state_write(1, AM_HAL_GPIO_OUTPUT_CLEAR);
    de7c:	2100      	movs	r1, #0
    de7e:	2001      	movs	r0, #1
    de80:	f000 fb44 	bl	e50c <am_hal_gpio_state_write>
  am_util_delay_us(20);
    de84:	2014      	movs	r0, #20
    de86:	f000 f82d 	bl	dee4 <am_util_delay_us>

  uint32_t startClock, stopClock, shaTime;

  init_sha();
    de8a:	f7ff ff6d 	bl	dd68 <init_sha>

  // volatile int result;

  /** Choose the function to be called **/
  /** Encrypt or decrypt possibly many times **/
  startClock = am_hal_stimer_counter_get();
    de8e:	f000 fc33 	bl	e6f8 <am_hal_stimer_counter_get>
    de92:	9002      	str	r0, [sp, #8]
  am_hal_gpio_state_write(1, AM_HAL_GPIO_OUTPUT_SET);
    de94:	2101      	movs	r1, #1
    de96:	2001      	movs	r0, #1
    de98:	f000 fb38 	bl	e50c <am_hal_gpio_state_write>
  #if defined gladman_sha || defined mbedtls_sha || defined saddi_sha
      test_sha256();
    de9c:	f7ff ff66 	bl	dd6c <test_sha256>
      //result = test_encrypt();  // for slow_tiny_aes, test_AES_encrypt/decrypt does the testing for us
      //result = test_decrypt();  // for slow_tiny_aes, test_AES_encrypt/decrypt does the testing for us
  #endif
  am_hal_gpio_state_write(1, AM_HAL_GPIO_OUTPUT_CLEAR);
    dea0:	2100      	movs	r1, #0
    dea2:	2001      	movs	r0, #1
    dea4:	f000 fb32 	bl	e50c <am_hal_gpio_state_write>
  stopClock = am_hal_stimer_counter_get();
    dea8:	f000 fc26 	bl	e6f8 <am_hal_stimer_counter_get>
    deac:	9001      	str	r0, [sp, #4]
//    am_hal_gpio_state_write(44, AM_HAL_GPIO_OUTPUT_SET);
//  }else{
//    am_hal_gpio_state_write(46, AM_HAL_GPIO_OUTPUT_SET);
//  }

  am_hal_gpio_state_write(46, AM_HAL_GPIO_OUTPUT_SET);
    deae:	2101      	movs	r1, #1
    deb0:	202e      	movs	r0, #46	; 0x2e
    deb2:	f000 fb2b 	bl	e50c <am_hal_gpio_state_write>

  if(stopClock < startClock){ // Overflow
    deb6:	9a01      	ldr	r2, [sp, #4]
    deb8:	9b02      	ldr	r3, [sp, #8]
    deba:	429a      	cmp	r2, r3
    debc:	d205      	bcs.n	deca <main+0x56>
    shaTime = (0xFFFFFFFF - startClock) + stopClock;
    debe:	9a01      	ldr	r2, [sp, #4]
    dec0:	9b02      	ldr	r3, [sp, #8]
    dec2:	1ad3      	subs	r3, r2, r3
    dec4:	3b01      	subs	r3, #1
    dec6:	9303      	str	r3, [sp, #12]
    dec8:	e003      	b.n	ded2 <main+0x5e>
  }else{
    shaTime = stopClock - startClock;
    deca:	9a01      	ldr	r2, [sp, #4]
    decc:	9b02      	ldr	r3, [sp, #8]
    dece:	1ad3      	subs	r3, r2, r3
    ded0:	9303      	str	r3, [sp, #12]
  }

  shaTime /= 3;   // Convert from 3 MHz frequency to us
    ded2:	9b03      	ldr	r3, [sp, #12]
    ded4:	4a02      	ldr	r2, [pc, #8]	; (dee0 <main+0x6c>)
    ded6:	fba2 2303 	umull	r2, r3, r2, r3
    deda:	085b      	lsrs	r3, r3, #1
    dedc:	9303      	str	r3, [sp, #12]

  //am_util_stdio_terminal_clear();
  //am_util_stdio_printf("Encryption time: %u us\r\n", aesTime);

  while(1);
    dede:	e7fe      	b.n	dede <main+0x6a>
    dee0:	aaaaaaab 	.word	0xaaaaaaab

0000dee4 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
    dee4:	b500      	push	{lr}
    dee6:	b089      	sub	sp, #36	; 0x24
    dee8:	9001      	str	r0, [sp, #4]
#else // AM_PART_APOLLO4
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    deea:	ab03      	add	r3, sp, #12
    deec:	4618      	mov	r0, r3
    deee:	f000 f9a9 	bl	e244 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    def2:	9b03      	ldr	r3, [sp, #12]
    def4:	9307      	str	r3, [sp, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
    def6:	9b07      	ldr	r3, [sp, #28]
    def8:	4a07      	ldr	r2, [pc, #28]	; (df18 <am_util_delay_us+0x34>)
    defa:	fba2 2303 	umull	r2, r3, r2, r3
    defe:	0c9a      	lsrs	r2, r3, #18
    df00:	9b01      	ldr	r3, [sp, #4]
    df02:	fb02 f303 	mul.w	r3, r2, r3
    df06:	9306      	str	r3, [sp, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    df08:	9806      	ldr	r0, [sp, #24]
    df0a:	f000 f9b9 	bl	e280 <am_hal_flash_delay>
#endif // AM_PART_APOLLO4
}
    df0e:	bf00      	nop
    df10:	b009      	add	sp, #36	; 0x24
    df12:	f85d fb04 	ldr.w	pc, [sp], #4
    df16:	bf00      	nop
    df18:	165e9f81 	.word	0x165e9f81

0000df1c <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    df1c:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    df1e:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    df22:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    df24:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    df28:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    df2c:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    df30:	f000 f80a 	bl	df48 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    df34:	bd01      	pop	{r0, pc}
}
    df36:	bf00      	nop
    df38:	4618      	mov	r0, r3

0000df3a <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    df3a:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    df3c:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    df3e:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    df40:	4770      	bx	lr
}
    df42:	bf00      	nop
    df44:	4618      	mov	r0, r3
	...

0000df48 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    df48:	b500      	push	{lr}
    df4a:	b097      	sub	sp, #92	; 0x5c
    df4c:	9001      	str	r0, [sp, #4]
    volatile am_fault_t sFaultData;
#if (defined(AM_PART_APOLLO4))
    am_hal_fault_status_t  sHalFaultData = {0};
#else
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    df4e:	ab03      	add	r3, sp, #12
    df50:	2200      	movs	r2, #0
    df52:	601a      	str	r2, [r3, #0]
    df54:	605a      	str	r2, [r3, #4]
    df56:	609a      	str	r2, [r3, #8]
    df58:	60da      	str	r2, [r3, #12]
    df5a:	611a      	str	r2, [r3, #16]
    df5c:	615a      	str	r2, [r3, #20]
#endif // if defined(AM_PART_APOLLO4)

    uint32_t u32Mask = 0;
    df5e:	2300      	movs	r3, #0
    df60:	9315      	str	r3, [sp, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    df62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    df64:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    df66:	4b2e      	ldr	r3, [pc, #184]	; (e020 <am_util_faultisr_collect_data+0xd8>)
    df68:	681b      	ldr	r3, [r3, #0]
    df6a:	9313      	str	r3, [sp, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    df6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df6e:	b2db      	uxtb	r3, r3
    df70:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    df74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df76:	0a1b      	lsrs	r3, r3, #8
    df78:	b2db      	uxtb	r3, r3
    df7a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    df7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df80:	0c1b      	lsrs	r3, r3, #16
    df82:	b29b      	uxth	r3, r3
    df84:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    df88:	4b26      	ldr	r3, [pc, #152]	; (e024 <am_util_faultisr_collect_data+0xdc>)
    df8a:	681b      	ldr	r3, [r3, #0]
    df8c:	9312      	str	r3, [sp, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    df8e:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
    df92:	b2db      	uxtb	r3, r3
    df94:	f003 0302 	and.w	r3, r3, #2
    df98:	2b00      	cmp	r3, #0
    df9a:	d005      	beq.n	dfa8 <am_util_faultisr_collect_data+0x60>
    df9c:	9901      	ldr	r1, [sp, #4]
    df9e:	2006      	movs	r0, #6
    dfa0:	f7ff ffcb 	bl	df3a <getStackedReg>
    dfa4:	4603      	mov	r3, r0
    dfa6:	e001      	b.n	dfac <am_util_faultisr_collect_data+0x64>
    dfa8:	f04f 33ff 	mov.w	r3, #4294967295
    dfac:	9311      	str	r3, [sp, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    dfae:	9901      	ldr	r1, [sp, #4]
    dfb0:	2000      	movs	r0, #0
    dfb2:	f7ff ffc2 	bl	df3a <getStackedReg>
    dfb6:	4603      	mov	r3, r0
    dfb8:	9309      	str	r3, [sp, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    dfba:	9901      	ldr	r1, [sp, #4]
    dfbc:	2001      	movs	r0, #1
    dfbe:	f7ff ffbc 	bl	df3a <getStackedReg>
    dfc2:	4603      	mov	r3, r0
    dfc4:	930a      	str	r3, [sp, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    dfc6:	9901      	ldr	r1, [sp, #4]
    dfc8:	2002      	movs	r0, #2
    dfca:	f7ff ffb6 	bl	df3a <getStackedReg>
    dfce:	4603      	mov	r3, r0
    dfd0:	930b      	str	r3, [sp, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    dfd2:	9901      	ldr	r1, [sp, #4]
    dfd4:	2003      	movs	r0, #3
    dfd6:	f7ff ffb0 	bl	df3a <getStackedReg>
    dfda:	4603      	mov	r3, r0
    dfdc:	930c      	str	r3, [sp, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    dfde:	9901      	ldr	r1, [sp, #4]
    dfe0:	2004      	movs	r0, #4
    dfe2:	f7ff ffaa 	bl	df3a <getStackedReg>
    dfe6:	4603      	mov	r3, r0
    dfe8:	930d      	str	r3, [sp, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    dfea:	9901      	ldr	r1, [sp, #4]
    dfec:	2005      	movs	r0, #5
    dfee:	f7ff ffa4 	bl	df3a <getStackedReg>
    dff2:	4603      	mov	r3, r0
    dff4:	930e      	str	r3, [sp, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    dff6:	9901      	ldr	r1, [sp, #4]
    dff8:	2006      	movs	r0, #6
    dffa:	f7ff ff9e 	bl	df3a <getStackedReg>
    dffe:	4603      	mov	r3, r0
    e000:	930f      	str	r3, [sp, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    e002:	9901      	ldr	r1, [sp, #4]
    e004:	2007      	movs	r0, #7
    e006:	f7ff ff98 	bl	df3a <getStackedReg>
    e00a:	4603      	mov	r3, r0
    e00c:	9310      	str	r3, [sp, #64]	; 0x40
    //
#if (defined(AM_PART_APOLLO4))
    am_hal_fault_status_get(&sHalFaultData);
#else
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    e00e:	ab03      	add	r3, sp, #12
    e010:	4619      	mov	r1, r3
    e012:	2002      	movs	r0, #2
    e014:	f000 faca 	bl	e5ac <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
    e018:	2300      	movs	r3, #0
    e01a:	9315      	str	r3, [sp, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while (1)
    e01c:	bf00      	nop
    e01e:	e7fd      	b.n	e01c <am_util_faultisr_collect_data+0xd4>
    e020:	e000ed28 	.word	0xe000ed28
    e024:	e000ed38 	.word	0xe000ed38

0000e028 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    e028:	b082      	sub	sp, #8
    e02a:	9001      	str	r0, [sp, #4]
    g_pfnCharPrint = pfnCharPrint;
    e02c:	4a02      	ldr	r2, [pc, #8]	; (e038 <am_util_stdio_printf_init+0x10>)
    e02e:	9b01      	ldr	r3, [sp, #4]
    e030:	6013      	str	r3, [r2, #0]
}
    e032:	bf00      	nop
    e034:	b002      	add	sp, #8
    e036:	4770      	bx	lr
    e038:	100011a0 	.word	0x100011a0

0000e03c <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    e03c:	4811      	ldr	r0, [pc, #68]	; (e084 <zero_loop+0x12>)
    e03e:	4912      	ldr	r1, [pc, #72]	; (e088 <zero_loop+0x16>)
    e040:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    e042:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    e046:	4811      	ldr	r0, [pc, #68]	; (e08c <zero_loop+0x1a>)
    e048:	6801      	ldr	r1, [r0, #0]
    e04a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    e04e:	6001      	str	r1, [r0, #0]
    e050:	f3bf 8f4f 	dsb	sy
    e054:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    e058:	480d      	ldr	r0, [pc, #52]	; (e090 <zero_loop+0x1e>)
    e05a:	490e      	ldr	r1, [pc, #56]	; (e094 <zero_loop+0x22>)
    e05c:	4a0e      	ldr	r2, [pc, #56]	; (e098 <zero_loop+0x26>)

0000e05e <copy_loop>:
    e05e:	f850 3b04 	ldr.w	r3, [r0], #4
    e062:	f841 3b04 	str.w	r3, [r1], #4
    e066:	4291      	cmp	r1, r2
    e068:	dbf9      	blt.n	e05e <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    e06a:	480c      	ldr	r0, [pc, #48]	; (e09c <zero_loop+0x2a>)
    e06c:	490c      	ldr	r1, [pc, #48]	; (e0a0 <zero_loop+0x2e>)
    e06e:	f04f 0200 	mov.w	r2, #0

0000e072 <zero_loop>:
    e072:	4288      	cmp	r0, r1
    e074:	bfb8      	it	lt
    e076:	f840 2b04 	strlt.w	r2, [r0], #4
    e07a:	dbfa      	blt.n	e072 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    e07c:	f7ff fefa 	bl	de74 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    e080:	be00      	bkpt	0x0000
}
    e082:	bf00      	nop
    e084:	e000ed08 	.word	0xe000ed08
    e088:	0000c000 	.word	0x0000c000
    e08c:	e000ed88 	.word	0xe000ed88
    e090:	0000f668 	.word	0x0000f668
    e094:	10001000 	.word	0x10001000
    e098:	10001008 	.word	0x10001008
    e09c:	10001008 	.word	0x10001008
    e0a0:	10001278 	.word	0x10001278

0000e0a4 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e0a4:	bf00      	nop
    e0a6:	e7fd      	b.n	e0a4 <NMI_Handler>

0000e0a8 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e0a8:	bf00      	nop
    e0aa:	e7fd      	b.n	e0a8 <BusFault_Handler>

0000e0ac <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    e0ac:	bf00      	nop
    e0ae:	e7fd      	b.n	e0ac <DebugMon_Handler>

0000e0b0 <am_hal_cachectrl_config>:
    e0b0:	b530      	push	{r4, r5, lr}
    e0b2:	b083      	sub	sp, #12
    e0b4:	4604      	mov	r4, r0
    e0b6:	f000 fa71 	bl	e59c <am_hal_interrupt_master_disable>
    e0ba:	4d0e      	ldr	r5, [pc, #56]	; (e0f4 <am_hal_cachectrl_config+0x44>)
    e0bc:	9001      	str	r0, [sp, #4]
    e0be:	682b      	ldr	r3, [r5, #0]
    e0c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    e0c4:	602b      	str	r3, [r5, #0]
    e0c6:	9801      	ldr	r0, [sp, #4]
    e0c8:	f000 fa6c 	bl	e5a4 <am_hal_interrupt_master_set>
    e0cc:	7863      	ldrb	r3, [r4, #1]
    e0ce:	7822      	ldrb	r2, [r4, #0]
    e0d0:	78a1      	ldrb	r1, [r4, #2]
    e0d2:	021b      	lsls	r3, r3, #8
    e0d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    e0d8:	0112      	lsls	r2, r2, #4
    e0da:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    e0de:	b2d2      	uxtb	r2, r2
    e0e0:	4313      	orrs	r3, r2
    e0e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e0e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    e0ea:	2000      	movs	r0, #0
    e0ec:	602b      	str	r3, [r5, #0]
    e0ee:	b003      	add	sp, #12
    e0f0:	bd30      	pop	{r4, r5, pc}
    e0f2:	bf00      	nop
    e0f4:	40018000 	.word	0x40018000

0000e0f8 <am_hal_cachectrl_enable>:
    e0f8:	4a03      	ldr	r2, [pc, #12]	; (e108 <am_hal_cachectrl_enable+0x10>)
    e0fa:	6813      	ldr	r3, [r2, #0]
    e0fc:	f043 0301 	orr.w	r3, r3, #1
    e100:	2000      	movs	r0, #0
    e102:	6013      	str	r3, [r2, #0]
    e104:	4770      	bx	lr
    e106:	bf00      	nop
    e108:	40018000 	.word	0x40018000

0000e10c <am_hal_clkgen_control>:
    e10c:	4b49      	ldr	r3, [pc, #292]	; (e234 <am_hal_clkgen_control+0x128>)
    e10e:	681a      	ldr	r2, [r3, #0]
    e110:	b912      	cbnz	r2, e118 <am_hal_clkgen_control+0xc>
    e112:	4a49      	ldr	r2, [pc, #292]	; (e238 <am_hal_clkgen_control+0x12c>)
    e114:	6812      	ldr	r2, [r2, #0]
    e116:	601a      	str	r2, [r3, #0]
    e118:	2809      	cmp	r0, #9
    e11a:	f200 8089 	bhi.w	e230 <am_hal_clkgen_control+0x124>
    e11e:	e8df f000 	tbb	[pc, r0]
    e122:	160d      	.short	0x160d
    e124:	423a261e 	.word	0x423a261e
    e128:	055c544c 	.word	0x055c544c
    e12c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e130:	2000      	movs	r0, #0
    e132:	6a1a      	ldr	r2, [r3, #32]
    e134:	f36f 0200 	bfc	r2, #0, #1
    e138:	621a      	str	r2, [r3, #32]
    e13a:	4770      	bx	lr
    e13c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e140:	2200      	movs	r2, #0
    e142:	2147      	movs	r1, #71	; 0x47
    e144:	6159      	str	r1, [r3, #20]
    e146:	4610      	mov	r0, r2
    e148:	619a      	str	r2, [r3, #24]
    e14a:	615a      	str	r2, [r3, #20]
    e14c:	4770      	bx	lr
    e14e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e152:	2000      	movs	r0, #0
    e154:	68da      	ldr	r2, [r3, #12]
    e156:	f36f 0200 	bfc	r2, #0, #1
    e15a:	60da      	str	r2, [r3, #12]
    e15c:	4770      	bx	lr
    e15e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e162:	2000      	movs	r0, #0
    e164:	68da      	ldr	r2, [r3, #12]
    e166:	f36f 0241 	bfc	r2, #1, #1
    e16a:	60da      	str	r2, [r3, #12]
    e16c:	4770      	bx	lr
    e16e:	4a33      	ldr	r2, [pc, #204]	; (e23c <am_hal_clkgen_control+0x130>)
    e170:	68d3      	ldr	r3, [r2, #12]
    e172:	b2db      	uxtb	r3, r3
    e174:	2b21      	cmp	r3, #33	; 0x21
    e176:	d106      	bne.n	e186 <am_hal_clkgen_control+0x7a>
    e178:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    e17c:	2101      	movs	r1, #1
    e17e:	f361 2309 	bfi	r3, r1, #8, #2
    e182:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e186:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e18a:	2000      	movs	r0, #0
    e18c:	68d3      	ldr	r3, [r2, #12]
    e18e:	f043 0301 	orr.w	r3, r3, #1
    e192:	60d3      	str	r3, [r2, #12]
    e194:	4770      	bx	lr
    e196:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e19a:	2000      	movs	r0, #0
    e19c:	68d3      	ldr	r3, [r2, #12]
    e19e:	f043 0302 	orr.w	r3, r3, #2
    e1a2:	60d3      	str	r3, [r2, #12]
    e1a4:	4770      	bx	lr
    e1a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e1aa:	2200      	movs	r2, #0
    e1ac:	2047      	movs	r0, #71	; 0x47
    e1ae:	2101      	movs	r1, #1
    e1b0:	6158      	str	r0, [r3, #20]
    e1b2:	6199      	str	r1, [r3, #24]
    e1b4:	4610      	mov	r0, r2
    e1b6:	615a      	str	r2, [r3, #20]
    e1b8:	4770      	bx	lr
    e1ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e1be:	2000      	movs	r0, #0
    e1c0:	68da      	ldr	r2, [r3, #12]
    e1c2:	f36f 12c7 	bfc	r2, #7, #1
    e1c6:	60da      	str	r2, [r3, #12]
    e1c8:	4770      	bx	lr
    e1ca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e1ce:	2000      	movs	r0, #0
    e1d0:	68d3      	ldr	r3, [r2, #12]
    e1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e1d6:	60d3      	str	r3, [r2, #12]
    e1d8:	4770      	bx	lr
    e1da:	4a18      	ldr	r2, [pc, #96]	; (e23c <am_hal_clkgen_control+0x130>)
    e1dc:	68d3      	ldr	r3, [r2, #12]
    e1de:	b2db      	uxtb	r3, r3
    e1e0:	2b21      	cmp	r3, #33	; 0x21
    e1e2:	d00a      	beq.n	e1fa <am_hal_clkgen_control+0xee>
    e1e4:	b139      	cbz	r1, e1f6 <am_hal_clkgen_control+0xea>
    e1e6:	680b      	ldr	r3, [r1, #0]
    e1e8:	f043 0301 	orr.w	r3, r3, #1
    e1ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e1f0:	2000      	movs	r0, #0
    e1f2:	6213      	str	r3, [r2, #32]
    e1f4:	4770      	bx	lr
    e1f6:	4b12      	ldr	r3, [pc, #72]	; (e240 <am_hal_clkgen_control+0x134>)
    e1f8:	e7f8      	b.n	e1ec <am_hal_clkgen_control+0xe0>
    e1fa:	b500      	push	{lr}
    e1fc:	b083      	sub	sp, #12
    e1fe:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e202:	9101      	str	r1, [sp, #4]
    e204:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    e208:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e20c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    e210:	f000 f836 	bl	e280 <am_hal_flash_delay>
    e214:	9901      	ldr	r1, [sp, #4]
    e216:	b149      	cbz	r1, e22c <am_hal_clkgen_control+0x120>
    e218:	680b      	ldr	r3, [r1, #0]
    e21a:	f043 0301 	orr.w	r3, r3, #1
    e21e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e222:	2000      	movs	r0, #0
    e224:	6213      	str	r3, [r2, #32]
    e226:	b003      	add	sp, #12
    e228:	f85d fb04 	ldr.w	pc, [sp], #4
    e22c:	4b04      	ldr	r3, [pc, #16]	; (e240 <am_hal_clkgen_control+0x134>)
    e22e:	e7f6      	b.n	e21e <am_hal_clkgen_control+0x112>
    e230:	2006      	movs	r0, #6
    e232:	4770      	bx	lr
    e234:	100011a4 	.word	0x100011a4
    e238:	4ffff000 	.word	0x4ffff000
    e23c:	40020000 	.word	0x40020000
    e240:	0025b801 	.word	0x0025b801

0000e244 <am_hal_clkgen_status_get>:
    e244:	b1b0      	cbz	r0, e274 <am_hal_clkgen_status_get+0x30>
    e246:	b410      	push	{r4}
    e248:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
    e24c:	4603      	mov	r3, r0
    e24e:	698c      	ldr	r4, [r1, #24]
    e250:	4809      	ldr	r0, [pc, #36]	; (e278 <am_hal_clkgen_status_get+0x34>)
    e252:	4a0a      	ldr	r2, [pc, #40]	; (e27c <am_hal_clkgen_status_get+0x38>)
    e254:	f014 0f01 	tst.w	r4, #1
    e258:	bf08      	it	eq
    e25a:	4602      	moveq	r2, r0
    e25c:	601a      	str	r2, [r3, #0]
    e25e:	69ca      	ldr	r2, [r1, #28]
    e260:	f85d 4b04 	ldr.w	r4, [sp], #4
    e264:	f002 0101 	and.w	r1, r2, #1
    e268:	f3c2 0240 	ubfx	r2, r2, #1, #1
    e26c:	2000      	movs	r0, #0
    e26e:	6059      	str	r1, [r3, #4]
    e270:	721a      	strb	r2, [r3, #8]
    e272:	4770      	bx	lr
    e274:	2006      	movs	r0, #6
    e276:	4770      	bx	lr
    e278:	02dc6c00 	.word	0x02dc6c00
    e27c:	016e3600 	.word	0x016e3600

0000e280 <am_hal_flash_delay>:
    e280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e286:	075b      	lsls	r3, r3, #29
    e288:	bf46      	itte	mi
    e28a:	0040      	lslmi	r0, r0, #1
    e28c:	230e      	movmi	r3, #14
    e28e:	230b      	movpl	r3, #11
    e290:	4298      	cmp	r0, r3
    e292:	d902      	bls.n	e29a <am_hal_flash_delay+0x1a>
    e294:	4a01      	ldr	r2, [pc, #4]	; (e29c <am_hal_flash_delay+0x1c>)
    e296:	1ac0      	subs	r0, r0, r3
    e298:	4710      	bx	r2
    e29a:	4770      	bx	lr
    e29c:	0800009d 	.word	0x0800009d

0000e2a0 <am_hal_gpio_pinconfig>:
    e2a0:	2831      	cmp	r0, #49	; 0x31
    e2a2:	f200 80c3 	bhi.w	e42c <am_hal_gpio_pinconfig+0x18c>
    e2a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2aa:	4604      	mov	r4, r0
    e2ac:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
    e2b0:	f001 0007 	and.w	r0, r1, #7
    e2b4:	b085      	sub	sp, #20
    e2b6:	f3c1 03c1 	ubfx	r3, r1, #3, #2
    e2ba:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    e2be:	d00f      	beq.n	e2e0 <am_hal_gpio_pinconfig+0x40>
    e2c0:	f3c1 1642 	ubfx	r6, r1, #5, #3
    e2c4:	1db5      	adds	r5, r6, #6
    e2c6:	f005 0507 	and.w	r5, r5, #7
    e2ca:	2d03      	cmp	r5, #3
    e2cc:	f042 0201 	orr.w	r2, r2, #1
    e2d0:	f240 80ae 	bls.w	e430 <am_hal_gpio_pinconfig+0x190>
    e2d4:	2fc0      	cmp	r7, #192	; 0xc0
    e2d6:	f000 80e1 	beq.w	e49c <am_hal_gpio_pinconfig+0x1fc>
    e2da:	2f20      	cmp	r7, #32
    e2dc:	f000 80e3 	beq.w	e4a6 <am_hal_gpio_pinconfig+0x206>
    e2e0:	b163      	cbz	r3, e2fc <am_hal_gpio_pinconfig+0x5c>
    e2e2:	2b01      	cmp	r3, #1
    e2e4:	f000 80d3 	beq.w	e48e <am_hal_gpio_pinconfig+0x1ee>
    e2e8:	2b02      	cmp	r3, #2
    e2ea:	f040 80c9 	bne.w	e480 <am_hal_gpio_pinconfig+0x1e0>
    e2ee:	4b79      	ldr	r3, [pc, #484]	; (e4d4 <am_hal_gpio_pinconfig+0x234>)
    e2f0:	5d1b      	ldrb	r3, [r3, r4]
    e2f2:	075b      	lsls	r3, r3, #29
    e2f4:	f140 80c4 	bpl.w	e480 <am_hal_gpio_pinconfig+0x1e0>
    e2f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e2fc:	4b76      	ldr	r3, [pc, #472]	; (e4d8 <am_hal_gpio_pinconfig+0x238>)
    e2fe:	5d1b      	ldrb	r3, [r3, r4]
    e300:	4103      	asrs	r3, r0
    e302:	005b      	lsls	r3, r3, #1
    e304:	f003 0302 	and.w	r3, r3, #2
    e308:	4313      	orrs	r3, r2
    e30a:	4a74      	ldr	r2, [pc, #464]	; (e4dc <am_hal_gpio_pinconfig+0x23c>)
    e30c:	5d12      	ldrb	r2, [r2, r4]
    e30e:	4282      	cmp	r2, r0
    e310:	f000 8099 	beq.w	e446 <am_hal_gpio_pinconfig+0x1a6>
    e314:	f3c1 3000 	ubfx	r0, r1, #12, #1
    e318:	f3c1 2581 	ubfx	r5, r1, #10, #2
    e31c:	f3c1 3280 	ubfx	r2, r1, #14, #1
    e320:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    e324:	0a88      	lsrs	r0, r1, #10
    e326:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e32a:	f000 0008 	and.w	r0, r0, #8
    e32e:	4302      	orrs	r2, r0
    e330:	f3c1 2007 	ubfx	r0, r1, #8, #8
    e334:	f000 050c 	and.w	r5, r0, #12
    e338:	2d04      	cmp	r5, #4
    e33a:	f000 80a5 	beq.w	e488 <am_hal_gpio_pinconfig+0x1e8>
    e33e:	4d68      	ldr	r5, [pc, #416]	; (e4e0 <am_hal_gpio_pinconfig+0x240>)
    e340:	682d      	ldr	r5, [r5, #0]
    e342:	eba1 0805 	sub.w	r8, r1, r5
    e346:	fab8 f888 	clz	r8, r8
    e34a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    e34e:	f010 0f60 	tst.w	r0, #96	; 0x60
    e352:	bf04      	itt	eq
    e354:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
    e358:	f360 0200 	bfieq	r2, r0, #0, #1
    e35c:	00a0      	lsls	r0, r4, #2
    e35e:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e362:	2902      	cmp	r1, #2
    e364:	d05c      	beq.n	e420 <am_hal_gpio_pinconfig+0x180>
    e366:	2903      	cmp	r1, #3
    e368:	d058      	beq.n	e41c <am_hal_gpio_pinconfig+0x17c>
    e36a:	2901      	cmp	r1, #1
    e36c:	ea4f 01c4 	mov.w	r1, r4, lsl #3
    e370:	bf08      	it	eq
    e372:	f043 0304 	orreq.w	r3, r3, #4
    e376:	f001 0118 	and.w	r1, r1, #24
    e37a:	2700      	movs	r7, #0
    e37c:	f000 001c 	and.w	r0, r0, #28
    e380:	fa02 f600 	lsl.w	r6, r2, r0
    e384:	220f      	movs	r2, #15
    e386:	4082      	lsls	r2, r0
    e388:	43d2      	mvns	r2, r2
    e38a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e38e:	fa03 f501 	lsl.w	r5, r3, r1
    e392:	fa09 f901 	lsl.w	r9, r9, r1
    e396:	9201      	str	r2, [sp, #4]
    e398:	f000 f900 	bl	e59c <am_hal_interrupt_master_disable>
    e39c:	f024 0a03 	bic.w	sl, r4, #3
    e3a0:	ea4f 0b54 	mov.w	fp, r4, lsr #1
    e3a4:	f10a 4c80 	add.w	ip, sl, #1073741824	; 0x40000000
    e3a8:	4b4e      	ldr	r3, [pc, #312]	; (e4e4 <am_hal_gpio_pinconfig+0x244>)
    e3aa:	494f      	ldr	r1, [pc, #316]	; (e4e8 <am_hal_gpio_pinconfig+0x248>)
    e3ac:	9a01      	ldr	r2, [sp, #4]
    e3ae:	9003      	str	r0, [sp, #12]
    e3b0:	ea6f 0909 	mvn.w	r9, r9
    e3b4:	f02b 0b03 	bic.w	fp, fp, #3
    e3b8:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
    e3bc:	f1b8 0f00 	cmp.w	r8, #0
    e3c0:	d00b      	beq.n	e3da <am_hal_gpio_pinconfig+0x13a>
    e3c2:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
    e3c6:	f004 081f 	and.w	r8, r4, #31
    e3ca:	4848      	ldr	r0, [pc, #288]	; (e4ec <am_hal_gpio_pinconfig+0x24c>)
    e3cc:	f00e 0e04 	and.w	lr, lr, #4
    e3d0:	2401      	movs	r4, #1
    e3d2:	fa04 f408 	lsl.w	r4, r4, r8
    e3d6:	f84e 4000 	str.w	r4, [lr, r0]
    e3da:	4845      	ldr	r0, [pc, #276]	; (e4f0 <am_hal_gpio_pinconfig+0x250>)
    e3dc:	2473      	movs	r4, #115	; 0x73
    e3de:	6604      	str	r4, [r0, #96]	; 0x60
    e3e0:	f8dc 4000 	ldr.w	r4, [ip]
    e3e4:	ea04 0409 	and.w	r4, r4, r9
    e3e8:	4325      	orrs	r5, r4
    e3ea:	f8cc 5000 	str.w	r5, [ip]
    e3ee:	f85b 4003 	ldr.w	r4, [fp, r3]
    e3f2:	4022      	ands	r2, r4
    e3f4:	4332      	orrs	r2, r6
    e3f6:	f84b 2003 	str.w	r2, [fp, r3]
    e3fa:	f85a 3001 	ldr.w	r3, [sl, r1]
    e3fe:	ea03 0909 	and.w	r9, r3, r9
    e402:	2400      	movs	r4, #0
    e404:	ea49 0707 	orr.w	r7, r9, r7
    e408:	f84a 7001 	str.w	r7, [sl, r1]
    e40c:	6604      	str	r4, [r0, #96]	; 0x60
    e40e:	9803      	ldr	r0, [sp, #12]
    e410:	f000 f8c8 	bl	e5a4 <am_hal_interrupt_master_set>
    e414:	4620      	mov	r0, r4
    e416:	b005      	add	sp, #20
    e418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e41c:	f043 0304 	orr.w	r3, r3, #4
    e420:	00e1      	lsls	r1, r4, #3
    e422:	f001 0118 	and.w	r1, r1, #24
    e426:	2701      	movs	r7, #1
    e428:	408f      	lsls	r7, r1
    e42a:	e7a7      	b.n	e37c <am_hal_gpio_pinconfig+0xdc>
    e42c:	2006      	movs	r0, #6
    e42e:	4770      	bx	lr
    e430:	4d28      	ldr	r5, [pc, #160]	; (e4d4 <am_hal_gpio_pinconfig+0x234>)
    e432:	5d2d      	ldrb	r5, [r5, r4]
    e434:	3e02      	subs	r6, #2
    e436:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    e43a:	07ee      	lsls	r6, r5, #31
    e43c:	d536      	bpl.n	e4ac <am_hal_gpio_pinconfig+0x20c>
    e43e:	2b00      	cmp	r3, #0
    e440:	f43f af5c 	beq.w	e2fc <am_hal_gpio_pinconfig+0x5c>
    e444:	e74d      	b.n	e2e2 <am_hal_gpio_pinconfig+0x42>
    e446:	f3c1 4202 	ubfx	r2, r1, #16, #3
    e44a:	2a07      	cmp	r2, #7
    e44c:	d030      	beq.n	e4b0 <am_hal_gpio_pinconfig+0x210>
    e44e:	4d29      	ldr	r5, [pc, #164]	; (e4f4 <am_hal_gpio_pinconfig+0x254>)
    e450:	f3c1 40c1 	ubfx	r0, r1, #19, #2
    e454:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e458:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
    e45c:	4290      	cmp	r0, r2
    e45e:	d029      	beq.n	e4b4 <am_hal_gpio_pinconfig+0x214>
    e460:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e464:	00a0      	lsls	r0, r4, #2
    e466:	786e      	ldrb	r6, [r5, #1]
    e468:	4296      	cmp	r6, r2
    e46a:	d02d      	beq.n	e4c8 <am_hal_gpio_pinconfig+0x228>
    e46c:	78ae      	ldrb	r6, [r5, #2]
    e46e:	4296      	cmp	r6, r2
    e470:	d02c      	beq.n	e4cc <am_hal_gpio_pinconfig+0x22c>
    e472:	78ed      	ldrb	r5, [r5, #3]
    e474:	4295      	cmp	r5, r2
    e476:	d02b      	beq.n	e4d0 <am_hal_gpio_pinconfig+0x230>
    e478:	481f      	ldr	r0, [pc, #124]	; (e4f8 <am_hal_gpio_pinconfig+0x258>)
    e47a:	b005      	add	sp, #20
    e47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e480:	481e      	ldr	r0, [pc, #120]	; (e4fc <am_hal_gpio_pinconfig+0x25c>)
    e482:	b005      	add	sp, #20
    e484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e488:	f04f 0801 	mov.w	r8, #1
    e48c:	e75f      	b.n	e34e <am_hal_gpio_pinconfig+0xae>
    e48e:	4b11      	ldr	r3, [pc, #68]	; (e4d4 <am_hal_gpio_pinconfig+0x234>)
    e490:	5d1b      	ldrb	r3, [r3, r4]
    e492:	079d      	lsls	r5, r3, #30
    e494:	d5f4      	bpl.n	e480 <am_hal_gpio_pinconfig+0x1e0>
    e496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e49a:	e72f      	b.n	e2fc <am_hal_gpio_pinconfig+0x5c>
    e49c:	2c14      	cmp	r4, #20
    e49e:	f43f af1f 	beq.w	e2e0 <am_hal_gpio_pinconfig+0x40>
    e4a2:	4817      	ldr	r0, [pc, #92]	; (e500 <am_hal_gpio_pinconfig+0x260>)
    e4a4:	e7b7      	b.n	e416 <am_hal_gpio_pinconfig+0x176>
    e4a6:	2c14      	cmp	r4, #20
    e4a8:	f47f af1a 	bne.w	e2e0 <am_hal_gpio_pinconfig+0x40>
    e4ac:	4815      	ldr	r0, [pc, #84]	; (e504 <am_hal_gpio_pinconfig+0x264>)
    e4ae:	e7b2      	b.n	e416 <am_hal_gpio_pinconfig+0x176>
    e4b0:	4815      	ldr	r0, [pc, #84]	; (e508 <am_hal_gpio_pinconfig+0x268>)
    e4b2:	e7b0      	b.n	e416 <am_hal_gpio_pinconfig+0x176>
    e4b4:	2200      	movs	r2, #0
    e4b6:	00a0      	lsls	r0, r4, #2
    e4b8:	0052      	lsls	r2, r2, #1
    e4ba:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e4be:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
    e4c2:	f04f 0800 	mov.w	r8, #0
    e4c6:	e74a      	b.n	e35e <am_hal_gpio_pinconfig+0xbe>
    e4c8:	2201      	movs	r2, #1
    e4ca:	e7f5      	b.n	e4b8 <am_hal_gpio_pinconfig+0x218>
    e4cc:	2202      	movs	r2, #2
    e4ce:	e7f3      	b.n	e4b8 <am_hal_gpio_pinconfig+0x218>
    e4d0:	2203      	movs	r2, #3
    e4d2:	e7f1      	b.n	e4b8 <am_hal_gpio_pinconfig+0x218>
    e4d4:	0000f3b8 	.word	0x0000f3b8
    e4d8:	0000f3ec 	.word	0x0000f3ec
    e4dc:	0000f4e8 	.word	0x0000f4e8
    e4e0:	0000f3b4 	.word	0x0000f3b4
    e4e4:	40010040 	.word	0x40010040
    e4e8:	400100e0 	.word	0x400100e0
    e4ec:	400100b4 	.word	0x400100b4
    e4f0:	40010000 	.word	0x40010000
    e4f4:	0000f420 	.word	0x0000f420
    e4f8:	08000104 	.word	0x08000104
    e4fc:	08000102 	.word	0x08000102
    e500:	08000101 	.word	0x08000101
    e504:	08000100 	.word	0x08000100
    e508:	08000103 	.word	0x08000103

0000e50c <am_hal_gpio_state_write>:
    e50c:	2831      	cmp	r0, #49	; 0x31
    e50e:	d81a      	bhi.n	e546 <am_hal_gpio_state_write+0x3a>
    e510:	b570      	push	{r4, r5, r6, lr}
    e512:	2905      	cmp	r1, #5
    e514:	b082      	sub	sp, #8
    e516:	460d      	mov	r5, r1
    e518:	d812      	bhi.n	e540 <am_hal_gpio_state_write+0x34>
    e51a:	f000 031f 	and.w	r3, r0, #31
    e51e:	2201      	movs	r2, #1
    e520:	08c0      	lsrs	r0, r0, #3
    e522:	fa02 f603 	lsl.w	r6, r2, r3
    e526:	f000 0404 	and.w	r4, r0, #4
    e52a:	f000 f837 	bl	e59c <am_hal_interrupt_master_disable>
    e52e:	3d01      	subs	r5, #1
    e530:	9001      	str	r0, [sp, #4]
    e532:	2d04      	cmp	r5, #4
    e534:	d821      	bhi.n	e57a <am_hal_gpio_state_write+0x6e>
    e536:	e8df f005 	tbb	[pc, r5]
    e53a:	1512      	.short	0x1512
    e53c:	1d1a      	.short	0x1d1a
    e53e:	08          	.byte	0x08
    e53f:	00          	.byte	0x00
    e540:	2006      	movs	r0, #6
    e542:	b002      	add	sp, #8
    e544:	bd70      	pop	{r4, r5, r6, pc}
    e546:	2005      	movs	r0, #5
    e548:	4770      	bx	lr
    e54a:	4a0d      	ldr	r2, [pc, #52]	; (e580 <am_hal_gpio_state_write+0x74>)
    e54c:	58a3      	ldr	r3, [r4, r2]
    e54e:	4073      	eors	r3, r6
    e550:	50a3      	str	r3, [r4, r2]
    e552:	9801      	ldr	r0, [sp, #4]
    e554:	f000 f826 	bl	e5a4 <am_hal_interrupt_master_set>
    e558:	2000      	movs	r0, #0
    e55a:	b002      	add	sp, #8
    e55c:	bd70      	pop	{r4, r5, r6, pc}
    e55e:	4b09      	ldr	r3, [pc, #36]	; (e584 <am_hal_gpio_state_write+0x78>)
    e560:	50e6      	str	r6, [r4, r3]
    e562:	e7f6      	b.n	e552 <am_hal_gpio_state_write+0x46>
    e564:	4a08      	ldr	r2, [pc, #32]	; (e588 <am_hal_gpio_state_write+0x7c>)
    e566:	58a3      	ldr	r3, [r4, r2]
    e568:	4073      	eors	r3, r6
    e56a:	50a3      	str	r3, [r4, r2]
    e56c:	e7f1      	b.n	e552 <am_hal_gpio_state_write+0x46>
    e56e:	4b04      	ldr	r3, [pc, #16]	; (e580 <am_hal_gpio_state_write+0x74>)
    e570:	50e6      	str	r6, [r4, r3]
    e572:	e7ee      	b.n	e552 <am_hal_gpio_state_write+0x46>
    e574:	4b05      	ldr	r3, [pc, #20]	; (e58c <am_hal_gpio_state_write+0x80>)
    e576:	50e6      	str	r6, [r4, r3]
    e578:	e7eb      	b.n	e552 <am_hal_gpio_state_write+0x46>
    e57a:	4b05      	ldr	r3, [pc, #20]	; (e590 <am_hal_gpio_state_write+0x84>)
    e57c:	50e6      	str	r6, [r4, r3]
    e57e:	e7e8      	b.n	e552 <am_hal_gpio_state_write+0x46>
    e580:	400100b4 	.word	0x400100b4
    e584:	40010090 	.word	0x40010090
    e588:	40010088 	.word	0x40010088
    e58c:	400100a8 	.word	0x400100a8
    e590:	40010098 	.word	0x40010098

0000e594 <am_hal_interrupt_master_enable>:
    e594:	f3ef 8010 	mrs	r0, PRIMASK
    e598:	b662      	cpsie	i
    e59a:	4770      	bx	lr

0000e59c <am_hal_interrupt_master_disable>:
    e59c:	f3ef 8010 	mrs	r0, PRIMASK
    e5a0:	b672      	cpsid	i
    e5a2:	4770      	bx	lr

0000e5a4 <am_hal_interrupt_master_set>:
    e5a4:	f380 8810 	msr	PRIMASK, r0
    e5a8:	4770      	bx	lr
    e5aa:	bf00      	nop

0000e5ac <am_hal_mcuctrl_info_get>:
    e5ac:	2900      	cmp	r1, #0
    e5ae:	f000 808f 	beq.w	e6d0 <am_hal_mcuctrl_info_get+0x124>
    e5b2:	2801      	cmp	r0, #1
    e5b4:	b430      	push	{r4, r5}
    e5b6:	d006      	beq.n	e5c6 <am_hal_mcuctrl_info_get+0x1a>
    e5b8:	2802      	cmp	r0, #2
    e5ba:	d06d      	beq.n	e698 <am_hal_mcuctrl_info_get+0xec>
    e5bc:	2800      	cmp	r0, #0
    e5be:	d055      	beq.n	e66c <am_hal_mcuctrl_info_get+0xc0>
    e5c0:	2006      	movs	r0, #6
    e5c2:	bc30      	pop	{r4, r5}
    e5c4:	4770      	bx	lr
    e5c6:	4a43      	ldr	r2, [pc, #268]	; (e6d4 <am_hal_mcuctrl_info_get+0x128>)
    e5c8:	4843      	ldr	r0, [pc, #268]	; (e6d8 <am_hal_mcuctrl_info_get+0x12c>)
    e5ca:	6813      	ldr	r3, [r2, #0]
    e5cc:	600b      	str	r3, [r1, #0]
    e5ce:	6854      	ldr	r4, [r2, #4]
    e5d0:	604c      	str	r4, [r1, #4]
    e5d2:	6894      	ldr	r4, [r2, #8]
    e5d4:	608c      	str	r4, [r1, #8]
    e5d6:	68d4      	ldr	r4, [r2, #12]
    e5d8:	60cc      	str	r4, [r1, #12]
    e5da:	f3c3 5503 	ubfx	r5, r3, #20, #4
    e5de:	6914      	ldr	r4, [r2, #16]
    e5e0:	610c      	str	r4, [r1, #16]
    e5e2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    e5e6:	4c3d      	ldr	r4, [pc, #244]	; (e6dc <am_hal_mcuctrl_info_get+0x130>)
    e5e8:	6950      	ldr	r0, [r2, #20]
    e5ea:	6148      	str	r0, [r1, #20]
    e5ec:	f003 0201 	and.w	r2, r3, #1
    e5f0:	f3c3 4303 	ubfx	r3, r3, #16, #4
    e5f4:	e9c1 2506 	strd	r2, r5, [r1, #24]
    e5f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    e5fc:	4a38      	ldr	r2, [pc, #224]	; (e6e0 <am_hal_mcuctrl_info_get+0x134>)
    e5fe:	620b      	str	r3, [r1, #32]
    e600:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    e604:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
    e608:	b2db      	uxtb	r3, r3
    e60a:	f000 000f 	and.w	r0, r0, #15
    e60e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    e612:	624b      	str	r3, [r1, #36]	; 0x24
    e614:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    e618:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
    e61c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    e620:	f000 000f 	and.w	r0, r0, #15
    e624:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    e628:	628b      	str	r3, [r1, #40]	; 0x28
    e62a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    e62e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
    e632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    e636:	f3c0 1003 	ubfx	r0, r0, #4, #4
    e63a:	4303      	orrs	r3, r0
    e63c:	62cb      	str	r3, [r1, #44]	; 0x2c
    e63e:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
    e642:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    e646:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
    e64a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    e64e:	b2db      	uxtb	r3, r3
    e650:	041b      	lsls	r3, r3, #16
    e652:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e656:	fa5f fc82 	uxtb.w	ip, r2
    e65a:	ea43 030c 	orr.w	r3, r3, ip
    e65e:	b2c2      	uxtb	r2, r0
    e660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e664:	630b      	str	r3, [r1, #48]	; 0x30
    e666:	2000      	movs	r0, #0
    e668:	bc30      	pop	{r4, r5}
    e66a:	4770      	bx	lr
    e66c:	4a19      	ldr	r2, [pc, #100]	; (e6d4 <am_hal_mcuctrl_info_get+0x128>)
    e66e:	6993      	ldr	r3, [r2, #24]
    e670:	f3c3 1480 	ubfx	r4, r3, #6, #1
    e674:	700c      	strb	r4, [r1, #0]
    e676:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
    e67a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e67e:	704b      	strb	r3, [r1, #1]
    e680:	f3c4 6381 	ubfx	r3, r4, #26, #2
    e684:	710b      	strb	r3, [r1, #4]
    e686:	6953      	ldr	r3, [r2, #20]
    e688:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e68c:	f003 0301 	and.w	r3, r3, #1
    e690:	bc30      	pop	{r4, r5}
    e692:	708a      	strb	r2, [r1, #2]
    e694:	70cb      	strb	r3, [r1, #3]
    e696:	4770      	bx	lr
    e698:	4a0e      	ldr	r2, [pc, #56]	; (e6d4 <am_hal_mcuctrl_info_get+0x128>)
    e69a:	6848      	ldr	r0, [r1, #4]
    e69c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e6a0:	f003 0401 	and.w	r4, r3, #1
    e6a4:	700c      	strb	r4, [r1, #0]
    e6a6:	f3c3 0440 	ubfx	r4, r3, #1, #1
    e6aa:	720c      	strb	r4, [r1, #8]
    e6ac:	f8d2 41c4 	ldr.w	r4, [r2, #452]	; 0x1c4
    e6b0:	60cc      	str	r4, [r1, #12]
    e6b2:	f8d2 41c0 	ldr.w	r4, [r2, #448]	; 0x1c0
    e6b6:	4320      	orrs	r0, r4
    e6b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e6bc:	6048      	str	r0, [r1, #4]
    e6be:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
    e6c2:	740b      	strb	r3, [r1, #16]
    e6c4:	694b      	ldr	r3, [r1, #20]
    e6c6:	4313      	orrs	r3, r2
    e6c8:	2000      	movs	r0, #0
    e6ca:	bc30      	pop	{r4, r5}
    e6cc:	614b      	str	r3, [r1, #20]
    e6ce:	4770      	bx	lr
    e6d0:	2006      	movs	r0, #6
    e6d2:	4770      	bx	lr
    e6d4:	40020000 	.word	0x40020000
    e6d8:	0000f51c 	.word	0x0000f51c
    e6dc:	0000f55c 	.word	0x0000f55c
    e6e0:	f0000f00 	.word	0xf0000f00

0000e6e4 <am_hal_stimer_config>:
    e6e4:	4a03      	ldr	r2, [pc, #12]	; (e6f4 <am_hal_stimer_config+0x10>)
    e6e6:	4603      	mov	r3, r0
    e6e8:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140
    e6ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    e6f0:	4770      	bx	lr
    e6f2:	bf00      	nop
    e6f4:	40008000 	.word	0x40008000

0000e6f8 <am_hal_stimer_counter_get>:
    e6f8:	b500      	push	{lr}
    e6fa:	b085      	sub	sp, #20
    e6fc:	4805      	ldr	r0, [pc, #20]	; (e714 <am_hal_stimer_counter_get+0x1c>)
    e6fe:	a901      	add	r1, sp, #4
    e700:	f000 fc90 	bl	f024 <am_hal_triple_read>
    e704:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
    e708:	4283      	cmp	r3, r0
    e70a:	bf18      	it	ne
    e70c:	9803      	ldrne	r0, [sp, #12]
    e70e:	b005      	add	sp, #20
    e710:	f85d fb04 	ldr.w	pc, [sp], #4
    e714:	40008144 	.word	0x40008144

0000e718 <am_hal_uart_initialize>:
    e718:	2801      	cmp	r0, #1
    e71a:	d81a      	bhi.n	e752 <am_hal_uart_initialize+0x3a>
    e71c:	b1e9      	cbz	r1, e75a <am_hal_uart_initialize+0x42>
    e71e:	b530      	push	{r4, r5, lr}
    e720:	2268      	movs	r2, #104	; 0x68
    e722:	4d0f      	ldr	r5, [pc, #60]	; (e760 <am_hal_uart_initialize+0x48>)
    e724:	fb00 f202 	mul.w	r2, r0, r2
    e728:	18ac      	adds	r4, r5, r2
    e72a:	78e3      	ldrb	r3, [r4, #3]
    e72c:	f3c3 0e00 	ubfx	lr, r3, #0, #1
    e730:	f013 0301 	ands.w	r3, r3, #1
    e734:	d10f      	bne.n	e756 <am_hal_uart_initialize+0x3e>
    e736:	6260      	str	r0, [r4, #36]	; 0x24
    e738:	58a8      	ldr	r0, [r5, r2]
    e73a:	f000 4c7e 	and.w	ip, r0, #4261412864	; 0xfe000000
    e73e:	4809      	ldr	r0, [pc, #36]	; (e764 <am_hal_uart_initialize+0x4c>)
    e740:	ea4c 0000 	orr.w	r0, ip, r0
    e744:	50a8      	str	r0, [r5, r2]
    e746:	f884 e004 	strb.w	lr, [r4, #4]
    e74a:	6623      	str	r3, [r4, #96]	; 0x60
    e74c:	4618      	mov	r0, r3
    e74e:	600c      	str	r4, [r1, #0]
    e750:	bd30      	pop	{r4, r5, pc}
    e752:	2005      	movs	r0, #5
    e754:	4770      	bx	lr
    e756:	2007      	movs	r0, #7
    e758:	bd30      	pop	{r4, r5, pc}
    e75a:	2006      	movs	r0, #6
    e75c:	4770      	bx	lr
    e75e:	bf00      	nop
    e760:	100011a8 	.word	0x100011a8
    e764:	01ea9e06 	.word	0x01ea9e06

0000e768 <am_hal_uart_power_control>:
    e768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e76c:	4604      	mov	r4, r0
    e76e:	6800      	ldr	r0, [r0, #0]
    e770:	4b3e      	ldr	r3, [pc, #248]	; (e86c <am_hal_uart_power_control+0x104>)
    e772:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
    e776:	429e      	cmp	r6, r3
    e778:	b084      	sub	sp, #16
    e77a:	d149      	bne.n	e810 <am_hal_uart_power_control+0xa8>
    e77c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e77e:	f105 0008 	add.w	r0, r5, #8
    e782:	b2c7      	uxtb	r7, r0
    e784:	b1d1      	cbz	r1, e7bc <am_hal_uart_power_control+0x54>
    e786:	1e48      	subs	r0, r1, #1
    e788:	2801      	cmp	r0, #1
    e78a:	d83d      	bhi.n	e808 <am_hal_uart_power_control+0xa0>
    e78c:	f505 2880 	add.w	r8, r5, #262144	; 0x40000
    e790:	2a00      	cmp	r2, #0
    e792:	d141      	bne.n	e818 <am_hal_uart_power_control+0xb0>
    e794:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e798:	351c      	adds	r5, #28
    e79a:	032d      	lsls	r5, r5, #12
    e79c:	f04f 33ff 	mov.w	r3, #4294967295
    e7a0:	f108 081c 	add.w	r8, r8, #28
    e7a4:	646b      	str	r3, [r5, #68]	; 0x44
    e7a6:	ea4f 3508 	mov.w	r5, r8, lsl #12
    e7aa:	2400      	movs	r4, #0
    e7ac:	632c      	str	r4, [r5, #48]	; 0x30
    e7ae:	4638      	mov	r0, r7
    e7b0:	f000 fc7c 	bl	f0ac <am_hal_pwrctrl_periph_disable>
    e7b4:	4620      	mov	r0, r4
    e7b6:	b004      	add	sp, #16
    e7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7bc:	2a00      	cmp	r2, #0
    e7be:	d04b      	beq.n	e858 <am_hal_uart_power_control+0xf0>
    e7c0:	7923      	ldrb	r3, [r4, #4]
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d04f      	beq.n	e866 <am_hal_uart_power_control+0xfe>
    e7c6:	4638      	mov	r0, r7
    e7c8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e7cc:	9101      	str	r1, [sp, #4]
    e7ce:	351c      	adds	r5, #28
    e7d0:	f000 fc36 	bl	f040 <am_hal_pwrctrl_periph_enable>
    e7d4:	f7ff fee2 	bl	e59c <am_hal_interrupt_master_disable>
    e7d8:	032d      	lsls	r5, r5, #12
    e7da:	68a3      	ldr	r3, [r4, #8]
    e7dc:	9002      	str	r0, [sp, #8]
    e7de:	622b      	str	r3, [r5, #32]
    e7e0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    e7e4:	626a      	str	r2, [r5, #36]	; 0x24
    e7e6:	62ab      	str	r3, [r5, #40]	; 0x28
    e7e8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    e7ec:	62ea      	str	r2, [r5, #44]	; 0x2c
    e7ee:	632b      	str	r3, [r5, #48]	; 0x30
    e7f0:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
    e7f4:	9901      	ldr	r1, [sp, #4]
    e7f6:	636a      	str	r2, [r5, #52]	; 0x34
    e7f8:	63ab      	str	r3, [r5, #56]	; 0x38
    e7fa:	9802      	ldr	r0, [sp, #8]
    e7fc:	7121      	strb	r1, [r4, #4]
    e7fe:	f7ff fed1 	bl	e5a4 <am_hal_interrupt_master_set>
    e802:	9901      	ldr	r1, [sp, #4]
    e804:	4608      	mov	r0, r1
    e806:	e000      	b.n	e80a <am_hal_uart_power_control+0xa2>
    e808:	2006      	movs	r0, #6
    e80a:	b004      	add	sp, #16
    e80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e810:	2002      	movs	r0, #2
    e812:	b004      	add	sp, #16
    e814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e818:	f7ff fec0 	bl	e59c <am_hal_interrupt_master_disable>
    e81c:	f108 051c 	add.w	r5, r8, #28
    e820:	032d      	lsls	r5, r5, #12
    e822:	9003      	str	r0, [sp, #12]
    e824:	6a2a      	ldr	r2, [r5, #32]
    e826:	60a2      	str	r2, [r4, #8]
    e828:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e82a:	60e2      	str	r2, [r4, #12]
    e82c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e82e:	6122      	str	r2, [r4, #16]
    e830:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    e832:	6162      	str	r2, [r4, #20]
    e834:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e836:	61a2      	str	r2, [r4, #24]
    e838:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    e83a:	61e2      	str	r2, [r4, #28]
    e83c:	2301      	movs	r3, #1
    e83e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e840:	6222      	str	r2, [r4, #32]
    e842:	7123      	strb	r3, [r4, #4]
    e844:	9803      	ldr	r0, [sp, #12]
    e846:	f7ff fead 	bl	e5a4 <am_hal_interrupt_master_set>
    e84a:	6823      	ldr	r3, [r4, #0]
    e84c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e850:	42b3      	cmp	r3, r6
    e852:	d1aa      	bne.n	e7aa <am_hal_uart_power_control+0x42>
    e854:	6a65      	ldr	r5, [r4, #36]	; 0x24
    e856:	e79d      	b.n	e794 <am_hal_uart_power_control+0x2c>
    e858:	4638      	mov	r0, r7
    e85a:	9201      	str	r2, [sp, #4]
    e85c:	f000 fbf0 	bl	f040 <am_hal_pwrctrl_periph_enable>
    e860:	9a01      	ldr	r2, [sp, #4]
    e862:	4610      	mov	r0, r2
    e864:	e7d1      	b.n	e80a <am_hal_uart_power_control+0xa2>
    e866:	2007      	movs	r0, #7
    e868:	e7cf      	b.n	e80a <am_hal_uart_power_control+0xa2>
    e86a:	bf00      	nop
    e86c:	01ea9e06 	.word	0x01ea9e06

0000e870 <am_hal_uart_configure>:
    e870:	6803      	ldr	r3, [r0, #0]
    e872:	4a81      	ldr	r2, [pc, #516]	; (ea78 <am_hal_uart_configure+0x208>)
    e874:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e878:	4293      	cmp	r3, r2
    e87a:	f040 80b3 	bne.w	e9e4 <am_hal_uart_configure+0x174>
    e87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e882:	6a44      	ldr	r4, [r0, #36]	; 0x24
    e884:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
    e888:	341c      	adds	r4, #28
    e88a:	0324      	lsls	r4, r4, #12
    e88c:	2300      	movs	r3, #0
    e88e:	6323      	str	r3, [r4, #48]	; 0x30
    e890:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    e894:	2b05      	cmp	r3, #5
    e896:	b084      	sub	sp, #16
    e898:	4605      	mov	r5, r0
    e89a:	f200 80b5 	bhi.w	ea08 <am_hal_uart_configure+0x198>
    e89e:	460e      	mov	r6, r1
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	f040 809b 	bne.w	e9dc <am_hal_uart_configure+0x16c>
    e8a6:	2701      	movs	r7, #1
    e8a8:	f7ff fe78 	bl	e59c <am_hal_interrupt_master_disable>
    e8ac:	9001      	str	r0, [sp, #4]
    e8ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8b0:	f043 0308 	orr.w	r3, r3, #8
    e8b4:	6323      	str	r3, [r4, #48]	; 0x30
    e8b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8b8:	f367 1306 	bfi	r3, r7, #4, #3
    e8bc:	6323      	str	r3, [r4, #48]	; 0x30
    e8be:	9801      	ldr	r0, [sp, #4]
    e8c0:	f7ff fe70 	bl	e5a4 <am_hal_interrupt_master_set>
    e8c4:	f7ff fe6a 	bl	e59c <am_hal_interrupt_master_disable>
    e8c8:	9002      	str	r0, [sp, #8]
    e8ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8cc:	f36f 0300 	bfc	r3, #0, #1
    e8d0:	6323      	str	r3, [r4, #48]	; 0x30
    e8d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8d4:	f36f 2349 	bfc	r3, #9, #1
    e8d8:	6323      	str	r3, [r4, #48]	; 0x30
    e8da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8dc:	f36f 2308 	bfc	r3, #8, #1
    e8e0:	6323      	str	r3, [r4, #48]	; 0x30
    e8e2:	9802      	ldr	r0, [sp, #8]
    e8e4:	f7ff fe5e 	bl	e5a4 <am_hal_interrupt_master_set>
    e8e8:	4b64      	ldr	r3, [pc, #400]	; (ea7c <am_hal_uart_configure+0x20c>)
    e8ea:	6832      	ldr	r2, [r6, #0]
    e8ec:	68db      	ldr	r3, [r3, #12]
    e8ee:	b2db      	uxtb	r3, r3
    e8f0:	2b12      	cmp	r3, #18
    e8f2:	d07d      	beq.n	e9f0 <am_hal_uart_configure+0x180>
    e8f4:	4b61      	ldr	r3, [pc, #388]	; (ea7c <am_hal_uart_configure+0x20c>)
    e8f6:	68db      	ldr	r3, [r3, #12]
    e8f8:	b2db      	uxtb	r3, r3
    e8fa:	2b20      	cmp	r3, #32
    e8fc:	d902      	bls.n	e904 <am_hal_uart_configure+0x94>
    e8fe:	4b60      	ldr	r3, [pc, #384]	; (ea80 <am_hal_uart_configure+0x210>)
    e900:	429a      	cmp	r2, r3
    e902:	d879      	bhi.n	e9f8 <am_hal_uart_configure+0x188>
    e904:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e906:	f3c3 1302 	ubfx	r3, r3, #4, #3
    e90a:	3b01      	subs	r3, #1
    e90c:	b2db      	uxtb	r3, r3
    e90e:	2b03      	cmp	r3, #3
    e910:	d874      	bhi.n	e9fc <am_hal_uart_configure+0x18c>
    e912:	495c      	ldr	r1, [pc, #368]	; (ea84 <am_hal_uart_configure+0x214>)
    e914:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    e918:	0112      	lsls	r2, r2, #4
    e91a:	4291      	cmp	r1, r2
    e91c:	ea4f 1381 	mov.w	r3, r1, lsl #6
    e920:	fbb1 f0f2 	udiv	r0, r1, r2
    e924:	fbb3 f3f2 	udiv	r3, r3, r2
    e928:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
    e92c:	d370      	bcc.n	ea10 <am_hal_uart_configure+0x1a0>
    e92e:	6260      	str	r0, [r4, #36]	; 0x24
    e930:	6260      	str	r0, [r4, #36]	; 0x24
    e932:	62a3      	str	r3, [r4, #40]	; 0x28
    e934:	089b      	lsrs	r3, r3, #2
    e936:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    e93a:	fbb1 f3f3 	udiv	r3, r1, r3
    e93e:	662b      	str	r3, [r5, #96]	; 0x60
    e940:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e942:	f36f 338e 	bfc	r3, #14, #1
    e946:	6323      	str	r3, [r4, #48]	; 0x30
    e948:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e94a:	f36f 33cf 	bfc	r3, #15, #1
    e94e:	6323      	str	r3, [r4, #48]	; 0x30
    e950:	6933      	ldr	r3, [r6, #16]
    e952:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e954:	6971      	ldr	r1, [r6, #20]
    e956:	431a      	orrs	r2, r3
    e958:	6873      	ldr	r3, [r6, #4]
    e95a:	6322      	str	r2, [r4, #48]	; 0x30
    e95c:	68f2      	ldr	r2, [r6, #12]
    e95e:	6361      	str	r1, [r4, #52]	; 0x34
    e960:	4313      	orrs	r3, r2
    e962:	68b2      	ldr	r2, [r6, #8]
    e964:	4313      	orrs	r3, r2
    e966:	f043 0310 	orr.w	r3, r3, #16
    e96a:	62e3      	str	r3, [r4, #44]	; 0x2c
    e96c:	f7ff fe16 	bl	e59c <am_hal_interrupt_master_disable>
    e970:	9003      	str	r0, [sp, #12]
    e972:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e974:	f043 0301 	orr.w	r3, r3, #1
    e978:	6323      	str	r3, [r4, #48]	; 0x30
    e97a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e97c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e980:	6323      	str	r3, [r4, #48]	; 0x30
    e982:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e988:	6323      	str	r3, [r4, #48]	; 0x30
    e98a:	9803      	ldr	r0, [sp, #12]
    e98c:	f7ff fe0a 	bl	e5a4 <am_hal_interrupt_master_set>
    e990:	682a      	ldr	r2, [r5, #0]
    e992:	4b39      	ldr	r3, [pc, #228]	; (ea78 <am_hal_uart_configure+0x208>)
    e994:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
    e998:	4598      	cmp	r8, r3
    e99a:	d125      	bne.n	e9e8 <am_hal_uart_configure+0x178>
    e99c:	69b1      	ldr	r1, [r6, #24]
    e99e:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
    e9a2:	b111      	cbz	r1, e9aa <am_hal_uart_configure+0x13a>
    e9a4:	69f3      	ldr	r3, [r6, #28]
    e9a6:	2b00      	cmp	r3, #0
    e9a8:	d136      	bne.n	ea18 <am_hal_uart_configure+0x1a8>
    e9aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e9ac:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e9b0:	331c      	adds	r3, #28
    e9b2:	031b      	lsls	r3, r3, #12
    e9b4:	2200      	movs	r2, #0
    e9b6:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    e9ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e9bc:	f022 0220 	bic.w	r2, r2, #32
    e9c0:	639a      	str	r2, [r3, #56]	; 0x38
    e9c2:	b10c      	cbz	r4, e9c8 <am_hal_uart_configure+0x158>
    e9c4:	2f00      	cmp	r7, #0
    e9c6:	d13d      	bne.n	ea44 <am_hal_uart_configure+0x1d4>
    e9c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e9ca:	2000      	movs	r0, #0
    e9cc:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e9d0:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    e9d4:	639a      	str	r2, [r3, #56]	; 0x38
    e9d6:	b004      	add	sp, #16
    e9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9dc:	3b01      	subs	r3, #1
    e9de:	f003 0707 	and.w	r7, r3, #7
    e9e2:	e761      	b.n	e8a8 <am_hal_uart_configure+0x38>
    e9e4:	2002      	movs	r0, #2
    e9e6:	4770      	bx	lr
    e9e8:	2000      	movs	r0, #0
    e9ea:	b004      	add	sp, #16
    e9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9f0:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
    e9f4:	f67f af7e 	bls.w	e8f4 <am_hal_uart_configure+0x84>
    e9f8:	4823      	ldr	r0, [pc, #140]	; (ea88 <am_hal_uart_configure+0x218>)
    e9fa:	e7ec      	b.n	e9d6 <am_hal_uart_configure+0x166>
    e9fc:	4823      	ldr	r0, [pc, #140]	; (ea8c <am_hal_uart_configure+0x21c>)
    e9fe:	2300      	movs	r3, #0
    ea00:	662b      	str	r3, [r5, #96]	; 0x60
    ea02:	b004      	add	sp, #16
    ea04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea08:	2006      	movs	r0, #6
    ea0a:	b004      	add	sp, #16
    ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea10:	2300      	movs	r3, #0
    ea12:	481d      	ldr	r0, [pc, #116]	; (ea88 <am_hal_uart_configure+0x218>)
    ea14:	662b      	str	r3, [r5, #96]	; 0x60
    ea16:	e7de      	b.n	e9d6 <am_hal_uart_configure+0x166>
    ea18:	2201      	movs	r2, #1
    ea1a:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    ea1e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    ea22:	f000 fb89 	bl	f138 <am_hal_queue_init>
    ea26:	682b      	ldr	r3, [r5, #0]
    ea28:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea2c:	4543      	cmp	r3, r8
    ea2e:	d1db      	bne.n	e9e8 <am_hal_uart_configure+0x178>
    ea30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea32:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea36:	331c      	adds	r3, #28
    ea38:	031b      	lsls	r3, r3, #12
    ea3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ea3c:	f042 0220 	orr.w	r2, r2, #32
    ea40:	639a      	str	r2, [r3, #56]	; 0x38
    ea42:	e7be      	b.n	e9c2 <am_hal_uart_configure+0x152>
    ea44:	2201      	movs	r2, #1
    ea46:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
    ea4a:	463b      	mov	r3, r7
    ea4c:	4621      	mov	r1, r4
    ea4e:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ea52:	f000 fb71 	bl	f138 <am_hal_queue_init>
    ea56:	682b      	ldr	r3, [r5, #0]
    ea58:	4a07      	ldr	r2, [pc, #28]	; (ea78 <am_hal_uart_configure+0x208>)
    ea5a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ea5e:	4293      	cmp	r3, r2
    ea60:	d1c2      	bne.n	e9e8 <am_hal_uart_configure+0x178>
    ea62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea68:	331c      	adds	r3, #28
    ea6a:	031b      	lsls	r3, r3, #12
    ea6c:	2000      	movs	r0, #0
    ea6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ea70:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    ea74:	639a      	str	r2, [r3, #56]	; 0x38
    ea76:	e7ae      	b.n	e9d6 <am_hal_uart_configure+0x166>
    ea78:	01ea9e06 	.word	0x01ea9e06
    ea7c:	40020000 	.word	0x40020000
    ea80:	0016e360 	.word	0x0016e360
    ea84:	0000f59c 	.word	0x0000f59c
    ea88:	08000003 	.word	0x08000003
    ea8c:	08000002 	.word	0x08000002

0000ea90 <am_hal_uart_transfer>:
    ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea94:	ed2d 8b02 	vpush	{d8}
    ea98:	680d      	ldr	r5, [r1, #0]
    ea9a:	b091      	sub	sp, #68	; 0x44
    ea9c:	4604      	mov	r4, r0
    ea9e:	b14d      	cbz	r5, eab4 <am_hal_uart_transfer+0x24>
    eaa0:	2d01      	cmp	r5, #1
    eaa2:	f000 808f 	beq.w	ebc4 <am_hal_uart_transfer+0x134>
    eaa6:	2507      	movs	r5, #7
    eaa8:	4628      	mov	r0, r5
    eaaa:	b011      	add	sp, #68	; 0x44
    eaac:	ecbd 8b02 	vpop	{d8}
    eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eab4:	e9d1 b802 	ldrd	fp, r8, [r1, #8]
    eab8:	684b      	ldr	r3, [r1, #4]
    eaba:	690a      	ldr	r2, [r1, #16]
    eabc:	9202      	str	r2, [sp, #8]
    eabe:	4618      	mov	r0, r3
    eac0:	f1b8 0f00 	cmp.w	r8, #0
    eac4:	f000 8111 	beq.w	ecea <am_hal_uart_transfer+0x25a>
    eac8:	f1bb 0f00 	cmp.w	fp, #0
    eacc:	f000 8172 	beq.w	edb4 <am_hal_uart_transfer+0x324>
    ead0:	2c00      	cmp	r4, #0
    ead2:	f000 8165 	beq.w	eda0 <am_hal_uart_transfer+0x310>
    ead6:	46a9      	mov	r9, r5
    ead8:	462f      	mov	r7, r5
    eada:	9501      	str	r5, [sp, #4]
    eadc:	4625      	mov	r5, r4
    eade:	4619      	mov	r1, r3
    eae0:	682a      	ldr	r2, [r5, #0]
    eae2:	461c      	mov	r4, r3
    eae4:	4bad      	ldr	r3, [pc, #692]	; (ed9c <am_hal_uart_transfer+0x30c>)
    eae6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eaea:	429a      	cmp	r2, r3
    eaec:	465e      	mov	r6, fp
    eaee:	d12d      	bne.n	eb4c <am_hal_uart_transfer+0xbc>
    eaf0:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    eaf4:	bb7a      	cbnz	r2, eb56 <am_hal_uart_transfer+0xc6>
    eaf6:	1e48      	subs	r0, r1, #1
    eaf8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    eafa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    eafe:	311c      	adds	r1, #28
    eb00:	0309      	lsls	r1, r1, #12
    eb02:	698b      	ldr	r3, [r1, #24]
    eb04:	069b      	lsls	r3, r3, #26
    eb06:	d405      	bmi.n	eb14 <am_hal_uart_transfer+0x84>
    eb08:	3201      	adds	r2, #1
    eb0a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    eb0e:	600b      	str	r3, [r1, #0]
    eb10:	4296      	cmp	r6, r2
    eb12:	d8f6      	bhi.n	eb02 <am_hal_uart_transfer+0x72>
    eb14:	4417      	add	r7, r2
    eb16:	1ab6      	subs	r6, r6, r2
    eb18:	b936      	cbnz	r6, eb28 <am_hal_uart_transfer+0x98>
    eb1a:	9d01      	ldr	r5, [sp, #4]
    eb1c:	9b02      	ldr	r3, [sp, #8]
    eb1e:	2b00      	cmp	r3, #0
    eb20:	f000 808c 	beq.w	ec3c <am_hal_uart_transfer+0x1ac>
    eb24:	601f      	str	r7, [r3, #0]
    eb26:	e7bf      	b.n	eaa8 <am_hal_uart_transfer+0x18>
    eb28:	2010      	movs	r0, #16
    eb2a:	f7ff fba9 	bl	e280 <am_hal_flash_delay>
    eb2e:	f1b8 3fff 	cmp.w	r8, #4294967295
    eb32:	bf18      	it	ne
    eb34:	f109 0901 	addne.w	r9, r9, #1
    eb38:	45c8      	cmp	r8, r9
    eb3a:	d9ee      	bls.n	eb1a <am_hal_uart_transfer+0x8a>
    eb3c:	682a      	ldr	r2, [r5, #0]
    eb3e:	4b97      	ldr	r3, [pc, #604]	; (ed9c <am_hal_uart_transfer+0x30c>)
    eb40:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eb44:	429a      	cmp	r2, r3
    eb46:	eb04 0107 	add.w	r1, r4, r7
    eb4a:	d0d1      	beq.n	eaf0 <am_hal_uart_transfer+0x60>
    eb4c:	9b02      	ldr	r3, [sp, #8]
    eb4e:	b103      	cbz	r3, eb52 <am_hal_uart_transfer+0xc2>
    eb50:	601f      	str	r7, [r3, #0]
    eb52:	2502      	movs	r5, #2
    eb54:	e7a8      	b.n	eaa8 <am_hal_uart_transfer+0x18>
    eb56:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
    eb5a:	1a12      	subs	r2, r2, r0
    eb5c:	42b2      	cmp	r2, r6
    eb5e:	4613      	mov	r3, r2
    eb60:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
    eb64:	bf28      	it	cs
    eb66:	4633      	movcs	r3, r6
    eb68:	461a      	mov	r2, r3
    eb6a:	4658      	mov	r0, fp
    eb6c:	9303      	str	r3, [sp, #12]
    eb6e:	f000 faef 	bl	f150 <am_hal_queue_item_add>
    eb72:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    eb76:	f7ff fd11 	bl	e59c <am_hal_interrupt_master_disable>
    eb7a:	f50a 2a80 	add.w	sl, sl, #262144	; 0x40000
    eb7e:	f10a 0a1c 	add.w	sl, sl, #28
    eb82:	9008      	str	r0, [sp, #32]
    eb84:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
    eb88:	e00d      	b.n	eba6 <am_hal_uart_transfer+0x116>
    eb8a:	f000 fb1f 	bl	f1cc <am_hal_queue_item_get>
    eb8e:	b190      	cbz	r0, ebb6 <am_hal_uart_transfer+0x126>
    eb90:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eb92:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eb96:	321c      	adds	r2, #28
    eb98:	0312      	lsls	r2, r2, #12
    eb9a:	6993      	ldr	r3, [r2, #24]
    eb9c:	0699      	lsls	r1, r3, #26
    eb9e:	bf5c      	itt	pl
    eba0:	f89d 301c 	ldrbpl.w	r3, [sp, #28]
    eba4:	6013      	strpl	r3, [r2, #0]
    eba6:	f8da 3018 	ldr.w	r3, [sl, #24]
    ebaa:	069b      	lsls	r3, r3, #26
    ebac:	f04f 0201 	mov.w	r2, #1
    ebb0:	a907      	add	r1, sp, #28
    ebb2:	4658      	mov	r0, fp
    ebb4:	d5e9      	bpl.n	eb8a <am_hal_uart_transfer+0xfa>
    ebb6:	9b03      	ldr	r3, [sp, #12]
    ebb8:	9808      	ldr	r0, [sp, #32]
    ebba:	441f      	add	r7, r3
    ebbc:	1af6      	subs	r6, r6, r3
    ebbe:	f7ff fcf1 	bl	e5a4 <am_hal_interrupt_master_set>
    ebc2:	e7a9      	b.n	eb18 <am_hal_uart_transfer+0x88>
    ebc4:	68cd      	ldr	r5, [r1, #12]
    ebc6:	690b      	ldr	r3, [r1, #16]
    ebc8:	9301      	str	r3, [sp, #4]
    ebca:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
    ebce:	2d00      	cmp	r5, #0
    ebd0:	f000 80b5 	beq.w	ed3e <am_hal_uart_transfer+0x2ae>
    ebd4:	2f00      	cmp	r7, #0
    ebd6:	f000 811e 	beq.w	ee16 <am_hal_uart_transfer+0x386>
    ebda:	2800      	cmp	r0, #0
    ebdc:	f000 80e7 	beq.w	edae <am_hal_uart_transfer+0x31e>
    ebe0:	6822      	ldr	r2, [r4, #0]
    ebe2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; ed9c <am_hal_uart_transfer+0x30c>
    ebe6:	f100 0348 	add.w	r3, r0, #72	; 0x48
    ebea:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ebee:	ee08 3a10 	vmov	s16, r3
    ebf2:	f04f 0900 	mov.w	r9, #0
    ebf6:	462b      	mov	r3, r5
    ebf8:	4552      	cmp	r2, sl
    ebfa:	46c8      	mov	r8, r9
    ebfc:	465d      	mov	r5, fp
    ebfe:	461e      	mov	r6, r3
    ec00:	d133      	bne.n	ec6a <am_hal_uart_transfer+0x1da>
    ec02:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    ec06:	2a00      	cmp	r2, #0
    ec08:	d137      	bne.n	ec7a <am_hal_uart_transfer+0x1ea>
    ec0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ec0c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ec10:	311c      	adds	r1, #28
    ec12:	1e68      	subs	r0, r5, #1
    ec14:	0309      	lsls	r1, r1, #12
    ec16:	698b      	ldr	r3, [r1, #24]
    ec18:	06dd      	lsls	r5, r3, #27
    ec1a:	d408      	bmi.n	ec2e <am_hal_uart_transfer+0x19e>
    ec1c:	680b      	ldr	r3, [r1, #0]
    ec1e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ec22:	d15e      	bne.n	ece2 <am_hal_uart_transfer+0x252>
    ec24:	3201      	adds	r2, #1
    ec26:	4297      	cmp	r7, r2
    ec28:	f800 3f01 	strb.w	r3, [r0, #1]!
    ec2c:	d8f3      	bhi.n	ec16 <am_hal_uart_transfer+0x186>
    ec2e:	4490      	add	r8, r2
    ec30:	1abf      	subs	r7, r7, r2
    ec32:	b957      	cbnz	r7, ec4a <am_hal_uart_transfer+0x1ba>
    ec34:	9b01      	ldr	r3, [sp, #4]
    ec36:	b10b      	cbz	r3, ec3c <am_hal_uart_transfer+0x1ac>
    ec38:	f8c3 8000 	str.w	r8, [r3]
    ec3c:	2500      	movs	r5, #0
    ec3e:	4628      	mov	r0, r5
    ec40:	b011      	add	sp, #68	; 0x44
    ec42:	ecbd 8b02 	vpop	{d8}
    ec46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec4a:	2010      	movs	r0, #16
    ec4c:	f7ff fb18 	bl	e280 <am_hal_flash_delay>
    ec50:	1c73      	adds	r3, r6, #1
    ec52:	bf18      	it	ne
    ec54:	f109 0901 	addne.w	r9, r9, #1
    ec58:	454e      	cmp	r6, r9
    ec5a:	d9eb      	bls.n	ec34 <am_hal_uart_transfer+0x1a4>
    ec5c:	6822      	ldr	r2, [r4, #0]
    ec5e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ec62:	4552      	cmp	r2, sl
    ec64:	eb0b 0508 	add.w	r5, fp, r8
    ec68:	d0cb      	beq.n	ec02 <am_hal_uart_transfer+0x172>
    ec6a:	2502      	movs	r5, #2
    ec6c:	9b01      	ldr	r3, [sp, #4]
    ec6e:	2b00      	cmp	r3, #0
    ec70:	f43f af1a 	beq.w	eaa8 <am_hal_uart_transfer+0x18>
    ec74:	f8c3 8000 	str.w	r8, [r3]
    ec78:	e716      	b.n	eaa8 <am_hal_uart_transfer+0x18>
    ec7a:	f7ff fc8f 	bl	e59c <am_hal_interrupt_master_disable>
    ec7e:	9007      	str	r0, [sp, #28]
    ec80:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ec82:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ec86:	301c      	adds	r0, #28
    ec88:	0300      	lsls	r0, r0, #12
    ec8a:	f10d 0c20 	add.w	ip, sp, #32
    ec8e:	2200      	movs	r2, #0
    ec90:	6983      	ldr	r3, [r0, #24]
    ec92:	06db      	lsls	r3, r3, #27
    ec94:	d409      	bmi.n	ecaa <am_hal_uart_transfer+0x21a>
    ec96:	6803      	ldr	r3, [r0, #0]
    ec98:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ec9c:	f102 0201 	add.w	r2, r2, #1
    eca0:	d119      	bne.n	ecd6 <am_hal_uart_transfer+0x246>
    eca2:	2a20      	cmp	r2, #32
    eca4:	f80c 3b01 	strb.w	r3, [ip], #1
    eca8:	d1f2      	bne.n	ec90 <am_hal_uart_transfer+0x200>
    ecaa:	ee18 0a10 	vmov	r0, s16
    ecae:	a908      	add	r1, sp, #32
    ecb0:	f000 fa4e 	bl	f150 <am_hal_queue_item_add>
    ecb4:	2800      	cmp	r0, #0
    ecb6:	d075      	beq.n	eda4 <am_hal_uart_transfer+0x314>
    ecb8:	9807      	ldr	r0, [sp, #28]
    ecba:	f7ff fc73 	bl	e5a4 <am_hal_interrupt_master_set>
    ecbe:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ecc0:	42ba      	cmp	r2, r7
    ecc2:	bf28      	it	cs
    ecc4:	463a      	movcs	r2, r7
    ecc6:	ee18 0a10 	vmov	r0, s16
    ecca:	4629      	mov	r1, r5
    eccc:	4490      	add	r8, r2
    ecce:	1abf      	subs	r7, r7, r2
    ecd0:	f000 fa7c 	bl	f1cc <am_hal_queue_item_get>
    ecd4:	e7ad      	b.n	ec32 <am_hal_uart_transfer+0x1a2>
    ecd6:	9807      	ldr	r0, [sp, #28]
    ecd8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ecdc:	f7ff fc62 	bl	e5a4 <am_hal_interrupt_master_set>
    ece0:	e7c4      	b.n	ec6c <am_hal_uart_transfer+0x1dc>
    ece2:	4490      	add	r8, r2
    ece4:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ece8:	e7c0      	b.n	ec6c <am_hal_uart_transfer+0x1dc>
    ecea:	2c00      	cmp	r4, #0
    ecec:	f43f af31 	beq.w	eb52 <am_hal_uart_transfer+0xc2>
    ecf0:	6822      	ldr	r2, [r4, #0]
    ecf2:	492a      	ldr	r1, [pc, #168]	; (ed9c <am_hal_uart_transfer+0x30c>)
    ecf4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ecf8:	428a      	cmp	r2, r1
    ecfa:	f47f af2a 	bne.w	eb52 <am_hal_uart_transfer+0xc2>
    ecfe:	9b02      	ldr	r3, [sp, #8]
    ed00:	b10b      	cbz	r3, ed06 <am_hal_uart_transfer+0x276>
    ed02:	f8c3 8000 	str.w	r8, [r3]
    ed06:	f1bb 0f00 	cmp.w	fp, #0
    ed0a:	d097      	beq.n	ec3c <am_hal_uart_transfer+0x1ac>
    ed0c:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    ed10:	2d00      	cmp	r5, #0
    ed12:	d151      	bne.n	edb8 <am_hal_uart_transfer+0x328>
    ed14:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ed16:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ed1a:	311c      	adds	r1, #28
    ed1c:	1e42      	subs	r2, r0, #1
    ed1e:	0309      	lsls	r1, r1, #12
    ed20:	698b      	ldr	r3, [r1, #24]
    ed22:	0698      	lsls	r0, r3, #26
    ed24:	d405      	bmi.n	ed32 <am_hal_uart_transfer+0x2a2>
    ed26:	3501      	adds	r5, #1
    ed28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    ed2c:	600b      	str	r3, [r1, #0]
    ed2e:	45ab      	cmp	fp, r5
    ed30:	d1f6      	bne.n	ed20 <am_hal_uart_transfer+0x290>
    ed32:	9b02      	ldr	r3, [sp, #8]
    ed34:	2b00      	cmp	r3, #0
    ed36:	d081      	beq.n	ec3c <am_hal_uart_transfer+0x1ac>
    ed38:	601d      	str	r5, [r3, #0]
    ed3a:	2500      	movs	r5, #0
    ed3c:	e6b4      	b.n	eaa8 <am_hal_uart_transfer+0x18>
    ed3e:	2800      	cmp	r0, #0
    ed40:	f43f af07 	beq.w	eb52 <am_hal_uart_transfer+0xc2>
    ed44:	6802      	ldr	r2, [r0, #0]
    ed46:	4915      	ldr	r1, [pc, #84]	; (ed9c <am_hal_uart_transfer+0x30c>)
    ed48:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ed4c:	428a      	cmp	r2, r1
    ed4e:	f47f af00 	bne.w	eb52 <am_hal_uart_transfer+0xc2>
    ed52:	b103      	cbz	r3, ed56 <am_hal_uart_transfer+0x2c6>
    ed54:	601d      	str	r5, [r3, #0]
    ed56:	2f00      	cmp	r7, #0
    ed58:	f43f af70 	beq.w	ec3c <am_hal_uart_transfer+0x1ac>
    ed5c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    ed60:	2a00      	cmp	r2, #0
    ed62:	d15a      	bne.n	ee1a <am_hal_uart_transfer+0x38a>
    ed64:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ed66:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ed6a:	311c      	adds	r1, #28
    ed6c:	f10b 33ff 	add.w	r3, fp, #4294967295
    ed70:	0309      	lsls	r1, r1, #12
    ed72:	4614      	mov	r4, r2
    ed74:	698a      	ldr	r2, [r1, #24]
    ed76:	06d2      	lsls	r2, r2, #27
    ed78:	d409      	bmi.n	ed8e <am_hal_uart_transfer+0x2fe>
    ed7a:	680a      	ldr	r2, [r1, #0]
    ed7c:	f412 6070 	ands.w	r0, r2, #3840	; 0xf00
    ed80:	d176      	bne.n	ee70 <am_hal_uart_transfer+0x3e0>
    ed82:	3401      	adds	r4, #1
    ed84:	42a7      	cmp	r7, r4
    ed86:	f803 2f01 	strb.w	r2, [r3, #1]!
    ed8a:	d1f3      	bne.n	ed74 <am_hal_uart_transfer+0x2e4>
    ed8c:	4605      	mov	r5, r0
    ed8e:	9b01      	ldr	r3, [sp, #4]
    ed90:	2b00      	cmp	r3, #0
    ed92:	f43f ae89 	beq.w	eaa8 <am_hal_uart_transfer+0x18>
    ed96:	601c      	str	r4, [r3, #0]
    ed98:	e686      	b.n	eaa8 <am_hal_uart_transfer+0x18>
    ed9a:	bf00      	nop
    ed9c:	01ea9e06 	.word	0x01ea9e06
    eda0:	4627      	mov	r7, r4
    eda2:	e6d3      	b.n	eb4c <am_hal_uart_transfer+0xbc>
    eda4:	9807      	ldr	r0, [sp, #28]
    eda6:	4d39      	ldr	r5, [pc, #228]	; (ee8c <am_hal_uart_transfer+0x3fc>)
    eda8:	f7ff fbfc 	bl	e5a4 <am_hal_interrupt_master_set>
    edac:	e75e      	b.n	ec6c <am_hal_uart_transfer+0x1dc>
    edae:	2502      	movs	r5, #2
    edb0:	4680      	mov	r8, r0
    edb2:	e75b      	b.n	ec6c <am_hal_uart_transfer+0x1dc>
    edb4:	462f      	mov	r7, r5
    edb6:	e6b1      	b.n	eb1c <am_hal_uart_transfer+0x8c>
    edb8:	6b65      	ldr	r5, [r4, #52]	; 0x34
    edba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    edbc:	1b52      	subs	r2, r2, r5
    edbe:	455a      	cmp	r2, fp
    edc0:	f104 072c 	add.w	r7, r4, #44	; 0x2c
    edc4:	4601      	mov	r1, r0
    edc6:	bf28      	it	cs
    edc8:	465a      	movcs	r2, fp
    edca:	4638      	mov	r0, r7
    edcc:	4615      	mov	r5, r2
    edce:	f000 f9bf 	bl	f150 <am_hal_queue_item_add>
    edd2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    edd4:	f7ff fbe2 	bl	e59c <am_hal_interrupt_master_disable>
    edd8:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    eddc:	361c      	adds	r6, #28
    edde:	9005      	str	r0, [sp, #20]
    ede0:	0336      	lsls	r6, r6, #12
    ede2:	e00f      	b.n	ee04 <am_hal_uart_transfer+0x374>
    ede4:	a908      	add	r1, sp, #32
    ede6:	4638      	mov	r0, r7
    ede8:	f000 f9f0 	bl	f1cc <am_hal_queue_item_get>
    edec:	b178      	cbz	r0, ee0e <am_hal_uart_transfer+0x37e>
    edee:	6a62      	ldr	r2, [r4, #36]	; 0x24
    edf0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    edf4:	321c      	adds	r2, #28
    edf6:	0312      	lsls	r2, r2, #12
    edf8:	6993      	ldr	r3, [r2, #24]
    edfa:	0699      	lsls	r1, r3, #26
    edfc:	bf5c      	itt	pl
    edfe:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
    ee02:	6013      	strpl	r3, [r2, #0]
    ee04:	69b3      	ldr	r3, [r6, #24]
    ee06:	069b      	lsls	r3, r3, #26
    ee08:	f04f 0201 	mov.w	r2, #1
    ee0c:	d5ea      	bpl.n	ede4 <am_hal_uart_transfer+0x354>
    ee0e:	9805      	ldr	r0, [sp, #20]
    ee10:	f7ff fbc8 	bl	e5a4 <am_hal_interrupt_master_set>
    ee14:	e78d      	b.n	ed32 <am_hal_uart_transfer+0x2a2>
    ee16:	46b8      	mov	r8, r7
    ee18:	e70c      	b.n	ec34 <am_hal_uart_transfer+0x1a4>
    ee1a:	f7ff fbbf 	bl	e59c <am_hal_interrupt_master_disable>
    ee1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ee20:	9006      	str	r0, [sp, #24]
    ee22:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ee26:	311c      	adds	r1, #28
    ee28:	0309      	lsls	r1, r1, #12
    ee2a:	ae08      	add	r6, sp, #32
    ee2c:	2200      	movs	r2, #0
    ee2e:	698b      	ldr	r3, [r1, #24]
    ee30:	06d8      	lsls	r0, r3, #27
    ee32:	d409      	bmi.n	ee48 <am_hal_uart_transfer+0x3b8>
    ee34:	680b      	ldr	r3, [r1, #0]
    ee36:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ee3a:	f102 0201 	add.w	r2, r2, #1
    ee3e:	d11a      	bne.n	ee76 <am_hal_uart_transfer+0x3e6>
    ee40:	2a20      	cmp	r2, #32
    ee42:	f806 3b01 	strb.w	r3, [r6], #1
    ee46:	d1f2      	bne.n	ee2e <am_hal_uart_transfer+0x39e>
    ee48:	f104 0648 	add.w	r6, r4, #72	; 0x48
    ee4c:	a908      	add	r1, sp, #32
    ee4e:	4630      	mov	r0, r6
    ee50:	f000 f97e 	bl	f150 <am_hal_queue_item_add>
    ee54:	b1a8      	cbz	r0, ee82 <am_hal_uart_transfer+0x3f2>
    ee56:	9806      	ldr	r0, [sp, #24]
    ee58:	f7ff fba4 	bl	e5a4 <am_hal_interrupt_master_set>
    ee5c:	6d24      	ldr	r4, [r4, #80]	; 0x50
    ee5e:	42bc      	cmp	r4, r7
    ee60:	bf28      	it	cs
    ee62:	463c      	movcs	r4, r7
    ee64:	4659      	mov	r1, fp
    ee66:	4630      	mov	r0, r6
    ee68:	4622      	mov	r2, r4
    ee6a:	f000 f9af 	bl	f1cc <am_hal_queue_item_get>
    ee6e:	e78e      	b.n	ed8e <am_hal_uart_transfer+0x2fe>
    ee70:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ee74:	e78b      	b.n	ed8e <am_hal_uart_transfer+0x2fe>
    ee76:	9806      	ldr	r0, [sp, #24]
    ee78:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    ee7c:	f7ff fb92 	bl	e5a4 <am_hal_interrupt_master_set>
    ee80:	e612      	b.n	eaa8 <am_hal_uart_transfer+0x18>
    ee82:	9806      	ldr	r0, [sp, #24]
    ee84:	4d01      	ldr	r5, [pc, #4]	; (ee8c <am_hal_uart_transfer+0x3fc>)
    ee86:	f7ff fb8d 	bl	e5a4 <am_hal_interrupt_master_set>
    ee8a:	e60d      	b.n	eaa8 <am_hal_uart_transfer+0x18>
    ee8c:	08000001 	.word	0x08000001

0000ee90 <am_hal_uart_interrupt_service>:
    ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee94:	4680      	mov	r8, r0
    ee96:	484a      	ldr	r0, [pc, #296]	; (efc0 <am_hal_uart_interrupt_service+0x130>)
    ee98:	f8d8 3000 	ldr.w	r3, [r8]
    ee9c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eea0:	4283      	cmp	r3, r0
    eea2:	b08a      	sub	sp, #40	; 0x28
    eea4:	d126      	bne.n	eef4 <am_hal_uart_interrupt_service+0x64>
    eea6:	f011 0f50 	tst.w	r1, #80	; 0x50
    eeaa:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
    eeae:	460e      	mov	r6, r1
    eeb0:	4614      	mov	r4, r2
    eeb2:	d002      	beq.n	eeba <am_hal_uart_interrupt_service+0x2a>
    eeb4:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
    eeb8:	bb6b      	cbnz	r3, ef16 <am_hal_uart_interrupt_service+0x86>
    eeba:	06b6      	lsls	r6, r6, #26
    eebc:	d40a      	bmi.n	eed4 <am_hal_uart_interrupt_service+0x44>
    eebe:	b12c      	cbz	r4, eecc <am_hal_uart_interrupt_service+0x3c>
    eec0:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    eec4:	b163      	cbz	r3, eee0 <am_hal_uart_interrupt_service+0x50>
    eec6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    eeca:	b1bb      	cbz	r3, eefc <am_hal_uart_interrupt_service+0x6c>
    eecc:	2000      	movs	r0, #0
    eece:	b00a      	add	sp, #40	; 0x28
    eed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eed4:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    eed8:	2b00      	cmp	r3, #0
    eeda:	d13e      	bne.n	ef5a <am_hal_uart_interrupt_service+0xca>
    eedc:	2c00      	cmp	r4, #0
    eede:	d0f5      	beq.n	eecc <am_hal_uart_interrupt_service+0x3c>
    eee0:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    eee4:	351c      	adds	r5, #28
    eee6:	032d      	lsls	r5, r5, #12
    eee8:	69ab      	ldr	r3, [r5, #24]
    eeea:	071b      	lsls	r3, r3, #28
    eeec:	d40e      	bmi.n	ef0c <am_hal_uart_interrupt_service+0x7c>
    eeee:	2301      	movs	r3, #1
    eef0:	6023      	str	r3, [r4, #0]
    eef2:	e7eb      	b.n	eecc <am_hal_uart_interrupt_service+0x3c>
    eef4:	2002      	movs	r0, #2
    eef6:	b00a      	add	sp, #40	; 0x28
    eef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eefc:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    ef00:	351c      	adds	r5, #28
    ef02:	032d      	lsls	r5, r5, #12
    ef04:	69ab      	ldr	r3, [r5, #24]
    ef06:	071a      	lsls	r2, r3, #28
    ef08:	d4e0      	bmi.n	eecc <am_hal_uart_interrupt_service+0x3c>
    ef0a:	e7f0      	b.n	eeee <am_hal_uart_interrupt_service+0x5e>
    ef0c:	2000      	movs	r0, #0
    ef0e:	6020      	str	r0, [r4, #0]
    ef10:	b00a      	add	sp, #40	; 0x28
    ef12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef16:	f7ff fb41 	bl	e59c <am_hal_interrupt_master_disable>
    ef1a:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    ef1e:	9001      	str	r0, [sp, #4]
    ef20:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ef24:	311c      	adds	r1, #28
    ef26:	0309      	lsls	r1, r1, #12
    ef28:	a802      	add	r0, sp, #8
    ef2a:	2200      	movs	r2, #0
    ef2c:	698b      	ldr	r3, [r1, #24]
    ef2e:	06df      	lsls	r7, r3, #27
    ef30:	d409      	bmi.n	ef46 <am_hal_uart_interrupt_service+0xb6>
    ef32:	680b      	ldr	r3, [r1, #0]
    ef34:	f413 6f70 	tst.w	r3, #3840	; 0xf00
    ef38:	f102 0201 	add.w	r2, r2, #1
    ef3c:	d134      	bne.n	efa8 <am_hal_uart_interrupt_service+0x118>
    ef3e:	2a20      	cmp	r2, #32
    ef40:	f800 3b01 	strb.w	r3, [r0], #1
    ef44:	d1f2      	bne.n	ef2c <am_hal_uart_interrupt_service+0x9c>
    ef46:	a902      	add	r1, sp, #8
    ef48:	f108 0048 	add.w	r0, r8, #72	; 0x48
    ef4c:	f000 f900 	bl	f150 <am_hal_queue_item_add>
    ef50:	b380      	cbz	r0, efb4 <am_hal_uart_interrupt_service+0x124>
    ef52:	9801      	ldr	r0, [sp, #4]
    ef54:	f7ff fb26 	bl	e5a4 <am_hal_interrupt_master_set>
    ef58:	e7af      	b.n	eeba <am_hal_uart_interrupt_service+0x2a>
    ef5a:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
    ef5e:	f7ff fb1d 	bl	e59c <am_hal_interrupt_master_disable>
    ef62:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
    ef66:	361c      	adds	r6, #28
    ef68:	9002      	str	r0, [sp, #8]
    ef6a:	0336      	lsls	r6, r6, #12
    ef6c:	f108 072c 	add.w	r7, r8, #44	; 0x2c
    ef70:	e011      	b.n	ef96 <am_hal_uart_interrupt_service+0x106>
    ef72:	f10d 0103 	add.w	r1, sp, #3
    ef76:	4638      	mov	r0, r7
    ef78:	f000 f928 	bl	f1cc <am_hal_queue_item_get>
    ef7c:	b180      	cbz	r0, efa0 <am_hal_uart_interrupt_service+0x110>
    ef7e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    ef82:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ef86:	311c      	adds	r1, #28
    ef88:	0309      	lsls	r1, r1, #12
    ef8a:	698b      	ldr	r3, [r1, #24]
    ef8c:	0698      	lsls	r0, r3, #26
    ef8e:	bf5c      	itt	pl
    ef90:	f89d 3003 	ldrbpl.w	r3, [sp, #3]
    ef94:	600b      	strpl	r3, [r1, #0]
    ef96:	69b3      	ldr	r3, [r6, #24]
    ef98:	0699      	lsls	r1, r3, #26
    ef9a:	f04f 0201 	mov.w	r2, #1
    ef9e:	d5e8      	bpl.n	ef72 <am_hal_uart_interrupt_service+0xe2>
    efa0:	9802      	ldr	r0, [sp, #8]
    efa2:	f7ff faff 	bl	e5a4 <am_hal_interrupt_master_set>
    efa6:	e78a      	b.n	eebe <am_hal_uart_interrupt_service+0x2e>
    efa8:	9801      	ldr	r0, [sp, #4]
    efaa:	f7ff fafb 	bl	e5a4 <am_hal_interrupt_master_set>
    efae:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    efb2:	e78c      	b.n	eece <am_hal_uart_interrupt_service+0x3e>
    efb4:	9801      	ldr	r0, [sp, #4]
    efb6:	f7ff faf5 	bl	e5a4 <am_hal_interrupt_master_set>
    efba:	4802      	ldr	r0, [pc, #8]	; (efc4 <am_hal_uart_interrupt_service+0x134>)
    efbc:	e787      	b.n	eece <am_hal_uart_interrupt_service+0x3e>
    efbe:	bf00      	nop
    efc0:	01ea9e06 	.word	0x01ea9e06
    efc4:	08000001 	.word	0x08000001

0000efc8 <am_hal_uart_interrupt_clear>:
    efc8:	6803      	ldr	r3, [r0, #0]
    efca:	4a07      	ldr	r2, [pc, #28]	; (efe8 <am_hal_uart_interrupt_clear+0x20>)
    efcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    efd0:	4293      	cmp	r3, r2
    efd2:	d107      	bne.n	efe4 <am_hal_uart_interrupt_clear+0x1c>
    efd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    efd6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    efda:	331c      	adds	r3, #28
    efdc:	031b      	lsls	r3, r3, #12
    efde:	2000      	movs	r0, #0
    efe0:	6459      	str	r1, [r3, #68]	; 0x44
    efe2:	4770      	bx	lr
    efe4:	2002      	movs	r0, #2
    efe6:	4770      	bx	lr
    efe8:	01ea9e06 	.word	0x01ea9e06

0000efec <am_hal_uart_interrupt_status_get>:
    efec:	6803      	ldr	r3, [r0, #0]
    efee:	b410      	push	{r4}
    eff0:	4c0b      	ldr	r4, [pc, #44]	; (f020 <am_hal_uart_interrupt_status_get+0x34>)
    eff2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eff6:	42a3      	cmp	r3, r4
    eff8:	d10d      	bne.n	f016 <am_hal_uart_interrupt_status_get+0x2a>
    effa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    effc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f000:	331c      	adds	r3, #28
    f002:	031b      	lsls	r3, r3, #12
    f004:	b92a      	cbnz	r2, f012 <am_hal_uart_interrupt_status_get+0x26>
    f006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f008:	f85d 4b04 	ldr.w	r4, [sp], #4
    f00c:	600b      	str	r3, [r1, #0]
    f00e:	2000      	movs	r0, #0
    f010:	4770      	bx	lr
    f012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f014:	e7f8      	b.n	f008 <am_hal_uart_interrupt_status_get+0x1c>
    f016:	2002      	movs	r0, #2
    f018:	f85d 4b04 	ldr.w	r4, [sp], #4
    f01c:	4770      	bx	lr
    f01e:	bf00      	nop
    f020:	01ea9e06 	.word	0x01ea9e06

0000f024 <am_hal_triple_read>:
    f024:	b412      	push	{r1, r4}
    f026:	f3ef 8410 	mrs	r4, PRIMASK
    f02a:	b672      	cpsid	i
    f02c:	6801      	ldr	r1, [r0, #0]
    f02e:	6802      	ldr	r2, [r0, #0]
    f030:	6803      	ldr	r3, [r0, #0]
    f032:	f384 8810 	msr	PRIMASK, r4
    f036:	bc11      	pop	{r0, r4}
    f038:	6001      	str	r1, [r0, #0]
    f03a:	6042      	str	r2, [r0, #4]
    f03c:	6083      	str	r3, [r0, #8]
    f03e:	4770      	bx	lr

0000f040 <am_hal_pwrctrl_periph_enable>:
    f040:	b5f0      	push	{r4, r5, r6, r7, lr}
    f042:	b083      	sub	sp, #12
    f044:	4604      	mov	r4, r0
    f046:	f7ff faa9 	bl	e59c <am_hal_interrupt_master_disable>
    f04a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f04e:	4e15      	ldr	r6, [pc, #84]	; (f0a4 <am_hal_pwrctrl_periph_enable+0x64>)
    f050:	4d15      	ldr	r5, [pc, #84]	; (f0a8 <am_hal_pwrctrl_periph_enable+0x68>)
    f052:	9000      	str	r0, [sp, #0]
    f054:	00a4      	lsls	r4, r4, #2
    f056:	68b3      	ldr	r3, [r6, #8]
    f058:	592f      	ldr	r7, [r5, r4]
    f05a:	433b      	orrs	r3, r7
    f05c:	60b3      	str	r3, [r6, #8]
    f05e:	9800      	ldr	r0, [sp, #0]
    f060:	442c      	add	r4, r5
    f062:	f7ff fa9f 	bl	e5a4 <am_hal_interrupt_master_set>
    f066:	20a0      	movs	r0, #160	; 0xa0
    f068:	f7ff f90a 	bl	e280 <am_hal_flash_delay>
    f06c:	69b3      	ldr	r3, [r6, #24]
    f06e:	6864      	ldr	r4, [r4, #4]
    f070:	4223      	tst	r3, r4
    f072:	d103      	bne.n	f07c <am_hal_pwrctrl_periph_enable+0x3c>
    f074:	20a0      	movs	r0, #160	; 0xa0
    f076:	f7ff f903 	bl	e280 <am_hal_flash_delay>
    f07a:	69b3      	ldr	r3, [r6, #24]
    f07c:	4d09      	ldr	r5, [pc, #36]	; (f0a4 <am_hal_pwrctrl_periph_enable+0x64>)
    f07e:	69ab      	ldr	r3, [r5, #24]
    f080:	4223      	tst	r3, r4
    f082:	d002      	beq.n	f08a <am_hal_pwrctrl_periph_enable+0x4a>
    f084:	2000      	movs	r0, #0
    f086:	b003      	add	sp, #12
    f088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f08a:	f7ff fa87 	bl	e59c <am_hal_interrupt_master_disable>
    f08e:	9001      	str	r0, [sp, #4]
    f090:	68ab      	ldr	r3, [r5, #8]
    f092:	ea23 0707 	bic.w	r7, r3, r7
    f096:	60af      	str	r7, [r5, #8]
    f098:	9801      	ldr	r0, [sp, #4]
    f09a:	f7ff fa83 	bl	e5a4 <am_hal_interrupt_master_set>
    f09e:	2001      	movs	r0, #1
    f0a0:	b003      	add	sp, #12
    f0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0a4:	40021000 	.word	0x40021000
    f0a8:	0000f5ac 	.word	0x0000f5ac

0000f0ac <am_hal_pwrctrl_periph_disable>:
    f0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0ae:	b083      	sub	sp, #12
    f0b0:	4604      	mov	r4, r0
    f0b2:	f7ff fa73 	bl	e59c <am_hal_interrupt_master_disable>
    f0b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f0ba:	4e1d      	ldr	r6, [pc, #116]	; (f130 <am_hal_pwrctrl_periph_disable+0x84>)
    f0bc:	4d1d      	ldr	r5, [pc, #116]	; (f134 <am_hal_pwrctrl_periph_disable+0x88>)
    f0be:	9001      	str	r0, [sp, #4]
    f0c0:	00a4      	lsls	r4, r4, #2
    f0c2:	68b3      	ldr	r3, [r6, #8]
    f0c4:	592f      	ldr	r7, [r5, r4]
    f0c6:	ea23 0307 	bic.w	r3, r3, r7
    f0ca:	60b3      	str	r3, [r6, #8]
    f0cc:	9801      	ldr	r0, [sp, #4]
    f0ce:	442c      	add	r4, r5
    f0d0:	f7ff fa68 	bl	e5a4 <am_hal_interrupt_master_set>
    f0d4:	20a0      	movs	r0, #160	; 0xa0
    f0d6:	f7ff f8d3 	bl	e280 <am_hal_flash_delay>
    f0da:	69b3      	ldr	r3, [r6, #24]
    f0dc:	6864      	ldr	r4, [r4, #4]
    f0de:	4223      	tst	r3, r4
    f0e0:	d003      	beq.n	f0ea <am_hal_pwrctrl_periph_disable+0x3e>
    f0e2:	20a0      	movs	r0, #160	; 0xa0
    f0e4:	f7ff f8cc 	bl	e280 <am_hal_flash_delay>
    f0e8:	69b3      	ldr	r3, [r6, #24]
    f0ea:	4b11      	ldr	r3, [pc, #68]	; (f130 <am_hal_pwrctrl_periph_disable+0x84>)
    f0ec:	6998      	ldr	r0, [r3, #24]
    f0ee:	4020      	ands	r0, r4
    f0f0:	d101      	bne.n	f0f6 <am_hal_pwrctrl_periph_disable+0x4a>
    f0f2:	b003      	add	sp, #12
    f0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0f6:	2c08      	cmp	r4, #8
    f0f8:	689b      	ldr	r3, [r3, #8]
    f0fa:	d006      	beq.n	f10a <am_hal_pwrctrl_periph_disable+0x5e>
    f0fc:	2c10      	cmp	r4, #16
    f0fe:	d012      	beq.n	f126 <am_hal_pwrctrl_periph_disable+0x7a>
    f100:	2c04      	cmp	r4, #4
    f102:	d00b      	beq.n	f11c <am_hal_pwrctrl_periph_disable+0x70>
    f104:	2001      	movs	r0, #1
    f106:	b003      	add	sp, #12
    f108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f10a:	f013 0f0e 	tst.w	r3, #14
    f10e:	d0f9      	beq.n	f104 <am_hal_pwrctrl_periph_disable+0x58>
    f110:	421f      	tst	r7, r3
    f112:	bf14      	ite	ne
    f114:	2001      	movne	r0, #1
    f116:	2000      	moveq	r0, #0
    f118:	b003      	add	sp, #12
    f11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f11c:	f240 5281 	movw	r2, #1409	; 0x581
    f120:	4213      	tst	r3, r2
    f122:	d0ef      	beq.n	f104 <am_hal_pwrctrl_periph_disable+0x58>
    f124:	e7f4      	b.n	f110 <am_hal_pwrctrl_periph_disable+0x64>
    f126:	f013 0f70 	tst.w	r3, #112	; 0x70
    f12a:	d0eb      	beq.n	f104 <am_hal_pwrctrl_periph_disable+0x58>
    f12c:	e7f0      	b.n	f110 <am_hal_pwrctrl_periph_disable+0x64>
    f12e:	bf00      	nop
    f130:	40021000 	.word	0x40021000
    f134:	0000f5ac 	.word	0x0000f5ac

0000f138 <am_hal_queue_init>:
    f138:	b410      	push	{r4}
    f13a:	2400      	movs	r4, #0
    f13c:	e9c0 4400 	strd	r4, r4, [r0]
    f140:	e9c0 4302 	strd	r4, r3, [r0, #8]
    f144:	e9c0 2104 	strd	r2, r1, [r0, #16]
    f148:	f85d 4b04 	ldr.w	r4, [sp], #4
    f14c:	4770      	bx	lr
    f14e:	bf00      	nop

0000f150 <am_hal_queue_item_add>:
    f150:	b570      	push	{r4, r5, r6, lr}
    f152:	6905      	ldr	r5, [r0, #16]
    f154:	b082      	sub	sp, #8
    f156:	4604      	mov	r4, r0
    f158:	fb02 f505 	mul.w	r5, r2, r5
    f15c:	460e      	mov	r6, r1
    f15e:	f7ff fa1d 	bl	e59c <am_hal_interrupt_master_disable>
    f162:	68e2      	ldr	r2, [r4, #12]
    f164:	9001      	str	r0, [sp, #4]
    f166:	68a0      	ldr	r0, [r4, #8]
    f168:	1a13      	subs	r3, r2, r0
    f16a:	42ab      	cmp	r3, r5
    f16c:	d31c      	bcc.n	f1a8 <am_hal_queue_item_add+0x58>
    f16e:	b195      	cbz	r5, f196 <am_hal_queue_item_add+0x46>
    f170:	6823      	ldr	r3, [r4, #0]
    f172:	b306      	cbz	r6, f1b6 <am_hal_queue_item_add+0x66>
    f174:	1e71      	subs	r1, r6, #1
    f176:	194e      	adds	r6, r1, r5
    f178:	6962      	ldr	r2, [r4, #20]
    f17a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    f17e:	54d0      	strb	r0, [r2, r3]
    f180:	6823      	ldr	r3, [r4, #0]
    f182:	68e0      	ldr	r0, [r4, #12]
    f184:	3301      	adds	r3, #1
    f186:	428e      	cmp	r6, r1
    f188:	fbb3 f2f0 	udiv	r2, r3, r0
    f18c:	fb00 3312 	mls	r3, r0, r2, r3
    f190:	6023      	str	r3, [r4, #0]
    f192:	d1f1      	bne.n	f178 <am_hal_queue_item_add+0x28>
    f194:	68a0      	ldr	r0, [r4, #8]
    f196:	4405      	add	r5, r0
    f198:	60a5      	str	r5, [r4, #8]
    f19a:	9801      	ldr	r0, [sp, #4]
    f19c:	f7ff fa02 	bl	e5a4 <am_hal_interrupt_master_set>
    f1a0:	2401      	movs	r4, #1
    f1a2:	4620      	mov	r0, r4
    f1a4:	b002      	add	sp, #8
    f1a6:	bd70      	pop	{r4, r5, r6, pc}
    f1a8:	9801      	ldr	r0, [sp, #4]
    f1aa:	f7ff f9fb 	bl	e5a4 <am_hal_interrupt_master_set>
    f1ae:	2400      	movs	r4, #0
    f1b0:	4620      	mov	r0, r4
    f1b2:	b002      	add	sp, #8
    f1b4:	bd70      	pop	{r4, r5, r6, pc}
    f1b6:	4631      	mov	r1, r6
    f1b8:	3101      	adds	r1, #1
    f1ba:	3301      	adds	r3, #1
    f1bc:	428d      	cmp	r5, r1
    f1be:	fbb3 f6f2 	udiv	r6, r3, r2
    f1c2:	fb02 3316 	mls	r3, r2, r6, r3
    f1c6:	d1f7      	bne.n	f1b8 <am_hal_queue_item_add+0x68>
    f1c8:	6023      	str	r3, [r4, #0]
    f1ca:	e7e4      	b.n	f196 <am_hal_queue_item_add+0x46>

0000f1cc <am_hal_queue_item_get>:
    f1cc:	b570      	push	{r4, r5, r6, lr}
    f1ce:	6905      	ldr	r5, [r0, #16]
    f1d0:	4604      	mov	r4, r0
    f1d2:	b082      	sub	sp, #8
    f1d4:	fb02 f505 	mul.w	r5, r2, r5
    f1d8:	460e      	mov	r6, r1
    f1da:	f7ff f9df 	bl	e59c <am_hal_interrupt_master_disable>
    f1de:	68a2      	ldr	r2, [r4, #8]
    f1e0:	9001      	str	r0, [sp, #4]
    f1e2:	42aa      	cmp	r2, r5
    f1e4:	d31c      	bcc.n	f220 <am_hal_queue_item_get+0x54>
    f1e6:	b195      	cbz	r5, f20e <am_hal_queue_item_get+0x42>
    f1e8:	6863      	ldr	r3, [r4, #4]
    f1ea:	b306      	cbz	r6, f22e <am_hal_queue_item_get+0x62>
    f1ec:	1e71      	subs	r1, r6, #1
    f1ee:	194e      	adds	r6, r1, r5
    f1f0:	6962      	ldr	r2, [r4, #20]
    f1f2:	5cd3      	ldrb	r3, [r2, r3]
    f1f4:	f801 3f01 	strb.w	r3, [r1, #1]!
    f1f8:	6863      	ldr	r3, [r4, #4]
    f1fa:	68e0      	ldr	r0, [r4, #12]
    f1fc:	3301      	adds	r3, #1
    f1fe:	428e      	cmp	r6, r1
    f200:	fbb3 f2f0 	udiv	r2, r3, r0
    f204:	fb00 3312 	mls	r3, r0, r2, r3
    f208:	6063      	str	r3, [r4, #4]
    f20a:	d1f1      	bne.n	f1f0 <am_hal_queue_item_get+0x24>
    f20c:	68a2      	ldr	r2, [r4, #8]
    f20e:	9801      	ldr	r0, [sp, #4]
    f210:	1b52      	subs	r2, r2, r5
    f212:	60a2      	str	r2, [r4, #8]
    f214:	f7ff f9c6 	bl	e5a4 <am_hal_interrupt_master_set>
    f218:	2401      	movs	r4, #1
    f21a:	4620      	mov	r0, r4
    f21c:	b002      	add	sp, #8
    f21e:	bd70      	pop	{r4, r5, r6, pc}
    f220:	9801      	ldr	r0, [sp, #4]
    f222:	f7ff f9bf 	bl	e5a4 <am_hal_interrupt_master_set>
    f226:	2400      	movs	r4, #0
    f228:	4620      	mov	r0, r4
    f22a:	b002      	add	sp, #8
    f22c:	bd70      	pop	{r4, r5, r6, pc}
    f22e:	68e0      	ldr	r0, [r4, #12]
    f230:	4631      	mov	r1, r6
    f232:	3101      	adds	r1, #1
    f234:	3301      	adds	r3, #1
    f236:	42a9      	cmp	r1, r5
    f238:	fbb3 f6f0 	udiv	r6, r3, r0
    f23c:	fb00 3316 	mls	r3, r0, r6, r3
    f240:	d1f7      	bne.n	f232 <am_hal_queue_item_get+0x66>
    f242:	6063      	str	r3, [r4, #4]
    f244:	e7e3      	b.n	f20e <am_hal_queue_item_get+0x42>
    f246:	bf00      	nop

0000f248 <K>:
    f248:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    f258:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    f268:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    f278:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    f288:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    f298:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    f2a8:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    f2b8:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    f2c8:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    f2d8:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    f2e8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    f2f8:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    f308:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    f318:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    f328:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    f338:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

0000f348 <sha256_padding>:
    f348:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...

0000f388 <g_sUartConfig>:
    f388:	c200 0001 0060 0000 0000 0000 0000 0000     ....`...........
    f398:	0000 0000 0012 0000 1010 1000 0100 0000     ................
    f3a8:	1110 1000 0002 0000                         ........

0000f3b0 <am_hal_cachectrl_defaults>:
    f3b0:	0308 0000                                   ....

0000f3b4 <g_AM_HAL_GPIO_DISABLE>:
    f3b4:	0003 0000                                   ....

0000f3b8 <g_ui8Bit76Capabilities>:
    f3b8:	0101 0280 0180 8001 0101 8080 8080 8080     ................
    f3c8:	8080 8080 8008 8080 0180 0180 8080 8080     ................
    f3d8:	8080 8080 0402 0180 0401 0101 8080 8080     ................
    f3e8:	0101 0000                                   ....

0000f3ec <g_ui8Inpen>:
    f3ec:	2323 6227 03a1 1087 5303 e100 8151 5541     ##'b.....S..Q.AU
    f3fc:	c405 4080 b101 4140 3114 31a0 f100 1180     ...@..@A.1.1....
    f40c:	2191 11c1 11e5 3045 0037 3130 7100 4000     .!....E07.01.q.@
    f41c:	3130 0000                                   01..

0000f420 <g_ui8NCEtable>:
    f420:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
    f430:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
    f440:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
    f450:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
    f460:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
    f470:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
    f480:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
    f490:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
    f4a0:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
    f4b0:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
    f4c0:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
    f4d0:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
    f4e0:	1202 3222 1303 4323                         .."2..#C

0000f4e8 <g_ui8nCEpins>:
    f4e8:	0707 0207 0802 0008 0202 0102 0101 0101     ................
    f4f8:	0101 0101 0101 0101 0101 0101 0101 0101     ................
    f508:	0101 0101 0101 0801 0008 0101 0101 0101     ................
    f518:	0101 0000                                   ....

0000f51c <g_am_hal_mcuctrl_flash_size>:
    f51c:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f52c:	0000 0004 0000 0008 0000 0010 0000 0020     .............. .
    f53c:	0000 0018 0000 0000 0000 0000 0000 0000     ................
	...

0000f55c <g_am_hal_mcuctrl_sram_size>:
    f55c:	4000 0000 8000 0000 0000 0001 0000 0002     .@..............
    f56c:	0000 0004 0000 0008 0000 0010 0000 0006     ................
    f57c:	0000 000c 0000 0000 0000 0000 0000 0000     ................
	...

0000f59c <CSWTCH.21>:
    f59c:	3600 016e 1b00 00b7 8d80 005b c6c0 002d     .6n.......[...-.

0000f5ac <am_hal_pwrctrl_peripheral_control>:
	...
    f5b8:	0001 0000 0004 0000 0004 0000 0002 0000     ................
    f5c8:	0008 0000 0008 0000 0004 0000 0008 0000     ................
    f5d8:	0008 0000 0008 0000 0008 0000 0008 0000     ................
    f5e8:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
    f5f8:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
    f608:	0010 0000 0080 0000 0004 0000 0004 0000     ................
    f618:	0100 0000 0004 0000 0004 0000 0200 0000     ................
    f628:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
    f638:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
    f648:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
    f658:	0100 0000 0100 0000                         ........

0000f660 <g_AM_BSP_GPIO_COM_UART_RX>:
    f660:	0000 0000                                   ....

0000f664 <g_AM_BSP_GPIO_COM_UART_TX>:
    f664:	0000 0000                                   ....
