
LEDflasher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d44  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000000  0000ff00  0000ff00  00014020  2**0
                  CONTENTS
  2 .relocate     00000000  20000000  20000000  00014020  2**0
                  CONTENTS
  3 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  4 .heap         00000200  20000020  20000020  00020000  2**0
                  ALLOC
  5 .stack        00000400  20000220  20000220  00020000  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0001404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a7cc  00000000  00000000  000140a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001aef  00000000  00000000  0001e871  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001738  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004f8  00000000  00000000  00021a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f0  00000000  00000000  00021f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00018e89  00000000  00000000  00022380  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009e9a  00000000  00000000  0003b209  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008aa0a  00000000  00000000  000450a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000ed0  00000000  00000000  000cfab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000a6  00000000  00000000  000d0980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 06 00 20 b5 01 00 00 4b 02 00 00 4b 02 00 00      .. ....K...K...
	...
      2c:	4b 02 00 00 00 00 00 00 00 00 00 00 4b 02 00 00     K...........K...
      3c:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      4c:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      5c:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      6c:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      7c:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      8c:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      9c:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      ac:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      bc:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      cc:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      dc:	4b 02 00 00 4b 02 00 00 4b 02 00 00 4b 02 00 00     K...K...K...K...
      ec:	4b 02 00 00 4b 02 00 00                             K...K...

000000f4 <__do_global_dtors_aux>:
      f4:	b510      	push	{r4, lr}
      f6:	f240 0400 	movw	r4, #0
      fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
      fe:	7823      	ldrb	r3, [r4, #0]
     100:	b963      	cbnz	r3, 11c <__do_global_dtors_aux+0x28>
     102:	f240 0300 	movw	r3, #0
     106:	f2c0 0300 	movt	r3, #0
     10a:	b12b      	cbz	r3, 118 <__do_global_dtors_aux+0x24>
     10c:	f244 0020 	movw	r0, #16416	; 0x4020
     110:	f2c0 0080 	movt	r0, #128	; 0x80
     114:	e000      	b.n	118 <__do_global_dtors_aux+0x24>
     116:	bf00      	nop
     118:	2301      	movs	r3, #1
     11a:	7023      	strb	r3, [r4, #0]
     11c:	bd10      	pop	{r4, pc}
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <frame_dummy>:
     120:	f240 0300 	movw	r3, #0
     124:	f2c0 0300 	movt	r3, #0
     128:	b510      	push	{r4, lr}
     12a:	b14b      	cbz	r3, 140 <frame_dummy+0x20>
     12c:	f240 0104 	movw	r1, #4
     130:	f244 0020 	movw	r0, #16416	; 0x4020
     134:	f2c2 0100 	movt	r1, #8192	; 0x2000
     138:	f2c0 0080 	movt	r0, #128	; 0x80
     13c:	e000      	b.n	140 <frame_dummy+0x20>
     13e:	bf00      	nop
     140:	f244 0020 	movw	r0, #16416	; 0x4020
     144:	f2c0 0080 	movt	r0, #128	; 0x80
     148:	6803      	ldr	r3, [r0, #0]
     14a:	b903      	cbnz	r3, 14e <frame_dummy+0x2e>
     14c:	bd10      	pop	{r4, pc}
     14e:	f240 0300 	movw	r3, #0
     152:	f2c0 0300 	movt	r3, #0
     156:	2b00      	cmp	r3, #0
     158:	d0f8      	beq.n	14c <frame_dummy+0x2c>
     15a:	4798      	blx	r3
     15c:	e7f6      	b.n	14c <frame_dummy+0x2c>
     15e:	46c0      	nop			; (mov r8, r8)

00000160 <trustzone_manager_init>:

/**
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
     160:	b580      	push	{r7, lr}
     162:	af00      	add	r7, sp, #0
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     164:	f243 2300 	movw	r3, #12800	; 0x3200
     168:	f2c4 0300 	movt	r3, #16384	; 0x4000
     16c:	2200      	movs	r2, #0
     16e:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     170:	f24e 1300 	movw	r3, #57600	; 0xe100
     174:	f2ce 0300 	movt	r3, #57344	; 0xe000
     178:	f240 2280 	movw	r2, #640	; 0x280
     17c:	2100      	movs	r1, #0
     17e:	5099      	str	r1, [r3, r2]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     180:	f24e 1300 	movw	r3, #57600	; 0xe100
     184:	f2ce 0300 	movt	r3, #57344	; 0xe000
     188:	f240 2284 	movw	r2, #644	; 0x284
     18c:	2100      	movs	r1, #0
     18e:	5099      	str	r1, [r3, r2]
}
     190:	46c0      	nop			; (mov r8, r8)
     192:	46bd      	mov	sp, r7
     194:	bd80      	pop	{r7, pc}

00000196 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     196:	b580      	push	{r7, lr}
     198:	af00      	add	r7, sp, #0
	system_init();
     19a:	f640 032f 	movw	r3, #2095	; 0x82f
     19e:	f2c0 0300 	movt	r3, #0
     1a2:	4798      	blx	r3
	trustzone_manager_init();
     1a4:	f240 1361 	movw	r3, #353	; 0x161
     1a8:	f2c0 0300 	movt	r3, #0
     1ac:	4798      	blx	r3
}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	46bd      	mov	sp, r7
     1b2:	bd80      	pop	{r7, pc}

000001b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b082      	sub	sp, #8
     1b8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     1ba:	f641 5344 	movw	r3, #7492	; 0x1d44
     1be:	f2c0 0300 	movt	r3, #0
     1c2:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     1c4:	f240 0300 	movw	r3, #0
     1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1cc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     1ce:	687a      	ldr	r2, [r7, #4]
     1d0:	683b      	ldr	r3, [r7, #0]
     1d2:	429a      	cmp	r2, r3
     1d4:	d00f      	beq.n	1f6 <Reset_Handler+0x42>
                for (; pDest < &_erelocate;) {
     1d6:	e007      	b.n	1e8 <Reset_Handler+0x34>
                        *pDest++ = *pSrc++;
     1d8:	683b      	ldr	r3, [r7, #0]
     1da:	1d1a      	adds	r2, r3, #4
     1dc:	603a      	str	r2, [r7, #0]
     1de:	687a      	ldr	r2, [r7, #4]
     1e0:	1d11      	adds	r1, r2, #4
     1e2:	6079      	str	r1, [r7, #4]
     1e4:	6812      	ldr	r2, [r2, #0]
     1e6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     1e8:	683a      	ldr	r2, [r7, #0]
     1ea:	f240 0300 	movw	r3, #0
     1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1f2:	429a      	cmp	r2, r3
     1f4:	d3f0      	bcc.n	1d8 <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     1f6:	f240 0300 	movw	r3, #0
     1fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1fe:	603b      	str	r3, [r7, #0]
     200:	e004      	b.n	20c <HEAP_SIZE+0xc>
                *pDest++ = 0;
     202:	683b      	ldr	r3, [r7, #0]
     204:	1d1a      	adds	r2, r3, #4
     206:	603a      	str	r2, [r7, #0]
     208:	2200      	movs	r2, #0
     20a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     20c:	683a      	ldr	r2, [r7, #0]
     20e:	f240 0320 	movw	r3, #32
     212:	f2c2 0300 	movt	r3, #8192	; 0x2000
     216:	429a      	cmp	r2, r3
     218:	d3f3      	bcc.n	202 <HEAP_SIZE+0x2>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     21a:	f240 0300 	movw	r3, #0
     21e:	f2c0 0300 	movt	r3, #0
     222:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     224:	f64e 5300 	movw	r3, #60672	; 0xed00
     228:	f2ce 0300 	movt	r3, #57344	; 0xe000
     22c:	687a      	ldr	r2, [r7, #4]
     22e:	217f      	movs	r1, #127	; 0x7f
     230:	438a      	bics	r2, r1
     232:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
     234:	f641 2305 	movw	r3, #6661	; 0x1a05
     238:	f2c0 0300 	movt	r3, #0
     23c:	4798      	blx	r3

        /* Branch to main function */
        main();
     23e:	f241 03bd 	movw	r3, #4285	; 0x10bd
     242:	f2c0 0300 	movt	r3, #0
     246:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     248:	e7fe      	b.n	248 <HEAP_SIZE+0x48>

0000024a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     24a:	b580      	push	{r7, lr}
     24c:	af00      	add	r7, sp, #0
        while (1) {
     24e:	e7fe      	b.n	24e <Dummy_Handler+0x4>

00000250 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     250:	b580      	push	{r7, lr}
     252:	b084      	sub	sp, #16
     254:	af00      	add	r7, sp, #0
     256:	60f8      	str	r0, [r7, #12]
     258:	607a      	str	r2, [r7, #4]
     25a:	230b      	movs	r3, #11
     25c:	18fb      	adds	r3, r7, r3
     25e:	1c0a      	adds	r2, r1, #0
     260:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     262:	230b      	movs	r3, #11
     264:	18fb      	adds	r3, r7, r3
     266:	781b      	ldrb	r3, [r3, #0]
     268:	68fa      	ldr	r2, [r7, #12]
     26a:	01db      	lsls	r3, r3, #7
     26c:	18d3      	adds	r3, r2, r3
     26e:	3308      	adds	r3, #8
     270:	687a      	ldr	r2, [r7, #4]
     272:	601a      	str	r2, [r3, #0]
}
     274:	46c0      	nop			; (mov r8, r8)
     276:	46bd      	mov	sp, r7
     278:	b004      	add	sp, #16
     27a:	bd80      	pop	{r7, pc}

0000027c <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     27c:	b580      	push	{r7, lr}
     27e:	b084      	sub	sp, #16
     280:	af00      	add	r7, sp, #0
     282:	60f8      	str	r0, [r7, #12]
     284:	607a      	str	r2, [r7, #4]
     286:	230b      	movs	r3, #11
     288:	18fb      	adds	r3, r7, r3
     28a:	1c0a      	adds	r2, r1, #0
     28c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     28e:	230b      	movs	r3, #11
     290:	18fb      	adds	r3, r7, r3
     292:	781b      	ldrb	r3, [r3, #0]
     294:	68fa      	ldr	r2, [r7, #12]
     296:	01db      	lsls	r3, r3, #7
     298:	18d3      	adds	r3, r2, r3
     29a:	3304      	adds	r3, #4
     29c:	687a      	ldr	r2, [r7, #4]
     29e:	601a      	str	r2, [r3, #0]
}
     2a0:	46c0      	nop			; (mov r8, r8)
     2a2:	46bd      	mov	sp, r7
     2a4:	b004      	add	sp, #16
     2a6:	bd80      	pop	{r7, pc}

000002a8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2a8:	b580      	push	{r7, lr}
     2aa:	b084      	sub	sp, #16
     2ac:	af00      	add	r7, sp, #0
     2ae:	60f8      	str	r0, [r7, #12]
     2b0:	607a      	str	r2, [r7, #4]
     2b2:	230b      	movs	r3, #11
     2b4:	18fb      	adds	r3, r7, r3
     2b6:	1c0a      	adds	r2, r1, #0
     2b8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2ba:	230b      	movs	r3, #11
     2bc:	18fb      	adds	r3, r7, r3
     2be:	781b      	ldrb	r3, [r3, #0]
     2c0:	68fa      	ldr	r2, [r7, #12]
     2c2:	01db      	lsls	r3, r3, #7
     2c4:	18d3      	adds	r3, r2, r3
     2c6:	3318      	adds	r3, #24
     2c8:	687a      	ldr	r2, [r7, #4]
     2ca:	601a      	str	r2, [r3, #0]
}
     2cc:	46c0      	nop			; (mov r8, r8)
     2ce:	46bd      	mov	sp, r7
     2d0:	b004      	add	sp, #16
     2d2:	bd80      	pop	{r7, pc}

000002d4 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2d4:	b580      	push	{r7, lr}
     2d6:	b084      	sub	sp, #16
     2d8:	af00      	add	r7, sp, #0
     2da:	60f8      	str	r0, [r7, #12]
     2dc:	607a      	str	r2, [r7, #4]
     2de:	230b      	movs	r3, #11
     2e0:	18fb      	adds	r3, r7, r3
     2e2:	1c0a      	adds	r2, r1, #0
     2e4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e6:	230b      	movs	r3, #11
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	781b      	ldrb	r3, [r3, #0]
     2ec:	68fa      	ldr	r2, [r7, #12]
     2ee:	01db      	lsls	r3, r3, #7
     2f0:	18d3      	adds	r3, r2, r3
     2f2:	3314      	adds	r3, #20
     2f4:	687a      	ldr	r2, [r7, #4]
     2f6:	601a      	str	r2, [r3, #0]
}
     2f8:	46c0      	nop			; (mov r8, r8)
     2fa:	46bd      	mov	sp, r7
     2fc:	b004      	add	sp, #16
     2fe:	bd80      	pop	{r7, pc}

00000300 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     300:	b590      	push	{r4, r7, lr}
     302:	b085      	sub	sp, #20
     304:	af00      	add	r7, sp, #0
     306:	6078      	str	r0, [r7, #4]
     308:	000c      	movs	r4, r1
     30a:	0010      	movs	r0, r2
     30c:	0019      	movs	r1, r3
     30e:	1cfb      	adds	r3, r7, #3
     310:	1c22      	adds	r2, r4, #0
     312:	701a      	strb	r2, [r3, #0]
     314:	1cbb      	adds	r3, r7, #2
     316:	1c02      	adds	r2, r0, #0
     318:	701a      	strb	r2, [r3, #0]
     31a:	1c7b      	adds	r3, r7, #1
     31c:	1c0a      	adds	r2, r1, #0
     31e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     320:	1cfb      	adds	r3, r7, #3
     322:	7819      	ldrb	r1, [r3, #0]
     324:	1cbb      	adds	r3, r7, #2
     326:	781a      	ldrb	r2, [r3, #0]
     328:	230f      	movs	r3, #15
     32a:	18fb      	adds	r3, r7, r3
     32c:	6878      	ldr	r0, [r7, #4]
     32e:	2430      	movs	r4, #48	; 0x30
     330:	01c9      	lsls	r1, r1, #7
     332:	1841      	adds	r1, r0, r1
     334:	188a      	adds	r2, r1, r2
     336:	1912      	adds	r2, r2, r4
     338:	7812      	ldrb	r2, [r2, #0]
     33a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     33c:	230f      	movs	r3, #15
     33e:	18fb      	adds	r3, r7, r3
     340:	220f      	movs	r2, #15
     342:	18ba      	adds	r2, r7, r2
     344:	7812      	ldrb	r2, [r2, #0]
     346:	210f      	movs	r1, #15
     348:	438a      	bics	r2, r1
     34a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     34c:	1c7b      	adds	r3, r7, #1
     34e:	781b      	ldrb	r3, [r3, #0]
     350:	220f      	movs	r2, #15
     352:	4013      	ands	r3, r2
     354:	b2d9      	uxtb	r1, r3
     356:	230f      	movs	r3, #15
     358:	18fb      	adds	r3, r7, r3
     35a:	220f      	movs	r2, #15
     35c:	18ba      	adds	r2, r7, r2
     35e:	7812      	ldrb	r2, [r2, #0]
     360:	430a      	orrs	r2, r1
     362:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     364:	1cfb      	adds	r3, r7, #3
     366:	781a      	ldrb	r2, [r3, #0]
     368:	1cbb      	adds	r3, r7, #2
     36a:	781b      	ldrb	r3, [r3, #0]
     36c:	6879      	ldr	r1, [r7, #4]
     36e:	2030      	movs	r0, #48	; 0x30
     370:	01d2      	lsls	r2, r2, #7
     372:	188a      	adds	r2, r1, r2
     374:	18d3      	adds	r3, r2, r3
     376:	181b      	adds	r3, r3, r0
     378:	220f      	movs	r2, #15
     37a:	18ba      	adds	r2, r7, r2
     37c:	7812      	ldrb	r2, [r2, #0]
     37e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     380:	46c0      	nop			; (mov r8, r8)
     382:	46bd      	mov	sp, r7
     384:	b005      	add	sp, #20
     386:	bd90      	pop	{r4, r7, pc}

00000388 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     388:	b590      	push	{r4, r7, lr}
     38a:	b085      	sub	sp, #20
     38c:	af00      	add	r7, sp, #0
     38e:	6078      	str	r0, [r7, #4]
     390:	000c      	movs	r4, r1
     392:	0010      	movs	r0, r2
     394:	0019      	movs	r1, r3
     396:	1cfb      	adds	r3, r7, #3
     398:	1c22      	adds	r2, r4, #0
     39a:	701a      	strb	r2, [r3, #0]
     39c:	1cbb      	adds	r3, r7, #2
     39e:	1c02      	adds	r2, r0, #0
     3a0:	701a      	strb	r2, [r3, #0]
     3a2:	1c7b      	adds	r3, r7, #1
     3a4:	1c0a      	adds	r2, r1, #0
     3a6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a8:	1cfb      	adds	r3, r7, #3
     3aa:	7819      	ldrb	r1, [r3, #0]
     3ac:	1cbb      	adds	r3, r7, #2
     3ae:	781a      	ldrb	r2, [r3, #0]
     3b0:	230f      	movs	r3, #15
     3b2:	18fb      	adds	r3, r7, r3
     3b4:	6878      	ldr	r0, [r7, #4]
     3b6:	2430      	movs	r4, #48	; 0x30
     3b8:	01c9      	lsls	r1, r1, #7
     3ba:	1841      	adds	r1, r0, r1
     3bc:	188a      	adds	r2, r1, r2
     3be:	1912      	adds	r2, r2, r4
     3c0:	7812      	ldrb	r2, [r2, #0]
     3c2:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3c4:	230f      	movs	r3, #15
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	220f      	movs	r2, #15
     3ca:	18ba      	adds	r2, r7, r2
     3cc:	7812      	ldrb	r2, [r2, #0]
     3ce:	210f      	movs	r1, #15
     3d0:	400a      	ands	r2, r1
     3d2:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     3d4:	1c7b      	adds	r3, r7, #1
     3d6:	781b      	ldrb	r3, [r3, #0]
     3d8:	011b      	lsls	r3, r3, #4
     3da:	b2d9      	uxtb	r1, r3
     3dc:	230f      	movs	r3, #15
     3de:	18fb      	adds	r3, r7, r3
     3e0:	220f      	movs	r2, #15
     3e2:	18ba      	adds	r2, r7, r2
     3e4:	7812      	ldrb	r2, [r2, #0]
     3e6:	430a      	orrs	r2, r1
     3e8:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ea:	1cfb      	adds	r3, r7, #3
     3ec:	781a      	ldrb	r2, [r3, #0]
     3ee:	1cbb      	adds	r3, r7, #2
     3f0:	781b      	ldrb	r3, [r3, #0]
     3f2:	6879      	ldr	r1, [r7, #4]
     3f4:	2030      	movs	r0, #48	; 0x30
     3f6:	01d2      	lsls	r2, r2, #7
     3f8:	188a      	adds	r2, r1, r2
     3fa:	18d3      	adds	r3, r2, r3
     3fc:	181b      	adds	r3, r3, r0
     3fe:	220f      	movs	r2, #15
     400:	18ba      	adds	r2, r7, r2
     402:	7812      	ldrb	r2, [r2, #0]
     404:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     406:	46c0      	nop			; (mov r8, r8)
     408:	46bd      	mov	sp, r7
     40a:	b005      	add	sp, #20
     40c:	bd90      	pop	{r4, r7, pc}

0000040e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     40e:	b590      	push	{r4, r7, lr}
     410:	b085      	sub	sp, #20
     412:	af00      	add	r7, sp, #0
     414:	6078      	str	r0, [r7, #4]
     416:	000c      	movs	r4, r1
     418:	0010      	movs	r0, r2
     41a:	0019      	movs	r1, r3
     41c:	1cfb      	adds	r3, r7, #3
     41e:	1c22      	adds	r2, r4, #0
     420:	701a      	strb	r2, [r3, #0]
     422:	1cbb      	adds	r3, r7, #2
     424:	1c02      	adds	r2, r0, #0
     426:	701a      	strb	r2, [r3, #0]
     428:	1c7b      	adds	r3, r7, #1
     42a:	1c0a      	adds	r2, r1, #0
     42c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42e:	1cfb      	adds	r3, r7, #3
     430:	7819      	ldrb	r1, [r3, #0]
     432:	1cbb      	adds	r3, r7, #2
     434:	781a      	ldrb	r2, [r3, #0]
     436:	230f      	movs	r3, #15
     438:	18fb      	adds	r3, r7, r3
     43a:	6878      	ldr	r0, [r7, #4]
     43c:	2440      	movs	r4, #64	; 0x40
     43e:	01c9      	lsls	r1, r1, #7
     440:	1841      	adds	r1, r0, r1
     442:	188a      	adds	r2, r1, r2
     444:	1912      	adds	r2, r2, r4
     446:	7812      	ldrb	r2, [r2, #0]
     448:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     44a:	230f      	movs	r3, #15
     44c:	18fb      	adds	r3, r7, r3
     44e:	220f      	movs	r2, #15
     450:	18ba      	adds	r2, r7, r2
     452:	7812      	ldrb	r2, [r2, #0]
     454:	2101      	movs	r1, #1
     456:	438a      	bics	r2, r1
     458:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45a:	1c7b      	adds	r3, r7, #1
     45c:	7819      	ldrb	r1, [r3, #0]
     45e:	230f      	movs	r3, #15
     460:	18fb      	adds	r3, r7, r3
     462:	220f      	movs	r2, #15
     464:	18ba      	adds	r2, r7, r2
     466:	7812      	ldrb	r2, [r2, #0]
     468:	430a      	orrs	r2, r1
     46a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46c:	1cfb      	adds	r3, r7, #3
     46e:	781a      	ldrb	r2, [r3, #0]
     470:	1cbb      	adds	r3, r7, #2
     472:	781b      	ldrb	r3, [r3, #0]
     474:	6879      	ldr	r1, [r7, #4]
     476:	2040      	movs	r0, #64	; 0x40
     478:	01d2      	lsls	r2, r2, #7
     47a:	188a      	adds	r2, r1, r2
     47c:	18d3      	adds	r3, r2, r3
     47e:	181b      	adds	r3, r3, r0
     480:	220f      	movs	r2, #15
     482:	18ba      	adds	r2, r7, r2
     484:	7812      	ldrb	r2, [r2, #0]
     486:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     488:	46c0      	nop			; (mov r8, r8)
     48a:	46bd      	mov	sp, r7
     48c:	b005      	add	sp, #20
     48e:	bd90      	pop	{r4, r7, pc}

00000490 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].NSCHK.reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     490:	b580      	push	{r7, lr}
     492:	b084      	sub	sp, #16
     494:	af00      	add	r7, sp, #0
     496:	60f8      	str	r0, [r7, #12]
     498:	607a      	str	r2, [r7, #4]
     49a:	230b      	movs	r3, #11
     49c:	18fb      	adds	r3, r7, r3
     49e:	1c0a      	adds	r2, r1, #0
     4a0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a2:	230b      	movs	r3, #11
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	68fa      	ldr	r2, [r7, #12]
     4aa:	01db      	lsls	r3, r3, #7
     4ac:	18d3      	adds	r3, r2, r3
     4ae:	3328      	adds	r3, #40	; 0x28
     4b0:	687a      	ldr	r2, [r7, #4]
     4b2:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4b4:	46c0      	nop			; (mov r8, r8)
     4b6:	46bd      	mov	sp, r7
     4b8:	b004      	add	sp, #16
     4ba:	bd80      	pop	{r7, pc}

000004bc <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b082      	sub	sp, #8
     4c0:	af00      	add	r7, sp, #0
     4c2:	6039      	str	r1, [r7, #0]
     4c4:	0011      	movs	r1, r2
     4c6:	1dfb      	adds	r3, r7, #7
     4c8:	1c02      	adds	r2, r0, #0
     4ca:	701a      	strb	r2, [r3, #0]
     4cc:	1dbb      	adds	r3, r7, #6
     4ce:	1c0a      	adds	r2, r1, #0
     4d0:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     4d2:	1dbb      	adds	r3, r7, #6
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	2b01      	cmp	r3, #1
     4d8:	d035      	beq.n	546 <_gpio_set_direction+0x8a>
     4da:	2b02      	cmp	r3, #2
     4dc:	d066      	beq.n	5ac <_gpio_set_direction+0xf0>
     4de:	2b00      	cmp	r3, #0
     4e0:	d000      	beq.n	4e4 <_gpio_set_direction+0x28>
     4e2:	e094      	b.n	60e <_gpio_set_direction+0x152>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(_PORT_IOBUS, port, mask);
     4e4:	683a      	ldr	r2, [r7, #0]
     4e6:	1dfb      	adds	r3, r7, #7
     4e8:	7819      	ldrb	r1, [r3, #0]
     4ea:	f240 2300 	movw	r3, #512	; 0x200
     4ee:	f2c6 0300 	movt	r3, #24576	; 0x6000
     4f2:	0018      	movs	r0, r3
     4f4:	f240 237d 	movw	r3, #637	; 0x27d
     4f8:	f2c0 0300 	movt	r3, #0
     4fc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(_PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	041b      	lsls	r3, r3, #16
     502:	0c1b      	lsrs	r3, r3, #16
     504:	2280      	movs	r2, #128	; 0x80
     506:	05d2      	lsls	r2, r2, #23
     508:	431a      	orrs	r2, r3
     50a:	1dfb      	adds	r3, r7, #7
     50c:	7819      	ldrb	r1, [r3, #0]
     50e:	f243 2300 	movw	r3, #12800	; 0x3200
     512:	f2c4 0300 	movt	r3, #16384	; 0x4000
     516:	0018      	movs	r0, r3
     518:	f240 4391 	movw	r3, #1169	; 0x491
     51c:	f2c0 0300 	movt	r3, #0
     520:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    _PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     522:	683b      	ldr	r3, [r7, #0]
     524:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     526:	22c0      	movs	r2, #192	; 0xc0
     528:	0612      	lsls	r2, r2, #24
     52a:	431a      	orrs	r2, r3
     52c:	1dfb      	adds	r3, r7, #7
     52e:	7819      	ldrb	r1, [r3, #0]
     530:	f243 2300 	movw	r3, #12800	; 0x3200
     534:	f2c4 0300 	movt	r3, #16384	; 0x4000
     538:	0018      	movs	r0, r3
     53a:	f240 4391 	movw	r3, #1169	; 0x491
     53e:	f2c0 0300 	movt	r3, #0
     542:	4798      	blx	r3
		break;
     544:	e06f      	b.n	626 <_gpio_set_direction+0x16a>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(_PORT_IOBUS, port, mask);
     546:	683a      	ldr	r2, [r7, #0]
     548:	1dfb      	adds	r3, r7, #7
     54a:	7819      	ldrb	r1, [r3, #0]
     54c:	f240 2300 	movw	r3, #512	; 0x200
     550:	f2c6 0300 	movt	r3, #24576	; 0x6000
     554:	0018      	movs	r0, r3
     556:	f240 237d 	movw	r3, #637	; 0x27d
     55a:	f2c0 0300 	movt	r3, #0
     55e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(_PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     560:	683b      	ldr	r3, [r7, #0]
     562:	041b      	lsls	r3, r3, #16
     564:	0c1a      	lsrs	r2, r3, #16
     566:	2300      	movs	r3, #0
     568:	f2c4 0302 	movt	r3, #16386	; 0x4002
     56c:	431a      	orrs	r2, r3
     56e:	1dfb      	adds	r3, r7, #7
     570:	7819      	ldrb	r1, [r3, #0]
     572:	f243 2300 	movw	r3, #12800	; 0x3200
     576:	f2c4 0300 	movt	r3, #16384	; 0x4000
     57a:	0018      	movs	r0, r3
     57c:	f240 4391 	movw	r3, #1169	; 0x491
     580:	f2c0 0300 	movt	r3, #0
     584:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(_PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     586:	683b      	ldr	r3, [r7, #0]
     588:	0c1a      	lsrs	r2, r3, #16
		hri_port_write_WRCONFIG_reg(_PORT,
     58a:	2300      	movs	r3, #0
     58c:	f2cc 0302 	movt	r3, #49154	; 0xc002
     590:	431a      	orrs	r2, r3
     592:	1dfb      	adds	r3, r7, #7
     594:	7819      	ldrb	r1, [r3, #0]
     596:	f243 2300 	movw	r3, #12800	; 0x3200
     59a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     59e:	0018      	movs	r0, r3
     5a0:	f240 4391 	movw	r3, #1169	; 0x491
     5a4:	f2c0 0300 	movt	r3, #0
     5a8:	4798      	blx	r3
		break;
     5aa:	e03c      	b.n	626 <_gpio_set_direction+0x16a>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(_PORT_IOBUS, port, mask);
     5ac:	683a      	ldr	r2, [r7, #0]
     5ae:	1dfb      	adds	r3, r7, #7
     5b0:	7819      	ldrb	r1, [r3, #0]
     5b2:	f240 2300 	movw	r3, #512	; 0x200
     5b6:	f2c6 0300 	movt	r3, #24576	; 0x6000
     5ba:	0018      	movs	r0, r3
     5bc:	f240 2351 	movw	r3, #593	; 0x251
     5c0:	f2c0 0300 	movt	r3, #0
     5c4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(_PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5c6:	683b      	ldr	r3, [r7, #0]
     5c8:	041b      	lsls	r3, r3, #16
     5ca:	0c1b      	lsrs	r3, r3, #16
     5cc:	2280      	movs	r2, #128	; 0x80
     5ce:	05d2      	lsls	r2, r2, #23
     5d0:	431a      	orrs	r2, r3
     5d2:	1dfb      	adds	r3, r7, #7
     5d4:	7819      	ldrb	r1, [r3, #0]
     5d6:	f243 2300 	movw	r3, #12800	; 0x3200
     5da:	f2c4 0300 	movt	r3, #16384	; 0x4000
     5de:	0018      	movs	r0, r3
     5e0:	f240 4391 	movw	r3, #1169	; 0x491
     5e4:	f2c0 0300 	movt	r3, #0
     5e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    _PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5ea:	683b      	ldr	r3, [r7, #0]
     5ec:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5ee:	22c0      	movs	r2, #192	; 0xc0
     5f0:	0612      	lsls	r2, r2, #24
     5f2:	431a      	orrs	r2, r3
     5f4:	1dfb      	adds	r3, r7, #7
     5f6:	7819      	ldrb	r1, [r3, #0]
     5f8:	f243 2300 	movw	r3, #12800	; 0x3200
     5fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     600:	0018      	movs	r0, r3
     602:	f240 4391 	movw	r3, #1169	; 0x491
     606:	f2c0 0300 	movt	r3, #0
     60a:	4798      	blx	r3
		break;
     60c:	e00b      	b.n	626 <_gpio_set_direction+0x16a>

	default:
		ASSERT(false);
     60e:	f641 2374 	movw	r3, #6772	; 0x1a74
     612:	f2c0 0300 	movt	r3, #0
     616:	224d      	movs	r2, #77	; 0x4d
     618:	0019      	movs	r1, r3
     61a:	2000      	movs	r0, #0
     61c:	f640 03eb 	movw	r3, #2283	; 0x8eb
     620:	f2c0 0300 	movt	r3, #0
     624:	4798      	blx	r3
	}
}
     626:	46c0      	nop			; (mov r8, r8)
     628:	46bd      	mov	sp, r7
     62a:	b002      	add	sp, #8
     62c:	bd80      	pop	{r7, pc}

0000062e <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     62e:	b580      	push	{r7, lr}
     630:	b082      	sub	sp, #8
     632:	af00      	add	r7, sp, #0
     634:	6039      	str	r1, [r7, #0]
     636:	0011      	movs	r1, r2
     638:	1dfb      	adds	r3, r7, #7
     63a:	1c02      	adds	r2, r0, #0
     63c:	701a      	strb	r2, [r3, #0]
     63e:	1dbb      	adds	r3, r7, #6
     640:	1c0a      	adds	r2, r1, #0
     642:	701a      	strb	r2, [r3, #0]
	if (level) {
     644:	1dbb      	adds	r3, r7, #6
     646:	781b      	ldrb	r3, [r3, #0]
     648:	b16b      	cbz	r3, 666 <_gpio_set_level+0x38>
		hri_port_set_OUT_reg(_PORT_IOBUS, port, mask);
     64a:	683a      	ldr	r2, [r7, #0]
     64c:	1dfb      	adds	r3, r7, #7
     64e:	7819      	ldrb	r1, [r3, #0]
     650:	f240 2300 	movw	r3, #512	; 0x200
     654:	f2c6 0300 	movt	r3, #24576	; 0x6000
     658:	0018      	movs	r0, r3
     65a:	f240 23a9 	movw	r3, #681	; 0x2a9
     65e:	f2c0 0300 	movt	r3, #0
     662:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(_PORT_IOBUS, port, mask);
	}
}
     664:	e00c      	b.n	680 <_gpio_set_level+0x52>
		hri_port_clear_OUT_reg(_PORT_IOBUS, port, mask);
     666:	683a      	ldr	r2, [r7, #0]
     668:	1dfb      	adds	r3, r7, #7
     66a:	7819      	ldrb	r1, [r3, #0]
     66c:	f240 2300 	movw	r3, #512	; 0x200
     670:	f2c6 0300 	movt	r3, #24576	; 0x6000
     674:	0018      	movs	r0, r3
     676:	f240 23d5 	movw	r3, #725	; 0x2d5
     67a:	f2c0 0300 	movt	r3, #0
     67e:	4798      	blx	r3
}
     680:	46c0      	nop			; (mov r8, r8)
     682:	46bd      	mov	sp, r7
     684:	b002      	add	sp, #8
     686:	bd80      	pop	{r7, pc}

00000688 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     688:	b590      	push	{r4, r7, lr}
     68a:	b085      	sub	sp, #20
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
     690:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     692:	687b      	ldr	r3, [r7, #4]
     694:	095a      	lsrs	r2, r3, #5
     696:	230f      	movs	r3, #15
     698:	18fb      	adds	r3, r7, r3
     69a:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	b2da      	uxtb	r2, r3
     6a0:	230e      	movs	r3, #14
     6a2:	18fb      	adds	r3, r7, r3
     6a4:	211f      	movs	r1, #31
     6a6:	400a      	ands	r2, r1
     6a8:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     6aa:	683b      	ldr	r3, [r7, #0]
     6ac:	3301      	adds	r3, #1
     6ae:	d110      	bne.n	6d2 <_gpio_set_pin_function+0x4a>
		hri_port_write_PINCFG_PMUXEN_bit(_PORT, port, pin, false);
     6b0:	230e      	movs	r3, #14
     6b2:	18fb      	adds	r3, r7, r3
     6b4:	781a      	ldrb	r2, [r3, #0]
     6b6:	230f      	movs	r3, #15
     6b8:	18fb      	adds	r3, r7, r3
     6ba:	7819      	ldrb	r1, [r3, #0]
     6bc:	f243 2000 	movw	r0, #12800	; 0x3200
     6c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
     6c4:	2300      	movs	r3, #0
     6c6:	f240 440f 	movw	r4, #1039	; 0x40f
     6ca:	f2c0 0400 	movt	r4, #0
     6ce:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(_PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     6d0:	e03e      	b.n	750 <_gpio_set_pin_function+0xc8>
		hri_port_write_PINCFG_PMUXEN_bit(_PORT, port, pin, true);
     6d2:	230e      	movs	r3, #14
     6d4:	18fb      	adds	r3, r7, r3
     6d6:	781a      	ldrb	r2, [r3, #0]
     6d8:	230f      	movs	r3, #15
     6da:	18fb      	adds	r3, r7, r3
     6dc:	7819      	ldrb	r1, [r3, #0]
     6de:	f243 2000 	movw	r0, #12800	; 0x3200
     6e2:	f2c4 0000 	movt	r0, #16384	; 0x4000
     6e6:	2301      	movs	r3, #1
     6e8:	f240 440f 	movw	r4, #1039	; 0x40f
     6ec:	f2c0 0400 	movt	r4, #0
     6f0:	47a0      	blx	r4
		if (pin & 1) {
     6f2:	230e      	movs	r3, #14
     6f4:	18fb      	adds	r3, r7, r3
     6f6:	781b      	ldrb	r3, [r3, #0]
     6f8:	2201      	movs	r2, #1
     6fa:	4013      	ands	r3, r2
     6fc:	b1a3      	cbz	r3, 728 <_gpio_set_pin_function+0xa0>
			hri_port_write_PMUX_PMUXO_bf(_PORT, port, pin >> 1, function & 0xffff);
     6fe:	230e      	movs	r3, #14
     700:	18fb      	adds	r3, r7, r3
     702:	781b      	ldrb	r3, [r3, #0]
     704:	085b      	lsrs	r3, r3, #1
     706:	b2da      	uxtb	r2, r3
     708:	683b      	ldr	r3, [r7, #0]
     70a:	b2dc      	uxtb	r4, r3
     70c:	230f      	movs	r3, #15
     70e:	18fb      	adds	r3, r7, r3
     710:	7819      	ldrb	r1, [r3, #0]
     712:	f243 2000 	movw	r0, #12800	; 0x3200
     716:	f2c4 0000 	movt	r0, #16384	; 0x4000
     71a:	0023      	movs	r3, r4
     71c:	f240 3489 	movw	r4, #905	; 0x389
     720:	f2c0 0400 	movt	r4, #0
     724:	47a0      	blx	r4
}
     726:	e013      	b.n	750 <_gpio_set_pin_function+0xc8>
			hri_port_write_PMUX_PMUXE_bf(_PORT, port, pin >> 1, function & 0xffff);
     728:	230e      	movs	r3, #14
     72a:	18fb      	adds	r3, r7, r3
     72c:	781b      	ldrb	r3, [r3, #0]
     72e:	085b      	lsrs	r3, r3, #1
     730:	b2da      	uxtb	r2, r3
     732:	683b      	ldr	r3, [r7, #0]
     734:	b2dc      	uxtb	r4, r3
     736:	230f      	movs	r3, #15
     738:	18fb      	adds	r3, r7, r3
     73a:	7819      	ldrb	r1, [r3, #0]
     73c:	f243 2000 	movw	r0, #12800	; 0x3200
     740:	f2c4 0000 	movt	r0, #16384	; 0x4000
     744:	0023      	movs	r3, r4
     746:	f240 3401 	movw	r4, #769	; 0x301
     74a:	f2c0 0400 	movt	r4, #0
     74e:	47a0      	blx	r4
}
     750:	46c0      	nop			; (mov r8, r8)
     752:	46bd      	mov	sp, r7
     754:	b005      	add	sp, #20
     756:	bd90      	pop	{r4, r7, pc}

00000758 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     758:	b580      	push	{r7, lr}
     75a:	b082      	sub	sp, #8
     75c:	af00      	add	r7, sp, #0
     75e:	6078      	str	r0, [r7, #4]
     760:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     762:	683a      	ldr	r2, [r7, #0]
     764:	687b      	ldr	r3, [r7, #4]
     766:	0011      	movs	r1, r2
     768:	0018      	movs	r0, r3
     76a:	f240 6389 	movw	r3, #1673	; 0x689
     76e:	f2c0 0300 	movt	r3, #0
     772:	4798      	blx	r3
}
     774:	46c0      	nop			; (mov r8, r8)
     776:	46bd      	mov	sp, r7
     778:	b002      	add	sp, #8
     77a:	bd80      	pop	{r7, pc}

0000077c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     77c:	b580      	push	{r7, lr}
     77e:	b082      	sub	sp, #8
     780:	af00      	add	r7, sp, #0
     782:	0002      	movs	r2, r0
     784:	1dfb      	adds	r3, r7, #7
     786:	701a      	strb	r2, [r3, #0]
     788:	1dbb      	adds	r3, r7, #6
     78a:	1c0a      	adds	r2, r1, #0
     78c:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     78e:	1dfb      	adds	r3, r7, #7
     790:	781b      	ldrb	r3, [r3, #0]
     792:	095b      	lsrs	r3, r3, #5
     794:	b2d8      	uxtb	r0, r3
     796:	1dfb      	adds	r3, r7, #7
     798:	781b      	ldrb	r3, [r3, #0]
     79a:	221f      	movs	r2, #31
     79c:	4013      	ands	r3, r2
     79e:	2201      	movs	r2, #1
     7a0:	409a      	lsls	r2, r3
     7a2:	0011      	movs	r1, r2
     7a4:	1dbb      	adds	r3, r7, #6
     7a6:	781b      	ldrb	r3, [r3, #0]
     7a8:	001a      	movs	r2, r3
     7aa:	f240 43bd 	movw	r3, #1213	; 0x4bd
     7ae:	f2c0 0300 	movt	r3, #0
     7b2:	4798      	blx	r3
}
     7b4:	46c0      	nop			; (mov r8, r8)
     7b6:	46bd      	mov	sp, r7
     7b8:	b002      	add	sp, #8
     7ba:	bd80      	pop	{r7, pc}

000007bc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     7bc:	b580      	push	{r7, lr}
     7be:	b082      	sub	sp, #8
     7c0:	af00      	add	r7, sp, #0
     7c2:	0002      	movs	r2, r0
     7c4:	1dfb      	adds	r3, r7, #7
     7c6:	701a      	strb	r2, [r3, #0]
     7c8:	1dbb      	adds	r3, r7, #6
     7ca:	1c0a      	adds	r2, r1, #0
     7cc:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     7ce:	1dfb      	adds	r3, r7, #7
     7d0:	781b      	ldrb	r3, [r3, #0]
     7d2:	095b      	lsrs	r3, r3, #5
     7d4:	b2d8      	uxtb	r0, r3
     7d6:	1dfb      	adds	r3, r7, #7
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	221f      	movs	r2, #31
     7dc:	4013      	ands	r3, r2
     7de:	2201      	movs	r2, #1
     7e0:	409a      	lsls	r2, r3
     7e2:	0011      	movs	r1, r2
     7e4:	1dbb      	adds	r3, r7, #6
     7e6:	781b      	ldrb	r3, [r3, #0]
     7e8:	001a      	movs	r2, r3
     7ea:	f240 632f 	movw	r3, #1583	; 0x62f
     7ee:	f2c0 0300 	movt	r3, #0
     7f2:	4798      	blx	r3
}
     7f4:	46c0      	nop			; (mov r8, r8)
     7f6:	46bd      	mov	sp, r7
     7f8:	b002      	add	sp, #8
     7fa:	bd80      	pop	{r7, pc}

000007fc <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     7fc:	b580      	push	{r7, lr}
     7fe:	af00      	add	r7, sp, #0
	_init_chip();
     800:	f640 3315 	movw	r3, #2837	; 0xb15
     804:	f2c0 0300 	movt	r3, #0
     808:	4798      	blx	r3
}
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	46bd      	mov	sp, r7
     80e:	bd80      	pop	{r7, pc}

00000810 <delay_driver_init>:
	return 0;
}
#endif

void delay_driver_init(void)
{
     810:	b580      	push	{r7, lr}
     812:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     814:	f24e 0310 	movw	r3, #57360	; 0xe010
     818:	f2ce 0300 	movt	r3, #57344	; 0xe000
     81c:	0018      	movs	r0, r3
     81e:	f640 037b 	movw	r3, #2171	; 0x87b
     822:	f2c0 0300 	movt	r3, #0
     826:	4798      	blx	r3
}
     828:	46c0      	nop			; (mov r8, r8)
     82a:	46bd      	mov	sp, r7
     82c:	bd80      	pop	{r7, pc}

0000082e <system_init>:

void system_init(void)
{
     82e:	b580      	push	{r7, lr}
     830:	af00      	add	r7, sp, #0
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
     832:	f240 73fd 	movw	r3, #2045	; 0x7fd
     836:	f2c0 0300 	movt	r3, #0
     83a:	4798      	blx	r3
#endif

	// GPIO on PA07

	gpio_set_pin_level(LED0,
     83c:	2100      	movs	r1, #0
     83e:	2017      	movs	r0, #23
     840:	f240 73bd 	movw	r3, #1981	; 0x7bd
     844:	f2c0 0300 	movt	r3, #0
     848:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
     84a:	2102      	movs	r1, #2
     84c:	2017      	movs	r0, #23
     84e:	f240 737d 	movw	r3, #1917	; 0x77d
     852:	f2c0 0300 	movt	r3, #0
     856:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
     858:	2301      	movs	r3, #1
     85a:	425b      	negs	r3, r3
     85c:	0019      	movs	r1, r3
     85e:	2017      	movs	r0, #23
     860:	f240 7359 	movw	r3, #1881	; 0x759
     864:	f2c0 0300 	movt	r3, #0
     868:	4798      	blx	r3

	delay_driver_init();
     86a:	f640 0311 	movw	r3, #2065	; 0x811
     86e:	f2c0 0300 	movt	r3, #0
     872:	4798      	blx	r3
}
     874:	46c0      	nop			; (mov r8, r8)
     876:	46bd      	mov	sp, r7
     878:	bd80      	pop	{r7, pc}

0000087a <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     87a:	b580      	push	{r7, lr}
     87c:	b082      	sub	sp, #8
     87e:	af00      	add	r7, sp, #0
     880:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     882:	f240 031c 	movw	r3, #28
     886:	f2c2 0300 	movt	r3, #8192	; 0x2000
     88a:	687a      	ldr	r2, [r7, #4]
     88c:	601a      	str	r2, [r3, #0]
     88e:	f240 031c 	movw	r3, #28
     892:	f2c2 0300 	movt	r3, #8192	; 0x2000
     896:	681b      	ldr	r3, [r3, #0]
     898:	0018      	movs	r0, r3
     89a:	f640 7349 	movw	r3, #3913	; 0xf49
     89e:	f2c0 0300 	movt	r3, #0
     8a2:	4798      	blx	r3
}
     8a4:	46c0      	nop			; (mov r8, r8)
     8a6:	46bd      	mov	sp, r7
     8a8:	b002      	add	sp, #8
     8aa:	bd80      	pop	{r7, pc}

000008ac <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     8ac:	b590      	push	{r4, r7, lr}
     8ae:	b083      	sub	sp, #12
     8b0:	af00      	add	r7, sp, #0
     8b2:	0002      	movs	r2, r0
     8b4:	1dbb      	adds	r3, r7, #6
     8b6:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     8b8:	f240 031c 	movw	r3, #28
     8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8c0:	681c      	ldr	r4, [r3, #0]
     8c2:	1dbb      	adds	r3, r7, #6
     8c4:	881b      	ldrh	r3, [r3, #0]
     8c6:	0018      	movs	r0, r3
     8c8:	f640 23c1 	movw	r3, #2753	; 0xac1
     8cc:	f2c0 0300 	movt	r3, #0
     8d0:	4798      	blx	r3
     8d2:	0003      	movs	r3, r0
     8d4:	0019      	movs	r1, r3
     8d6:	0020      	movs	r0, r4
     8d8:	f640 7369 	movw	r3, #3945	; 0xf69
     8dc:	f2c0 0300 	movt	r3, #0
     8e0:	4798      	blx	r3
}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	46bd      	mov	sp, r7
     8e6:	b003      	add	sp, #12
     8e8:	bd90      	pop	{r4, r7, pc}

000008ea <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
     8ea:	b580      	push	{r7, lr}
     8ec:	b084      	sub	sp, #16
     8ee:	af00      	add	r7, sp, #0
     8f0:	60b9      	str	r1, [r7, #8]
     8f2:	607a      	str	r2, [r7, #4]
     8f4:	230f      	movs	r3, #15
     8f6:	18fb      	adds	r3, r7, r3
     8f8:	1c02      	adds	r2, r0, #0
     8fa:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
     8fc:	230f      	movs	r3, #15
     8fe:	18fb      	adds	r3, r7, r3
     900:	781b      	ldrb	r3, [r3, #0]
     902:	2201      	movs	r2, #1
     904:	4053      	eors	r3, r2
     906:	b2db      	uxtb	r3, r3
     908:	b103      	cbz	r3, 90c <assert+0x22>
		__asm("BKPT #0");
     90a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     90c:	46c0      	nop			; (mov r8, r8)
     90e:	46bd      	mov	sp, r7
     910:	b004      	add	sp, #16
     912:	bd80      	pop	{r7, pc}

00000914 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
     914:	b580      	push	{r7, lr}
     916:	b082      	sub	sp, #8
     918:	af00      	add	r7, sp, #0
     91a:	6039      	str	r1, [r7, #0]
     91c:	0011      	movs	r1, r2
     91e:	1dbb      	adds	r3, r7, #6
     920:	1c02      	adds	r2, r0, #0
     922:	801a      	strh	r2, [r3, #0]
     924:	1d7b      	adds	r3, r7, #5
     926:	1c0a      	adds	r2, r1, #0
     928:	701a      	strb	r2, [r3, #0]
	switch (power) {
     92a:	1d7b      	adds	r3, r7, #5
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	3b04      	subs	r3, #4
     930:	2b04      	cmp	r3, #4
     932:	d84f      	bhi.n	9d4 <_get_cycles_for_us_internal+0xc0>
     934:	009a      	lsls	r2, r3, #2
     936:	4b2f      	ldr	r3, [pc, #188]	; (9f4 <_get_cycles_for_us_internal+0xe0>)
     938:	18d3      	adds	r3, r2, r3
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
     93e:	1dbb      	adds	r3, r7, #6
     940:	8819      	ldrh	r1, [r3, #0]
     942:	683a      	ldr	r2, [r7, #0]
     944:	f248 63a0 	movw	r3, #34464	; 0x86a0
     948:	f2c0 0301 	movt	r3, #1
     94c:	fbb2 f3f3 	udiv	r3, r2, r3
     950:	434b      	muls	r3, r1
     952:	3b01      	subs	r3, #1
     954:	220a      	movs	r2, #10
     956:	fbb3 f3f2 	udiv	r3, r3, r2
     95a:	3301      	adds	r3, #1
     95c:	e046      	b.n	9ec <_get_cycles_for_us_internal+0xd8>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
     95e:	1dbb      	adds	r3, r7, #6
     960:	8819      	ldrh	r1, [r3, #0]
     962:	683b      	ldr	r3, [r7, #0]
     964:	f242 7210 	movw	r2, #10000	; 0x2710
     968:	fbb3 f3f2 	udiv	r3, r3, r2
     96c:	434b      	muls	r3, r1
     96e:	3b01      	subs	r3, #1
     970:	2264      	movs	r2, #100	; 0x64
     972:	fbb3 f3f2 	udiv	r3, r3, r2
     976:	3301      	adds	r3, #1
     978:	e038      	b.n	9ec <_get_cycles_for_us_internal+0xd8>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
     97a:	1dbb      	adds	r3, r7, #6
     97c:	8819      	ldrh	r1, [r3, #0]
     97e:	683b      	ldr	r3, [r7, #0]
     980:	f240 32e8 	movw	r2, #1000	; 0x3e8
     984:	fbb3 f3f2 	udiv	r3, r3, r2
     988:	434b      	muls	r3, r1
     98a:	3b01      	subs	r3, #1
     98c:	f240 32e8 	movw	r2, #1000	; 0x3e8
     990:	fbb3 f3f2 	udiv	r3, r3, r2
     994:	3301      	adds	r3, #1
     996:	e029      	b.n	9ec <_get_cycles_for_us_internal+0xd8>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
     998:	1dbb      	adds	r3, r7, #6
     99a:	8819      	ldrh	r1, [r3, #0]
     99c:	683b      	ldr	r3, [r7, #0]
     99e:	2264      	movs	r2, #100	; 0x64
     9a0:	fbb3 f3f2 	udiv	r3, r3, r2
     9a4:	434b      	muls	r3, r1
     9a6:	3b01      	subs	r3, #1
     9a8:	f242 7210 	movw	r2, #10000	; 0x2710
     9ac:	fbb3 f3f2 	udiv	r3, r3, r2
     9b0:	3301      	adds	r3, #1
     9b2:	e01b      	b.n	9ec <_get_cycles_for_us_internal+0xd8>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
     9b4:	1dbb      	adds	r3, r7, #6
     9b6:	8819      	ldrh	r1, [r3, #0]
     9b8:	683b      	ldr	r3, [r7, #0]
     9ba:	220a      	movs	r2, #10
     9bc:	fbb3 f3f2 	udiv	r3, r3, r2
     9c0:	434b      	muls	r3, r1
     9c2:	1e5a      	subs	r2, r3, #1
     9c4:	f248 63a0 	movw	r3, #34464	; 0x86a0
     9c8:	f2c0 0301 	movt	r3, #1
     9cc:	fbb2 f3f3 	udiv	r3, r2, r3
     9d0:	3301      	adds	r3, #1
     9d2:	e00b      	b.n	9ec <_get_cycles_for_us_internal+0xd8>
	default:
		return (us * freq - 1) / 1000000 + 1;
     9d4:	1dbb      	adds	r3, r7, #6
     9d6:	881b      	ldrh	r3, [r3, #0]
     9d8:	683a      	ldr	r2, [r7, #0]
     9da:	4353      	muls	r3, r2
     9dc:	1e5a      	subs	r2, r3, #1
     9de:	f244 2340 	movw	r3, #16960	; 0x4240
     9e2:	f2c0 030f 	movt	r3, #15
     9e6:	fbb2 f3f3 	udiv	r3, r2, r3
     9ea:	3301      	adds	r3, #1
	}
}
     9ec:	0018      	movs	r0, r3
     9ee:	46bd      	mov	sp, r7
     9f0:	b002      	add	sp, #8
     9f2:	bd80      	pop	{r7, pc}
     9f4:	00001ab0 	.word	0x00001ab0

000009f8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b082      	sub	sp, #8
     9fc:	af00      	add	r7, sp, #0
     9fe:	6039      	str	r1, [r7, #0]
     a00:	0011      	movs	r1, r2
     a02:	1dbb      	adds	r3, r7, #6
     a04:	1c02      	adds	r2, r0, #0
     a06:	801a      	strh	r2, [r3, #0]
     a08:	1d7b      	adds	r3, r7, #5
     a0a:	1c0a      	adds	r2, r1, #0
     a0c:	701a      	strb	r2, [r3, #0]
	switch (power) {
     a0e:	1d7b      	adds	r3, r7, #5
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	3b04      	subs	r3, #4
     a14:	2b04      	cmp	r3, #4
     a16:	d842      	bhi.n	a9e <_get_cycles_for_ms_internal+0xa6>
     a18:	009a      	lsls	r2, r3, #2
     a1a:	4b28      	ldr	r3, [pc, #160]	; (abc <_get_cycles_for_ms_internal+0xc4>)
     a1c:	18d3      	adds	r3, r2, r3
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000)) * 100;
     a22:	1dbb      	adds	r3, r7, #6
     a24:	8819      	ldrh	r1, [r3, #0]
     a26:	683a      	ldr	r2, [r7, #0]
     a28:	f248 63a0 	movw	r3, #34464	; 0x86a0
     a2c:	f2c0 0301 	movt	r3, #1
     a30:	fbb2 f3f3 	udiv	r3, r2, r3
     a34:	434b      	muls	r3, r1
     a36:	2264      	movs	r2, #100	; 0x64
     a38:	4353      	muls	r3, r2
     a3a:	e03a      	b.n	ab2 <_get_cycles_for_ms_internal+0xba>
	case 7:
		return (ms * (freq / 10000)) * 10;
     a3c:	1dbb      	adds	r3, r7, #6
     a3e:	8819      	ldrh	r1, [r3, #0]
     a40:	683b      	ldr	r3, [r7, #0]
     a42:	f242 7210 	movw	r2, #10000	; 0x2710
     a46:	fbb3 f3f2 	udiv	r3, r3, r2
     a4a:	434b      	muls	r3, r1
     a4c:	001a      	movs	r2, r3
     a4e:	0013      	movs	r3, r2
     a50:	009b      	lsls	r3, r3, #2
     a52:	189b      	adds	r3, r3, r2
     a54:	005b      	lsls	r3, r3, #1
     a56:	e02c      	b.n	ab2 <_get_cycles_for_ms_internal+0xba>
	case 6:
		return (ms * (freq / 1000));
     a58:	1dbb      	adds	r3, r7, #6
     a5a:	8819      	ldrh	r1, [r3, #0]
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	f240 32e8 	movw	r2, #1000	; 0x3e8
     a62:	fbb3 f3f2 	udiv	r3, r3, r2
     a66:	434b      	muls	r3, r1
     a68:	e023      	b.n	ab2 <_get_cycles_for_ms_internal+0xba>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
     a6a:	1dbb      	adds	r3, r7, #6
     a6c:	8819      	ldrh	r1, [r3, #0]
     a6e:	683b      	ldr	r3, [r7, #0]
     a70:	2264      	movs	r2, #100	; 0x64
     a72:	fbb3 f3f2 	udiv	r3, r3, r2
     a76:	434b      	muls	r3, r1
     a78:	3b01      	subs	r3, #1
     a7a:	220a      	movs	r2, #10
     a7c:	fbb3 f3f2 	udiv	r3, r3, r2
     a80:	3301      	adds	r3, #1
     a82:	e016      	b.n	ab2 <_get_cycles_for_ms_internal+0xba>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
     a84:	1dbb      	adds	r3, r7, #6
     a86:	8819      	ldrh	r1, [r3, #0]
     a88:	683b      	ldr	r3, [r7, #0]
     a8a:	220a      	movs	r2, #10
     a8c:	fbb3 f3f2 	udiv	r3, r3, r2
     a90:	434b      	muls	r3, r1
     a92:	3b01      	subs	r3, #1
     a94:	2264      	movs	r2, #100	; 0x64
     a96:	fbb3 f3f2 	udiv	r3, r3, r2
     a9a:	3301      	adds	r3, #1
     a9c:	e009      	b.n	ab2 <_get_cycles_for_ms_internal+0xba>
	default:
		return (ms * freq - 1) / 1000 + 1;
     a9e:	1dbb      	adds	r3, r7, #6
     aa0:	881b      	ldrh	r3, [r3, #0]
     aa2:	683a      	ldr	r2, [r7, #0]
     aa4:	4353      	muls	r3, r2
     aa6:	3b01      	subs	r3, #1
     aa8:	f240 32e8 	movw	r2, #1000	; 0x3e8
     aac:	fbb3 f3f2 	udiv	r3, r3, r2
     ab0:	3301      	adds	r3, #1
	}
}
     ab2:	0018      	movs	r0, r3
     ab4:	46bd      	mov	sp, r7
     ab6:	b002      	add	sp, #8
     ab8:	bd80      	pop	{r7, pc}
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	00001ac4 	.word	0x00001ac4

00000ac0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     ac0:	b580      	push	{r7, lr}
     ac2:	b082      	sub	sp, #8
     ac4:	af00      	add	r7, sp, #0
     ac6:	0002      	movs	r2, r0
     ac8:	1dbb      	adds	r3, r7, #6
     aca:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
     acc:	f640 1300 	movw	r3, #2304	; 0x900
     ad0:	f2c0 033d 	movt	r3, #61	; 0x3d
     ad4:	1dba      	adds	r2, r7, #6
     ad6:	8810      	ldrh	r0, [r2, #0]
     ad8:	2207      	movs	r2, #7
     ada:	0019      	movs	r1, r3
     adc:	f640 13f9 	movw	r3, #2553	; 0x9f9
     ae0:	f2c0 0300 	movt	r3, #0
     ae4:	4798      	blx	r3
     ae6:	0003      	movs	r3, r0
}
     ae8:	0018      	movs	r0, r3
     aea:	46bd      	mov	sp, r7
     aec:	b002      	add	sp, #8
     aee:	bd80      	pop	{r7, pc}

00000af0 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_QWEN_Msk;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
     af0:	b580      	push	{r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	685a      	ldr	r2, [r3, #4]
     afe:	683b      	ldr	r3, [r7, #0]
     b00:	005b      	lsls	r3, r3, #1
     b02:	211e      	movs	r1, #30
     b04:	400b      	ands	r3, r1
     b06:	431a      	orrs	r2, r3
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
     b0c:	46c0      	nop			; (mov r8, r8)
     b0e:	46bd      	mov	sp, r7
     b10:	b002      	add	sp, #8
     b12:	bd80      	pop	{r7, pc}

00000b14 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     b14:	b580      	push	{r7, lr}
     b16:	af00      	add	r7, sp, #0
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
     b18:	f245 0300 	movw	r3, #20480	; 0x5000
     b1c:	f2c4 1300 	movt	r3, #16640	; 0x4100
     b20:	2100      	movs	r1, #0
     b22:	0018      	movs	r0, r3
     b24:	f640 23f1 	movw	r3, #2801	; 0xaf1
     b28:	f2c0 0300 	movt	r3, #0
     b2c:	4798      	blx	r3
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
     b2e:	2000      	movs	r0, #0
     b30:	f640 6399 	movw	r3, #3737	; 0xe99
     b34:	f2c0 0300 	movt	r3, #0
     b38:	4798      	blx	r3

	_osc32kctrl_init_sources();
     b3a:	f640 43a3 	movw	r3, #3235	; 0xca3
     b3e:	f2c0 0300 	movt	r3, #0
     b42:	4798      	blx	r3
	_oscctrl_init_sources();
     b44:	f640 5363 	movw	r3, #3427	; 0xd63
     b48:	f2c0 0300 	movt	r3, #0
     b4c:	4798      	blx	r3
	_mclk_init();
     b4e:	f640 4323 	movw	r3, #3107	; 0xc23
     b52:	f2c0 0300 	movt	r3, #0
     b56:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     b58:	f640 53b7 	movw	r3, #3511	; 0xdb7
     b5c:	f2c0 0300 	movt	r3, #0
     b60:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     b62:	201f      	movs	r0, #31
     b64:	f640 33cf 	movw	r3, #3023	; 0xbcf
     b68:	f2c0 0300 	movt	r3, #0
     b6c:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	46bd      	mov	sp, r7
     b72:	bd80      	pop	{r7, pc}

00000b74 <hri_gclk_wait_for_sync>:
typedef uint32_t hri_gclk_pchctrl_reg_t;
typedef uint32_t hri_gclk_syncbusy_reg_t;
typedef uint8_t  hri_gclk_ctrla_reg_t;

static inline void hri_gclk_wait_for_sync(const void *const hw, hri_gclk_syncbusy_reg_t reg)
{
     b74:	b580      	push	{r7, lr}
     b76:	b082      	sub	sp, #8
     b78:	af00      	add	r7, sp, #0
     b7a:	6078      	str	r0, [r7, #4]
     b7c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	685b      	ldr	r3, [r3, #4]
     b84:	683a      	ldr	r2, [r7, #0]
     b86:	4013      	ands	r3, r2
     b88:	2b00      	cmp	r3, #0
     b8a:	d1f9      	bne.n	b80 <hri_gclk_wait_for_sync+0xc>
	};
}
     b8c:	46c0      	nop			; (mov r8, r8)
     b8e:	46bd      	mov	sp, r7
     b90:	b002      	add	sp, #8
     b92:	bd80      	pop	{r7, pc}

00000b94 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
     b94:	b580      	push	{r7, lr}
     b96:	b084      	sub	sp, #16
     b98:	af00      	add	r7, sp, #0
     b9a:	60f8      	str	r0, [r7, #12]
     b9c:	607a      	str	r2, [r7, #4]
     b9e:	230b      	movs	r3, #11
     ba0:	18fb      	adds	r3, r7, r3
     ba2:	1c0a      	adds	r2, r1, #0
     ba4:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ba6:	230b      	movs	r3, #11
     ba8:	18fb      	adds	r3, r7, r3
     baa:	781a      	ldrb	r2, [r3, #0]
     bac:	68fb      	ldr	r3, [r7, #12]
     bae:	3208      	adds	r2, #8
     bb0:	0092      	lsls	r2, r2, #2
     bb2:	6879      	ldr	r1, [r7, #4]
     bb4:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
     bb6:	68fb      	ldr	r3, [r7, #12]
     bb8:	217d      	movs	r1, #125	; 0x7d
     bba:	0018      	movs	r0, r3
     bbc:	f640 3375 	movw	r3, #2933	; 0xb75
     bc0:	f2c0 0300 	movt	r3, #0
     bc4:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	46bd      	mov	sp, r7
     bca:	b004      	add	sp, #16
     bcc:	bd80      	pop	{r7, pc}

00000bce <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
     bce:	b580      	push	{r7, lr}
     bd0:	b082      	sub	sp, #8
     bd2:	af00      	add	r7, sp, #0
     bd4:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	2201      	movs	r2, #1
     bda:	4013      	ands	r3, r2
     bdc:	b173      	cbz	r3, bfc <_gclk_init_generators_by_fref+0x2e>
		hri_gclk_write_GENCTRL_reg(
     bde:	f240 1205 	movw	r2, #261	; 0x105
     be2:	f2c0 0201 	movt	r2, #1
     be6:	f641 4300 	movw	r3, #7168	; 0x1c00
     bea:	f2c4 0300 	movt	r3, #16384	; 0x4000
     bee:	2100      	movs	r1, #0
     bf0:	0018      	movs	r0, r3
     bf2:	f640 3395 	movw	r3, #2965	; 0xb95
     bf6:	f2c0 0300 	movt	r3, #0
     bfa:	4798      	blx	r3
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
     bfc:	46c0      	nop			; (mov r8, r8)
     bfe:	46bd      	mov	sp, r7
     c00:	b002      	add	sp, #8
     c02:	bd80      	pop	{r7, pc}

00000c04 <hri_mclk_write_CPUDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
     c04:	b580      	push	{r7, lr}
     c06:	b082      	sub	sp, #8
     c08:	af00      	add	r7, sp, #0
     c0a:	6078      	str	r0, [r7, #4]
     c0c:	000a      	movs	r2, r1
     c0e:	1cfb      	adds	r3, r7, #3
     c10:	701a      	strb	r2, [r3, #0]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
     c12:	687b      	ldr	r3, [r7, #4]
     c14:	1cfa      	adds	r2, r7, #3
     c16:	7812      	ldrb	r2, [r2, #0]
     c18:	711a      	strb	r2, [r3, #4]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	46bd      	mov	sp, r7
     c1e:	b002      	add	sp, #8
     c20:	bd80      	pop	{r7, pc}

00000c22 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
     c22:	b580      	push	{r7, lr}
     c24:	b082      	sub	sp, #8
     c26:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
     c28:	f640 0300 	movw	r3, #2048	; 0x800
     c2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     c30:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	2101      	movs	r1, #1
     c36:	0018      	movs	r0, r3
     c38:	f640 4305 	movw	r3, #3077	; 0xc05
     c3c:	f2c0 0300 	movt	r3, #0
     c40:	4798      	blx	r3
}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	46bd      	mov	sp, r7
     c46:	b002      	add	sp, #8
     c48:	bd80      	pop	{r7, pc}

00000c4a <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
     c4a:	b580      	push	{r7, lr}
     c4c:	b082      	sub	sp, #8
     c4e:	af00      	add	r7, sp, #0
     c50:	6078      	str	r0, [r7, #4]
     c52:	000a      	movs	r2, r1
     c54:	1cfb      	adds	r3, r7, #3
     c56:	701a      	strb	r2, [r3, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	1cfa      	adds	r2, r7, #3
     c5c:	7812      	ldrb	r2, [r2, #0]
     c5e:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
     c60:	46c0      	nop			; (mov r8, r8)
     c62:	46bd      	mov	sp, r7
     c64:	b002      	add	sp, #8
     c66:	bd80      	pop	{r7, pc}

00000c68 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
     c68:	b580      	push	{r7, lr}
     c6a:	b084      	sub	sp, #16
     c6c:	af00      	add	r7, sp, #0
     c6e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     c70:	687b      	ldr	r3, [r7, #4]
     c72:	69db      	ldr	r3, [r3, #28]
     c74:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	0a1b      	lsrs	r3, r3, #8
     c7a:	221f      	movs	r2, #31
     c7c:	4013      	ands	r3, r2
     c7e:	60fb      	str	r3, [r7, #12]
	return tmp;
     c80:	68fb      	ldr	r3, [r7, #12]
}
     c82:	0018      	movs	r0, r3
     c84:	46bd      	mov	sp, r7
     c86:	b004      	add	sp, #16
     c88:	bd80      	pop	{r7, pc}

00000c8a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
     c8a:	b580      	push	{r7, lr}
     c8c:	b082      	sub	sp, #8
     c8e:	af00      	add	r7, sp, #0
     c90:	6078      	str	r0, [r7, #4]
     c92:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     c94:	687b      	ldr	r3, [r7, #4]
     c96:	683a      	ldr	r2, [r7, #0]
     c98:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	46bd      	mov	sp, r7
     c9e:	b002      	add	sp, #8
     ca0:	bd80      	pop	{r7, pc}

00000ca2 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
     ca2:	b580      	push	{r7, lr}
     ca4:	b082      	sub	sp, #8
     ca6:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
     ca8:	f241 4300 	movw	r3, #5120	; 0x1400
     cac:	f2c4 0300 	movt	r3, #16384	; 0x4000
     cb0:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
     cb2:	1cbb      	adds	r3, r7, #2
     cb4:	2200      	movs	r2, #0
     cb6:	801a      	strh	r2, [r3, #0]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
     cb8:	687b      	ldr	r3, [r7, #4]
     cba:	0018      	movs	r0, r3
     cbc:	f640 4369 	movw	r3, #3177	; 0xc69
     cc0:	f2c0 0300 	movt	r3, #0
     cc4:	4798      	blx	r3
     cc6:	0002      	movs	r2, r0
     cc8:	1cbb      	adds	r3, r7, #2
     cca:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     ccc:	1cbb      	adds	r3, r7, #2
     cce:	881b      	ldrh	r3, [r3, #0]
     cd0:	021b      	lsls	r3, r3, #8
     cd2:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     cd4:	f641 7300 	movw	r3, #7936	; 0x1f00
     cd8:	401a      	ands	r2, r3
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	0011      	movs	r1, r2
     cde:	0018      	movs	r0, r3
     ce0:	f640 438b 	movw	r3, #3211	; 0xc8b
     ce4:	f2c0 0300 	movt	r3, #0
     ce8:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_ULP32KSW_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
     cea:	687b      	ldr	r3, [r7, #4]
     cec:	2100      	movs	r1, #0
     cee:	0018      	movs	r0, r3
     cf0:	f640 434b 	movw	r3, #3147	; 0xc4b
     cf4:	f2c0 0300 	movt	r3, #0
     cf8:	4798      	blx	r3
	(void)calib;
}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	46bd      	mov	sp, r7
     cfe:	b002      	add	sp, #8
     d00:	bd80      	pop	{r7, pc}

00000d02 <hri_oscctrl_get_STATUS_OSC16MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW_Msk) >> OSCCTRL_STATUS_XOSCCKSW_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
     d02:	b580      	push	{r7, lr}
     d04:	b082      	sub	sp, #8
     d06:	af00      	add	r7, sp, #0
     d08:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	691b      	ldr	r3, [r3, #16]
     d0e:	091b      	lsrs	r3, r3, #4
     d10:	2201      	movs	r2, #1
     d12:	4013      	ands	r3, r2
     d14:	1e5a      	subs	r2, r3, #1
     d16:	4193      	sbcs	r3, r2
     d18:	b2db      	uxtb	r3, r3
}
     d1a:	0018      	movs	r0, r3
     d1c:	46bd      	mov	sp, r7
     d1e:	b002      	add	sp, #8
     d20:	bd80      	pop	{r7, pc}

00000d22 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit>:
	((Oscctrl *)hw)->OSC16MCTRL.reg ^= OSCCTRL_OSC16MCTRL_RUNSTDBY_Msk;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
     d22:	b580      	push	{r7, lr}
     d24:	b082      	sub	sp, #8
     d26:	af00      	add	r7, sp, #0
     d28:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	7e1b      	ldrb	r3, [r3, #24]
     d2e:	b2db      	uxtb	r3, r3
     d30:	2280      	movs	r2, #128	; 0x80
     d32:	4252      	negs	r2, r2
     d34:	4313      	orrs	r3, r2
     d36:	b2da      	uxtb	r2, r3
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	761a      	strb	r2, [r3, #24]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
     d3c:	46c0      	nop			; (mov r8, r8)
     d3e:	46bd      	mov	sp, r7
     d40:	b002      	add	sp, #8
     d42:	bd80      	pop	{r7, pc}

00000d44 <hri_oscctrl_write_OSC16MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
     d44:	b580      	push	{r7, lr}
     d46:	b082      	sub	sp, #8
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
     d4c:	000a      	movs	r2, r1
     d4e:	1cfb      	adds	r3, r7, #3
     d50:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	1cfa      	adds	r2, r7, #3
     d56:	7812      	ldrb	r2, [r2, #0]
     d58:	761a      	strb	r2, [r3, #24]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	46bd      	mov	sp, r7
     d5e:	b002      	add	sp, #8
     d60:	bd80      	pop	{r7, pc}

00000d62 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     d62:	b580      	push	{r7, lr}
     d64:	b082      	sub	sp, #8
     d66:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
     d68:	f241 0300 	movw	r3, #4096	; 0x1000
     d6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     d70:	607b      	str	r3, [r7, #4]

	hri_oscctrl_write_EVCTRL_reg(hw, (CONF_XOSC_CFDEO << OSCCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSC16M_CONFIG == 1
	hri_oscctrl_write_OSC16MCTRL_reg(hw,
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	2102      	movs	r1, #2
     d76:	0018      	movs	r0, r3
     d78:	f640 5345 	movw	r3, #3397	; 0xd45
     d7c:	f2c0 0300 	movt	r3, #0
     d80:	4798      	blx	r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	0018      	movs	r0, r3
     d88:	f640 5303 	movw	r3, #3331	; 0xd03
     d8c:	f2c0 0300 	movt	r3, #0
     d90:	4798      	blx	r3
     d92:	0003      	movs	r3, r0
     d94:	001a      	movs	r2, r3
     d96:	2301      	movs	r3, #1
     d98:	4053      	eors	r3, r2
     d9a:	b2db      	uxtb	r3, r3
     d9c:	2b00      	cmp	r3, #0
     d9e:	d1f1      	bne.n	d84 <_oscctrl_init_sources+0x22>
		;
#endif
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	0018      	movs	r0, r3
     da4:	f640 5323 	movw	r3, #3363	; 0xd23
     da8:	f2c0 0300 	movt	r3, #0
     dac:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	46bd      	mov	sp, r7
     db2:	b002      	add	sp, #8
     db4:	bd80      	pop	{r7, pc}

00000db6 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     db6:	b580      	push	{r7, lr}
     db8:	b082      	sub	sp, #8
     dba:	af00      	add	r7, sp, #0
	void *                        hw  = (void *)OSCCTRL;
     dbc:	f241 0300 	movw	r3, #4096	; 0x1000
     dc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     dc4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_dfllulpctrl_reg_t tmp = 0;
     dc6:	1cbb      	adds	r3, r7, #2
     dc8:	2200      	movs	r2, #0
     dca:	801a      	strh	r2, [r3, #0]
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     dcc:	46c0      	nop			; (mov r8, r8)
     dce:	46bd      	mov	sp, r7
     dd0:	b002      	add	sp, #8
     dd2:	bd80      	pop	{r7, pc}

00000dd4 <hri_pm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
     dd4:	b580      	push	{r7, lr}
     dd6:	b082      	sub	sp, #8
     dd8:	af00      	add	r7, sp, #0
     dda:	6078      	str	r0, [r7, #4]
	return ((Pm *)hw)->INTFLAG.reg;
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	799b      	ldrb	r3, [r3, #6]
     de0:	b2db      	uxtb	r3, r3
}
     de2:	0018      	movs	r0, r3
     de4:	46bd      	mov	sp, r7
     de6:	b002      	add	sp, #8
     de8:	bd80      	pop	{r7, pc}

00000dea <hri_pm_clear_INTFLAG_reg>:

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
     dea:	b580      	push	{r7, lr}
     dec:	b082      	sub	sp, #8
     dee:	af00      	add	r7, sp, #0
     df0:	6078      	str	r0, [r7, #4]
     df2:	000a      	movs	r2, r1
     df4:	1cfb      	adds	r3, r7, #3
     df6:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->INTFLAG.reg = mask;
     df8:	687b      	ldr	r3, [r7, #4]
     dfa:	1cfa      	adds	r2, r7, #3
     dfc:	7812      	ldrb	r2, [r2, #0]
     dfe:	719a      	strb	r2, [r3, #6]
}
     e00:	46c0      	nop			; (mov r8, r8)
     e02:	46bd      	mov	sp, r7
     e04:	b002      	add	sp, #8
     e06:	bd80      	pop	{r7, pc}

00000e08 <hri_pm_get_PLCFG_PLSEL_bf>:
	((Pm *)hw)->PLCFG.reg |= PM_PLCFG_PLSEL(mask);
	PM_CRITICAL_SECTION_LEAVE();
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
     e08:	b580      	push	{r7, lr}
     e0a:	b084      	sub	sp, #16
     e0c:	af00      	add	r7, sp, #0
     e0e:	6078      	str	r0, [r7, #4]
     e10:	000a      	movs	r2, r1
     e12:	1cfb      	adds	r3, r7, #3
     e14:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     e16:	230f      	movs	r3, #15
     e18:	18fb      	adds	r3, r7, r3
     e1a:	687a      	ldr	r2, [r7, #4]
     e1c:	7892      	ldrb	r2, [r2, #2]
     e1e:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
     e20:	230f      	movs	r3, #15
     e22:	18fb      	adds	r3, r7, r3
     e24:	1cfa      	adds	r2, r7, #3
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	7812      	ldrb	r2, [r2, #0]
     e2a:	4013      	ands	r3, r2
     e2c:	b2da      	uxtb	r2, r3
     e2e:	230f      	movs	r3, #15
     e30:	18fb      	adds	r3, r7, r3
     e32:	2103      	movs	r1, #3
     e34:	400a      	ands	r2, r1
     e36:	701a      	strb	r2, [r3, #0]
	return tmp;
     e38:	230f      	movs	r3, #15
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	781b      	ldrb	r3, [r3, #0]
}
     e3e:	0018      	movs	r0, r3
     e40:	46bd      	mov	sp, r7
     e42:	b004      	add	sp, #16
     e44:	bd80      	pop	{r7, pc}

00000e46 <hri_pm_write_PLCFG_PLSEL_bf>:

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
     e46:	b580      	push	{r7, lr}
     e48:	b084      	sub	sp, #16
     e4a:	af00      	add	r7, sp, #0
     e4c:	6078      	str	r0, [r7, #4]
     e4e:	000a      	movs	r2, r1
     e50:	1cfb      	adds	r3, r7, #3
     e52:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     e54:	230f      	movs	r3, #15
     e56:	18fb      	adds	r3, r7, r3
     e58:	687a      	ldr	r2, [r7, #4]
     e5a:	7892      	ldrb	r2, [r2, #2]
     e5c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     e5e:	230f      	movs	r3, #15
     e60:	18fb      	adds	r3, r7, r3
     e62:	220f      	movs	r2, #15
     e64:	18ba      	adds	r2, r7, r2
     e66:	7812      	ldrb	r2, [r2, #0]
     e68:	2103      	movs	r1, #3
     e6a:	438a      	bics	r2, r1
     e6c:	701a      	strb	r2, [r3, #0]
	tmp |= PM_PLCFG_PLSEL(data);
     e6e:	1cfb      	adds	r3, r7, #3
     e70:	781b      	ldrb	r3, [r3, #0]
     e72:	2203      	movs	r2, #3
     e74:	4013      	ands	r3, r2
     e76:	b2d9      	uxtb	r1, r3
     e78:	230f      	movs	r3, #15
     e7a:	18fb      	adds	r3, r7, r3
     e7c:	220f      	movs	r2, #15
     e7e:	18ba      	adds	r2, r7, r2
     e80:	7812      	ldrb	r2, [r2, #0]
     e82:	430a      	orrs	r2, r1
     e84:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->PLCFG.reg = tmp;
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	220f      	movs	r2, #15
     e8a:	18ba      	adds	r2, r7, r2
     e8c:	7812      	ldrb	r2, [r2, #0]
     e8e:	709a      	strb	r2, [r3, #2]
	PM_CRITICAL_SECTION_LEAVE();
}
     e90:	46c0      	nop			; (mov r8, r8)
     e92:	46bd      	mov	sp, r7
     e94:	b004      	add	sp, #16
     e96:	bd80      	pop	{r7, pc}

00000e98 <_set_performance_level>:

/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
     e98:	b580      	push	{r7, lr}
     e9a:	b082      	sub	sp, #8
     e9c:	af00      	add	r7, sp, #0
     e9e:	0002      	movs	r2, r0
     ea0:	1dfb      	adds	r3, r7, #7
     ea2:	701a      	strb	r2, [r3, #0]
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     ea4:	f240 4300 	movw	r3, #1024	; 0x400
     ea8:	f2c4 0300 	movt	r3, #16384	; 0x4000
     eac:	2103      	movs	r1, #3
     eae:	0018      	movs	r0, r3
     eb0:	f640 6309 	movw	r3, #3593	; 0xe09
     eb4:	f2c0 0300 	movt	r3, #0
     eb8:	4798      	blx	r3
     eba:	0003      	movs	r3, r0
     ebc:	001a      	movs	r2, r3
     ebe:	1dfb      	adds	r3, r7, #7
     ec0:	781b      	ldrb	r3, [r3, #0]
     ec2:	4293      	cmp	r3, r2
     ec4:	d025      	beq.n	f12 <_set_performance_level+0x7a>
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
     ec6:	f240 4300 	movw	r3, #1024	; 0x400
     eca:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ece:	21ff      	movs	r1, #255	; 0xff
     ed0:	0018      	movs	r0, r3
     ed2:	f640 53eb 	movw	r3, #3563	; 0xdeb
     ed6:	f2c0 0300 	movt	r3, #0
     eda:	4798      	blx	r3
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
     edc:	1dfb      	adds	r3, r7, #7
     ede:	781a      	ldrb	r2, [r3, #0]
     ee0:	f240 4300 	movw	r3, #1024	; 0x400
     ee4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ee8:	0011      	movs	r1, r2
     eea:	0018      	movs	r0, r3
     eec:	f640 6347 	movw	r3, #3655	; 0xe47
     ef0:	f2c0 0300 	movt	r3, #0
     ef4:	4798      	blx	r3
		while (!hri_pm_read_INTFLAG_reg(PM))
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	f240 4300 	movw	r3, #1024	; 0x400
     efc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f00:	0018      	movs	r0, r3
     f02:	f640 53d5 	movw	r3, #3541	; 0xdd5
     f06:	f2c0 0300 	movt	r3, #0
     f0a:	4798      	blx	r3
     f0c:	0003      	movs	r3, r0
     f0e:	2b00      	cmp	r3, #0
     f10:	d0f2      	beq.n	ef8 <_set_performance_level+0x60>
			;
	}
}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	46bd      	mov	sp, r7
     f16:	b002      	add	sp, #8
     f18:	bd80      	pop	{r7, pc}
	...

00000f1c <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
     f1c:	b580      	push	{r7, lr}
     f1e:	b082      	sub	sp, #8
     f20:	af00      	add	r7, sp, #0
     f22:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     f24:	f24e 0310 	movw	r3, #57360	; 0xe010
     f28:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f2c:	4a05      	ldr	r2, [pc, #20]	; (f44 <_system_time_init+0x28>)
     f2e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     f30:	f24e 0310 	movw	r3, #57360	; 0xe010
     f34:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f38:	2205      	movs	r2, #5
     f3a:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
     f3c:	46c0      	nop			; (mov r8, r8)
     f3e:	46bd      	mov	sp, r7
     f40:	b002      	add	sp, #8
     f42:	bd80      	pop	{r7, pc}
     f44:	00ffffff 	.word	0x00ffffff

00000f48 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
     f48:	b580      	push	{r7, lr}
     f4a:	b082      	sub	sp, #8
     f4c:	af00      	add	r7, sp, #0
     f4e:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
     f50:	687b      	ldr	r3, [r7, #4]
     f52:	0018      	movs	r0, r3
     f54:	f640 731d 	movw	r3, #3869	; 0xf1d
     f58:	f2c0 0300 	movt	r3, #0
     f5c:	4798      	blx	r3
}
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	46bd      	mov	sp, r7
     f62:	b002      	add	sp, #8
     f64:	bd80      	pop	{r7, pc}
	...

00000f68 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
     f68:	b580      	push	{r7, lr}
     f6a:	b084      	sub	sp, #16
     f6c:	af00      	add	r7, sp, #0
     f6e:	6078      	str	r0, [r7, #4]
     f70:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
     f72:	683b      	ldr	r3, [r7, #0]
     f74:	0e1a      	lsrs	r2, r3, #24
     f76:	230f      	movs	r3, #15
     f78:	18fb      	adds	r3, r7, r3
     f7a:	701a      	strb	r2, [r3, #0]
	uint32_t buf = cycles;
     f7c:	683b      	ldr	r3, [r7, #0]
     f7e:	60bb      	str	r3, [r7, #8]

	while (n--) {
     f80:	e01d      	b.n	fbe <_delay_cycles+0x56>
		SysTick->LOAD = 0xFFFFFF;
     f82:	f24e 0310 	movw	r3, #57360	; 0xe010
     f86:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f8a:	4a1f      	ldr	r2, [pc, #124]	; (1008 <_delay_cycles+0xa0>)
     f8c:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
     f8e:	f24e 0310 	movw	r3, #57360	; 0xe010
     f92:	f2ce 0300 	movt	r3, #57344	; 0xe000
     f96:	4a1c      	ldr	r2, [pc, #112]	; (1008 <_delay_cycles+0xa0>)
     f98:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	f24e 0310 	movw	r3, #57360	; 0xe010
     fa0:	f2ce 0300 	movt	r3, #57344	; 0xe000
     fa4:	681a      	ldr	r2, [r3, #0]
     fa6:	2380      	movs	r3, #128	; 0x80
     fa8:	025b      	lsls	r3, r3, #9
     faa:	4013      	ands	r3, r2
     fac:	2b00      	cmp	r3, #0
     fae:	d0f5      	beq.n	f9c <_delay_cycles+0x34>
			;
		buf -= 0xFFFFFF;
     fb0:	68bb      	ldr	r3, [r7, #8]
     fb2:	f240 0c01 	movw	ip, #1
     fb6:	f6cf 7c00 	movt	ip, #65280	; 0xff00
     fba:	4463      	add	r3, ip
     fbc:	60bb      	str	r3, [r7, #8]
	while (n--) {
     fbe:	230f      	movs	r3, #15
     fc0:	18fb      	adds	r3, r7, r3
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	220f      	movs	r2, #15
     fc6:	18ba      	adds	r2, r7, r2
     fc8:	1e59      	subs	r1, r3, #1
     fca:	7011      	strb	r1, [r2, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d1d8      	bne.n	f82 <_delay_cycles+0x1a>
	}

	SysTick->LOAD = buf;
     fd0:	f24e 0310 	movw	r3, #57360	; 0xe010
     fd4:	f2ce 0300 	movt	r3, #57344	; 0xe000
     fd8:	68ba      	ldr	r2, [r7, #8]
     fda:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = buf;
     fdc:	f24e 0310 	movw	r3, #57360	; 0xe010
     fe0:	f2ce 0300 	movt	r3, #57344	; 0xe000
     fe4:	68ba      	ldr	r2, [r7, #8]
     fe6:	609a      	str	r2, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     fe8:	46c0      	nop			; (mov r8, r8)
     fea:	f24e 0310 	movw	r3, #57360	; 0xe010
     fee:	f2ce 0300 	movt	r3, #57344	; 0xe000
     ff2:	681a      	ldr	r2, [r3, #0]
     ff4:	2380      	movs	r3, #128	; 0x80
     ff6:	025b      	lsls	r3, r3, #9
     ff8:	4013      	ands	r3, r2
     ffa:	2b00      	cmp	r3, #0
     ffc:	d0f5      	beq.n	fea <_delay_cycles+0x82>
		;
}
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	46bd      	mov	sp, r7
    1002:	b004      	add	sp, #16
    1004:	bd80      	pop	{r7, pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	00ffffff 	.word	0x00ffffff

0000100c <hri_port_toggle_OUT_reg>:
{
    100c:	b580      	push	{r7, lr}
    100e:	b084      	sub	sp, #16
    1010:	af00      	add	r7, sp, #0
    1012:	60f8      	str	r0, [r7, #12]
    1014:	607a      	str	r2, [r7, #4]
    1016:	230b      	movs	r3, #11
    1018:	18fb      	adds	r3, r7, r3
    101a:	1c0a      	adds	r2, r1, #0
    101c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    101e:	230b      	movs	r3, #11
    1020:	18fb      	adds	r3, r7, r3
    1022:	781b      	ldrb	r3, [r3, #0]
    1024:	68fa      	ldr	r2, [r7, #12]
    1026:	01db      	lsls	r3, r3, #7
    1028:	18d3      	adds	r3, r2, r3
    102a:	331c      	adds	r3, #28
    102c:	687a      	ldr	r2, [r7, #4]
    102e:	601a      	str	r2, [r3, #0]
}
    1030:	46c0      	nop			; (mov r8, r8)
    1032:	46bd      	mov	sp, r7
    1034:	b004      	add	sp, #16
    1036:	bd80      	pop	{r7, pc}

00001038 <_gpio_toggle_level>:
{
    1038:	b580      	push	{r7, lr}
    103a:	b082      	sub	sp, #8
    103c:	af00      	add	r7, sp, #0
    103e:	0002      	movs	r2, r0
    1040:	6039      	str	r1, [r7, #0]
    1042:	1dfb      	adds	r3, r7, #7
    1044:	701a      	strb	r2, [r3, #0]
	hri_port_toggle_OUT_reg(_PORT_IOBUS, port, mask);
    1046:	683a      	ldr	r2, [r7, #0]
    1048:	1dfb      	adds	r3, r7, #7
    104a:	7819      	ldrb	r1, [r3, #0]
    104c:	f240 2300 	movw	r3, #512	; 0x200
    1050:	f2c6 0300 	movt	r3, #24576	; 0x6000
    1054:	0018      	movs	r0, r3
    1056:	f241 030d 	movw	r3, #4109	; 0x100d
    105a:	f2c0 0300 	movt	r3, #0
    105e:	4798      	blx	r3
}
    1060:	46c0      	nop			; (mov r8, r8)
    1062:	46bd      	mov	sp, r7
    1064:	b002      	add	sp, #8
    1066:	bd80      	pop	{r7, pc}

00001068 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    1068:	b580      	push	{r7, lr}
    106a:	b082      	sub	sp, #8
    106c:	af00      	add	r7, sp, #0
    106e:	0002      	movs	r2, r0
    1070:	1dfb      	adds	r3, r7, #7
    1072:	701a      	strb	r2, [r3, #0]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    1074:	1dfb      	adds	r3, r7, #7
    1076:	781b      	ldrb	r3, [r3, #0]
    1078:	095b      	lsrs	r3, r3, #5
    107a:	b2d8      	uxtb	r0, r3
    107c:	1dfb      	adds	r3, r7, #7
    107e:	781b      	ldrb	r3, [r3, #0]
    1080:	221f      	movs	r2, #31
    1082:	4013      	ands	r3, r2
    1084:	2201      	movs	r2, #1
    1086:	409a      	lsls	r2, r3
    1088:	0013      	movs	r3, r2
    108a:	0019      	movs	r1, r3
    108c:	f241 0339 	movw	r3, #4153	; 0x1039
    1090:	f2c0 0300 	movt	r3, #0
    1094:	4798      	blx	r3
}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	46bd      	mov	sp, r7
    109a:	b002      	add	sp, #8
    109c:	bd80      	pop	{r7, pc}

0000109e <init_aes>:
long keysize = 256;
#endif

/** Call initialization functions for different AES implementations **/
void init_aes()
{
    109e:	b580      	push	{r7, lr}
    10a0:	af00      	add	r7, sp, #0
	#endif
	#ifdef mbedtls_aes
	mbedtls_aes_init(&ctx);
	mbedtls_aes_setkey_enc(&ctx, key, keysize);
	#endif
}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	46bd      	mov	sp, r7
    10a6:	bd80      	pop	{r7, pc}

000010a8 <test_encrypt>:

void test_encrypt()
{
    10a8:	b580      	push	{r7, lr}
    10aa:	af00      	add	r7, sp, #0
	AES_encrypt(&ctx, key, pt, ct);
	#endif

	/** SLOW tiny AES **/
	#ifdef slow_tiny_aes
	test_AES_encrypt();
    10ac:	f641 1335 	movw	r3, #6453	; 0x1935
    10b0:	f2c0 0300 	movt	r3, #0
    10b4:	4798      	blx	r3

	/** MbedTLS AES **/
	#ifdef mbedtls_aes
	mbedtls_internal_aes_encrypt(&ctx, pt, ct);
	#endif
}
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	46bd      	mov	sp, r7
    10ba:	bd80      	pop	{r7, pc}

000010bc <main>:




int main(void)
{
    10bc:	b580      	push	{r7, lr}
    10be:	af00      	add	r7, sp, #0
	atmel_start_init();
    10c0:	f240 1397 	movw	r3, #407	; 0x197
    10c4:	f2c0 0300 	movt	r3, #0
    10c8:	4798      	blx	r3
			while(true);
	
	#else
	
	while (true) {
		delay_ms(2*500);
    10ca:	f240 30e8 	movw	r0, #1000	; 0x3e8
    10ce:	f640 03ad 	movw	r3, #2221	; 0x8ad
    10d2:	f2c0 0300 	movt	r3, #0
    10d6:	4798      	blx	r3
		init_aes();
    10d8:	f241 039f 	movw	r3, #4255	; 0x109f
    10dc:	f2c0 0300 	movt	r3, #0
    10e0:	4798      	blx	r3
		test_encrypt();
    10e2:	f241 03a9 	movw	r3, #4265	; 0x10a9
    10e6:	f2c0 0300 	movt	r3, #0
    10ea:	4798      	blx	r3
		//test_decrypt();
		gpio_toggle_pin_level(LED0);
    10ec:	2017      	movs	r0, #23
    10ee:	f241 0369 	movw	r3, #4201	; 0x1069
    10f2:	f2c0 0300 	movt	r3, #0
    10f6:	4798      	blx	r3
		delay_ms(2*500);
    10f8:	e7e7      	b.n	10ca <main+0xe>

000010fa <phex>:

static void phex(uint8_t* str);

// prints string as hex
static void phex(uint8_t* str)
{
    10fa:	b580      	push	{r7, lr}
    10fc:	b084      	sub	sp, #16
    10fe:	af00      	add	r7, sp, #0
    1100:	6078      	str	r0, [r7, #4]

#if defined(AES_256)
    uint8_t len = 32;
    1102:	230e      	movs	r3, #14
    1104:	18fb      	adds	r3, r7, r3
    1106:	2220      	movs	r2, #32
    1108:	701a      	strb	r2, [r3, #0]
#elif defined(AES_128)
    uint8_t len = 16;
#endif

    unsigned char i;
    for (i = 0; i < len; ++i);
    110a:	230f      	movs	r3, #15
    110c:	18fb      	adds	r3, r7, r3
    110e:	2200      	movs	r2, #0
    1110:	701a      	strb	r2, [r3, #0]
    1112:	e006      	b.n	1122 <phex+0x28>
    1114:	230f      	movs	r3, #15
    1116:	18fb      	adds	r3, r7, r3
    1118:	220f      	movs	r2, #15
    111a:	18ba      	adds	r2, r7, r2
    111c:	7812      	ldrb	r2, [r2, #0]
    111e:	3201      	adds	r2, #1
    1120:	701a      	strb	r2, [r3, #0]
    1122:	230f      	movs	r3, #15
    1124:	18fa      	adds	r2, r7, r3
    1126:	230e      	movs	r3, #14
    1128:	18fb      	adds	r3, r7, r3
    112a:	7812      	ldrb	r2, [r2, #0]
    112c:	781b      	ldrb	r3, [r3, #0]
    112e:	429a      	cmp	r2, r3
    1130:	d3f0      	bcc.n	1114 <phex+0x1a>
       // printf("%.2x", str[i]);
   // printf("\n");
}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	46bd      	mov	sp, r7
    1136:	b004      	add	sp, #16
    1138:	bd80      	pop	{r7, pc}
	...

0000113c <KeyExpansion>:

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
    113c:	b580      	push	{r7, lr}
    113e:	b088      	sub	sp, #32
    1140:	af00      	add	r7, sp, #0
    1142:	6078      	str	r0, [r7, #4]
    1144:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
    1146:	2300      	movs	r3, #0
    1148:	61fb      	str	r3, [r7, #28]
    114a:	e030      	b.n	11ae <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
    114c:	69fb      	ldr	r3, [r7, #28]
    114e:	009b      	lsls	r3, r3, #2
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	18d3      	adds	r3, r2, r3
    1154:	69fa      	ldr	r2, [r7, #28]
    1156:	0092      	lsls	r2, r2, #2
    1158:	6839      	ldr	r1, [r7, #0]
    115a:	188a      	adds	r2, r1, r2
    115c:	7812      	ldrb	r2, [r2, #0]
    115e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
    1160:	69fb      	ldr	r3, [r7, #28]
    1162:	009b      	lsls	r3, r3, #2
    1164:	3301      	adds	r3, #1
    1166:	687a      	ldr	r2, [r7, #4]
    1168:	18d3      	adds	r3, r2, r3
    116a:	69fa      	ldr	r2, [r7, #28]
    116c:	0092      	lsls	r2, r2, #2
    116e:	3201      	adds	r2, #1
    1170:	6839      	ldr	r1, [r7, #0]
    1172:	188a      	adds	r2, r1, r2
    1174:	7812      	ldrb	r2, [r2, #0]
    1176:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
    1178:	69fb      	ldr	r3, [r7, #28]
    117a:	009b      	lsls	r3, r3, #2
    117c:	3302      	adds	r3, #2
    117e:	687a      	ldr	r2, [r7, #4]
    1180:	18d3      	adds	r3, r2, r3
    1182:	69fa      	ldr	r2, [r7, #28]
    1184:	0092      	lsls	r2, r2, #2
    1186:	3202      	adds	r2, #2
    1188:	6839      	ldr	r1, [r7, #0]
    118a:	188a      	adds	r2, r1, r2
    118c:	7812      	ldrb	r2, [r2, #0]
    118e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
    1190:	69fb      	ldr	r3, [r7, #28]
    1192:	009b      	lsls	r3, r3, #2
    1194:	3303      	adds	r3, #3
    1196:	687a      	ldr	r2, [r7, #4]
    1198:	18d3      	adds	r3, r2, r3
    119a:	69fa      	ldr	r2, [r7, #28]
    119c:	0092      	lsls	r2, r2, #2
    119e:	3203      	adds	r2, #3
    11a0:	6839      	ldr	r1, [r7, #0]
    11a2:	188a      	adds	r2, r1, r2
    11a4:	7812      	ldrb	r2, [r2, #0]
    11a6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
    11a8:	69fb      	ldr	r3, [r7, #28]
    11aa:	3301      	adds	r3, #1
    11ac:	61fb      	str	r3, [r7, #28]
    11ae:	69fb      	ldr	r3, [r7, #28]
    11b0:	2b07      	cmp	r3, #7
    11b2:	d9cb      	bls.n	114c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
    11b4:	2308      	movs	r3, #8
    11b6:	61fb      	str	r3, [r7, #28]
    11b8:	e103      	b.n	13c2 <KeyExpansion+0x286>
  {
    {
      k = (i - 1) * 4;
    11ba:	69fb      	ldr	r3, [r7, #28]
    11bc:	4a85      	ldr	r2, [pc, #532]	; (13d4 <KeyExpansion+0x298>)
    11be:	4694      	mov	ip, r2
    11c0:	4463      	add	r3, ip
    11c2:	009b      	lsls	r3, r3, #2
    11c4:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
    11c6:	687a      	ldr	r2, [r7, #4]
    11c8:	69bb      	ldr	r3, [r7, #24]
    11ca:	18d3      	adds	r3, r2, r3
    11cc:	781a      	ldrb	r2, [r3, #0]
    11ce:	230c      	movs	r3, #12
    11d0:	18fb      	adds	r3, r7, r3
    11d2:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
    11d4:	69bb      	ldr	r3, [r7, #24]
    11d6:	3301      	adds	r3, #1
    11d8:	687a      	ldr	r2, [r7, #4]
    11da:	18d3      	adds	r3, r2, r3
    11dc:	781a      	ldrb	r2, [r3, #0]
    11de:	230c      	movs	r3, #12
    11e0:	18fb      	adds	r3, r7, r3
    11e2:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
    11e4:	69bb      	ldr	r3, [r7, #24]
    11e6:	3302      	adds	r3, #2
    11e8:	687a      	ldr	r2, [r7, #4]
    11ea:	18d3      	adds	r3, r2, r3
    11ec:	781a      	ldrb	r2, [r3, #0]
    11ee:	230c      	movs	r3, #12
    11f0:	18fb      	adds	r3, r7, r3
    11f2:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
    11f4:	69bb      	ldr	r3, [r7, #24]
    11f6:	3303      	adds	r3, #3
    11f8:	687a      	ldr	r2, [r7, #4]
    11fa:	18d3      	adds	r3, r2, r3
    11fc:	781a      	ldrb	r2, [r3, #0]
    11fe:	230c      	movs	r3, #12
    1200:	18fb      	adds	r3, r7, r3
    1202:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
    1204:	69fb      	ldr	r3, [r7, #28]
    1206:	2207      	movs	r2, #7
    1208:	4013      	ands	r3, r2
    120a:	2b00      	cmp	r3, #0
    120c:	d15c      	bne.n	12c8 <KeyExpansion+0x18c>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
    120e:	2317      	movs	r3, #23
    1210:	18fb      	adds	r3, r7, r3
    1212:	220c      	movs	r2, #12
    1214:	18ba      	adds	r2, r7, r2
    1216:	7812      	ldrb	r2, [r2, #0]
    1218:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
    121a:	230c      	movs	r3, #12
    121c:	18fb      	adds	r3, r7, r3
    121e:	785a      	ldrb	r2, [r3, #1]
    1220:	230c      	movs	r3, #12
    1222:	18fb      	adds	r3, r7, r3
    1224:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
    1226:	230c      	movs	r3, #12
    1228:	18fb      	adds	r3, r7, r3
    122a:	789a      	ldrb	r2, [r3, #2]
    122c:	230c      	movs	r3, #12
    122e:	18fb      	adds	r3, r7, r3
    1230:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
    1232:	230c      	movs	r3, #12
    1234:	18fb      	adds	r3, r7, r3
    1236:	78da      	ldrb	r2, [r3, #3]
    1238:	230c      	movs	r3, #12
    123a:	18fb      	adds	r3, r7, r3
    123c:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
    123e:	230c      	movs	r3, #12
    1240:	18fb      	adds	r3, r7, r3
    1242:	2217      	movs	r2, #23
    1244:	18ba      	adds	r2, r7, r2
    1246:	7812      	ldrb	r2, [r2, #0]
    1248:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
    124a:	230c      	movs	r3, #12
    124c:	18fb      	adds	r3, r7, r3
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	001a      	movs	r2, r3
    1252:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    1256:	f2c0 0300 	movt	r3, #0
    125a:	5c9a      	ldrb	r2, [r3, r2]
    125c:	230c      	movs	r3, #12
    125e:	18fb      	adds	r3, r7, r3
    1260:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
    1262:	230c      	movs	r3, #12
    1264:	18fb      	adds	r3, r7, r3
    1266:	785b      	ldrb	r3, [r3, #1]
    1268:	001a      	movs	r2, r3
    126a:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    126e:	f2c0 0300 	movt	r3, #0
    1272:	5c9a      	ldrb	r2, [r3, r2]
    1274:	230c      	movs	r3, #12
    1276:	18fb      	adds	r3, r7, r3
    1278:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
    127a:	230c      	movs	r3, #12
    127c:	18fb      	adds	r3, r7, r3
    127e:	789b      	ldrb	r3, [r3, #2]
    1280:	001a      	movs	r2, r3
    1282:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    1286:	f2c0 0300 	movt	r3, #0
    128a:	5c9a      	ldrb	r2, [r3, r2]
    128c:	230c      	movs	r3, #12
    128e:	18fb      	adds	r3, r7, r3
    1290:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
    1292:	230c      	movs	r3, #12
    1294:	18fb      	adds	r3, r7, r3
    1296:	78db      	ldrb	r3, [r3, #3]
    1298:	001a      	movs	r2, r3
    129a:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    129e:	f2c0 0300 	movt	r3, #0
    12a2:	5c9a      	ldrb	r2, [r3, r2]
    12a4:	230c      	movs	r3, #12
    12a6:	18fb      	adds	r3, r7, r3
    12a8:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
    12aa:	230c      	movs	r3, #12
    12ac:	18fb      	adds	r3, r7, r3
    12ae:	781a      	ldrb	r2, [r3, #0]
    12b0:	69fb      	ldr	r3, [r7, #28]
    12b2:	08d9      	lsrs	r1, r3, #3
    12b4:	f641 43d8 	movw	r3, #7384	; 0x1cd8
    12b8:	f2c0 0300 	movt	r3, #0
    12bc:	5c5b      	ldrb	r3, [r3, r1]
    12be:	4053      	eors	r3, r2
    12c0:	b2da      	uxtb	r2, r3
    12c2:	230c      	movs	r3, #12
    12c4:	18fb      	adds	r3, r7, r3
    12c6:	701a      	strb	r2, [r3, #0]
    }
#if defined(AES_256) && (AES_256 == 1)
    if (i % Nk == 4)
    12c8:	69fb      	ldr	r3, [r7, #28]
    12ca:	2207      	movs	r2, #7
    12cc:	4013      	ands	r3, r2
    12ce:	2b04      	cmp	r3, #4
    12d0:	d12f      	bne.n	1332 <KeyExpansion+0x1f6>
    {
      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
    12d2:	230c      	movs	r3, #12
    12d4:	18fb      	adds	r3, r7, r3
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	001a      	movs	r2, r3
    12da:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    12de:	f2c0 0300 	movt	r3, #0
    12e2:	5c9a      	ldrb	r2, [r3, r2]
    12e4:	230c      	movs	r3, #12
    12e6:	18fb      	adds	r3, r7, r3
    12e8:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
    12ea:	230c      	movs	r3, #12
    12ec:	18fb      	adds	r3, r7, r3
    12ee:	785b      	ldrb	r3, [r3, #1]
    12f0:	001a      	movs	r2, r3
    12f2:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    12f6:	f2c0 0300 	movt	r3, #0
    12fa:	5c9a      	ldrb	r2, [r3, r2]
    12fc:	230c      	movs	r3, #12
    12fe:	18fb      	adds	r3, r7, r3
    1300:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
    1302:	230c      	movs	r3, #12
    1304:	18fb      	adds	r3, r7, r3
    1306:	789b      	ldrb	r3, [r3, #2]
    1308:	001a      	movs	r2, r3
    130a:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    130e:	f2c0 0300 	movt	r3, #0
    1312:	5c9a      	ldrb	r2, [r3, r2]
    1314:	230c      	movs	r3, #12
    1316:	18fb      	adds	r3, r7, r3
    1318:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
    131a:	230c      	movs	r3, #12
    131c:	18fb      	adds	r3, r7, r3
    131e:	78db      	ldrb	r3, [r3, #3]
    1320:	001a      	movs	r2, r3
    1322:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    1326:	f2c0 0300 	movt	r3, #0
    132a:	5c9a      	ldrb	r2, [r3, r2]
    132c:	230c      	movs	r3, #12
    132e:	18fb      	adds	r3, r7, r3
    1330:	70da      	strb	r2, [r3, #3]
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
    1332:	69fb      	ldr	r3, [r7, #28]
    1334:	009b      	lsls	r3, r3, #2
    1336:	613b      	str	r3, [r7, #16]
    1338:	69fb      	ldr	r3, [r7, #28]
    133a:	f64f 7cf8 	movw	ip, #65528	; 0xfff8
    133e:	f6c3 7cff 	movt	ip, #16383	; 0x3fff
    1342:	4463      	add	r3, ip
    1344:	009b      	lsls	r3, r3, #2
    1346:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
    1348:	687a      	ldr	r2, [r7, #4]
    134a:	693b      	ldr	r3, [r7, #16]
    134c:	18d3      	adds	r3, r2, r3
    134e:	6879      	ldr	r1, [r7, #4]
    1350:	69ba      	ldr	r2, [r7, #24]
    1352:	188a      	adds	r2, r1, r2
    1354:	7811      	ldrb	r1, [r2, #0]
    1356:	220c      	movs	r2, #12
    1358:	18ba      	adds	r2, r7, r2
    135a:	7812      	ldrb	r2, [r2, #0]
    135c:	404a      	eors	r2, r1
    135e:	b2d2      	uxtb	r2, r2
    1360:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
    1362:	693b      	ldr	r3, [r7, #16]
    1364:	3301      	adds	r3, #1
    1366:	687a      	ldr	r2, [r7, #4]
    1368:	18d3      	adds	r3, r2, r3
    136a:	69ba      	ldr	r2, [r7, #24]
    136c:	3201      	adds	r2, #1
    136e:	6879      	ldr	r1, [r7, #4]
    1370:	188a      	adds	r2, r1, r2
    1372:	7811      	ldrb	r1, [r2, #0]
    1374:	220c      	movs	r2, #12
    1376:	18ba      	adds	r2, r7, r2
    1378:	7852      	ldrb	r2, [r2, #1]
    137a:	404a      	eors	r2, r1
    137c:	b2d2      	uxtb	r2, r2
    137e:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
    1380:	693b      	ldr	r3, [r7, #16]
    1382:	3302      	adds	r3, #2
    1384:	687a      	ldr	r2, [r7, #4]
    1386:	18d3      	adds	r3, r2, r3
    1388:	69ba      	ldr	r2, [r7, #24]
    138a:	3202      	adds	r2, #2
    138c:	6879      	ldr	r1, [r7, #4]
    138e:	188a      	adds	r2, r1, r2
    1390:	7811      	ldrb	r1, [r2, #0]
    1392:	220c      	movs	r2, #12
    1394:	18ba      	adds	r2, r7, r2
    1396:	7892      	ldrb	r2, [r2, #2]
    1398:	404a      	eors	r2, r1
    139a:	b2d2      	uxtb	r2, r2
    139c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
    139e:	693b      	ldr	r3, [r7, #16]
    13a0:	3303      	adds	r3, #3
    13a2:	687a      	ldr	r2, [r7, #4]
    13a4:	18d3      	adds	r3, r2, r3
    13a6:	69ba      	ldr	r2, [r7, #24]
    13a8:	3203      	adds	r2, #3
    13aa:	6879      	ldr	r1, [r7, #4]
    13ac:	188a      	adds	r2, r1, r2
    13ae:	7811      	ldrb	r1, [r2, #0]
    13b0:	220c      	movs	r2, #12
    13b2:	18ba      	adds	r2, r7, r2
    13b4:	78d2      	ldrb	r2, [r2, #3]
    13b6:	404a      	eors	r2, r1
    13b8:	b2d2      	uxtb	r2, r2
    13ba:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
    13bc:	69fb      	ldr	r3, [r7, #28]
    13be:	3301      	adds	r3, #1
    13c0:	61fb      	str	r3, [r7, #28]
    13c2:	69fb      	ldr	r3, [r7, #28]
    13c4:	2b3b      	cmp	r3, #59	; 0x3b
    13c6:	d800      	bhi.n	13ca <KeyExpansion+0x28e>
    13c8:	e6f7      	b.n	11ba <KeyExpansion+0x7e>
  }
}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	46bd      	mov	sp, r7
    13ce:	b008      	add	sp, #32
    13d0:	bd80      	pop	{r7, pc}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	3fffffff 	.word	0x3fffffff

000013d8 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
    13d8:	b580      	push	{r7, lr}
    13da:	b082      	sub	sp, #8
    13dc:	af00      	add	r7, sp, #0
    13de:	6078      	str	r0, [r7, #4]
    13e0:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	683a      	ldr	r2, [r7, #0]
    13e6:	0011      	movs	r1, r2
    13e8:	0018      	movs	r0, r3
    13ea:	f241 133d 	movw	r3, #4413	; 0x113d
    13ee:	f2c0 0300 	movt	r3, #0
    13f2:	4798      	blx	r3
}
    13f4:	46c0      	nop			; (mov r8, r8)
    13f6:	46bd      	mov	sp, r7
    13f8:	b002      	add	sp, #8
    13fa:	bd80      	pop	{r7, pc}

000013fc <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
    13fc:	b590      	push	{r4, r7, lr}
    13fe:	b087      	sub	sp, #28
    1400:	af00      	add	r7, sp, #0
    1402:	60b9      	str	r1, [r7, #8]
    1404:	607a      	str	r2, [r7, #4]
    1406:	230f      	movs	r3, #15
    1408:	18fb      	adds	r3, r7, r3
    140a:	1c02      	adds	r2, r0, #0
    140c:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
    140e:	2317      	movs	r3, #23
    1410:	18fb      	adds	r3, r7, r3
    1412:	2200      	movs	r2, #0
    1414:	701a      	strb	r2, [r3, #0]
    1416:	e03f      	b.n	1498 <AddRoundKey+0x9c>
  {
    for (j = 0; j < 4; ++j)
    1418:	2316      	movs	r3, #22
    141a:	18fb      	adds	r3, r7, r3
    141c:	2200      	movs	r2, #0
    141e:	701a      	strb	r2, [r3, #0]
    1420:	e02e      	b.n	1480 <AddRoundKey+0x84>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
    1422:	2317      	movs	r3, #23
    1424:	18fb      	adds	r3, r7, r3
    1426:	781a      	ldrb	r2, [r3, #0]
    1428:	2316      	movs	r3, #22
    142a:	18fb      	adds	r3, r7, r3
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	2117      	movs	r1, #23
    1430:	1879      	adds	r1, r7, r1
    1432:	7808      	ldrb	r0, [r1, #0]
    1434:	2116      	movs	r1, #22
    1436:	1879      	adds	r1, r7, r1
    1438:	7809      	ldrb	r1, [r1, #0]
    143a:	68bc      	ldr	r4, [r7, #8]
    143c:	0080      	lsls	r0, r0, #2
    143e:	1820      	adds	r0, r4, r0
    1440:	5c40      	ldrb	r0, [r0, r1]
    1442:	210f      	movs	r1, #15
    1444:	1879      	adds	r1, r7, r1
    1446:	7809      	ldrb	r1, [r1, #0]
    1448:	008c      	lsls	r4, r1, #2
    144a:	2117      	movs	r1, #23
    144c:	1879      	adds	r1, r7, r1
    144e:	7809      	ldrb	r1, [r1, #0]
    1450:	1861      	adds	r1, r4, r1
    1452:	008c      	lsls	r4, r1, #2
    1454:	2116      	movs	r1, #22
    1456:	1879      	adds	r1, r7, r1
    1458:	7809      	ldrb	r1, [r1, #0]
    145a:	1861      	adds	r1, r4, r1
    145c:	000c      	movs	r4, r1
    145e:	6879      	ldr	r1, [r7, #4]
    1460:	1909      	adds	r1, r1, r4
    1462:	7809      	ldrb	r1, [r1, #0]
    1464:	4041      	eors	r1, r0
    1466:	b2c8      	uxtb	r0, r1
    1468:	68b9      	ldr	r1, [r7, #8]
    146a:	0092      	lsls	r2, r2, #2
    146c:	188a      	adds	r2, r1, r2
    146e:	1c01      	adds	r1, r0, #0
    1470:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
    1472:	2316      	movs	r3, #22
    1474:	18fb      	adds	r3, r7, r3
    1476:	2216      	movs	r2, #22
    1478:	18ba      	adds	r2, r7, r2
    147a:	7812      	ldrb	r2, [r2, #0]
    147c:	3201      	adds	r2, #1
    147e:	701a      	strb	r2, [r3, #0]
    1480:	2316      	movs	r3, #22
    1482:	18fb      	adds	r3, r7, r3
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	2b03      	cmp	r3, #3
    1488:	d9cb      	bls.n	1422 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
    148a:	2317      	movs	r3, #23
    148c:	18fb      	adds	r3, r7, r3
    148e:	2217      	movs	r2, #23
    1490:	18ba      	adds	r2, r7, r2
    1492:	7812      	ldrb	r2, [r2, #0]
    1494:	3201      	adds	r2, #1
    1496:	701a      	strb	r2, [r3, #0]
    1498:	2317      	movs	r3, #23
    149a:	18fb      	adds	r3, r7, r3
    149c:	781b      	ldrb	r3, [r3, #0]
    149e:	2b03      	cmp	r3, #3
    14a0:	d9ba      	bls.n	1418 <AddRoundKey+0x1c>
    }
  }
}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	46bd      	mov	sp, r7
    14a6:	b007      	add	sp, #28
    14a8:	bd90      	pop	{r4, r7, pc}

000014aa <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
    14aa:	b590      	push	{r4, r7, lr}
    14ac:	b085      	sub	sp, #20
    14ae:	af00      	add	r7, sp, #0
    14b0:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
    14b2:	230f      	movs	r3, #15
    14b4:	18fb      	adds	r3, r7, r3
    14b6:	2200      	movs	r2, #0
    14b8:	701a      	strb	r2, [r3, #0]
    14ba:	e032      	b.n	1522 <SubBytes+0x78>
  {
    for (j = 0; j < 4; ++j)
    14bc:	230e      	movs	r3, #14
    14be:	18fb      	adds	r3, r7, r3
    14c0:	2200      	movs	r2, #0
    14c2:	701a      	strb	r2, [r3, #0]
    14c4:	e021      	b.n	150a <SubBytes+0x60>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
    14c6:	230e      	movs	r3, #14
    14c8:	18fb      	adds	r3, r7, r3
    14ca:	7818      	ldrb	r0, [r3, #0]
    14cc:	230f      	movs	r3, #15
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	781a      	ldrb	r2, [r3, #0]
    14d2:	230e      	movs	r3, #14
    14d4:	18fb      	adds	r3, r7, r3
    14d6:	7819      	ldrb	r1, [r3, #0]
    14d8:	230f      	movs	r3, #15
    14da:	18fb      	adds	r3, r7, r3
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	687c      	ldr	r4, [r7, #4]
    14e0:	0089      	lsls	r1, r1, #2
    14e2:	1861      	adds	r1, r4, r1
    14e4:	5ccb      	ldrb	r3, [r1, r3]
    14e6:	0019      	movs	r1, r3
    14e8:	f641 23d8 	movw	r3, #6872	; 0x1ad8
    14ec:	f2c0 0300 	movt	r3, #0
    14f0:	5c5c      	ldrb	r4, [r3, r1]
    14f2:	6879      	ldr	r1, [r7, #4]
    14f4:	0083      	lsls	r3, r0, #2
    14f6:	18cb      	adds	r3, r1, r3
    14f8:	1c21      	adds	r1, r4, #0
    14fa:	5499      	strb	r1, [r3, r2]
    for (j = 0; j < 4; ++j)
    14fc:	230e      	movs	r3, #14
    14fe:	18fb      	adds	r3, r7, r3
    1500:	220e      	movs	r2, #14
    1502:	18ba      	adds	r2, r7, r2
    1504:	7812      	ldrb	r2, [r2, #0]
    1506:	3201      	adds	r2, #1
    1508:	701a      	strb	r2, [r3, #0]
    150a:	230e      	movs	r3, #14
    150c:	18fb      	adds	r3, r7, r3
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b03      	cmp	r3, #3
    1512:	d9d8      	bls.n	14c6 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
    1514:	230f      	movs	r3, #15
    1516:	18fb      	adds	r3, r7, r3
    1518:	220f      	movs	r2, #15
    151a:	18ba      	adds	r2, r7, r2
    151c:	7812      	ldrb	r2, [r2, #0]
    151e:	3201      	adds	r2, #1
    1520:	701a      	strb	r2, [r3, #0]
    1522:	230f      	movs	r3, #15
    1524:	18fb      	adds	r3, r7, r3
    1526:	781b      	ldrb	r3, [r3, #0]
    1528:	2b03      	cmp	r3, #3
    152a:	d9c7      	bls.n	14bc <SubBytes+0x12>
    }
  }
}
    152c:	46c0      	nop			; (mov r8, r8)
    152e:	46bd      	mov	sp, r7
    1530:	b005      	add	sp, #20
    1532:	bd90      	pop	{r4, r7, pc}

00001534 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
    1534:	b580      	push	{r7, lr}
    1536:	b084      	sub	sp, #16
    1538:	af00      	add	r7, sp, #0
    153a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
    153c:	230f      	movs	r3, #15
    153e:	18fb      	adds	r3, r7, r3
    1540:	687a      	ldr	r2, [r7, #4]
    1542:	7852      	ldrb	r2, [r2, #1]
    1544:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	795a      	ldrb	r2, [r3, #5]
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	7a5a      	ldrb	r2, [r3, #9]
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	7b5a      	ldrb	r2, [r3, #13]
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
    155e:	687b      	ldr	r3, [r7, #4]
    1560:	220f      	movs	r2, #15
    1562:	18ba      	adds	r2, r7, r2
    1564:	7812      	ldrb	r2, [r2, #0]
    1566:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
    1568:	230f      	movs	r3, #15
    156a:	18fb      	adds	r3, r7, r3
    156c:	687a      	ldr	r2, [r7, #4]
    156e:	7892      	ldrb	r2, [r2, #2]
    1570:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	7a9a      	ldrb	r2, [r3, #10]
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	220f      	movs	r2, #15
    157e:	18ba      	adds	r2, r7, r2
    1580:	7812      	ldrb	r2, [r2, #0]
    1582:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
    1584:	230f      	movs	r3, #15
    1586:	18fb      	adds	r3, r7, r3
    1588:	687a      	ldr	r2, [r7, #4]
    158a:	7992      	ldrb	r2, [r2, #6]
    158c:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
    158e:	687b      	ldr	r3, [r7, #4]
    1590:	7b9a      	ldrb	r2, [r3, #14]
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	220f      	movs	r2, #15
    159a:	18ba      	adds	r2, r7, r2
    159c:	7812      	ldrb	r2, [r2, #0]
    159e:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
    15a0:	230f      	movs	r3, #15
    15a2:	18fb      	adds	r3, r7, r3
    15a4:	687a      	ldr	r2, [r7, #4]
    15a6:	78d2      	ldrb	r2, [r2, #3]
    15a8:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	7bda      	ldrb	r2, [r3, #15]
    15ae:	687b      	ldr	r3, [r7, #4]
    15b0:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
    15b2:	687b      	ldr	r3, [r7, #4]
    15b4:	7ada      	ldrb	r2, [r3, #11]
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	79da      	ldrb	r2, [r3, #7]
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	220f      	movs	r2, #15
    15c6:	18ba      	adds	r2, r7, r2
    15c8:	7812      	ldrb	r2, [r2, #0]
    15ca:	71da      	strb	r2, [r3, #7]
}
    15cc:	46c0      	nop			; (mov r8, r8)
    15ce:	46bd      	mov	sp, r7
    15d0:	b004      	add	sp, #16
    15d2:	bd80      	pop	{r7, pc}

000015d4 <xtime>:

static uint8_t xtime(uint8_t x)
{
    15d4:	b580      	push	{r7, lr}
    15d6:	b082      	sub	sp, #8
    15d8:	af00      	add	r7, sp, #0
    15da:	0002      	movs	r2, r0
    15dc:	1dfb      	adds	r3, r7, #7
    15de:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
    15e0:	1dfb      	adds	r3, r7, #7
    15e2:	781b      	ldrb	r3, [r3, #0]
    15e4:	005b      	lsls	r3, r3, #1
    15e6:	b25a      	sxtb	r2, r3
    15e8:	1dfb      	adds	r3, r7, #7
    15ea:	781b      	ldrb	r3, [r3, #0]
    15ec:	09db      	lsrs	r3, r3, #7
    15ee:	b2db      	uxtb	r3, r3
    15f0:	1c19      	adds	r1, r3, #0
    15f2:	1c0b      	adds	r3, r1, #0
    15f4:	18db      	adds	r3, r3, r3
    15f6:	185b      	adds	r3, r3, r1
    15f8:	1c19      	adds	r1, r3, #0
    15fa:	00c8      	lsls	r0, r1, #3
    15fc:	1c19      	adds	r1, r3, #0
    15fe:	1c03      	adds	r3, r0, #0
    1600:	18cb      	adds	r3, r1, r3
    1602:	b2db      	uxtb	r3, r3
    1604:	b25b      	sxtb	r3, r3
    1606:	4053      	eors	r3, r2
    1608:	b25b      	sxtb	r3, r3
    160a:	b2db      	uxtb	r3, r3
}
    160c:	0018      	movs	r0, r3
    160e:	46bd      	mov	sp, r7
    1610:	b002      	add	sp, #8
    1612:	bd80      	pop	{r7, pc}

00001614 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
    1614:	b590      	push	{r4, r7, lr}
    1616:	b085      	sub	sp, #20
    1618:	af00      	add	r7, sp, #0
    161a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
    161c:	230f      	movs	r3, #15
    161e:	18fb      	adds	r3, r7, r3
    1620:	2200      	movs	r2, #0
    1622:	701a      	strb	r2, [r3, #0]
    1624:	e119      	b.n	185a <MixColumns+0x246>
  {
    t   = (*state)[i][0];
    1626:	230f      	movs	r3, #15
    1628:	18fb      	adds	r3, r7, r3
    162a:	7819      	ldrb	r1, [r3, #0]
    162c:	230e      	movs	r3, #14
    162e:	18fb      	adds	r3, r7, r3
    1630:	687a      	ldr	r2, [r7, #4]
    1632:	0089      	lsls	r1, r1, #2
    1634:	5c8a      	ldrb	r2, [r1, r2]
    1636:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    1638:	230f      	movs	r3, #15
    163a:	18fb      	adds	r3, r7, r3
    163c:	781a      	ldrb	r2, [r3, #0]
    163e:	687b      	ldr	r3, [r7, #4]
    1640:	0092      	lsls	r2, r2, #2
    1642:	5cd2      	ldrb	r2, [r2, r3]
    1644:	230f      	movs	r3, #15
    1646:	18fb      	adds	r3, r7, r3
    1648:	781b      	ldrb	r3, [r3, #0]
    164a:	6879      	ldr	r1, [r7, #4]
    164c:	009b      	lsls	r3, r3, #2
    164e:	18cb      	adds	r3, r1, r3
    1650:	3301      	adds	r3, #1
    1652:	781b      	ldrb	r3, [r3, #0]
    1654:	4053      	eors	r3, r2
    1656:	b2da      	uxtb	r2, r3
    1658:	230f      	movs	r3, #15
    165a:	18fb      	adds	r3, r7, r3
    165c:	781b      	ldrb	r3, [r3, #0]
    165e:	6879      	ldr	r1, [r7, #4]
    1660:	009b      	lsls	r3, r3, #2
    1662:	18cb      	adds	r3, r1, r3
    1664:	3302      	adds	r3, #2
    1666:	781b      	ldrb	r3, [r3, #0]
    1668:	4053      	eors	r3, r2
    166a:	b2d9      	uxtb	r1, r3
    166c:	230f      	movs	r3, #15
    166e:	18fb      	adds	r3, r7, r3
    1670:	781b      	ldrb	r3, [r3, #0]
    1672:	687a      	ldr	r2, [r7, #4]
    1674:	009b      	lsls	r3, r3, #2
    1676:	18d3      	adds	r3, r2, r3
    1678:	3303      	adds	r3, #3
    167a:	781a      	ldrb	r2, [r3, #0]
    167c:	230d      	movs	r3, #13
    167e:	18fb      	adds	r3, r7, r3
    1680:	404a      	eors	r2, r1
    1682:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    1684:	230f      	movs	r3, #15
    1686:	18fb      	adds	r3, r7, r3
    1688:	781a      	ldrb	r2, [r3, #0]
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	0092      	lsls	r2, r2, #2
    168e:	5cd1      	ldrb	r1, [r2, r3]
    1690:	230f      	movs	r3, #15
    1692:	18fb      	adds	r3, r7, r3
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	687a      	ldr	r2, [r7, #4]
    1698:	009b      	lsls	r3, r3, #2
    169a:	18d3      	adds	r3, r2, r3
    169c:	3301      	adds	r3, #1
    169e:	781a      	ldrb	r2, [r3, #0]
    16a0:	230c      	movs	r3, #12
    16a2:	18fb      	adds	r3, r7, r3
    16a4:	404a      	eors	r2, r1
    16a6:	701a      	strb	r2, [r3, #0]
    16a8:	230c      	movs	r3, #12
    16aa:	18fc      	adds	r4, r7, r3
    16ac:	230c      	movs	r3, #12
    16ae:	18fb      	adds	r3, r7, r3
    16b0:	781b      	ldrb	r3, [r3, #0]
    16b2:	0018      	movs	r0, r3
    16b4:	f241 53d5 	movw	r3, #5589	; 0x15d5
    16b8:	f2c0 0300 	movt	r3, #0
    16bc:	4798      	blx	r3
    16be:	0003      	movs	r3, r0
    16c0:	7023      	strb	r3, [r4, #0]
    16c2:	230f      	movs	r3, #15
    16c4:	18fb      	adds	r3, r7, r3
    16c6:	781a      	ldrb	r2, [r3, #0]
    16c8:	230f      	movs	r3, #15
    16ca:	18fb      	adds	r3, r7, r3
    16cc:	7819      	ldrb	r1, [r3, #0]
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	0089      	lsls	r1, r1, #2
    16d2:	5cc9      	ldrb	r1, [r1, r3]
    16d4:	230c      	movs	r3, #12
    16d6:	18f8      	adds	r0, r7, r3
    16d8:	230d      	movs	r3, #13
    16da:	18fb      	adds	r3, r7, r3
    16dc:	7800      	ldrb	r0, [r0, #0]
    16de:	781b      	ldrb	r3, [r3, #0]
    16e0:	4043      	eors	r3, r0
    16e2:	b2db      	uxtb	r3, r3
    16e4:	404b      	eors	r3, r1
    16e6:	b2d9      	uxtb	r1, r3
    16e8:	687b      	ldr	r3, [r7, #4]
    16ea:	0092      	lsls	r2, r2, #2
    16ec:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
    16ee:	230f      	movs	r3, #15
    16f0:	18fb      	adds	r3, r7, r3
    16f2:	781b      	ldrb	r3, [r3, #0]
    16f4:	687a      	ldr	r2, [r7, #4]
    16f6:	009b      	lsls	r3, r3, #2
    16f8:	18d3      	adds	r3, r2, r3
    16fa:	3301      	adds	r3, #1
    16fc:	7819      	ldrb	r1, [r3, #0]
    16fe:	230f      	movs	r3, #15
    1700:	18fb      	adds	r3, r7, r3
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	687a      	ldr	r2, [r7, #4]
    1706:	009b      	lsls	r3, r3, #2
    1708:	18d3      	adds	r3, r2, r3
    170a:	3302      	adds	r3, #2
    170c:	781a      	ldrb	r2, [r3, #0]
    170e:	230c      	movs	r3, #12
    1710:	18fb      	adds	r3, r7, r3
    1712:	404a      	eors	r2, r1
    1714:	701a      	strb	r2, [r3, #0]
    1716:	230c      	movs	r3, #12
    1718:	18fc      	adds	r4, r7, r3
    171a:	230c      	movs	r3, #12
    171c:	18fb      	adds	r3, r7, r3
    171e:	781b      	ldrb	r3, [r3, #0]
    1720:	0018      	movs	r0, r3
    1722:	f241 53d5 	movw	r3, #5589	; 0x15d5
    1726:	f2c0 0300 	movt	r3, #0
    172a:	4798      	blx	r3
    172c:	0003      	movs	r3, r0
    172e:	7023      	strb	r3, [r4, #0]
    1730:	230f      	movs	r3, #15
    1732:	18fb      	adds	r3, r7, r3
    1734:	781b      	ldrb	r3, [r3, #0]
    1736:	220f      	movs	r2, #15
    1738:	18ba      	adds	r2, r7, r2
    173a:	7812      	ldrb	r2, [r2, #0]
    173c:	6879      	ldr	r1, [r7, #4]
    173e:	0092      	lsls	r2, r2, #2
    1740:	188a      	adds	r2, r1, r2
    1742:	3201      	adds	r2, #1
    1744:	7811      	ldrb	r1, [r2, #0]
    1746:	220c      	movs	r2, #12
    1748:	18b8      	adds	r0, r7, r2
    174a:	220d      	movs	r2, #13
    174c:	18ba      	adds	r2, r7, r2
    174e:	7800      	ldrb	r0, [r0, #0]
    1750:	7812      	ldrb	r2, [r2, #0]
    1752:	4042      	eors	r2, r0
    1754:	b2d2      	uxtb	r2, r2
    1756:	404a      	eors	r2, r1
    1758:	b2d1      	uxtb	r1, r2
    175a:	687a      	ldr	r2, [r7, #4]
    175c:	009b      	lsls	r3, r3, #2
    175e:	18d3      	adds	r3, r2, r3
    1760:	3301      	adds	r3, #1
    1762:	1c0a      	adds	r2, r1, #0
    1764:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
    1766:	230f      	movs	r3, #15
    1768:	18fb      	adds	r3, r7, r3
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	687a      	ldr	r2, [r7, #4]
    176e:	009b      	lsls	r3, r3, #2
    1770:	18d3      	adds	r3, r2, r3
    1772:	3302      	adds	r3, #2
    1774:	7819      	ldrb	r1, [r3, #0]
    1776:	230f      	movs	r3, #15
    1778:	18fb      	adds	r3, r7, r3
    177a:	781b      	ldrb	r3, [r3, #0]
    177c:	687a      	ldr	r2, [r7, #4]
    177e:	009b      	lsls	r3, r3, #2
    1780:	18d3      	adds	r3, r2, r3
    1782:	3303      	adds	r3, #3
    1784:	781a      	ldrb	r2, [r3, #0]
    1786:	230c      	movs	r3, #12
    1788:	18fb      	adds	r3, r7, r3
    178a:	404a      	eors	r2, r1
    178c:	701a      	strb	r2, [r3, #0]
    178e:	230c      	movs	r3, #12
    1790:	18fc      	adds	r4, r7, r3
    1792:	230c      	movs	r3, #12
    1794:	18fb      	adds	r3, r7, r3
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	0018      	movs	r0, r3
    179a:	f241 53d5 	movw	r3, #5589	; 0x15d5
    179e:	f2c0 0300 	movt	r3, #0
    17a2:	4798      	blx	r3
    17a4:	0003      	movs	r3, r0
    17a6:	7023      	strb	r3, [r4, #0]
    17a8:	230f      	movs	r3, #15
    17aa:	18fb      	adds	r3, r7, r3
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	220f      	movs	r2, #15
    17b0:	18ba      	adds	r2, r7, r2
    17b2:	7812      	ldrb	r2, [r2, #0]
    17b4:	6879      	ldr	r1, [r7, #4]
    17b6:	0092      	lsls	r2, r2, #2
    17b8:	188a      	adds	r2, r1, r2
    17ba:	3202      	adds	r2, #2
    17bc:	7811      	ldrb	r1, [r2, #0]
    17be:	220c      	movs	r2, #12
    17c0:	18b8      	adds	r0, r7, r2
    17c2:	220d      	movs	r2, #13
    17c4:	18ba      	adds	r2, r7, r2
    17c6:	7800      	ldrb	r0, [r0, #0]
    17c8:	7812      	ldrb	r2, [r2, #0]
    17ca:	4042      	eors	r2, r0
    17cc:	b2d2      	uxtb	r2, r2
    17ce:	404a      	eors	r2, r1
    17d0:	b2d1      	uxtb	r1, r2
    17d2:	687a      	ldr	r2, [r7, #4]
    17d4:	009b      	lsls	r3, r3, #2
    17d6:	18d3      	adds	r3, r2, r3
    17d8:	3302      	adds	r3, #2
    17da:	1c0a      	adds	r2, r1, #0
    17dc:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
    17de:	230f      	movs	r3, #15
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	687a      	ldr	r2, [r7, #4]
    17e6:	009b      	lsls	r3, r3, #2
    17e8:	18d3      	adds	r3, r2, r3
    17ea:	3303      	adds	r3, #3
    17ec:	7819      	ldrb	r1, [r3, #0]
    17ee:	230c      	movs	r3, #12
    17f0:	18fb      	adds	r3, r7, r3
    17f2:	220e      	movs	r2, #14
    17f4:	18ba      	adds	r2, r7, r2
    17f6:	7812      	ldrb	r2, [r2, #0]
    17f8:	404a      	eors	r2, r1
    17fa:	701a      	strb	r2, [r3, #0]
    17fc:	230c      	movs	r3, #12
    17fe:	18fc      	adds	r4, r7, r3
    1800:	230c      	movs	r3, #12
    1802:	18fb      	adds	r3, r7, r3
    1804:	781b      	ldrb	r3, [r3, #0]
    1806:	0018      	movs	r0, r3
    1808:	f241 53d5 	movw	r3, #5589	; 0x15d5
    180c:	f2c0 0300 	movt	r3, #0
    1810:	4798      	blx	r3
    1812:	0003      	movs	r3, r0
    1814:	7023      	strb	r3, [r4, #0]
    1816:	230f      	movs	r3, #15
    1818:	18fb      	adds	r3, r7, r3
    181a:	781b      	ldrb	r3, [r3, #0]
    181c:	220f      	movs	r2, #15
    181e:	18ba      	adds	r2, r7, r2
    1820:	7812      	ldrb	r2, [r2, #0]
    1822:	6879      	ldr	r1, [r7, #4]
    1824:	0092      	lsls	r2, r2, #2
    1826:	188a      	adds	r2, r1, r2
    1828:	3203      	adds	r2, #3
    182a:	7811      	ldrb	r1, [r2, #0]
    182c:	220c      	movs	r2, #12
    182e:	18b8      	adds	r0, r7, r2
    1830:	220d      	movs	r2, #13
    1832:	18ba      	adds	r2, r7, r2
    1834:	7800      	ldrb	r0, [r0, #0]
    1836:	7812      	ldrb	r2, [r2, #0]
    1838:	4042      	eors	r2, r0
    183a:	b2d2      	uxtb	r2, r2
    183c:	404a      	eors	r2, r1
    183e:	b2d1      	uxtb	r1, r2
    1840:	687a      	ldr	r2, [r7, #4]
    1842:	009b      	lsls	r3, r3, #2
    1844:	18d3      	adds	r3, r2, r3
    1846:	3303      	adds	r3, #3
    1848:	1c0a      	adds	r2, r1, #0
    184a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
    184c:	230f      	movs	r3, #15
    184e:	18fb      	adds	r3, r7, r3
    1850:	220f      	movs	r2, #15
    1852:	18ba      	adds	r2, r7, r2
    1854:	7812      	ldrb	r2, [r2, #0]
    1856:	3201      	adds	r2, #1
    1858:	701a      	strb	r2, [r3, #0]
    185a:	230f      	movs	r3, #15
    185c:	18fb      	adds	r3, r7, r3
    185e:	781b      	ldrb	r3, [r3, #0]
    1860:	2b03      	cmp	r3, #3
    1862:	d800      	bhi.n	1866 <MixColumns+0x252>
    1864:	e6df      	b.n	1626 <MixColumns+0x12>
  }
}
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	46bd      	mov	sp, r7
    186a:	b005      	add	sp, #20
    186c:	bd90      	pop	{r4, r7, pc}

0000186e <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
    186e:	b580      	push	{r7, lr}
    1870:	b084      	sub	sp, #16
    1872:	af00      	add	r7, sp, #0
    1874:	6078      	str	r0, [r7, #4]
    1876:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
    1878:	230f      	movs	r3, #15
    187a:	18fb      	adds	r3, r7, r3
    187c:	2200      	movs	r2, #0
    187e:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
    1880:	683a      	ldr	r2, [r7, #0]
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	0019      	movs	r1, r3
    1886:	2000      	movs	r0, #0
    1888:	f241 33fd 	movw	r3, #5117	; 0x13fd
    188c:	f2c0 0300 	movt	r3, #0
    1890:	4798      	blx	r3

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
    1892:	230f      	movs	r3, #15
    1894:	18fb      	adds	r3, r7, r3
    1896:	2201      	movs	r2, #1
    1898:	701a      	strb	r2, [r3, #0]
  {
    SubBytes(state);
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	0018      	movs	r0, r3
    189e:	f241 43ab 	movw	r3, #5291	; 0x14ab
    18a2:	f2c0 0300 	movt	r3, #0
    18a6:	4798      	blx	r3
    ShiftRows(state);
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	0018      	movs	r0, r3
    18ac:	f241 5335 	movw	r3, #5429	; 0x1535
    18b0:	f2c0 0300 	movt	r3, #0
    18b4:	4798      	blx	r3
    if (round == Nr) {
    18b6:	230f      	movs	r3, #15
    18b8:	18fb      	adds	r3, r7, r3
    18ba:	781b      	ldrb	r3, [r3, #0]
    18bc:	2b0e      	cmp	r3, #14
    18be:	d019      	beq.n	18f4 <Cipher+0x86>
      break;
    }
    MixColumns(state);
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	0018      	movs	r0, r3
    18c4:	f241 6315 	movw	r3, #5653	; 0x1615
    18c8:	f2c0 0300 	movt	r3, #0
    18cc:	4798      	blx	r3
    AddRoundKey(round, state, RoundKey);
    18ce:	683a      	ldr	r2, [r7, #0]
    18d0:	6879      	ldr	r1, [r7, #4]
    18d2:	230f      	movs	r3, #15
    18d4:	18fb      	adds	r3, r7, r3
    18d6:	781b      	ldrb	r3, [r3, #0]
    18d8:	0018      	movs	r0, r3
    18da:	f241 33fd 	movw	r3, #5117	; 0x13fd
    18de:	f2c0 0300 	movt	r3, #0
    18e2:	4798      	blx	r3
  for (round = 1; ; ++round)
    18e4:	230f      	movs	r3, #15
    18e6:	18fb      	adds	r3, r7, r3
    18e8:	220f      	movs	r2, #15
    18ea:	18ba      	adds	r2, r7, r2
    18ec:	7812      	ldrb	r2, [r2, #0]
    18ee:	3201      	adds	r2, #1
    18f0:	701a      	strb	r2, [r3, #0]
    SubBytes(state);
    18f2:	e7d2      	b.n	189a <Cipher+0x2c>
      break;
    18f4:	46c0      	nop			; (mov r8, r8)
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
    18f6:	683a      	ldr	r2, [r7, #0]
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	0019      	movs	r1, r3
    18fc:	200e      	movs	r0, #14
    18fe:	f241 33fd 	movw	r3, #5117	; 0x13fd
    1902:	f2c0 0300 	movt	r3, #0
    1906:	4798      	blx	r3
}
    1908:	46c0      	nop			; (mov r8, r8)
    190a:	46bd      	mov	sp, r7
    190c:	b004      	add	sp, #16
    190e:	bd80      	pop	{r7, pc}

00001910 <AES_encrypt>:


#endif // #if defined(ECB) && (ECB == 1)

void AES_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
    1910:	b580      	push	{r7, lr}
    1912:	b082      	sub	sp, #8
    1914:	af00      	add	r7, sp, #0
    1916:	6078      	str	r0, [r7, #4]
    1918:	6039      	str	r1, [r7, #0]
    // The next function call encrypts the PlainText with the Key using AES algorithm.
    Cipher((state_t*)buf, ctx->RoundKey);
    191a:	687a      	ldr	r2, [r7, #4]
    191c:	683b      	ldr	r3, [r7, #0]
    191e:	0011      	movs	r1, r2
    1920:	0018      	movs	r0, r3
    1922:	f641 036f 	movw	r3, #6255	; 0x186f
    1926:	f2c0 0300 	movt	r3, #0
    192a:	4798      	blx	r3
}
    192c:	46c0      	nop			; (mov r8, r8)
    192e:	46bd      	mov	sp, r7
    1930:	b002      	add	sp, #8
    1932:	bd80      	pop	{r7, pc}

00001934 <test_AES_encrypt>:
    // The next function call decrypts the PlainText with the Key using AES algorithm.
    InvCipher((state_t*)buf, ctx->RoundKey);
}

int test_AES_encrypt()
{
    1934:	b590      	push	{r4, r7, lr}
    1936:	b0d1      	sub	sp, #324	; 0x144
    1938:	af00      	add	r7, sp, #0
#if defined(AES_256)
    uint8_t key[] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    193a:	f240 1320 	movw	r3, #288	; 0x120
    193e:	18fb      	adds	r3, r7, r3
    1940:	f641 42e4 	movw	r2, #7396	; 0x1ce4
    1944:	f2c0 0200 	movt	r2, #0
    1948:	ca13      	ldmia	r2!, {r0, r1, r4}
    194a:	c313      	stmia	r3!, {r0, r1, r4}
    194c:	ca13      	ldmia	r2!, {r0, r1, r4}
    194e:	c313      	stmia	r3!, {r0, r1, r4}
    1950:	ca03      	ldmia	r2!, {r0, r1}
    1952:	c303      	stmia	r3!, {r0, r1}
                      0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
    uint8_t out[] = { 0xf3, 0xee, 0xd1, 0xbd, 0xb5, 0xd2, 0xa0, 0x3c, 0x06, 0x4b, 0x5a, 0x7e, 0x3d, 0xb1, 0x81, 0xf8 };
    1954:	f240 1310 	movw	r3, #272	; 0x110
    1958:	18fa      	adds	r2, r7, r3
    195a:	f641 5304 	movw	r3, #7428	; 0x1d04
    195e:	f2c0 0300 	movt	r3, #0
    1962:	cb13      	ldmia	r3!, {r0, r1, r4}
    1964:	c213      	stmia	r2!, {r0, r1, r4}
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	6013      	str	r3, [r2, #0]
#elif defined(AES_128)
    uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
    uint8_t out[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
#endif

    uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
    196a:	1c7a      	adds	r2, r7, #1
    196c:	32ff      	adds	r2, #255	; 0xff
    196e:	f641 5314 	movw	r3, #7444	; 0x1d14
    1972:	f2c0 0300 	movt	r3, #0
    1976:	cb13      	ldmia	r3!, {r0, r1, r4}
    1978:	c213      	stmia	r2!, {r0, r1, r4}
    197a:	681b      	ldr	r3, [r3, #0]
    197c:	6013      	str	r3, [r2, #0]
    struct AES_ctx ctx;
    uint8_t i;

   // printf("plain text:\n");
    phex(in);
    197e:	1c7b      	adds	r3, r7, #1
    1980:	33ff      	adds	r3, #255	; 0xff
    1982:	0018      	movs	r0, r3
    1984:	f241 03fb 	movw	r3, #4347	; 0x10fb
    1988:	f2c0 0300 	movt	r3, #0
    198c:	4798      	blx	r3
    //printf("key:\n");
    phex(key);
    198e:	f240 1320 	movw	r3, #288	; 0x120
    1992:	18fb      	adds	r3, r7, r3
    1994:	0018      	movs	r0, r3
    1996:	f241 03fb 	movw	r3, #4347	; 0x10fb
    199a:	f2c0 0300 	movt	r3, #0
    199e:	4798      	blx	r3

    AES_init_ctx(&ctx, key);
    19a0:	f240 1320 	movw	r3, #288	; 0x120
    19a4:	18fa      	adds	r2, r7, r3
    19a6:	003b      	movs	r3, r7
    19a8:	0011      	movs	r1, r2
    19aa:	0018      	movs	r0, r3
    19ac:	f241 33d9 	movw	r3, #5081	; 0x13d9
    19b0:	f2c0 0300 	movt	r3, #0
    19b4:	4798      	blx	r3
    AES_encrypt(&ctx, in);
    19b6:	1c7a      	adds	r2, r7, #1
    19b8:	32ff      	adds	r2, #255	; 0xff
    19ba:	003b      	movs	r3, r7
    19bc:	0011      	movs	r1, r2
    19be:	0018      	movs	r0, r3
    19c0:	f641 1311 	movw	r3, #6417	; 0x1911
    19c4:	f2c0 0300 	movt	r3, #0
    19c8:	4798      	blx	r3

   // printf("AES encrypt: ");

    if (0 == memcmp((char*) out, (char*) in, 16)) {
    19ca:	1c79      	adds	r1, r7, #1
    19cc:	31ff      	adds	r1, #255	; 0xff
    19ce:	f240 1310 	movw	r3, #272	; 0x110
    19d2:	18fb      	adds	r3, r7, r3
    19d4:	2210      	movs	r2, #16
    19d6:	0018      	movs	r0, r3
    19d8:	f641 2355 	movw	r3, #6741	; 0x1a55
    19dc:	f2c0 0300 	movt	r3, #0
    19e0:	4798      	blx	r3
    19e2:	0003      	movs	r3, r0
    19e4:	b94b      	cbnz	r3, 19fa <test_AES_encrypt+0xc6>
      //  printf("SUCCESS!\n");
      //  printf("cipher text:\n");
        phex(in);
    19e6:	1c7b      	adds	r3, r7, #1
    19e8:	33ff      	adds	r3, #255	; 0xff
    19ea:	0018      	movs	r0, r3
    19ec:	f241 03fb 	movw	r3, #4347	; 0x10fb
    19f0:	f2c0 0300 	movt	r3, #0
    19f4:	4798      	blx	r3
      //  printf("\n");
        return(0);
    19f6:	2300      	movs	r3, #0
    19f8:	e000      	b.n	19fc <test_AES_encrypt+0xc8>
    } else {
      //  printf("FAILURE!\n");
        return(1);
    19fa:	2301      	movs	r3, #1
    }
}
    19fc:	0018      	movs	r0, r3
    19fe:	46bd      	mov	sp, r7
    1a00:	b051      	add	sp, #324	; 0x144
    1a02:	bd90      	pop	{r4, r7, pc}

00001a04 <__libc_init_array>:
    1a04:	b570      	push	{r4, r5, r6, lr}
    1a06:	2500      	movs	r5, #0
    1a08:	4b0e      	ldr	r3, [pc, #56]	; (1a44 <__libc_init_array+0x40>)
    1a0a:	4c0f      	ldr	r4, [pc, #60]	; (1a48 <__libc_init_array+0x44>)
    1a0c:	1ae4      	subs	r4, r4, r3
    1a0e:	10a4      	asrs	r4, r4, #2
    1a10:	42a5      	cmp	r5, r4
    1a12:	d109      	bne.n	1a28 <__libc_init_array+0x24>
    1a14:	2500      	movs	r5, #0
    1a16:	f000 f985 	bl	1d24 <_init>
    1a1a:	4c0c      	ldr	r4, [pc, #48]	; (1a4c <__libc_init_array+0x48>)
    1a1c:	4b0c      	ldr	r3, [pc, #48]	; (1a50 <__libc_init_array+0x4c>)
    1a1e:	1ae4      	subs	r4, r4, r3
    1a20:	10a4      	asrs	r4, r4, #2
    1a22:	42a5      	cmp	r5, r4
    1a24:	d107      	bne.n	1a36 <__libc_init_array+0x32>
    1a26:	bd70      	pop	{r4, r5, r6, pc}
    1a28:	4a06      	ldr	r2, [pc, #24]	; (1a44 <__libc_init_array+0x40>)
    1a2a:	00ab      	lsls	r3, r5, #2
    1a2c:	189b      	adds	r3, r3, r2
    1a2e:	681b      	ldr	r3, [r3, #0]
    1a30:	4798      	blx	r3
    1a32:	3501      	adds	r5, #1
    1a34:	e7ec      	b.n	1a10 <__libc_init_array+0xc>
    1a36:	4a06      	ldr	r2, [pc, #24]	; (1a50 <__libc_init_array+0x4c>)
    1a38:	00ab      	lsls	r3, r5, #2
    1a3a:	189b      	adds	r3, r3, r2
    1a3c:	681b      	ldr	r3, [r3, #0]
    1a3e:	4798      	blx	r3
    1a40:	3501      	adds	r5, #1
    1a42:	e7ee      	b.n	1a22 <__libc_init_array+0x1e>
    1a44:	00001d30 	.word	0x00001d30
    1a48:	00001d30 	.word	0x00001d30
    1a4c:	00001d34 	.word	0x00001d34
    1a50:	00001d30 	.word	0x00001d30

00001a54 <memcmp>:
    1a54:	b530      	push	{r4, r5, lr}
    1a56:	2400      	movs	r4, #0
    1a58:	42a2      	cmp	r2, r4
    1a5a:	d101      	bne.n	1a60 <memcmp+0xc>
    1a5c:	2000      	movs	r0, #0
    1a5e:	e005      	b.n	1a6c <memcmp+0x18>
    1a60:	5d03      	ldrb	r3, [r0, r4]
    1a62:	1c65      	adds	r5, r4, #1
    1a64:	5d0c      	ldrb	r4, [r1, r4]
    1a66:	42a3      	cmp	r3, r4
    1a68:	d001      	beq.n	1a6e <memcmp+0x1a>
    1a6a:	1b18      	subs	r0, r3, r4
    1a6c:	bd30      	pop	{r4, r5, pc}
    1a6e:	002c      	movs	r4, r5
    1a70:	e7f2      	b.n	1a58 <memcmp+0x4>
    1a72:	0000      	movs	r0, r0
    1a74:	682f2e2e 	.word	0x682f2e2e
    1a78:	702f6c70 	.word	0x702f6c70
    1a7c:	2f74726f 	.word	0x2f74726f
    1a80:	5f6c7068 	.word	0x5f6c7068
    1a84:	6f697067 	.word	0x6f697067
    1a88:	7361625f 	.word	0x7361625f
    1a8c:	00682e65 	.word	0x00682e65
    1a90:	682f2e2e 	.word	0x682f2e2e
    1a94:	632f6c70 	.word	0x632f6c70
    1a98:	2f65726f 	.word	0x2f65726f
    1a9c:	5f6c7068 	.word	0x5f6c7068
    1aa0:	65726f63 	.word	0x65726f63
    1aa4:	33326d5f 	.word	0x33326d5f
    1aa8:	7361625f 	.word	0x7361625f
    1aac:	00632e65 	.word	0x00632e65
    1ab0:	000009b4 	.word	0x000009b4
    1ab4:	00000998 	.word	0x00000998
    1ab8:	0000097a 	.word	0x0000097a
    1abc:	0000095e 	.word	0x0000095e
    1ac0:	0000093e 	.word	0x0000093e
    1ac4:	00000a84 	.word	0x00000a84
    1ac8:	00000a6a 	.word	0x00000a6a
    1acc:	00000a58 	.word	0x00000a58
    1ad0:	00000a3c 	.word	0x00000a3c
    1ad4:	00000a22 	.word	0x00000a22

00001ad8 <sbox>:
    1ad8:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
    1ae8:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
    1af8:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
    1b08:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
    1b18:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
    1b28:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
    1b38:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
    1b48:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
    1b58:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
    1b68:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
    1b78:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
    1b88:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
    1b98:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
    1ba8:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
    1bb8:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
    1bc8:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

00001bd8 <rsbox>:
    1bd8:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
    1be8:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
    1bf8:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
    1c08:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
    1c18:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
    1c28:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
    1c38:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
    1c48:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
    1c58:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
    1c68:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
    1c78:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
    1c88:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
    1c98:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
    1ca8:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
    1cb8:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
    1cc8:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

00001cd8 <Rcon>:
    1cd8:	0402018d 40201008 00361b80 10eb3d60     ...... @..6.`=..
    1ce8:	be71ca15 f0ae732b 81777d85 072c351f     ..q.+s...}w..5,.
    1cf8:	d708613b a310982d f4df1409 bdd1eef3     ;a..-...........
    1d08:	3ca0d2b5 7e5a4b06 f881b13d e2bec16b     ...<.KZ~=...k...
    1d18:	969f402e 117e3de9 2a179373              .@...=~.s..*

00001d24 <_init>:
    1d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d2a:	bc08      	pop	{r3}
    1d2c:	469e      	mov	lr, r3
    1d2e:	4770      	bx	lr

00001d30 <__init_array_start>:
    1d30:	00000121 	.word	0x00000121

00001d34 <_fini>:
    1d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d3a:	bc08      	pop	{r3}
    1d3c:	469e      	mov	lr, r3
    1d3e:	4770      	bx	lr

00001d40 <__fini_array_start>:
    1d40:	000000f5 	.word	0x000000f5
