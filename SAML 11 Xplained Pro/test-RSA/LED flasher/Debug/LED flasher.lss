
LED flasher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000000  0000ff00  0000ff00  00024020  2**0
                  CONTENTS
  2 .relocate     00000064  20000000  00003fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000008b4  20000064  00004010  00020064  2**2
                  ALLOC
  4 .heap         00000200  20000918  000048c4  00020064  2**0
                  ALLOC
  5 .stack        00000400  20000b18  00004ac4  00020064  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00024020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002ffac  00000000  00000000  000240a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000408e  00000000  00000000  00054051  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ff1  00000000  00000000  000580df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000480  00000000  00000000  0005e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ed0  00000000  00000000  0005e550  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001afe2  00000000  00000000  0005f420  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b316  00000000  00000000  0007a402  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008c22e  00000000  00000000  00085718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001074  00000000  00000000  00111948  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000030  00000000  00000000  00112a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000a6  00000000  00000000  001129bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 0f 00 20 11 23 00 00 0d 23 00 00 0d 23 00 00     ... .#...#...#..
	...
      2c:	0d 23 00 00 00 00 00 00 00 00 00 00 0d 23 00 00     .#...........#..
      3c:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      4c:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      5c:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      6c:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      7c:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      8c:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      9c:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      ac:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      bc:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      cc:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      dc:	0d 23 00 00 0d 23 00 00 0d 23 00 00 0d 23 00 00     .#...#...#...#..
      ec:	0d 23 00 00 0d 23 00 00                             .#...#..

000000f4 <__do_global_dtors_aux>:
      f4:	b510      	push	{r4, lr}
      f6:	f240 0464 	movw	r4, #100	; 0x64
      fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
      fe:	7823      	ldrb	r3, [r4, #0]
     100:	b963      	cbnz	r3, 11c <__do_global_dtors_aux+0x28>
     102:	f240 0300 	movw	r3, #0
     106:	f2c0 0300 	movt	r3, #0
     10a:	b12b      	cbz	r3, 118 <__do_global_dtors_aux+0x24>
     10c:	f244 0020 	movw	r0, #16416	; 0x4020
     110:	f2c0 0080 	movt	r0, #128	; 0x80
     114:	e000      	b.n	118 <__do_global_dtors_aux+0x24>
     116:	bf00      	nop
     118:	2301      	movs	r3, #1
     11a:	7023      	strb	r3, [r4, #0]
     11c:	bd10      	pop	{r4, pc}
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <frame_dummy>:
     120:	f240 0300 	movw	r3, #0
     124:	f2c0 0300 	movt	r3, #0
     128:	b510      	push	{r4, lr}
     12a:	b14b      	cbz	r3, 140 <frame_dummy+0x20>
     12c:	f240 0168 	movw	r1, #104	; 0x68
     130:	f244 0020 	movw	r0, #16416	; 0x4020
     134:	f2c2 0100 	movt	r1, #8192	; 0x2000
     138:	f2c0 0080 	movt	r0, #128	; 0x80
     13c:	e000      	b.n	140 <frame_dummy+0x20>
     13e:	bf00      	nop
     140:	f244 0020 	movw	r0, #16416	; 0x4020
     144:	f2c0 0080 	movt	r0, #128	; 0x80
     148:	6803      	ldr	r3, [r0, #0]
     14a:	b903      	cbnz	r3, 14e <frame_dummy+0x2e>
     14c:	bd10      	pop	{r4, pc}
     14e:	f240 0300 	movw	r3, #0
     152:	f2c0 0300 	movt	r3, #0
     156:	2b00      	cmp	r3, #0
     158:	d0f8      	beq.n	14c <frame_dummy+0x2c>
     15a:	4798      	blx	r3
     15c:	e7f6      	b.n	14c <frame_dummy+0x2c>
     15e:	46c0      	nop			; (mov r8, r8)

00000160 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     160:	f242 339d 	movw	r3, #9117	; 0x239d
{
     164:	b510      	push	{r4, lr}
	system_init();
     166:	f2c0 0300 	movt	r3, #0
     16a:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     16c:	f243 2300 	movw	r3, #12800	; 0x3200
     170:	2200      	movs	r2, #0
     172:	f2c4 0300 	movt	r3, #16384	; 0x4000
     176:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     178:	f24e 1300 	movw	r3, #57600	; 0xe100
     17c:	f240 2180 	movw	r1, #640	; 0x280
     180:	f2ce 0300 	movt	r3, #57344	; 0xe000
     184:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     186:	3104      	adds	r1, #4
     188:	505a      	str	r2, [r3, r1]
	trustzone_manager_init();
}
     18a:	bd10      	pop	{r4, pc}

0000018c <br_ccopy>:
#include "inner.h"

/* see inner.h */
void
br_ccopy(uint32_t ctl, void *dst, const void *src, size_t len)
{
     18c:	b570      	push	{r4, r5, r6, lr}
     18e:	4240      	negs	r0, r0
	unsigned char *d;
	const unsigned char *s;

	d = (unsigned char*)dst;
	s = (unsigned char*)src;
	while (len -- > 0) {
     190:	2500      	movs	r5, #0
     192:	b143      	cbz	r3, 1a6 <br_ccopy+0x1a>
		uint32_t x, y;

		x = *s ++;
		y = *d;
     194:	5d4e      	ldrb	r6, [r1, r5]
 * Multiplexer: returns x if ctl == 1, y if ctl == 0.
 */
static inline uint32_t
MUX(uint32_t ctl, uint32_t x, uint32_t y)
{
    return y ^ (-ctl & (x ^ y));
     196:	5d54      	ldrb	r4, [r2, r5]
     198:	4074      	eors	r4, r6
     19a:	4004      	ands	r4, r0
     19c:	4074      	eors	r4, r6
		*d = MUX(ctl, x, y);
     19e:	554c      	strb	r4, [r1, r5]
     1a0:	3501      	adds	r5, #1
	while (len -- > 0) {
     1a2:	42ab      	cmp	r3, r5
     1a4:	d1f6      	bne.n	194 <br_ccopy+0x8>
		d ++;
	}
}
     1a6:	bd70      	pop	{r4, r5, r6, pc}

000001a8 <br_range_dec32be>:
#include "inner.h"

/* see inner.h */
void
br_range_dec32be(uint32_t *v, size_t num, const void *src)
{
     1a8:	b510      	push	{r4, lr}
	const unsigned char *buf;

	buf = (unsigned char*)src;
	while (num -- > 0) {
     1aa:	1e4c      	subs	r4, r1, #1
     1ac:	b169      	cbz	r1, 1ca <br_range_dec32be+0x22>
    return ((uint32_t)buf[0] << 24)
     1ae:	7813      	ldrb	r3, [r2, #0]
           | ((uint32_t)buf[1] << 16)
     1b0:	7851      	ldrb	r1, [r2, #1]
    return ((uint32_t)buf[0] << 24)
     1b2:	061b      	lsls	r3, r3, #24
           | ((uint32_t)buf[1] << 16)
     1b4:	0409      	lsls	r1, r1, #16
     1b6:	430b      	orrs	r3, r1
           | (uint32_t)buf[3];
     1b8:	78d1      	ldrb	r1, [r2, #3]
     1ba:	430b      	orrs	r3, r1
           | ((uint32_t)buf[2] << 8)
     1bc:	7891      	ldrb	r1, [r2, #2]
		*v ++ = br_dec32be(buf);
		buf += 4;
     1be:	3204      	adds	r2, #4
     1c0:	0209      	lsls	r1, r1, #8
           | (uint32_t)buf[3];
     1c2:	430b      	orrs	r3, r1
		*v ++ = br_dec32be(buf);
     1c4:	c008      	stmia	r0!, {r3}
	while (num -- > 0) {
     1c6:	3c01      	subs	r4, #1
     1c8:	d2f1      	bcs.n	1ae <br_range_dec32be+0x6>
	}
}
     1ca:	bd10      	pop	{r4, pc}

000001cc <br_range_enc32be>:
#include "inner.h"

/* see inner.h */
void
br_range_enc32be(void *dst, const uint32_t *v, size_t num)
{
     1cc:	b510      	push	{r4, lr}
	unsigned char *buf;

	buf = (unsigned char*)dst;
	while (num -- > 0) {
     1ce:	1e54      	subs	r4, r2, #1
     1d0:	b152      	cbz	r2, 1e8 <br_range_enc32be+0x1c>
		br_enc32be(buf, *v ++);
     1d2:	c908      	ldmia	r1!, {r3}
    buf[0] = (unsigned char)(x >> 24);
     1d4:	0e1a      	lsrs	r2, r3, #24
     1d6:	7002      	strb	r2, [r0, #0]
    buf[1] = (unsigned char)(x >> 16);
     1d8:	0c1a      	lsrs	r2, r3, #16
     1da:	7042      	strb	r2, [r0, #1]
    buf[2] = (unsigned char)(x >> 8);
     1dc:	0a1a      	lsrs	r2, r3, #8
     1de:	7082      	strb	r2, [r0, #2]
    buf[3] = (unsigned char)x;
     1e0:	70c3      	strb	r3, [r0, #3]
		buf += 4;
     1e2:	3004      	adds	r0, #4
	while (num -- > 0) {
     1e4:	3c01      	subs	r4, #1
     1e6:	d2f4      	bcs.n	1d2 <br_range_enc32be+0x6>
	}
}
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)

000001ec <br_i15_add>:
#include "inner.h"

/* see inner.h */
uint32_t
br_i15_add(uint16_t *a, const uint16_t *b, uint32_t ctl)
{
     1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ee:	46c6      	mov	lr, r8
	uint32_t cc;
	size_t u, m;

	cc = 0;
	m = (a[0] + 31) >> 4;
     1f0:	8806      	ldrh	r6, [r0, #0]
{
     1f2:	b500      	push	{lr}
	m = (a[0] + 31) >> 4;
     1f4:	361f      	adds	r6, #31
     1f6:	1136      	asrs	r6, r6, #4
	for (u = 1; u < m; u ++) {
     1f8:	2e01      	cmp	r6, #1
     1fa:	d019      	beq.n	230 <HEAP_SIZE+0x30>
     1fc:	4253      	negs	r3, r2
     1fe:	4698      	mov	r8, r3
     200:	2402      	movs	r4, #2
     202:	2500      	movs	r5, #0

		aw = a[u];
		bw = b[u];
		naw = aw + bw + cc;
		cc = naw >> 15;
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
     204:	f647 7cff 	movw	ip, #32767	; 0x7fff
     208:	0076      	lsls	r6, r6, #1
     20a:	4662      	mov	r2, ip
		aw = a[u];
     20c:	5b07      	ldrh	r7, [r0, r4]
		bw = b[u];
     20e:	5b0b      	ldrh	r3, [r1, r4]
		naw = aw + bw + cc;
     210:	19db      	adds	r3, r3, r7
     212:	195b      	adds	r3, r3, r5
		cc = naw >> 15;
     214:	0bdd      	lsrs	r5, r3, #15
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
     216:	4013      	ands	r3, r2
    return y ^ (-ctl & (x ^ y));
     218:	4642      	mov	r2, r8
     21a:	407b      	eors	r3, r7
     21c:	4013      	ands	r3, r2
     21e:	407b      	eors	r3, r7
     220:	5303      	strh	r3, [r0, r4]
     222:	3402      	adds	r4, #2
	for (u = 1; u < m; u ++) {
     224:	42a6      	cmp	r6, r4
     226:	d1f0      	bne.n	20a <HEAP_SIZE+0xa>
	}
	return cc;
}
     228:	0028      	movs	r0, r5
     22a:	bc04      	pop	{r2}
     22c:	4690      	mov	r8, r2
     22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cc = 0;
     230:	2500      	movs	r5, #0
	return cc;
     232:	e7f9      	b.n	228 <HEAP_SIZE+0x28>

00000234 <br_i15_bit_length>:
#include "inner.h"

/* see inner.h */
uint32_t
br_i15_bit_length(uint16_t *x, size_t xlen)
{
     234:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tw, twk;

	tw = 0;
	twk = 0;
	while (xlen -- > 0) {
     236:	1e4d      	subs	r5, r1, #1
     238:	2900      	cmp	r1, #0
     23a:	d053      	beq.n	2e4 <br_i15_bit_length+0xb0>
     23c:	4b2a      	ldr	r3, [pc, #168]	; (2e8 <br_i15_bit_length+0xb4>)
     23e:	2600      	movs	r6, #0
     240:	469c      	mov	ip, r3
     242:	2400      	movs	r4, #0
    return ctl ^ 1;
     244:	2701      	movs	r7, #1
     246:	4461      	add	r1, ip
     248:	0049      	lsls	r1, r1, #1
     24a:	1840      	adds	r0, r0, r1
EQ(uint32_t x, uint32_t y)
{
    uint32_t q;

    q = x ^ y;
    return NOT((q | -q) >> 31);
     24c:	4263      	negs	r3, r4
     24e:	4323      	orrs	r3, r4
		uint32_t w, c;

		c = EQ(tw, 0);
		w = x[xlen];
     250:	8802      	ldrh	r2, [r0, #0]
     252:	0fdb      	lsrs	r3, r3, #31
    return y ^ (-ctl & (x ^ y));
     254:	3b01      	subs	r3, #1
     256:	4062      	eors	r2, r4
     258:	401a      	ands	r2, r3
     25a:	4054      	eors	r4, r2
     25c:	0032      	movs	r2, r6
     25e:	406a      	eors	r2, r5
     260:	4013      	ands	r3, r2
     262:	405e      	eors	r6, r3
     264:	3802      	subs	r0, #2
	while (xlen -- > 0) {
     266:	3d01      	subs	r5, #1
     268:	d2f0      	bcs.n	24c <br_i15_bit_length+0x18>
     26a:	20ff      	movs	r0, #255	; 0xff
     26c:	0021      	movs	r1, r4
     26e:	1b02      	subs	r2, r0, r4
     270:	4051      	eors	r1, r2
     272:	4060      	eors	r0, r4
     274:	4008      	ands	r0, r1
     276:	4050      	eors	r0, r2
     278:	0fc0      	lsrs	r0, r0, #31
     27a:	0a21      	lsrs	r1, r4, #8
     27c:	4243      	negs	r3, r0
     27e:	4061      	eors	r1, r4
     280:	4019      	ands	r1, r3
     282:	4061      	eors	r1, r4
     284:	220f      	movs	r2, #15
     286:	000b      	movs	r3, r1
     288:	1a55      	subs	r5, r2, r1
     28a:	406b      	eors	r3, r5
     28c:	404a      	eors	r2, r1
     28e:	4013      	ands	r3, r2
     290:	406b      	eors	r3, r5
     292:	0fdb      	lsrs	r3, r3, #31
     294:	469c      	mov	ip, r3
     296:	4662      	mov	r2, ip
     298:	090b      	lsrs	r3, r1, #4
     29a:	404b      	eors	r3, r1
     29c:	4252      	negs	r2, r2
     29e:	4013      	ands	r3, r2
     2a0:	404b      	eors	r3, r1
     2a2:	2203      	movs	r2, #3
     2a4:	001d      	movs	r5, r3
     2a6:	1ad1      	subs	r1, r2, r3
     2a8:	404d      	eors	r5, r1
     2aa:	405a      	eors	r2, r3
     2ac:	4015      	ands	r5, r2
     2ae:	404d      	eors	r5, r1
     2b0:	0fed      	lsrs	r5, r5, #31
     2b2:	0899      	lsrs	r1, r3, #2
     2b4:	4059      	eors	r1, r3
     2b6:	426a      	negs	r2, r5
     2b8:	400a      	ands	r2, r1
     2ba:	405a      	eors	r2, r3
     2bc:	4263      	negs	r3, r4
     2be:	431c      	orrs	r4, r3
     2c0:	4663      	mov	r3, ip
     2c2:	1ab9      	subs	r1, r7, r2
     2c4:	0fe4      	lsrs	r4, r4, #31
     2c6:	0136      	lsls	r6, r6, #4
     2c8:	19a6      	adds	r6, r4, r6
     2ca:	4057      	eors	r7, r2
     2cc:	00c0      	lsls	r0, r0, #3
     2ce:	404a      	eors	r2, r1
     2d0:	1830      	adds	r0, r6, r0
     2d2:	4017      	ands	r7, r2
     2d4:	009e      	lsls	r6, r3, #2
     2d6:	1980      	adds	r0, r0, r6
     2d8:	006d      	lsls	r5, r5, #1
     2da:	4079      	eors	r1, r7
     2dc:	1940      	adds	r0, r0, r5
     2de:	0fc9      	lsrs	r1, r1, #31
     2e0:	1840      	adds	r0, r0, r1
		tw = MUX(c, w, tw);
		twk = MUX(c, (uint32_t)xlen, twk);
	}
	return (twk << 4) + BIT_LENGTH(tw);
}
     2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (xlen -- > 0) {
     2e4:	2000      	movs	r0, #0
	return (twk << 4) + BIT_LENGTH(tw);
     2e6:	e7fc      	b.n	2e2 <br_i15_bit_length+0xae>
     2e8:	7fffffff 	.word	0x7fffffff

000002ec <br_i15_decode_mod>:
#include "inner.h"

/* see inner.h */
uint32_t
br_i15_decode_mod(uint16_t *x, const void *src, size_t len, const uint16_t *m)
{
     2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ee:	4657      	mov	r7, sl
     2f0:	46de      	mov	lr, fp
     2f2:	464e      	mov	r6, r9
     2f4:	4645      	mov	r5, r8
     2f6:	b5e0      	push	{r5, r6, r7, lr}
     2f8:	b089      	sub	sp, #36	; 0x24
     2fa:	9304      	str	r3, [sp, #16]
	size_t mlen, tlen;
	int pass;
	uint32_t r;

	buf = (const unsigned char*)src;
	mlen = (m[0] + 15) >> 4;
     2fc:	881b      	ldrh	r3, [r3, #0]
{
     2fe:	9002      	str	r0, [sp, #8]
	mlen = (m[0] + 15) >> 4;
     300:	330f      	adds	r3, #15
     302:	111b      	asrs	r3, r3, #4
{
     304:	9103      	str	r1, [sp, #12]
     306:	4694      	mov	ip, r2
	mlen = (m[0] + 15) >> 4;
     308:	469a      	mov	sl, r3
	tlen = (mlen << 1);
     30a:	005f      	lsls	r7, r3, #1
     30c:	4297      	cmp	r7, r2
     30e:	d200      	bcs.n	312 <br_i15_decode_mod+0x26>
     310:	0017      	movs	r7, r2
	if (tlen < len) {
		tlen = len;
	}
	tlen += 4;
	r = 0;
     312:	f240 0800 	movw	r8, #0
	tlen += 4;
     316:	3704      	adds	r7, #4
     318:	4646      	mov	r6, r8
	for (pass = 0; pass < 2; pass ++) {
     31a:	f240 0900 	movw	r9, #0
			acc |= (b << acc_len);
			acc_len += 8;
			if (acc_len >= 15) {
				uint32_t xw;

				xw = acc & (uint32_t)0x7FFF;
     31e:	f647 7bff 	movw	fp, #32767	; 0x7fff
     322:	4654      	mov	r4, sl
     324:	46b8      	mov	r8, r7
		for (u = 0; u < tlen; u ++) {
     326:	4643      	mov	r3, r8
     328:	b393      	cbz	r3, 390 <br_i15_decode_mod+0xa4>
     32a:	4663      	mov	r3, ip
     32c:	1e58      	subs	r0, r3, #1
     32e:	9b03      	ldr	r3, [sp, #12]
     330:	2200      	movs	r2, #0
     332:	469a      	mov	sl, r3
     334:	4450      	add	r0, sl
     336:	46a2      	mov	sl, r4
     338:	4644      	mov	r4, r8
     33a:	2100      	movs	r1, #0
     33c:	2501      	movs	r5, #1
     33e:	2300      	movs	r3, #0
     340:	46b0      	mov	r8, r6
     342:	9401      	str	r4, [sp, #4]
			if (u < len) {
     344:	459c      	cmp	ip, r3
     346:	d93d      	bls.n	3c4 <br_i15_decode_mod+0xd8>
     348:	7806      	ldrb	r6, [r0, #0]
     34a:	0034      	movs	r4, r6
     34c:	4094      	lsls	r4, r2
			acc |= (b << acc_len);
     34e:	4321      	orrs	r1, r4
			acc_len += 8;
     350:	0014      	movs	r4, r2
     352:	3408      	adds	r4, #8
			if (acc_len >= 15) {
     354:	2c0e      	cmp	r4, #14
     356:	dd33      	ble.n	3c0 <br_i15_decode_mod+0xd4>
				xw = acc & (uint32_t)0x7FFF;
     358:	465c      	mov	r4, fp
     35a:	400c      	ands	r4, r1
				acc_len -= 15;
				acc = b >> (8 - acc_len);
     35c:	2108      	movs	r1, #8
				acc_len -= 15;
     35e:	3a07      	subs	r2, #7
				acc = b >> (8 - acc_len);
     360:	1a89      	subs	r1, r1, r2
     362:	40ce      	lsrs	r6, r1
     364:	0031      	movs	r1, r6
				if (v <= mlen) {
					if (pass) {
     366:	464e      	mov	r6, r9
				if (v <= mlen) {
     368:	45aa      	cmp	sl, r5
     36a:	d32e      	bcc.n	3ca <br_i15_decode_mod+0xde>
					if (pass) {
     36c:	2e00      	cmp	r6, #0
     36e:	d039      	beq.n	3e4 <br_i15_decode_mod+0xf8>
						x[v] = r & xw;
     370:	4646      	mov	r6, r8
     372:	006f      	lsls	r7, r5, #1
     374:	4034      	ands	r4, r6
     376:	003e      	movs	r6, r7
     378:	9f02      	ldr	r7, [sp, #8]
     37a:	53f4      	strh	r4, [r6, r7]
				} else {
					if (!pass) {
						r = MUX(EQ(xw, 0), r, 1);
					}
				}
				v ++;
     37c:	3501      	adds	r5, #1
		for (u = 0; u < tlen; u ++) {
     37e:	9c01      	ldr	r4, [sp, #4]
     380:	3301      	adds	r3, #1
     382:	3801      	subs	r0, #1
     384:	429c      	cmp	r4, r3
     386:	d1dd      	bne.n	344 <br_i15_decode_mod+0x58>
     388:	0023      	movs	r3, r4
     38a:	4646      	mov	r6, r8
     38c:	4654      	mov	r4, sl
     38e:	4698      	mov	r8, r3
		 * When we reach this point at the end of the second pass:
		 * r is either 0 or -1; we want to leave that value
		 * untouched. This is a subcase of the previous.
		 */
		r >>= 1;
		r |= (r << 1);
     390:	2201      	movs	r2, #1
	for (pass = 0; pass < 2; pass ++) {
     392:	f240 0a01 	movw	sl, #1
		r >>= 1;
     396:	0873      	lsrs	r3, r6, #1
	for (pass = 0; pass < 2; pass ++) {
     398:	44d1      	add	r9, sl
		r |= (r << 1);
     39a:	4396      	bics	r6, r2
     39c:	431e      	orrs	r6, r3
	for (pass = 0; pass < 2; pass ++) {
     39e:	464b      	mov	r3, r9
     3a0:	2b02      	cmp	r3, #2
     3a2:	d1c0      	bne.n	326 <br_i15_decode_mod+0x3a>
	}

	x[0] = m[0];
     3a4:	9b04      	ldr	r3, [sp, #16]
     3a6:	9a02      	ldr	r2, [sp, #8]
     3a8:	881b      	ldrh	r3, [r3, #0]
	return r & (uint32_t)1;
     3aa:	0030      	movs	r0, r6
	x[0] = m[0];
     3ac:	8013      	strh	r3, [r2, #0]
	return r & (uint32_t)1;
     3ae:	2301      	movs	r3, #1
     3b0:	4018      	ands	r0, r3
}
     3b2:	b009      	add	sp, #36	; 0x24
     3b4:	bc3c      	pop	{r2, r3, r4, r5}
     3b6:	4690      	mov	r8, r2
     3b8:	4699      	mov	r9, r3
     3ba:	46a2      	mov	sl, r4
     3bc:	46ab      	mov	fp, r5
     3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c0:	0022      	movs	r2, r4
     3c2:	e7dc      	b.n	37e <br_i15_decode_mod+0x92>
     3c4:	2400      	movs	r4, #0
     3c6:	2600      	movs	r6, #0
     3c8:	e7c1      	b.n	34e <br_i15_decode_mod+0x62>
					if (!pass) {
     3ca:	2e00      	cmp	r6, #0
     3cc:	d1d6      	bne.n	37c <br_i15_decode_mod+0x90>
     3ce:	4646      	mov	r6, r8
     3d0:	2701      	movs	r7, #1
    return NOT((q | -q) >> 31);
     3d2:	4264      	negs	r4, r4
     3d4:	0fe4      	lsrs	r4, r4, #31
    return y ^ (-ctl & (x ^ y));
     3d6:	407e      	eors	r6, r7
     3d8:	3c01      	subs	r4, #1
     3da:	4034      	ands	r4, r6
     3dc:	2601      	movs	r6, #1
     3de:	4066      	eors	r6, r4
     3e0:	46b0      	mov	r8, r6
     3e2:	e7cb      	b.n	37c <br_i15_decode_mod+0x90>
						cc = (uint32_t)CMP(xw, m[v]);
     3e4:	9f04      	ldr	r7, [sp, #16]
     3e6:	006e      	lsls	r6, r5, #1
     3e8:	5bf6      	ldrh	r6, [r6, r7]
     * Since (y-2^31)-(x-2^31) = y-x, the subtraction is already
     * fine.
     */
    uint32_t z;

    z = y - x;
     3ea:	1b37      	subs	r7, r6, r4
     3ec:	9706      	str	r7, [sp, #24]
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     3ee:	0027      	movs	r7, r4
     3f0:	4077      	eors	r7, r6
     3f2:	9705      	str	r7, [sp, #20]
    z = y - x;
     3f4:	1ba7      	subs	r7, r4, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     3f6:	9707      	str	r7, [sp, #28]
     3f8:	407e      	eors	r6, r7
     3fa:	9f05      	ldr	r7, [sp, #20]
     3fc:	403e      	ands	r6, r7
     3fe:	9f07      	ldr	r7, [sp, #28]
     400:	407e      	eors	r6, r7
 * whether x is lower than, equal to, or greater than y.
 */
static inline int32_t
CMP(uint32_t x, uint32_t y)
{
    return (int32_t)GT(x, y) | -(int32_t)GT(y, x);
     402:	17f6      	asrs	r6, r6, #31
     404:	9607      	str	r6, [sp, #28]
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     406:	9e06      	ldr	r6, [sp, #24]
     408:	9f05      	ldr	r7, [sp, #20]
     40a:	4074      	eors	r4, r6
     40c:	403c      	ands	r4, r7
    return y ^ (-ctl & (x ^ y));
     40e:	4647      	mov	r7, r8
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     410:	4074      	eors	r4, r6
    return (int32_t)GT(x, y) | -(int32_t)GT(y, x);
     412:	9e07      	ldr	r6, [sp, #28]
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     414:	0fe4      	lsrs	r4, r4, #31
    return (int32_t)GT(x, y) | -(int32_t)GT(y, x);
     416:	4326      	orrs	r6, r4
    return NOT((q | -q) >> 31);
     418:	4274      	negs	r4, r6
     41a:	4334      	orrs	r4, r6
     41c:	0fe4      	lsrs	r4, r4, #31
    return y ^ (-ctl & (x ^ y));
     41e:	3c01      	subs	r4, #1
     420:	4077      	eors	r7, r6
     422:	403c      	ands	r4, r7
     424:	4074      	eors	r4, r6
     426:	46a0      	mov	r8, r4
     428:	e7a8      	b.n	37c <br_i15_decode_mod+0x90>
     42a:	46c0      	nop			; (mov r8, r8)

0000042c <br_i15_decode>:
#include "inner.h"

/* see inner.h */
void
br_i15_decode(uint16_t *x, const void *src, size_t len)
{
     42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

		b = buf[len];
		acc |= (b << acc_len);
		acc_len += 8;
		if (acc_len >= 15) {
			x[v ++] = acc & 0x7FFF;
     42e:	f647 7cff 	movw	ip, #32767	; 0x7fff
{
     432:	0006      	movs	r6, r0
	acc = 0;
     434:	2400      	movs	r4, #0
	acc_len = 0;
     436:	2000      	movs	r0, #0
	v = 1;
     438:	2501      	movs	r5, #1
	while (len -- > 0) {
     43a:	3a01      	subs	r2, #1
     43c:	d310      	bcc.n	460 <br_i15_decode+0x34>
		b = buf[len];
     43e:	5c8b      	ldrb	r3, [r1, r2]
		acc |= (b << acc_len);
     440:	4083      	lsls	r3, r0
     442:	431c      	orrs	r4, r3
		acc_len += 8;
     444:	0003      	movs	r3, r0
     446:	3308      	adds	r3, #8
		if (acc_len >= 15) {
     448:	2b0e      	cmp	r3, #14
     44a:	dd06      	ble.n	45a <br_i15_decode+0x2e>
			x[v ++] = acc & 0x7FFF;
     44c:	4667      	mov	r7, ip
     44e:	006b      	lsls	r3, r5, #1
     450:	4027      	ands	r7, r4
     452:	539f      	strh	r7, [r3, r6]
			acc_len -= 15;
			acc >>= 15;
     454:	0be4      	lsrs	r4, r4, #15
			acc_len -= 15;
     456:	1fc3      	subs	r3, r0, #7
			x[v ++] = acc & 0x7FFF;
     458:	3501      	adds	r5, #1
     45a:	0018      	movs	r0, r3
	while (len -- > 0) {
     45c:	3a01      	subs	r2, #1
     45e:	d2ee      	bcs.n	43e <br_i15_decode+0x12>
		}
	}
	if (acc_len != 0) {
     460:	b110      	cbz	r0, 468 <br_i15_decode+0x3c>
		x[v ++] = acc;
     462:	006b      	lsls	r3, r5, #1
     464:	539c      	strh	r4, [r3, r6]
     466:	3501      	adds	r5, #1
	}
	x[0] = br_i15_bit_length(x + 1, v - 1);
     468:	f240 2335 	movw	r3, #565	; 0x235
     46c:	1e69      	subs	r1, r5, #1
     46e:	1cb0      	adds	r0, r6, #2
     470:	f2c0 0300 	movt	r3, #0
     474:	4798      	blx	r3
     476:	8030      	strh	r0, [r6, #0]
}
     478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     47a:	46c0      	nop			; (mov r8, r8)

0000047c <br_i15_encode>:
#include "inner.h"

/* see inner.h */
void
br_i15_encode(void *dst, size_t len, const uint16_t *x)
{
     47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char *buf;
	size_t u, xlen;
	uint32_t acc;
	int acc_len;

	xlen = (x[0] + 15) >> 4;
     47e:	8816      	ldrh	r6, [r2, #0]
     480:	360f      	adds	r6, #15
     482:	1136      	asrs	r6, r6, #4
	if (xlen == 0) {
     484:	b1a6      	cbz	r6, 4b0 <br_i15_encode+0x34>
	}
	u = 1;
	acc = 0;
	acc_len = 0;
	buf = (unsigned char*)dst;
	while (len -- > 0) {
     486:	1e4c      	subs	r4, r1, #1
     488:	b189      	cbz	r1, 4ae <br_i15_encode+0x32>
     48a:	2300      	movs	r3, #0
     48c:	2100      	movs	r1, #0
     48e:	2501      	movs	r5, #1
		if (acc_len < 8) {
     490:	2b07      	cmp	r3, #7
     492:	dc07      	bgt.n	4a4 <br_i15_encode+0x28>
			if (u <= xlen) {
     494:	42ae      	cmp	r6, r5
     496:	d304      	bcc.n	4a2 <br_i15_encode+0x26>
				acc += (uint32_t)x[u ++] << acc_len;
     498:	006f      	lsls	r7, r5, #1
     49a:	5abf      	ldrh	r7, [r7, r2]
     49c:	3501      	adds	r5, #1
     49e:	409f      	lsls	r7, r3
     4a0:	19c9      	adds	r1, r1, r7
			}
			acc_len += 15;
     4a2:	330f      	adds	r3, #15
		}
		buf[len] = (unsigned char)acc;
     4a4:	5501      	strb	r1, [r0, r4]
		acc >>= 8;
		acc_len -= 8;
     4a6:	3b08      	subs	r3, #8
		acc >>= 8;
     4a8:	0a09      	lsrs	r1, r1, #8
	while (len -- > 0) {
     4aa:	3c01      	subs	r4, #1
     4ac:	d2f0      	bcs.n	490 <br_i15_encode+0x14>
	}
}
     4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(dst, 0, len);
     4b0:	f642 7309 	movw	r3, #12041	; 0x2f09
     4b4:	000a      	movs	r2, r1
     4b6:	f2c0 0300 	movt	r3, #0
     4ba:	2100      	movs	r1, #0
     4bc:	4798      	blx	r3
		return;
     4be:	e7f6      	b.n	4ae <br_i15_encode+0x32>

000004c0 <br_i15_from_monty>:
#include "inner.h"

/* see inner.h */
void
br_i15_from_monty(uint16_t *x, const uint16_t *m, uint16_t m0i)
{
     4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c2:	4657      	mov	r7, sl
     4c4:	4645      	mov	r5, r8
     4c6:	46de      	mov	lr, fp
     4c8:	464e      	mov	r6, r9
     4ca:	b5e0      	push	{r5, r6, r7, lr}
     4cc:	4692      	mov	sl, r2
	size_t len, u, v;

	len = (m[0] + 15) >> 4;
     4ce:	880a      	ldrh	r2, [r1, #0]
{
     4d0:	b083      	sub	sp, #12
	len = (m[0] + 15) >> 4;
     4d2:	320f      	adds	r2, #15
     4d4:	1113      	asrs	r3, r2, #4
{
     4d6:	0005      	movs	r5, r0
     4d8:	000f      	movs	r7, r1
	len = (m[0] + 15) >> 4;
     4da:	9301      	str	r3, [sp, #4]
	for (u = 0; u < len; u ++) {
     4dc:	b34b      	cbz	r3, 532 <br_i15_from_monty+0x72>
     4de:	005b      	lsls	r3, r3, #1
     4e0:	4699      	mov	r9, r3
     4e2:	f240 0800 	movw	r8, #0
		uint32_t f, cc;

		f = MUL15(x[1], m0i) & 0x7FFF;
     4e6:	f647 7cff 	movw	ip, #32767	; 0x7fff
     4ea:	4481      	add	r9, r0
     4ec:	4656      	mov	r6, sl
     4ee:	4662      	mov	r2, ip
     4f0:	886b      	ldrh	r3, [r5, #2]
		cc = 0;
		for (v = 0; v < len; v ++) {
			uint32_t z;

			z = (uint32_t)x[v + 1] + MUL15(f, m[v + 1]) + cc;
     4f2:	887c      	ldrh	r4, [r7, #2]
		f = MUL15(x[1], m0i) & 0x7FFF;
     4f4:	435e      	muls	r6, r3
     4f6:	4016      	ands	r6, r2
			z = (uint32_t)x[v + 1] + MUL15(f, m[v + 1]) + cc;
     4f8:	4374      	muls	r4, r6
     4fa:	18e4      	adds	r4, r4, r3
			cc = z >> 15;
     4fc:	0be4      	lsrs	r4, r4, #15
     4fe:	2001      	movs	r0, #1
     500:	e00c      	b.n	51c <br_i15_from_monty+0x5c>
			if (v != 0) {
				x[v] = z & 0x7FFF;
     502:	4662      	mov	r2, ip
			z = (uint32_t)x[v + 1] + MUL15(f, m[v + 1]) + cc;
     504:	3001      	adds	r0, #1
     506:	0041      	lsls	r1, r0, #1
     508:	5a6b      	ldrh	r3, [r5, r1]
     50a:	191c      	adds	r4, r3, r4
     50c:	5a7b      	ldrh	r3, [r7, r1]
				x[v] = z & 0x7FFF;
     50e:	1869      	adds	r1, r5, r1
			z = (uint32_t)x[v + 1] + MUL15(f, m[v + 1]) + cc;
     510:	4373      	muls	r3, r6
     512:	18e3      	adds	r3, r4, r3
			cc = z >> 15;
     514:	0bdc      	lsrs	r4, r3, #15
				x[v] = z & 0x7FFF;
     516:	3902      	subs	r1, #2
     518:	4013      	ands	r3, r2
     51a:	800b      	strh	r3, [r1, #0]
		for (v = 0; v < len; v ++) {
     51c:	9b01      	ldr	r3, [sp, #4]
     51e:	4283      	cmp	r3, r0
     520:	d8ef      	bhi.n	502 <br_i15_from_monty+0x42>
			}
		}
		x[len] = cc;
     522:	464b      	mov	r3, r9
	for (u = 0; u < len; u ++) {
     524:	f240 0b01 	movw	fp, #1
		x[len] = cc;
     528:	801c      	strh	r4, [r3, #0]
	for (u = 0; u < len; u ++) {
     52a:	9b01      	ldr	r3, [sp, #4]
     52c:	44d8      	add	r8, fp
     52e:	4543      	cmp	r3, r8
     530:	d1dc      	bne.n	4ec <br_i15_from_monty+0x2c>
	 * value in x[] is indeed greater than or equal to that of m[],
	 * which is why we must do two calls (first call computes the
	 * carry, second call performs the subtraction only if the carry
	 * is 0).
	 */
	br_i15_sub(x, m, NOT(br_i15_sub(x, m, 0)));
     532:	f241 0461 	movw	r4, #4193	; 0x1061
     536:	0039      	movs	r1, r7
     538:	f2c0 0400 	movt	r4, #0
     53c:	2200      	movs	r2, #0
     53e:	0028      	movs	r0, r5
     540:	47a0      	blx	r4
    return ctl ^ 1;
     542:	2201      	movs	r2, #1
     544:	0039      	movs	r1, r7
     546:	4042      	eors	r2, r0
     548:	0028      	movs	r0, r5
     54a:	47a0      	blx	r4
}
     54c:	b003      	add	sp, #12
     54e:	bc3c      	pop	{r2, r3, r4, r5}
     550:	4690      	mov	r8, r2
     552:	4699      	mov	r9, r3
     554:	46a2      	mov	sl, r4
     556:	46ab      	mov	fp, r5
     558:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55a:	46c0      	nop			; (mov r8, r8)

0000055c <br_i15_modpow_opt>:
/* see inner.h */
uint32_t
br_i15_modpow_opt(uint16_t *x,
	const unsigned char *e, size_t elen,
	const uint16_t *m, uint16_t m0i, uint16_t *tmp, size_t twlen)
{
     55c:	b5f0      	push	{r4, r5, r6, r7, lr}
     55e:	4645      	mov	r5, r8
     560:	4657      	mov	r7, sl
     562:	46de      	mov	lr, fp
     564:	464e      	mov	r6, r9
     566:	4698      	mov	r8, r3
     568:	b5e0      	push	{r5, r6, r7, lr}
     56a:	b09d      	sub	sp, #116	; 0x74
     56c:	ab26      	add	r3, sp, #152	; 0x98
     56e:	9211      	str	r2, [sp, #68]	; 0x44
     570:	881a      	ldrh	r2, [r3, #0]
	int acc_len, win_len;

	/*
	 * Get modulus size.
	 */
	mwlen = (m[0] + 31) >> 4;
     572:	4643      	mov	r3, r8
{
     574:	0007      	movs	r7, r0
	mlen = mwlen * sizeof m[0];
	mwlen += (mwlen & 1);
     576:	2001      	movs	r0, #1
	mwlen = (m[0] + 31) >> 4;
     578:	9303      	str	r3, [sp, #12]
     57a:	881b      	ldrh	r3, [r3, #0]
{
     57c:	9119      	str	r1, [sp, #100]	; 0x64
	mwlen = (m[0] + 31) >> 4;
     57e:	331f      	adds	r3, #31
     580:	111b      	asrs	r3, r3, #4
	mwlen += (mwlen & 1);
     582:	1c59      	adds	r1, r3, #1
     584:	4381      	bics	r1, r0
	 * Compute possible window size, with a maximum of 5 bits.
	 * When the window has size 1 bit, we use a specific code
	 * that requires only two temporaries. Otherwise, for a
	 * window of k bits, we need 2^k+1 temporaries.
	 */
	if (twlen < (mwlen << 1)) {
     586:	0048      	lsls	r0, r1, #1
     588:	0005      	movs	r5, r0
{
     58a:	9204      	str	r2, [sp, #16]
     58c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
	if (twlen < (mwlen << 1)) {
     58e:	9015      	str	r0, [sp, #84]	; 0x54
	mwlen += (mwlen & 1);
     590:	9117      	str	r1, [sp, #92]	; 0x5c
		return 0;
     592:	2000      	movs	r0, #0
	if (twlen < (mwlen << 1)) {
     594:	46ac      	mov	ip, r5
     596:	4295      	cmp	r5, r2
     598:	d900      	bls.n	59c <br_i15_modpow_opt+0x40>
     59a:	e15d      	b.n	858 <br_i15_modpow_opt+0x2fc>
	mlen = mwlen * sizeof m[0];
     59c:	0058      	lsls	r0, r3, #1
     59e:	0004      	movs	r4, r0
     5a0:	9005      	str	r0, [sp, #20]
	t2 = tmp + mwlen;
     5a2:	9827      	ldr	r0, [sp, #156]	; 0x9c
	}
	for (win_len = 5; win_len > 1; win_len --) {
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
     5a4:	014b      	lsls	r3, r1, #5
	t2 = tmp + mwlen;
     5a6:	0006      	movs	r6, r0
     5a8:	4466      	add	r6, ip
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
     5aa:	468c      	mov	ip, r1
     5ac:	4463      	add	r3, ip
     5ae:	429a      	cmp	r2, r3
     5b0:	d300      	bcc.n	5b4 <br_i15_modpow_opt+0x58>
     5b2:	e158      	b.n	866 <br_i15_modpow_opt+0x30a>
     5b4:	010b      	lsls	r3, r1, #4
     5b6:	4463      	add	r3, ip
     5b8:	429a      	cmp	r2, r3
     5ba:	d300      	bcc.n	5be <br_i15_modpow_opt+0x62>
     5bc:	e17f      	b.n	8be <br_i15_modpow_opt+0x362>
     5be:	00cb      	lsls	r3, r1, #3
     5c0:	4463      	add	r3, ip
     5c2:	4293      	cmp	r3, r2
     5c4:	d800      	bhi.n	5c8 <br_i15_modpow_opt+0x6c>
     5c6:	e17f      	b.n	8c8 <br_i15_modpow_opt+0x36c>
     5c8:	008b      	lsls	r3, r1, #2
     5ca:	4463      	add	r3, ip
     5cc:	429a      	cmp	r2, r3
     5ce:	d300      	bcc.n	5d2 <br_i15_modpow_opt+0x76>
     5d0:	e17f      	b.n	8d2 <br_i15_modpow_opt+0x376>
	}

	/*
	 * Everything is done in Montgomery representation.
	 */
	br_i15_to_monty(x, m);
     5d2:	f241 03a9 	movw	r3, #4265	; 0x10a9
     5d6:	4641      	mov	r1, r8
     5d8:	0038      	movs	r0, r7
     5da:	f2c0 0300 	movt	r3, #0
     5de:	4798      	blx	r3
	 * Compute window contents. If the window has size one bit only,
	 * then t2 is set to x; otherwise, t2[0] is left untouched, and
	 * t2[k] is set to x^k (for k >= 1).
	 */
	if (win_len == 1) {
		memcpy(t2, x, mlen);
     5e0:	f642 63d3 	movw	r3, #11987	; 0x2ed3
     5e4:	0022      	movs	r2, r4
     5e6:	f2c0 0300 	movt	r3, #0
     5ea:	0039      	movs	r1, r7
     5ec:	0030      	movs	r0, r6
     5ee:	9312      	str	r3, [sp, #72]	; 0x48
     5f0:	4798      	blx	r3
     5f2:	2302      	movs	r3, #2
     5f4:	9310      	str	r3, [sp, #64]	; 0x40
     5f6:	3b01      	subs	r3, #1
     5f8:	930c      	str	r3, [sp, #48]	; 0x30

static inline void
br_i15_zero(uint16_t *x, uint16_t bit_len)
{
    *x ++ = bit_len;
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
     5fa:	f642 7309 	movw	r3, #12041	; 0x2f09
	/*
	 * We need to set x to 1, in Montgomery representation. This can
	 * be done efficiently by setting the high word to 1, then doing
	 * one word-sized shift.
	 */
	br_i15_zero(x, m[0]);
     5fe:	9c03      	ldr	r4, [sp, #12]
     600:	f2c0 0300 	movt	r3, #0
     604:	8822      	ldrh	r2, [r4, #0]
     606:	2100      	movs	r1, #0
    *x ++ = bit_len;
     608:	803a      	strh	r2, [r7, #0]
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
     60a:	320f      	adds	r2, #15
     60c:	1112      	asrs	r2, r2, #4
     60e:	0052      	lsls	r2, r2, #1
    *x ++ = bit_len;
     610:	1cb8      	adds	r0, r7, #2
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
     612:	931b      	str	r3, [sp, #108]	; 0x6c
     614:	4798      	blx	r3
	x[(m[0] + 15) >> 4] = 1;
     616:	2201      	movs	r2, #1
     618:	8823      	ldrh	r3, [r4, #0]
	br_i15_muladd_small(x, 0, m);
     61a:	2100      	movs	r1, #0
	x[(m[0] + 15) >> 4] = 1;
     61c:	330f      	adds	r3, #15
     61e:	111b      	asrs	r3, r3, #4
     620:	005b      	lsls	r3, r3, #1
     622:	53da      	strh	r2, [r3, r7]
	br_i15_muladd_small(x, 0, m);
     624:	f640 23a1 	movw	r3, #2721	; 0xaa1
     628:	0022      	movs	r2, r4
     62a:	f2c0 0300 	movt	r3, #0
     62e:	0038      	movs	r0, r7
     630:	4798      	blx	r3
     632:	9a15      	ldr	r2, [sp, #84]	; 0x54
     634:	9927      	ldr	r1, [sp, #156]	; 0x9c
     636:	0013      	movs	r3, r2
     638:	3302      	adds	r3, #2
     63a:	469c      	mov	ip, r3
     63c:	931a      	str	r3, [sp, #104]	; 0x68
     63e:	0013      	movs	r3, r2
     640:	9a27      	ldr	r2, [sp, #156]	; 0x9c
     642:	4461      	add	r1, ip
     644:	4694      	mov	ip, r2
     646:	000d      	movs	r5, r1
     648:	3306      	adds	r3, #6
     64a:	9917      	ldr	r1, [sp, #92]	; 0x5c
     64c:	4463      	add	r3, ip
     64e:	9308      	str	r3, [sp, #32]
     650:	000b      	movs	r3, r1
     652:	3b01      	subs	r3, #1
     654:	001a      	movs	r2, r3
     656:	930e      	str	r3, [sp, #56]	; 0x38
     658:	000b      	movs	r3, r1
     65a:	3b03      	subs	r3, #3
     65c:	085b      	lsrs	r3, r3, #1
     65e:	3301      	adds	r3, #1
     660:	9302      	str	r3, [sp, #8]
     662:	005b      	lsls	r3, r3, #1
     664:	930d      	str	r3, [sp, #52]	; 0x34
     666:	3301      	adds	r3, #1
     668:	9318      	str	r3, [sp, #96]	; 0x60
	/*
	 * We process bits from most to least significant. At each
	 * loop iteration, we have acc_len bits in acc.
	 */
	acc = 0;
	acc_len = 0;
     66a:	2300      	movs	r3, #0
     66c:	930b      	str	r3, [sp, #44]	; 0x2c
	acc = 0;
     66e:	930f      	str	r3, [sp, #60]	; 0x3c
				acc_len += 8;
			} else {
				k = acc_len;
			}
		}
		bits = (acc >> (acc_len - k)) & (((uint32_t)1 << k) - 1);
     670:	9b10      	ldr	r3, [sp, #64]	; 0x40
     672:	46e2      	mov	sl, ip
     674:	3b01      	subs	r3, #1
     676:	9316      	str	r3, [sp, #88]	; 0x58
     678:	2306      	movs	r3, #6
     67a:	4293      	cmp	r3, r2
     67c:	419b      	sbcs	r3, r3
     67e:	425b      	negs	r3, r3
     680:	9309      	str	r3, [sp, #36]	; 0x24
	while (acc_len > 0 || elen > 0) {
     682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     684:	2b00      	cmp	r3, #0
     686:	dc00      	bgt.n	68a <br_i15_modpow_opt+0x12e>
     688:	e0ad      	b.n	7e6 <br_i15_modpow_opt+0x28a>
		if (acc_len < win_len) {
     68a:	980c      	ldr	r0, [sp, #48]	; 0x30
     68c:	001a      	movs	r2, r3
     68e:	4283      	cmp	r3, r0
     690:	da00      	bge.n	694 <br_i15_modpow_opt+0x138>
     692:	e0ca      	b.n	82a <br_i15_modpow_opt+0x2ce>
     694:	1a1b      	subs	r3, r3, r0
     696:	930b      	str	r3, [sp, #44]	; 0x2c
		bits = (acc >> (acc_len - k)) & (((uint32_t)1 << k) - 1);
     698:	980f      	ldr	r0, [sp, #60]	; 0x3c
     69a:	40d8      	lsrs	r0, r3
     69c:	9b16      	ldr	r3, [sp, #88]	; 0x58
     69e:	4003      	ands	r3, r0
     6a0:	9306      	str	r3, [sp, #24]
     6a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
     6a4:	9307      	str	r3, [sp, #28]
     6a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     6a8:	4698      	mov	r8, r3
     6aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
     6ac:	f640 0bdd 	movw	fp, #2269	; 0x8dd
     6b0:	46a9      	mov	r9, r5
     6b2:	2400      	movs	r4, #0
     6b4:	4655      	mov	r5, sl
     6b6:	46b2      	mov	sl, r6
     6b8:	4646      	mov	r6, r8
     6ba:	4698      	mov	r8, r3
     6bc:	f2c0 0b00 	movt	fp, #0

		/*
		 * We could get exactly k bits. Compute k squarings.
		 */
		for (i = 0; i < k; i ++) {
			br_i15_montymul(t1, x, x, m, m0i);
     6c0:	9b04      	ldr	r3, [sp, #16]
     6c2:	003a      	movs	r2, r7
     6c4:	9300      	str	r3, [sp, #0]
     6c6:	0039      	movs	r1, r7
     6c8:	9b03      	ldr	r3, [sp, #12]
     6ca:	0028      	movs	r0, r5
     6cc:	47d8      	blx	fp
		for (i = 0; i < k; i ++) {
     6ce:	3401      	adds	r4, #1
			memcpy(x, t1, mlen);
     6d0:	9a05      	ldr	r2, [sp, #20]
     6d2:	0029      	movs	r1, r5
     6d4:	0038      	movs	r0, r7
     6d6:	47c0      	blx	r8
		for (i = 0; i < k; i ++) {
     6d8:	42b4      	cmp	r4, r6
     6da:	d1f1      	bne.n	6c0 <br_i15_modpow_opt+0x164>
		 * Window lookup: we want to set t2 to the window
		 * lookup value, assuming the bits are non-zero. If
		 * the window length is 1 bit only, then t2 is
		 * already set; otherwise, we do a constant-time lookup.
		 */
		if (win_len > 1) {
     6dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     6de:	4656      	mov	r6, sl
     6e0:	46aa      	mov	sl, r5
     6e2:	464d      	mov	r5, r9
     6e4:	2b01      	cmp	r3, #1
     6e6:	d067      	beq.n	7b8 <br_i15_modpow_opt+0x25c>
			br_i15_zero(t2, m[0]);
     6e8:	9b03      	ldr	r3, [sp, #12]
    *x ++ = bit_len;
     6ea:	1cb0      	adds	r0, r6, #2
     6ec:	881a      	ldrh	r2, [r3, #0]
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
     6ee:	2100      	movs	r1, #0
    *x ++ = bit_len;
     6f0:	8032      	strh	r2, [r6, #0]
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
     6f2:	320f      	adds	r2, #15
     6f4:	1112      	asrs	r2, r2, #4
     6f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
     6f8:	0052      	lsls	r2, r2, #1
     6fa:	4798      	blx	r3
     6fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     6fe:	2b01      	cmp	r3, #1
     700:	d95a      	bls.n	7b8 <br_i15_modpow_opt+0x25c>
     702:	9b1a      	ldr	r3, [sp, #104]	; 0x68
			for (u = 1; u < ((uint32_t)1 << k); u ++) {
				uint32_t mask;

				mask = -EQ(u, bits);
				for (v = 1; v < mwlen; v ++) {
					t2[v] |= mask & base[v];
     704:	4652      	mov	r2, sl
     706:	469c      	mov	ip, r3
     708:	9227      	str	r2, [sp, #156]	; 0x9c
     70a:	9b18      	ldr	r3, [sp, #96]	; 0x60
     70c:	9a15      	ldr	r2, [sp, #84]	; 0x54
     70e:	44b4      	add	ip, r6
     710:	005b      	lsls	r3, r3, #1
     712:	9713      	str	r7, [sp, #76]	; 0x4c
     714:	4667      	mov	r7, ip
     716:	4694      	mov	ip, r2
     718:	465a      	mov	r2, fp
     71a:	f240 0901 	movw	r9, #1
     71e:	f240 0800 	movw	r8, #0
     722:	469a      	mov	sl, r3
     724:	9214      	str	r2, [sp, #80]	; 0x50
    q = x ^ y;
     726:	464b      	mov	r3, r9
     728:	9a06      	ldr	r2, [sp, #24]
     72a:	4640      	mov	r0, r8
     72c:	4053      	eors	r3, r2
     72e:	4642      	mov	r2, r8
    return NOT((q | -q) >> 31);
     730:	4259      	negs	r1, r3
     732:	4319      	orrs	r1, r3
     734:	1d3b      	adds	r3, r7, #4
     736:	429d      	cmp	r5, r3
     738:	4152      	adcs	r2, r2
     73a:	4693      	mov	fp, r2
     73c:	4642      	mov	r2, r8
     73e:	9b08      	ldr	r3, [sp, #32]
     740:	0fc9      	lsrs	r1, r1, #31
     742:	429f      	cmp	r7, r3
     744:	4142      	adcs	r2, r0
     746:	465b      	mov	r3, fp
     748:	4313      	orrs	r3, r2
     74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
				mask = -EQ(u, bits);
     74c:	3901      	subs	r1, #1
     74e:	1ebc      	subs	r4, r7, #2
     750:	b289      	uxth	r1, r1
     752:	421a      	tst	r2, r3
     754:	d05b      	beq.n	80e <br_i15_modpow_opt+0x2b2>
     756:	003b      	movs	r3, r7
     758:	2203      	movs	r2, #3
     75a:	432b      	orrs	r3, r5
     75c:	421a      	tst	r2, r3
     75e:	d156      	bne.n	80e <br_i15_modpow_opt+0x2b2>
     760:	040b      	lsls	r3, r1, #16
     762:	430b      	orrs	r3, r1
     764:	468b      	mov	fp, r1
     766:	2200      	movs	r2, #0
     768:	2000      	movs	r0, #0
     76a:	0019      	movs	r1, r3
     76c:	960a      	str	r6, [sp, #40]	; 0x28
					t2[v] |= mask & base[v];
     76e:	1c93      	adds	r3, r2, #2
     770:	58e3      	ldr	r3, [r4, r3]
     772:	58ae      	ldr	r6, [r5, r2]
     774:	400b      	ands	r3, r1
     776:	4333      	orrs	r3, r6
     778:	50ab      	str	r3, [r5, r2]
     77a:	9b02      	ldr	r3, [sp, #8]
     77c:	3001      	adds	r0, #1
     77e:	3204      	adds	r2, #4
     780:	4298      	cmp	r0, r3
     782:	d3f4      	bcc.n	76e <br_i15_modpow_opt+0x212>
     784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     788:	9e0a      	ldr	r6, [sp, #40]	; 0x28
     78a:	4659      	mov	r1, fp
     78c:	4293      	cmp	r3, r2
     78e:	d007      	beq.n	7a0 <br_i15_modpow_opt+0x244>
     790:	4652      	mov	r2, sl
     792:	4653      	mov	r3, sl
     794:	5aa2      	ldrh	r2, [r4, r2]
     796:	18f3      	adds	r3, r6, r3
     798:	4011      	ands	r1, r2
     79a:	881a      	ldrh	r2, [r3, #0]
     79c:	4311      	orrs	r1, r2
     79e:	8019      	strh	r1, [r3, #0]
			for (u = 1; u < ((uint32_t)1 << k); u ++) {
     7a0:	f240 0b01 	movw	fp, #1
     7a4:	9b07      	ldr	r3, [sp, #28]
     7a6:	44d9      	add	r9, fp
     7a8:	4467      	add	r7, ip
     7aa:	4599      	cmp	r9, r3
     7ac:	d1bb      	bne.n	726 <br_i15_modpow_opt+0x1ca>
     7ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
     7b0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
     7b2:	469a      	mov	sl, r3
     7b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
     7b6:	469b      	mov	fp, r3
		/*
		 * Multiply with the looked-up value. We keep the
		 * product only if the exponent bits are not all-zero.
		 */
		br_i15_montymul(t1, x, t2, m, m0i);
		CCOPY(NEQ(bits, 0), x, t1, mlen);
     7b8:	f240 148d 	movw	r4, #397	; 0x18d
		br_i15_montymul(t1, x, t2, m, m0i);
     7bc:	9b04      	ldr	r3, [sp, #16]
     7be:	0032      	movs	r2, r6
     7c0:	9300      	str	r3, [sp, #0]
     7c2:	0039      	movs	r1, r7
     7c4:	9b03      	ldr	r3, [sp, #12]
     7c6:	4650      	mov	r0, sl
     7c8:	47d8      	blx	fp
    return (q | -q) >> 31;
     7ca:	9b06      	ldr	r3, [sp, #24]
		CCOPY(NEQ(bits, 0), x, t1, mlen);
     7cc:	4652      	mov	r2, sl
     7ce:	4258      	negs	r0, r3
     7d0:	4318      	orrs	r0, r3
     7d2:	0fc0      	lsrs	r0, r0, #31
     7d4:	9b05      	ldr	r3, [sp, #20]
     7d6:	0039      	movs	r1, r7
     7d8:	f2c0 0400 	movt	r4, #0
     7dc:	47a0      	blx	r4
	while (acc_len > 0 || elen > 0) {
     7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     7e0:	2b00      	cmp	r3, #0
     7e2:	dd00      	ble.n	7e6 <br_i15_modpow_opt+0x28a>
     7e4:	e751      	b.n	68a <br_i15_modpow_opt+0x12e>
     7e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
     7e8:	b36b      	cbz	r3, 846 <br_i15_modpow_opt+0x2ea>
				acc = (acc << 8) | *e ++;
     7ea:	9919      	ldr	r1, [sp, #100]	; 0x64
     7ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     7ee:	780a      	ldrb	r2, [r1, #0]
     7f0:	021b      	lsls	r3, r3, #8
     7f2:	431a      	orrs	r2, r3
				elen --;
     7f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
				acc = (acc << 8) | *e ++;
     7f6:	920f      	str	r2, [sp, #60]	; 0x3c
				elen --;
     7f8:	3b01      	subs	r3, #1
     7fa:	9311      	str	r3, [sp, #68]	; 0x44
				acc_len += 8;
     7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     7fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     800:	3308      	adds	r3, #8
     802:	1a9b      	subs	r3, r3, r2
     804:	930b      	str	r3, [sp, #44]	; 0x2c
				acc = (acc << 8) | *e ++;
     806:	1c4b      	adds	r3, r1, #1
     808:	9319      	str	r3, [sp, #100]	; 0x64
     80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     80c:	e744      	b.n	698 <br_i15_modpow_opt+0x13c>
     80e:	4662      	mov	r2, ip
				mask = -EQ(u, bits);
     810:	2002      	movs	r0, #2
     812:	46ac      	mov	ip, r5
					t2[v] |= mask & base[v];
     814:	5a23      	ldrh	r3, [r4, r0]
     816:	5a35      	ldrh	r5, [r6, r0]
     818:	400b      	ands	r3, r1
     81a:	432b      	orrs	r3, r5
     81c:	5233      	strh	r3, [r6, r0]
     81e:	3002      	adds	r0, #2
				for (v = 1; v < mwlen; v ++) {
     820:	4282      	cmp	r2, r0
     822:	d1f7      	bne.n	814 <br_i15_modpow_opt+0x2b8>
     824:	4665      	mov	r5, ip
     826:	4694      	mov	ip, r2
     828:	e7ba      	b.n	7a0 <br_i15_modpow_opt+0x244>
			if (elen > 0) {
     82a:	9b11      	ldr	r3, [sp, #68]	; 0x44
     82c:	2b00      	cmp	r3, #0
     82e:	d1dc      	bne.n	7ea <br_i15_modpow_opt+0x28e>
     830:	3301      	adds	r3, #1
     832:	4093      	lsls	r3, r2
		bits = (acc >> (acc_len - k)) & (((uint32_t)1 << k) - 1);
     834:	1e58      	subs	r0, r3, #1
     836:	9307      	str	r3, [sp, #28]
     838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     83a:	4690      	mov	r8, r2
     83c:	4003      	ands	r3, r0
     83e:	9306      	str	r3, [sp, #24]
     840:	2300      	movs	r3, #0
     842:	930b      	str	r3, [sp, #44]	; 0x2c
     844:	e731      	b.n	6aa <br_i15_modpow_opt+0x14e>
	}

	/*
	 * Convert back from Montgomery representation, and exit.
	 */
	br_i15_from_monty(x, m, m0i);
     846:	f240 43c1 	movw	r3, #1217	; 0x4c1
     84a:	0038      	movs	r0, r7
     84c:	9a04      	ldr	r2, [sp, #16]
     84e:	9903      	ldr	r1, [sp, #12]
     850:	f2c0 0300 	movt	r3, #0
     854:	4798      	blx	r3
	return 1;
     856:	2001      	movs	r0, #1
}
     858:	b01d      	add	sp, #116	; 0x74
     85a:	bc3c      	pop	{r2, r3, r4, r5}
     85c:	4690      	mov	r8, r2
     85e:	4699      	mov	r9, r3
     860:	46a2      	mov	sl, r4
     862:	46ab      	mov	fp, r5
     864:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
     866:	2305      	movs	r3, #5
     868:	930c      	str	r3, [sp, #48]	; 0x30
     86a:	331b      	adds	r3, #27
     86c:	9310      	str	r3, [sp, #64]	; 0x40
	br_i15_to_monty(x, m);
     86e:	f241 03a9 	movw	r3, #4265	; 0x10a9
     872:	9903      	ldr	r1, [sp, #12]
     874:	0038      	movs	r0, r7
     876:	f2c0 0300 	movt	r3, #0
     87a:	4798      	blx	r3
		memcpy(t2 + mwlen, x, mlen);
     87c:	9b15      	ldr	r3, [sp, #84]	; 0x54
     87e:	f240 0902 	movw	r9, #2
     882:	18f4      	adds	r4, r6, r3
     884:	f642 63d3 	movw	r3, #11987	; 0x2ed3
     888:	0039      	movs	r1, r7
     88a:	f2c0 0300 	movt	r3, #0
     88e:	9a05      	ldr	r2, [sp, #20]
     890:	0020      	movs	r0, r4
     892:	f640 08dd 	movw	r8, #2269	; 0x8dd
     896:	9312      	str	r3, [sp, #72]	; 0x48
     898:	464d      	mov	r5, r9
     89a:	4798      	blx	r3
     89c:	0021      	movs	r1, r4
     89e:	f2c0 0800 	movt	r8, #0
			br_i15_montymul(base + mwlen, base, x, m, m0i);
     8a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
     8a4:	003a      	movs	r2, r7
     8a6:	18cc      	adds	r4, r1, r3
     8a8:	9b04      	ldr	r3, [sp, #16]
     8aa:	0020      	movs	r0, r4
     8ac:	9300      	str	r3, [sp, #0]
     8ae:	9b03      	ldr	r3, [sp, #12]
     8b0:	47c0      	blx	r8
		for (u = 2; u < ((unsigned)1 << win_len); u ++) {
     8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
     8b4:	3501      	adds	r5, #1
			base += mwlen;
     8b6:	0021      	movs	r1, r4
		for (u = 2; u < ((unsigned)1 << win_len); u ++) {
     8b8:	429d      	cmp	r5, r3
     8ba:	d1f2      	bne.n	8a2 <br_i15_modpow_opt+0x346>
     8bc:	e69d      	b.n	5fa <br_i15_modpow_opt+0x9e>
	for (win_len = 5; win_len > 1; win_len --) {
     8be:	2304      	movs	r3, #4
     8c0:	930c      	str	r3, [sp, #48]	; 0x30
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
     8c2:	330c      	adds	r3, #12
     8c4:	9310      	str	r3, [sp, #64]	; 0x40
     8c6:	e7d2      	b.n	86e <br_i15_modpow_opt+0x312>
	for (win_len = 5; win_len > 1; win_len --) {
     8c8:	2303      	movs	r3, #3
     8ca:	930c      	str	r3, [sp, #48]	; 0x30
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
     8cc:	3305      	adds	r3, #5
     8ce:	9310      	str	r3, [sp, #64]	; 0x40
     8d0:	e7cd      	b.n	86e <br_i15_modpow_opt+0x312>
	for (win_len = 5; win_len > 1; win_len --) {
     8d2:	2302      	movs	r3, #2
     8d4:	930c      	str	r3, [sp, #48]	; 0x30
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
     8d6:	3302      	adds	r3, #2
     8d8:	9310      	str	r3, [sp, #64]	; 0x40
     8da:	e7c8      	b.n	86e <br_i15_modpow_opt+0x312>

000008dc <br_i15_montymul>:

/* see inner.h */
void
br_i15_montymul(uint16_t *d, const uint16_t *x, const uint16_t *y,
	const uint16_t *m, uint16_t m0i)
{
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8de:	4657      	mov	r7, sl
     8e0:	464e      	mov	r6, r9
     8e2:	4645      	mov	r5, r8
     8e4:	46de      	mov	lr, fp
     8e6:	4699      	mov	r9, r3
     8e8:	b5e0      	push	{r5, r6, r7, lr}
     8ea:	b08b      	sub	sp, #44	; 0x2c
     8ec:	ab14      	add	r3, sp, #80	; 0x50
     8ee:	881b      	ldrh	r3, [r3, #0]
     8f0:	4692      	mov	sl, r2
     8f2:	9307      	str	r3, [sp, #28]
	size_t len, len4, u, v;
	uint32_t dh;

	len = (m[0] + 15) >> 4;
     8f4:	464b      	mov	r3, r9
     8f6:	881b      	ldrh	r3, [r3, #0]
{
     8f8:	000e      	movs	r6, r1
	len = (m[0] + 15) >> 4;
     8fa:	001a      	movs	r2, r3
     8fc:	320f      	adds	r2, #15
     8fe:	1111      	asrs	r1, r2, #4
	len4 = len & ~(size_t)3;
     900:	000c      	movs	r4, r1
     902:	2203      	movs	r2, #3
    *x ++ = bit_len;
     904:	8003      	strh	r3, [r0, #0]
     906:	4394      	bics	r4, r2
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
     908:	f642 7309 	movw	r3, #12041	; 0x2f09
     90c:	46a0      	mov	r8, r4
     90e:	000c      	movs	r4, r1
     910:	004f      	lsls	r7, r1, #1
{
     912:	0005      	movs	r5, r0
     914:	9004      	str	r0, [sp, #16]
	len = (m[0] + 15) >> 4;
     916:	9108      	str	r1, [sp, #32]
    *x ++ = bit_len;
     918:	3002      	adds	r0, #2
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
     91a:	003a      	movs	r2, r7
     91c:	2100      	movs	r1, #0
     91e:	f2c0 0300 	movt	r3, #0
     922:	4798      	blx	r3
	br_i15_zero(d, m[0]);
	dh = 0;
	for (u = 0; u < len; u ++) {
     924:	2c00      	cmp	r4, #0
     926:	d100      	bne.n	92a <br_i15_montymul+0x4e>
     928:	e0b8      	b.n	a9c <br_i15_montymul+0x1c0>
     92a:	46ac      	mov	ip, r5
     92c:	44bc      	add	ip, r7
     92e:	4663      	mov	r3, ip
     930:	46b4      	mov	ip, r6
     932:	44bc      	add	ip, r7
     934:	9306      	str	r3, [sp, #24]
     936:	4663      	mov	r3, ip
     938:	9305      	str	r3, [sp, #20]
     93a:	1cbb      	adds	r3, r7, #2
     93c:	469c      	mov	ip, r3
     93e:	2300      	movs	r3, #0
     940:	9303      	str	r3, [sp, #12]
		uint32_t f, xu, r, zh;

		xu = x[u + 1];
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
     942:	4663      	mov	r3, ip
     944:	9602      	str	r6, [sp, #8]
     946:	46d4      	mov	ip, sl
     948:	f647 76ff 	movw	r6, #32767	; 0x7fff
     94c:	9309      	str	r3, [sp, #36]	; 0x24
     94e:	9b02      	ldr	r3, [sp, #8]
		xu = x[u + 1];
     950:	885f      	ldrh	r7, [r3, #2]
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
     952:	4663      	mov	r3, ip
     954:	885d      	ldrh	r5, [r3, #2]
     956:	9a04      	ldr	r2, [sp, #16]
     958:	437d      	muls	r5, r7
     95a:	8853      	ldrh	r3, [r2, #2]
     95c:	18ed      	adds	r5, r5, r3
     95e:	9b07      	ldr	r3, [sp, #28]
     960:	4035      	ands	r5, r6
     962:	435d      	muls	r5, r3
			r = 0;
		}
		v = len4;
#else
		r = 0;
		for (v = 0; v < len4; v += 4) {
     964:	4643      	mov	r3, r8
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
     966:	4035      	ands	r5, r6
		for (v = 0; v < len4; v += 4) {
     968:	2b00      	cmp	r3, #0
     96a:	d100      	bne.n	96e <br_i15_montymul+0x92>
     96c:	e093      	b.n	a96 <br_i15_montymul+0x1ba>
     96e:	464b      	mov	r3, r9
     970:	1c9c      	adds	r4, r3, #2
     972:	4663      	mov	r3, ip
     974:	2100      	movs	r1, #0
     976:	1c98      	adds	r0, r3, #2
     978:	2300      	movs	r3, #0
     97a:	9101      	str	r1, [sp, #4]
     97c:	469a      	mov	sl, r3
     97e:	0021      	movs	r1, r4
     980:	0004      	movs	r4, r0
     982:	0010      	movs	r0, r2
			uint32_t z;

			z = d[v + 1] + MUL15(xu, y[v + 1])
     984:	8823      	ldrh	r3, [r4, #0]
				+ MUL15(f, m[v + 1]) + r;
     986:	880a      	ldrh	r2, [r1, #0]
			z = d[v + 1] + MUL15(xu, y[v + 1])
     988:	437b      	muls	r3, r7
     98a:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 1]) + r;
     98c:	436a      	muls	r2, r5
			z = d[v + 1] + MUL15(xu, y[v + 1])
     98e:	8843      	ldrh	r3, [r0, #2]
				+ MUL15(f, m[v + 1]) + r;
     990:	445a      	add	r2, fp
			z = d[v + 1] + MUL15(xu, y[v + 1])
     992:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 1]) + r;
     994:	445a      	add	r2, fp
			z = d[v + 1] + MUL15(xu, y[v + 1])
     996:	4452      	add	r2, sl
			r = z >> 15;
     998:	0bd3      	lsrs	r3, r2, #15
			d[v + 0] = z & 0x7FFF;
     99a:	4032      	ands	r2, r6
     99c:	8002      	strh	r2, [r0, #0]
			r = z >> 15;
     99e:	469a      	mov	sl, r3
			z = d[v + 2] + MUL15(xu, y[v + 2])
     9a0:	8863      	ldrh	r3, [r4, #2]
				+ MUL15(f, m[v + 2]) + r;
     9a2:	884a      	ldrh	r2, [r1, #2]
			z = d[v + 2] + MUL15(xu, y[v + 2])
     9a4:	437b      	muls	r3, r7
     9a6:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 2]) + r;
     9a8:	436a      	muls	r2, r5
			z = d[v + 2] + MUL15(xu, y[v + 2])
     9aa:	8883      	ldrh	r3, [r0, #4]
				+ MUL15(f, m[v + 2]) + r;
     9ac:	445a      	add	r2, fp
			z = d[v + 2] + MUL15(xu, y[v + 2])
     9ae:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 2]) + r;
     9b0:	445a      	add	r2, fp
			z = d[v + 2] + MUL15(xu, y[v + 2])
     9b2:	4452      	add	r2, sl
			r = z >> 15;
     9b4:	0bd3      	lsrs	r3, r2, #15
			d[v + 1] = z & 0x7FFF;
     9b6:	4032      	ands	r2, r6
     9b8:	8042      	strh	r2, [r0, #2]
			r = z >> 15;
     9ba:	469a      	mov	sl, r3
			z = d[v + 3] + MUL15(xu, y[v + 3])
     9bc:	88a3      	ldrh	r3, [r4, #4]
				+ MUL15(f, m[v + 3]) + r;
     9be:	888a      	ldrh	r2, [r1, #4]
			z = d[v + 3] + MUL15(xu, y[v + 3])
     9c0:	437b      	muls	r3, r7
     9c2:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 3]) + r;
     9c4:	436a      	muls	r2, r5
			z = d[v + 3] + MUL15(xu, y[v + 3])
     9c6:	88c3      	ldrh	r3, [r0, #6]
				+ MUL15(f, m[v + 3]) + r;
     9c8:	445a      	add	r2, fp
			z = d[v + 3] + MUL15(xu, y[v + 3])
     9ca:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 3]) + r;
     9cc:	445a      	add	r2, fp
			z = d[v + 3] + MUL15(xu, y[v + 3])
     9ce:	4452      	add	r2, sl
			r = z >> 15;
     9d0:	0bd3      	lsrs	r3, r2, #15
			d[v + 2] = z & 0x7FFF;
     9d2:	4032      	ands	r2, r6
     9d4:	8082      	strh	r2, [r0, #4]
			r = z >> 15;
     9d6:	469a      	mov	sl, r3
			z = d[v + 4] + MUL15(xu, y[v + 4])
     9d8:	88e3      	ldrh	r3, [r4, #6]
				+ MUL15(f, m[v + 4]) + r;
     9da:	88ca      	ldrh	r2, [r1, #6]
			z = d[v + 4] + MUL15(xu, y[v + 4])
     9dc:	437b      	muls	r3, r7
     9de:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 4]) + r;
     9e0:	436a      	muls	r2, r5
			z = d[v + 4] + MUL15(xu, y[v + 4])
     9e2:	8903      	ldrh	r3, [r0, #8]
				+ MUL15(f, m[v + 4]) + r;
     9e4:	445a      	add	r2, fp
			z = d[v + 4] + MUL15(xu, y[v + 4])
     9e6:	469b      	mov	fp, r3
				+ MUL15(f, m[v + 4]) + r;
     9e8:	445a      	add	r2, fp
			z = d[v + 4] + MUL15(xu, y[v + 4])
     9ea:	4452      	add	r2, sl
			r = z >> 15;
     9ec:	0bd3      	lsrs	r3, r2, #15
     9ee:	469a      	mov	sl, r3
     9f0:	9b01      	ldr	r3, [sp, #4]
			d[v + 3] = z & 0x7FFF;
     9f2:	4032      	ands	r2, r6
     9f4:	3304      	adds	r3, #4
     9f6:	80c2      	strh	r2, [r0, #6]
     9f8:	3108      	adds	r1, #8
     9fa:	3008      	adds	r0, #8
     9fc:	3408      	adds	r4, #8
     9fe:	9301      	str	r3, [sp, #4]
		for (v = 0; v < len4; v += 4) {
     a00:	4598      	cmp	r8, r3
     a02:	d8bf      	bhi.n	984 <br_i15_montymul+0xa8>
		}
#endif
		for (; v < len; v ++) {
     a04:	9a08      	ldr	r2, [sp, #32]
     a06:	0019      	movs	r1, r3
     a08:	4653      	mov	r3, sl
     a0a:	428a      	cmp	r2, r1
     a0c:	d917      	bls.n	a3e <br_i15_montymul+0x162>
     a0e:	9a04      	ldr	r2, [sp, #16]
     a10:	0049      	lsls	r1, r1, #1
     a12:	1854      	adds	r4, r2, r1
     a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a16:	3102      	adds	r1, #2
     a18:	4693      	mov	fp, r2
			uint32_t z;

			z = d[v + 1] + MUL15(xu, y[v + 1])
				+ MUL15(f, m[v + 1]) + r;
     a1a:	464a      	mov	r2, r9
     a1c:	5a52      	ldrh	r2, [r2, r1]
			z = d[v + 1] + MUL15(xu, y[v + 1])
     a1e:	8860      	ldrh	r0, [r4, #2]
				+ MUL15(f, m[v + 1]) + r;
     a20:	436a      	muls	r2, r5
     a22:	1812      	adds	r2, r2, r0
			z = d[v + 1] + MUL15(xu, y[v + 1])
     a24:	4660      	mov	r0, ip
     a26:	5a40      	ldrh	r0, [r0, r1]
     a28:	3102      	adds	r1, #2
     a2a:	4378      	muls	r0, r7
     a2c:	4682      	mov	sl, r0
				+ MUL15(f, m[v + 1]) + r;
     a2e:	4452      	add	r2, sl
			z = d[v + 1] + MUL15(xu, y[v + 1])
     a30:	18d2      	adds	r2, r2, r3
			r = z >> 15;
     a32:	0bd3      	lsrs	r3, r2, #15
			d[v + 0] = z & 0x7FFF;
     a34:	4032      	ands	r2, r6
     a36:	8022      	strh	r2, [r4, #0]
     a38:	3402      	adds	r4, #2
		for (; v < len; v ++) {
     a3a:	4559      	cmp	r1, fp
     a3c:	d1ed      	bne.n	a1a <br_i15_montymul+0x13e>
		}

		zh = dh + r;
     a3e:	9a03      	ldr	r2, [sp, #12]
		d[len] = zh & 0x7FFF;
     a40:	9906      	ldr	r1, [sp, #24]
		zh = dh + r;
     a42:	4692      	mov	sl, r2
		d[len] = zh & 0x7FFF;
     a44:	0032      	movs	r2, r6
		zh = dh + r;
     a46:	4453      	add	r3, sl
		d[len] = zh & 0x7FFF;
     a48:	401a      	ands	r2, r3
		dh = zh >> 15;
     a4a:	0bdb      	lsrs	r3, r3, #15
     a4c:	9303      	str	r3, [sp, #12]
     a4e:	9b02      	ldr	r3, [sp, #8]
		d[len] = zh & 0x7FFF;
     a50:	800a      	strh	r2, [r1, #0]
	for (u = 0; u < len; u ++) {
     a52:	9a05      	ldr	r2, [sp, #20]
     a54:	3302      	adds	r3, #2
     a56:	9302      	str	r3, [sp, #8]
     a58:	429a      	cmp	r2, r3
     a5a:	d000      	beq.n	a5e <br_i15_montymul+0x182>
     a5c:	e778      	b.n	950 <br_i15_montymul+0x74>
     a5e:	9b03      	ldr	r3, [sp, #12]
     a60:	425c      	negs	r4, r3
     a62:	0fe4      	lsrs	r4, r4, #31
	}

	/*
	 * Restore the bit length (it was overwritten in the loop above).
	 */
	d[0] = m[0];
     a64:	464b      	mov	r3, r9

	/*
	 * d[] may be greater than m[], but it is still lower than twice
	 * the modulus.
	 */
	br_i15_sub(d, m, NEQ(dh, 0) | NOT(br_i15_sub(d, m, 0)));
     a66:	f241 0661 	movw	r6, #4193	; 0x1061
	d[0] = m[0];
     a6a:	9d04      	ldr	r5, [sp, #16]
     a6c:	881b      	ldrh	r3, [r3, #0]
	br_i15_sub(d, m, NEQ(dh, 0) | NOT(br_i15_sub(d, m, 0)));
     a6e:	4649      	mov	r1, r9
	d[0] = m[0];
     a70:	802b      	strh	r3, [r5, #0]
	br_i15_sub(d, m, NEQ(dh, 0) | NOT(br_i15_sub(d, m, 0)));
     a72:	f2c0 0600 	movt	r6, #0
     a76:	2200      	movs	r2, #0
     a78:	0028      	movs	r0, r5
     a7a:	47b0      	blx	r6
    return ctl ^ 1;
     a7c:	2201      	movs	r2, #1
     a7e:	4042      	eors	r2, r0
     a80:	4322      	orrs	r2, r4
     a82:	4649      	mov	r1, r9
     a84:	0028      	movs	r0, r5
     a86:	47b0      	blx	r6
}
     a88:	b00b      	add	sp, #44	; 0x2c
     a8a:	bc3c      	pop	{r2, r3, r4, r5}
     a8c:	4690      	mov	r8, r2
     a8e:	4699      	mov	r9, r3
     a90:	46a2      	mov	sl, r4
     a92:	46ab      	mov	fp, r5
     a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (v = 0; v < len4; v += 4) {
     a96:	2100      	movs	r1, #0
		r = 0;
     a98:	2300      	movs	r3, #0
     a9a:	e7b9      	b.n	a10 <br_i15_montymul+0x134>
	for (u = 0; u < len; u ++) {
     a9c:	2400      	movs	r4, #0
     a9e:	e7e1      	b.n	a64 <br_i15_montymul+0x188>

00000aa0 <br_i15_muladd_small>:
}

/* see inner.h */
void
br_i15_muladd_small(uint16_t *x, uint16_t z, const uint16_t *m)
{
     aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa2:	464e      	mov	r6, r9
     aa4:	46de      	mov	lr, fp
     aa6:	4657      	mov	r7, sl
     aa8:	4645      	mov	r5, r8
     aaa:	b5e0      	push	{r5, r6, r7, lr}
	uint32_t cc, tb, over, under;

	/*
	 * Simple case: the modulus fits on one word.
	 */
	m_bitlen = m[0];
     aac:	8816      	ldrh	r6, [r2, #0]
{
     aae:	b085      	sub	sp, #20
     ab0:	0004      	movs	r4, r0
     ab2:	4689      	mov	r9, r1
     ab4:	0013      	movs	r3, r2
     ab6:	9201      	str	r2, [sp, #4]
	if (m_bitlen == 0) {
     ab8:	2e00      	cmp	r6, #0
     aba:	d100      	bne.n	abe <br_i15_muladd_small+0x1e>
     abc:	e0d3      	b.n	c66 <br_i15_muladd_small+0x1c6>
		return;
	}
	if (m_bitlen <= 15) {
     abe:	2e0f      	cmp	r6, #15
     ac0:	d900      	bls.n	ac4 <br_i15_muladd_small+0x24>
     ac2:	e0d7      	b.n	c74 <br_i15_muladd_small+0x1d4>
		uint32_t rem;

		divrem16(((uint32_t)x[1] << 15) | z, m[1], &rem);
     ac4:	000a      	movs	r2, r1
     ac6:	8846      	ldrh	r6, [r0, #2]
     ac8:	885f      	ldrh	r7, [r3, #2]
     aca:	03f6      	lsls	r6, r6, #15
	d <<= 16;
     acc:	043b      	lsls	r3, r7, #16
		divrem16(((uint32_t)x[1] << 15) | z, m[1], &rem);
     ace:	4332      	orrs	r2, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     ad0:	0019      	movs	r1, r3
     ad2:	0015      	movs	r5, r2
    z = y - x;
     ad4:	1ad6      	subs	r6, r2, r3
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     ad6:	4071      	eors	r1, r6
     ad8:	405d      	eors	r5, r3
     ada:	400d      	ands	r5, r1
     adc:	4075      	eors	r5, r6
     ade:	0fed      	lsrs	r5, r5, #31
		x -= (-ctl) & d;
     ae0:	3d01      	subs	r5, #1
     ae2:	401d      	ands	r5, r3
     ae4:	1b56      	subs	r6, r2, r5
		d >>= 1;
     ae6:	085d      	lsrs	r5, r3, #1
    z = y - x;
     ae8:	1b72      	subs	r2, r6, r5
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     aea:	0011      	movs	r1, r2
     aec:	0028      	movs	r0, r5
     aee:	4069      	eors	r1, r5
     af0:	4070      	eors	r0, r6
     af2:	4008      	ands	r0, r1
     af4:	4050      	eors	r0, r2
     af6:	0fc0      	lsrs	r0, r0, #31
		x -= (-ctl) & d;
     af8:	3801      	subs	r0, #1
     afa:	4005      	ands	r5, r0
     afc:	1b75      	subs	r5, r6, r5
		d >>= 1;
     afe:	0898      	lsrs	r0, r3, #2
    z = y - x;
     b00:	1a2a      	subs	r2, r5, r0
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     b02:	0016      	movs	r6, r2
     b04:	0001      	movs	r1, r0
     b06:	4046      	eors	r6, r0
     b08:	4069      	eors	r1, r5
     b0a:	4031      	ands	r1, r6
     b0c:	4051      	eors	r1, r2
     b0e:	0fc9      	lsrs	r1, r1, #31
		x -= (-ctl) & d;
     b10:	3901      	subs	r1, #1
     b12:	4008      	ands	r0, r1
     b14:	1a28      	subs	r0, r5, r0
		d >>= 1;
     b16:	08d9      	lsrs	r1, r3, #3
    z = y - x;
     b18:	1a45      	subs	r5, r0, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     b1a:	002e      	movs	r6, r5
     b1c:	000a      	movs	r2, r1
     b1e:	404e      	eors	r6, r1
     b20:	4042      	eors	r2, r0
     b22:	4032      	ands	r2, r6
     b24:	406a      	eors	r2, r5
     b26:	0fd2      	lsrs	r2, r2, #31
		x -= (-ctl) & d;
     b28:	3a01      	subs	r2, #1
     b2a:	4011      	ands	r1, r2
     b2c:	1a41      	subs	r1, r0, r1
		d >>= 1;
     b2e:	091a      	lsrs	r2, r3, #4
    z = y - x;
     b30:	1a88      	subs	r0, r1, r2
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     b32:	0005      	movs	r5, r0
     b34:	0016      	movs	r6, r2
     b36:	4055      	eors	r5, r2
     b38:	404e      	eors	r6, r1
     b3a:	402e      	ands	r6, r5
     b3c:	4046      	eors	r6, r0
     b3e:	0ff6      	lsrs	r6, r6, #31
		x -= (-ctl) & d;
     b40:	3e01      	subs	r6, #1
     b42:	4032      	ands	r2, r6
     b44:	1a8a      	subs	r2, r1, r2
		d >>= 1;
     b46:	095e      	lsrs	r6, r3, #5
    z = y - x;
     b48:	1b91      	subs	r1, r2, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     b4a:	0008      	movs	r0, r1
     b4c:	0035      	movs	r5, r6
     b4e:	4070      	eors	r0, r6
     b50:	4055      	eors	r5, r2
     b52:	4005      	ands	r5, r0
     b54:	404d      	eors	r5, r1
     b56:	0fed      	lsrs	r5, r5, #31
		x -= (-ctl) & d;
     b58:	3d01      	subs	r5, #1
     b5a:	402e      	ands	r6, r5
     b5c:	1b96      	subs	r6, r2, r6
		d >>= 1;
     b5e:	099d      	lsrs	r5, r3, #6
    z = y - x;
     b60:	1b72      	subs	r2, r6, r5
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     b62:	0011      	movs	r1, r2
     b64:	0028      	movs	r0, r5
     b66:	4069      	eors	r1, r5
     b68:	4070      	eors	r0, r6
     b6a:	4008      	ands	r0, r1
     b6c:	4050      	eors	r0, r2
     b6e:	0fc0      	lsrs	r0, r0, #31
		x -= (-ctl) & d;
     b70:	3801      	subs	r0, #1
     b72:	4005      	ands	r5, r0
     b74:	1b75      	subs	r5, r6, r5
		d >>= 1;
     b76:	09d8      	lsrs	r0, r3, #7
    z = y - x;
     b78:	1a2a      	subs	r2, r5, r0
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     b7a:	0016      	movs	r6, r2
     b7c:	0001      	movs	r1, r0
     b7e:	4046      	eors	r6, r0
     b80:	4069      	eors	r1, r5
     b82:	4031      	ands	r1, r6
     b84:	4051      	eors	r1, r2
     b86:	0fc9      	lsrs	r1, r1, #31
		x -= (-ctl) & d;
     b88:	3901      	subs	r1, #1
     b8a:	4008      	ands	r0, r1
     b8c:	1a28      	subs	r0, r5, r0
		d >>= 1;
     b8e:	0a19      	lsrs	r1, r3, #8
    z = y - x;
     b90:	1a45      	subs	r5, r0, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     b92:	002e      	movs	r6, r5
     b94:	000a      	movs	r2, r1
     b96:	404e      	eors	r6, r1
     b98:	4042      	eors	r2, r0
     b9a:	4032      	ands	r2, r6
     b9c:	406a      	eors	r2, r5
     b9e:	0fd2      	lsrs	r2, r2, #31
		x -= (-ctl) & d;
     ba0:	3a01      	subs	r2, #1
     ba2:	4011      	ands	r1, r2
     ba4:	1a41      	subs	r1, r0, r1
		d >>= 1;
     ba6:	0a5a      	lsrs	r2, r3, #9
    z = y - x;
     ba8:	1a88      	subs	r0, r1, r2
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     baa:	0005      	movs	r5, r0
     bac:	0016      	movs	r6, r2
     bae:	4055      	eors	r5, r2
     bb0:	404e      	eors	r6, r1
     bb2:	402e      	ands	r6, r5
     bb4:	4046      	eors	r6, r0
     bb6:	0ff6      	lsrs	r6, r6, #31
		x -= (-ctl) & d;
     bb8:	3e01      	subs	r6, #1
     bba:	4032      	ands	r2, r6
     bbc:	1a8a      	subs	r2, r1, r2
		d >>= 1;
     bbe:	0a9e      	lsrs	r6, r3, #10
    z = y - x;
     bc0:	1b91      	subs	r1, r2, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     bc2:	0008      	movs	r0, r1
     bc4:	0035      	movs	r5, r6
     bc6:	4070      	eors	r0, r6
     bc8:	4055      	eors	r5, r2
     bca:	4005      	ands	r5, r0
     bcc:	404d      	eors	r5, r1
     bce:	0fed      	lsrs	r5, r5, #31
		x -= (-ctl) & d;
     bd0:	3d01      	subs	r5, #1
     bd2:	402e      	ands	r6, r5
     bd4:	1b96      	subs	r6, r2, r6
		d >>= 1;
     bd6:	0add      	lsrs	r5, r3, #11
    z = y - x;
     bd8:	1b72      	subs	r2, r6, r5
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     bda:	0011      	movs	r1, r2
     bdc:	0028      	movs	r0, r5
     bde:	4069      	eors	r1, r5
     be0:	4070      	eors	r0, r6
     be2:	4008      	ands	r0, r1
     be4:	4050      	eors	r0, r2
     be6:	0fc0      	lsrs	r0, r0, #31
		x -= (-ctl) & d;
     be8:	3801      	subs	r0, #1
     bea:	4005      	ands	r5, r0
     bec:	1b75      	subs	r5, r6, r5
		d >>= 1;
     bee:	0b18      	lsrs	r0, r3, #12
    z = y - x;
     bf0:	1a2a      	subs	r2, r5, r0
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     bf2:	0016      	movs	r6, r2
     bf4:	0001      	movs	r1, r0
     bf6:	4046      	eors	r6, r0
     bf8:	4069      	eors	r1, r5
     bfa:	4031      	ands	r1, r6
     bfc:	4051      	eors	r1, r2
     bfe:	0fc9      	lsrs	r1, r1, #31
		x -= (-ctl) & d;
     c00:	3901      	subs	r1, #1
     c02:	4008      	ands	r0, r1
		d >>= 1;
     c04:	0b59      	lsrs	r1, r3, #13
     c06:	000e      	movs	r6, r1
     c08:	000a      	movs	r2, r1
		x -= (-ctl) & d;
     c0a:	1a28      	subs	r0, r5, r0
    z = y - x;
     c0c:	1a45      	subs	r5, r0, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     c0e:	406e      	eors	r6, r5
     c10:	4042      	eors	r2, r0
     c12:	4032      	ands	r2, r6
     c14:	406a      	eors	r2, r5
     c16:	0fd2      	lsrs	r2, r2, #31
     c18:	3a01      	subs	r2, #1
     c1a:	4011      	ands	r1, r2
     c1c:	1a41      	subs	r1, r0, r1
		d >>= 1;
     c1e:	0b98      	lsrs	r0, r3, #14
     c20:	000e      	movs	r6, r1
     c22:	0002      	movs	r2, r0
    z = y - x;
     c24:	1a0d      	subs	r5, r1, r0
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     c26:	4046      	eors	r6, r0
     c28:	406a      	eors	r2, r5
     c2a:	4032      	ands	r2, r6
     c2c:	406a      	eors	r2, r5
     c2e:	0fd2      	lsrs	r2, r2, #31
		x -= (-ctl) & d;
     c30:	3a01      	subs	r2, #1
     c32:	4002      	ands	r2, r0
     c34:	1a8a      	subs	r2, r1, r2
		d >>= 1;
     c36:	0bdb      	lsrs	r3, r3, #15
     c38:	0015      	movs	r5, r2
     c3a:	0019      	movs	r1, r3
    z = y - x;
     c3c:	1ad0      	subs	r0, r2, r3
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     c3e:	405d      	eors	r5, r3
     c40:	4041      	eors	r1, r0
     c42:	4029      	ands	r1, r5
     c44:	4041      	eors	r1, r0
     c46:	0fc9      	lsrs	r1, r1, #31
		x -= (-ctl) & d;
     c48:	3901      	subs	r1, #1
     c4a:	400b      	ands	r3, r1
     c4c:	1ad3      	subs	r3, r2, r3
    z = y - x;
     c4e:	1bd9      	subs	r1, r3, r7
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     c50:	001a      	movs	r2, r3
     c52:	0008      	movs	r0, r1
     c54:	407a      	eors	r2, r7
     c56:	4078      	eors	r0, r7
     c58:	4002      	ands	r2, r0
     c5a:	404a      	eors	r2, r1
     c5c:	0fd2      	lsrs	r2, r2, #31
     c5e:	3a01      	subs	r2, #1
     c60:	4017      	ands	r7, r2
     c62:	1bdb      	subs	r3, r3, r7
		x[1] = rem;
     c64:	8063      	strh	r3, [r4, #2]
	 */
	over = GT(cc, hi);
	under = ~over & (tb | LT(cc, hi));
	br_i15_add(x, m, over);
	br_i15_sub(x, m, under);
}
     c66:	b005      	add	sp, #20
     c68:	bc3c      	pop	{r2, r3, r4, r5}
     c6a:	4690      	mov	r8, r2
     c6c:	4699      	mov	r9, r3
     c6e:	46a2      	mov	sl, r4
     c70:	46ab      	mov	fp, r5
     c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mlen = (m_bitlen + 15) >> 4;
     c74:	0037      	movs	r7, r6
     c76:	370f      	adds	r7, #15
     c78:	093b      	lsrs	r3, r7, #4
     c7a:	4698      	mov	r8, r3
	hi = x[mlen];
     c7c:	4642      	mov	r2, r8
     c7e:	230f      	movs	r3, #15
     c80:	0057      	lsls	r7, r2, #1
     c82:	19c2      	adds	r2, r0, r7
     c84:	4693      	mov	fp, r2
     c86:	8812      	ldrh	r2, [r2, #0]
     c88:	401e      	ands	r6, r3
     c8a:	0015      	movs	r5, r2
     c8c:	9202      	str	r2, [sp, #8]
	if (mblr == 0) {
     c8e:	2e00      	cmp	r6, #0
     c90:	d100      	bne.n	c94 <br_i15_muladd_small+0x1f4>
     c92:	e1bc      	b.n	100e <br_i15_muladd_small+0x56e>
		a0 = (x[mlen] << (15 - mblr)) | (x[mlen - 1] >> mblr);
     c94:	1b9b      	subs	r3, r3, r6
     c96:	001d      	movs	r5, r3
     c98:	1ebb      	subs	r3, r7, #2
     c9a:	469a      	mov	sl, r3
     c9c:	4482      	add	sl, r0
     c9e:	4651      	mov	r1, sl
     ca0:	9303      	str	r3, [sp, #12]
     ca2:	9a02      	ldr	r2, [sp, #8]
     ca4:	880b      	ldrh	r3, [r1, #0]
     ca6:	40aa      	lsls	r2, r5
     ca8:	4133      	asrs	r3, r6
     caa:	4313      	orrs	r3, r2
     cac:	9300      	str	r3, [sp, #0]
		memmove(x + 2, x + 1, (mlen - 1) * sizeof *x);
     cae:	f642 63e5 	movw	r3, #12005	; 0x2ee5
     cb2:	1c81      	adds	r1, r0, #2
     cb4:	9a03      	ldr	r2, [sp, #12]
     cb6:	f2c0 0300 	movt	r3, #0
     cba:	3004      	adds	r0, #4
     cbc:	4798      	blx	r3
		x[1] = z;
     cbe:	4649      	mov	r1, r9
     cc0:	8061      	strh	r1, [r4, #2]
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
     cc2:	4659      	mov	r1, fp
     cc4:	880b      	ldrh	r3, [r1, #0]
			| (x[mlen - 1] >> mblr)) & 0x7FFF);
     cc6:	4651      	mov	r1, sl
     cc8:	8809      	ldrh	r1, [r1, #0]
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
     cca:	40ab      	lsls	r3, r5
			| (x[mlen - 1] >> mblr)) & 0x7FFF);
     ccc:	4131      	asrs	r1, r6
     cce:	430b      	orrs	r3, r1
     cd0:	f647 71ff 	movw	r1, #32767	; 0x7fff
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
     cd4:	9a00      	ldr	r2, [sp, #0]
			| (x[mlen - 1] >> mblr)) & 0x7FFF);
     cd6:	400b      	ands	r3, r1
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
     cd8:	03d1      	lsls	r1, r2, #15
		b = (m[mlen] << (15 - mblr)) | (m[mlen - 1] >> mblr);
     cda:	9801      	ldr	r0, [sp, #4]
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
     cdc:	4319      	orrs	r1, r3
		b = (m[mlen] << (15 - mblr)) | (m[mlen - 1] >> mblr);
     cde:	9b03      	ldr	r3, [sp, #12]
     ce0:	5bc2      	ldrh	r2, [r0, r7]
     ce2:	5ac3      	ldrh	r3, [r0, r3]
     ce4:	40aa      	lsls	r2, r5
     ce6:	4133      	asrs	r3, r6
     ce8:	431a      	orrs	r2, r3
     cea:	4692      	mov	sl, r2
	d <<= 16;
     cec:	4653      	mov	r3, sl
     cee:	041b      	lsls	r3, r3, #16
     cf0:	469c      	mov	ip, r3
     cf2:	4662      	mov	r2, ip
     cf4:	4660      	mov	r0, ip
    z = y - x;
     cf6:	1acb      	subs	r3, r1, r3
    return ctl ^ 1;
     cf8:	2701      	movs	r7, #1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     cfa:	404a      	eors	r2, r1
     cfc:	4058      	eors	r0, r3
     cfe:	4010      	ands	r0, r2
     d00:	4058      	eors	r0, r3
		x -= (-ctl) & d;
     d02:	4663      	mov	r3, ip
     d04:	0fc0      	lsrs	r0, r0, #31
    return ctl ^ 1;
     d06:	4078      	eors	r0, r7
     d08:	4242      	negs	r2, r0
     d0a:	401a      	ands	r2, r3
     d0c:	1a8e      	subs	r6, r1, r2
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d0e:	0031      	movs	r1, r6
		d >>= 1;
     d10:	085b      	lsrs	r3, r3, #1
     d12:	4059      	eors	r1, r3
     d14:	468b      	mov	fp, r1
     d16:	0019      	movs	r1, r3
     d18:	465d      	mov	r5, fp
    z = y - x;
     d1a:	1af2      	subs	r2, r6, r3
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d1c:	4051      	eors	r1, r2
     d1e:	4029      	ands	r1, r5
     d20:	404a      	eors	r2, r1
     d22:	0fd2      	lsrs	r2, r2, #31
    return ctl ^ 1;
     d24:	407a      	eors	r2, r7
		q |= ctl << i;
     d26:	03d1      	lsls	r1, r2, #15
		x -= (-ctl) & d;
     d28:	4252      	negs	r2, r2
     d2a:	401a      	ands	r2, r3
     d2c:	1ab2      	subs	r2, r6, r2
		d >>= 1;
     d2e:	4663      	mov	r3, ip
		q |= ctl << i;
     d30:	0400      	lsls	r0, r0, #16
     d32:	4308      	orrs	r0, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d34:	0011      	movs	r1, r2
		d >>= 1;
     d36:	089e      	lsrs	r6, r3, #2
     d38:	4071      	eors	r1, r6
     d3a:	468b      	mov	fp, r1
     d3c:	0031      	movs	r1, r6
     d3e:	465d      	mov	r5, fp
    z = y - x;
     d40:	1b93      	subs	r3, r2, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d42:	4059      	eors	r1, r3
     d44:	4029      	ands	r1, r5
     d46:	4059      	eors	r1, r3
     d48:	0fc9      	lsrs	r1, r1, #31
    return ctl ^ 1;
     d4a:	4079      	eors	r1, r7
		q |= ctl << i;
     d4c:	038b      	lsls	r3, r1, #14
     d4e:	4318      	orrs	r0, r3
		x -= (-ctl) & d;
     d50:	424b      	negs	r3, r1
     d52:	4033      	ands	r3, r6
     d54:	1ad3      	subs	r3, r2, r3
		d >>= 1;
     d56:	4662      	mov	r2, ip
     d58:	08d6      	lsrs	r6, r2, #3
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d5a:	001a      	movs	r2, r3
     d5c:	4072      	eors	r2, r6
     d5e:	4693      	mov	fp, r2
     d60:	0032      	movs	r2, r6
     d62:	465d      	mov	r5, fp
    z = y - x;
     d64:	1b99      	subs	r1, r3, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d66:	404a      	eors	r2, r1
     d68:	402a      	ands	r2, r5
     d6a:	4051      	eors	r1, r2
     d6c:	0fc9      	lsrs	r1, r1, #31
    return ctl ^ 1;
     d6e:	4079      	eors	r1, r7
		q |= ctl << i;
     d70:	034a      	lsls	r2, r1, #13
		x -= (-ctl) & d;
     d72:	4249      	negs	r1, r1
     d74:	400e      	ands	r6, r1
     d76:	1b9e      	subs	r6, r3, r6
		d >>= 1;
     d78:	4663      	mov	r3, ip
     d7a:	0919      	lsrs	r1, r3, #4
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d7c:	0033      	movs	r3, r6
     d7e:	404b      	eors	r3, r1
     d80:	469b      	mov	fp, r3
     d82:	000b      	movs	r3, r1
     d84:	465d      	mov	r5, fp
		q |= ctl << i;
     d86:	4310      	orrs	r0, r2
    z = y - x;
     d88:	1a72      	subs	r2, r6, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     d8a:	4053      	eors	r3, r2
     d8c:	402b      	ands	r3, r5
     d8e:	405a      	eors	r2, r3
     d90:	0fd2      	lsrs	r2, r2, #31
    return ctl ^ 1;
     d92:	407a      	eors	r2, r7
     d94:	0313      	lsls	r3, r2, #12
     d96:	4303      	orrs	r3, r0
		x -= (-ctl) & d;
     d98:	4250      	negs	r0, r2
     d9a:	4008      	ands	r0, r1
     d9c:	1a30      	subs	r0, r6, r0
		d >>= 1;
     d9e:	4662      	mov	r2, ip
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     da0:	0006      	movs	r6, r0
     da2:	0952      	lsrs	r2, r2, #5
     da4:	4056      	eors	r6, r2
     da6:	46b3      	mov	fp, r6
     da8:	0016      	movs	r6, r2
     daa:	465d      	mov	r5, fp
    z = y - x;
     dac:	1a81      	subs	r1, r0, r2
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     dae:	404e      	eors	r6, r1
     db0:	402e      	ands	r6, r5
     db2:	4071      	eors	r1, r6
     db4:	0fc9      	lsrs	r1, r1, #31
    return ctl ^ 1;
     db6:	4079      	eors	r1, r7
		q |= ctl << i;
     db8:	02ce      	lsls	r6, r1, #11
		x -= (-ctl) & d;
     dba:	4249      	negs	r1, r1
     dbc:	4011      	ands	r1, r2
     dbe:	1a41      	subs	r1, r0, r1
		q |= ctl << i;
     dc0:	431e      	orrs	r6, r3
		d >>= 1;
     dc2:	4663      	mov	r3, ip
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     dc4:	0008      	movs	r0, r1
     dc6:	099b      	lsrs	r3, r3, #6
     dc8:	4058      	eors	r0, r3
     dca:	4683      	mov	fp, r0
     dcc:	0018      	movs	r0, r3
     dce:	465d      	mov	r5, fp
    z = y - x;
     dd0:	1aca      	subs	r2, r1, r3
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     dd2:	4050      	eors	r0, r2
     dd4:	4028      	ands	r0, r5
     dd6:	4042      	eors	r2, r0
     dd8:	0fd2      	lsrs	r2, r2, #31
    return ctl ^ 1;
     dda:	407a      	eors	r2, r7
		q |= ctl << i;
     ddc:	0290      	lsls	r0, r2, #10
		x -= (-ctl) & d;
     dde:	4252      	negs	r2, r2
     de0:	401a      	ands	r2, r3
     de2:	1a8a      	subs	r2, r1, r2
		d >>= 1;
     de4:	4663      	mov	r3, ip
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     de6:	0011      	movs	r1, r2
		q |= ctl << i;
     de8:	4330      	orrs	r0, r6
		d >>= 1;
     dea:	09de      	lsrs	r6, r3, #7
     dec:	4071      	eors	r1, r6
     dee:	468b      	mov	fp, r1
     df0:	0031      	movs	r1, r6
     df2:	465d      	mov	r5, fp
    z = y - x;
     df4:	1b93      	subs	r3, r2, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     df6:	4059      	eors	r1, r3
     df8:	4029      	ands	r1, r5
     dfa:	404b      	eors	r3, r1
     dfc:	0fdb      	lsrs	r3, r3, #31
    return ctl ^ 1;
     dfe:	407b      	eors	r3, r7
		q |= ctl << i;
     e00:	0259      	lsls	r1, r3, #9
		x -= (-ctl) & d;
     e02:	425b      	negs	r3, r3
     e04:	4033      	ands	r3, r6
     e06:	1ad3      	subs	r3, r2, r3
		d >>= 1;
     e08:	4662      	mov	r2, ip
		q |= ctl << i;
     e0a:	4301      	orrs	r1, r0
		d >>= 1;
     e0c:	0a10      	lsrs	r0, r2, #8
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e0e:	001a      	movs	r2, r3
     e10:	4042      	eors	r2, r0
     e12:	4693      	mov	fp, r2
     e14:	0002      	movs	r2, r0
     e16:	465d      	mov	r5, fp
    z = y - x;
     e18:	1a1e      	subs	r6, r3, r0
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e1a:	4072      	eors	r2, r6
     e1c:	402a      	ands	r2, r5
     e1e:	4056      	eors	r6, r2
     e20:	0ff6      	lsrs	r6, r6, #31
    return ctl ^ 1;
     e22:	407e      	eors	r6, r7
		q |= ctl << i;
     e24:	0232      	lsls	r2, r6, #8
		x -= (-ctl) & d;
     e26:	4276      	negs	r6, r6
     e28:	4006      	ands	r6, r0
     e2a:	1b9e      	subs	r6, r3, r6
		d >>= 1;
     e2c:	4663      	mov	r3, ip
		q |= ctl << i;
     e2e:	430a      	orrs	r2, r1
		d >>= 1;
     e30:	0a59      	lsrs	r1, r3, #9
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e32:	0033      	movs	r3, r6
     e34:	404b      	eors	r3, r1
     e36:	469b      	mov	fp, r3
     e38:	000b      	movs	r3, r1
     e3a:	465d      	mov	r5, fp
    z = y - x;
     e3c:	1a70      	subs	r0, r6, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e3e:	4043      	eors	r3, r0
     e40:	402b      	ands	r3, r5
     e42:	4058      	eors	r0, r3
     e44:	0fc0      	lsrs	r0, r0, #31
    return ctl ^ 1;
     e46:	4078      	eors	r0, r7
		q |= ctl << i;
     e48:	01c3      	lsls	r3, r0, #7
		x -= (-ctl) & d;
     e4a:	4240      	negs	r0, r0
     e4c:	4008      	ands	r0, r1
     e4e:	1a30      	subs	r0, r6, r0
		q |= ctl << i;
     e50:	4313      	orrs	r3, r2
		d >>= 1;
     e52:	4662      	mov	r2, ip
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e54:	0006      	movs	r6, r0
     e56:	0a92      	lsrs	r2, r2, #10
     e58:	4056      	eors	r6, r2
     e5a:	46b3      	mov	fp, r6
     e5c:	0016      	movs	r6, r2
     e5e:	465d      	mov	r5, fp
    z = y - x;
     e60:	1a81      	subs	r1, r0, r2
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e62:	404e      	eors	r6, r1
     e64:	402e      	ands	r6, r5
     e66:	4071      	eors	r1, r6
     e68:	0fc9      	lsrs	r1, r1, #31
    return ctl ^ 1;
     e6a:	4079      	eors	r1, r7
		q |= ctl << i;
     e6c:	018e      	lsls	r6, r1, #6
		x -= (-ctl) & d;
     e6e:	4249      	negs	r1, r1
     e70:	4011      	ands	r1, r2
     e72:	1a41      	subs	r1, r0, r1
		q |= ctl << i;
     e74:	431e      	orrs	r6, r3
		d >>= 1;
     e76:	4663      	mov	r3, ip
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e78:	0008      	movs	r0, r1
     e7a:	0adb      	lsrs	r3, r3, #11
     e7c:	4058      	eors	r0, r3
     e7e:	4683      	mov	fp, r0
     e80:	0018      	movs	r0, r3
     e82:	465d      	mov	r5, fp
    z = y - x;
     e84:	1aca      	subs	r2, r1, r3
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e86:	4050      	eors	r0, r2
     e88:	4028      	ands	r0, r5
     e8a:	4042      	eors	r2, r0
     e8c:	0fd2      	lsrs	r2, r2, #31
    return ctl ^ 1;
     e8e:	407a      	eors	r2, r7
		q |= ctl << i;
     e90:	0150      	lsls	r0, r2, #5
		x -= (-ctl) & d;
     e92:	4252      	negs	r2, r2
     e94:	401a      	ands	r2, r3
     e96:	1a8a      	subs	r2, r1, r2
		d >>= 1;
     e98:	4663      	mov	r3, ip
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     e9a:	0011      	movs	r1, r2
     e9c:	0b1b      	lsrs	r3, r3, #12
     e9e:	4059      	eors	r1, r3
     ea0:	468b      	mov	fp, r1
     ea2:	0019      	movs	r1, r3
     ea4:	465d      	mov	r5, fp
		q |= ctl << i;
     ea6:	4330      	orrs	r0, r6
    z = y - x;
     ea8:	1ad6      	subs	r6, r2, r3
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     eaa:	4071      	eors	r1, r6
     eac:	4029      	ands	r1, r5
     eae:	404e      	eors	r6, r1
     eb0:	0ff6      	lsrs	r6, r6, #31
    return ctl ^ 1;
     eb2:	407e      	eors	r6, r7
     eb4:	0131      	lsls	r1, r6, #4
		x -= (-ctl) & d;
     eb6:	4276      	negs	r6, r6
     eb8:	4033      	ands	r3, r6
     eba:	1ad3      	subs	r3, r2, r3
		d >>= 1;
     ebc:	4662      	mov	r2, ip
		q |= ctl << i;
     ebe:	4308      	orrs	r0, r1
		d >>= 1;
     ec0:	0b51      	lsrs	r1, r2, #13
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     ec2:	001a      	movs	r2, r3
     ec4:	404a      	eors	r2, r1
     ec6:	4693      	mov	fp, r2
     ec8:	000a      	movs	r2, r1
     eca:	465d      	mov	r5, fp
    z = y - x;
     ecc:	1a5e      	subs	r6, r3, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     ece:	4072      	eors	r2, r6
     ed0:	402a      	ands	r2, r5
     ed2:	4056      	eors	r6, r2
     ed4:	0ff6      	lsrs	r6, r6, #31
    return ctl ^ 1;
     ed6:	407e      	eors	r6, r7
		q |= ctl << i;
     ed8:	00f2      	lsls	r2, r6, #3
		x -= (-ctl) & d;
     eda:	4276      	negs	r6, r6
     edc:	4031      	ands	r1, r6
     ede:	1a5b      	subs	r3, r3, r1
		q |= ctl << i;
     ee0:	4310      	orrs	r0, r2
		d >>= 1;
     ee2:	4662      	mov	r2, ip
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     ee4:	0019      	movs	r1, r3
     ee6:	0b92      	lsrs	r2, r2, #14
     ee8:	4051      	eors	r1, r2
     eea:	468b      	mov	fp, r1
     eec:	0011      	movs	r1, r2
     eee:	465d      	mov	r5, fp
    z = y - x;
     ef0:	1a9e      	subs	r6, r3, r2
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     ef2:	4071      	eors	r1, r6
     ef4:	4029      	ands	r1, r5
     ef6:	404e      	eors	r6, r1
     ef8:	0ff6      	lsrs	r6, r6, #31
    return ctl ^ 1;
     efa:	407e      	eors	r6, r7
		q |= ctl << i;
     efc:	00b1      	lsls	r1, r6, #2
		x -= (-ctl) & d;
     efe:	4276      	negs	r6, r6
     f00:	4032      	ands	r2, r6
     f02:	1a9b      	subs	r3, r3, r2
		d >>= 1;
     f04:	4662      	mov	r2, ip
     f06:	0bd6      	lsrs	r6, r2, #15
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     f08:	001a      	movs	r2, r3
     f0a:	4072      	eors	r2, r6
     f0c:	4694      	mov	ip, r2
     f0e:	0032      	movs	r2, r6
     f10:	4665      	mov	r5, ip
		q |= ctl << i;
     f12:	4308      	orrs	r0, r1
    z = y - x;
     f14:	1b99      	subs	r1, r3, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     f16:	404a      	eors	r2, r1
     f18:	402a      	ands	r2, r5
     f1a:	404a      	eors	r2, r1
     f1c:	0fd2      	lsrs	r2, r2, #31
    return ctl ^ 1;
     f1e:	407a      	eors	r2, r7
     f20:	0051      	lsls	r1, r2, #1
		x -= (-ctl) & d;
     f22:	4252      	negs	r2, r2
     f24:	4032      	ands	r2, r6
		q |= ctl << i;
     f26:	4301      	orrs	r1, r0
		d >>= 1;
     f28:	f64f 76ff 	movw	r6, #65535	; 0xffff
		x -= (-ctl) & d;
     f2c:	1a98      	subs	r0, r3, r2
		d >>= 1;
     f2e:	4653      	mov	r3, sl
     f30:	401e      	ands	r6, r3
    z = y - x;
     f32:	1b83      	subs	r3, r0, r6
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     f34:	4070      	eors	r0, r6
     f36:	4684      	mov	ip, r0
    q = x ^ y;
     f38:	4655      	mov	r5, sl
     f3a:	9a00      	ldr	r2, [sp, #0]
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     f3c:	0030      	movs	r0, r6
    q = x ^ y;
     f3e:	406a      	eors	r2, r5
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     f40:	4665      	mov	r5, ip
     f42:	4058      	eors	r0, r3
     f44:	4028      	ands	r0, r5
     f46:	4058      	eors	r0, r3
     f48:	0fc0      	lsrs	r0, r0, #31
    return ctl ^ 1;
     f4a:	4078      	eors	r0, r7
		q |= ctl << i;
     f4c:	4308      	orrs	r0, r1
	q = MUX(EQ(b, a0), 0x7FFF, q - 1 + ((q - 1) >> 31));
     f4e:	3801      	subs	r0, #1
     f50:	0fc3      	lsrs	r3, r0, #31
     f52:	1818      	adds	r0, r3, r0
    return NOT((q | -q) >> 31);
     f54:	4253      	negs	r3, r2
     f56:	431a      	orrs	r2, r3
    return y ^ (-ctl & (x ^ y));
     f58:	f647 73ff 	movw	r3, #32767	; 0x7fff
    return NOT((q | -q) >> 31);
     f5c:	0fd2      	lsrs	r2, r2, #31
    return y ^ (-ctl & (x ^ y));
     f5e:	4043      	eors	r3, r0
     f60:	3a01      	subs	r2, #1
     f62:	401a      	ands	r2, r3
		zl &= 0x7FFF;
     f64:	4643      	mov	r3, r8
     f66:	9300      	str	r3, [sp, #0]
     f68:	9b01      	ldr	r3, [sp, #4]
     f6a:	4042      	eors	r2, r0
     f6c:	2602      	movs	r6, #2
	tb = 1;
     f6e:	2001      	movs	r0, #1
	cc = 0;
     f70:	2100      	movs	r1, #0
		zl &= 0x7FFF;
     f72:	f647 79ff 	movw	r9, #32767	; 0x7fff
     f76:	4693      	mov	fp, r2
     f78:	469c      	mov	ip, r3
		mw = m[u];
     f7a:	4663      	mov	r3, ip
     f7c:	5b9d      	ldrh	r5, [r3, r6]
		zl = MUL15(mw, q) + cc;
     f7e:	465b      	mov	r3, fp
     f80:	436b      	muls	r3, r5
     f82:	1859      	adds	r1, r3, r1
		xw = x[u];
     f84:	5ba3      	ldrh	r3, [r4, r6]
		cc = zl >> 15;
     f86:	0bca      	lsrs	r2, r1, #15
		xw = x[u];
     f88:	4698      	mov	r8, r3
		zl &= 0x7FFF;
     f8a:	464b      	mov	r3, r9
     f8c:	4019      	ands	r1, r3
		nxw = xw - zl;
     f8e:	4643      	mov	r3, r8
     f90:	1a5b      	subs	r3, r3, r1
		cc += nxw >> 31;
     f92:	0fd9      	lsrs	r1, r3, #31
     f94:	1889      	adds	r1, r1, r2
		nxw &= 0x7FFF;
     f96:	464a      	mov	r2, r9
     f98:	4013      	ands	r3, r2
    q = x ^ y;
     f9a:	002a      	movs	r2, r5
    z = y - x;
     f9c:	1aed      	subs	r5, r5, r3
    q = x ^ y;
     f9e:	405a      	eors	r2, r3
		x[u] = nxw;
     fa0:	53a3      	strh	r3, [r4, r6]
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     fa2:	406b      	eors	r3, r5
     fa4:	4013      	ands	r3, r2
    return NOT((q | -q) >> 31);
     fa6:	4252      	negs	r2, r2
     fa8:	0fd2      	lsrs	r2, r2, #31
     faa:	4690      	mov	r8, r2
    return y ^ (-ctl & (x ^ y));
     fac:	2201      	movs	r2, #1
     fae:	4252      	negs	r2, r2
     fb0:	4692      	mov	sl, r2
     fb2:	44d0      	add	r8, sl
     fb4:	4642      	mov	r2, r8
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     fb6:	406b      	eors	r3, r5
     fb8:	0fdb      	lsrs	r3, r3, #31
    return y ^ (-ctl & (x ^ y));
     fba:	4058      	eors	r0, r3
     fbc:	4010      	ands	r0, r2
     fbe:	4058      	eors	r0, r3
	for (u = 1; u <= mlen; u ++) {
     fc0:	9b00      	ldr	r3, [sp, #0]
     fc2:	3701      	adds	r7, #1
     fc4:	3602      	adds	r6, #2
     fc6:	42bb      	cmp	r3, r7
     fc8:	d2d7      	bcs.n	f7a <br_i15_muladd_small+0x4da>
    z = y - x;
     fca:	9f02      	ldr	r7, [sp, #8]
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     fcc:	000a      	movs	r2, r1
    z = y - x;
     fce:	003b      	movs	r3, r7
     fd0:	1a7e      	subs	r6, r7, r1
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     fd2:	404b      	eors	r3, r1
     fd4:	4072      	eors	r2, r6
     fd6:	401a      	ands	r2, r3
     fd8:	4072      	eors	r2, r6
    z = y - x;
     fda:	003e      	movs	r6, r7
     fdc:	1bc9      	subs	r1, r1, r7
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
     fde:	404e      	eors	r6, r1
     fe0:	401e      	ands	r6, r3
	br_i15_add(x, m, over);
     fe2:	f240 13ed 	movw	r3, #493	; 0x1ed
     fe6:	404e      	eors	r6, r1
     fe8:	0ff6      	lsrs	r6, r6, #31
     fea:	0fd2      	lsrs	r2, r2, #31
     fec:	4661      	mov	r1, ip
	under = ~over & (tb | LT(cc, hi));
     fee:	4306      	orrs	r6, r0
	br_i15_add(x, m, over);
     ff0:	f2c0 0300 	movt	r3, #0
     ff4:	0020      	movs	r0, r4
     ff6:	4665      	mov	r5, ip
	under = ~over & (tb | LT(cc, hi));
     ff8:	4396      	bics	r6, r2
	br_i15_add(x, m, over);
     ffa:	4798      	blx	r3
	br_i15_sub(x, m, under);
     ffc:	f241 0361 	movw	r3, #4193	; 0x1061
    1000:	0032      	movs	r2, r6
    1002:	0029      	movs	r1, r5
    1004:	0020      	movs	r0, r4
    1006:	f2c0 0300 	movt	r3, #0
    100a:	4798      	blx	r3
    100c:	e62b      	b.n	c66 <br_i15_muladd_small+0x1c6>
		memmove(x + 2, x + 1, (mlen - 1) * sizeof *x);
    100e:	f642 63e5 	movw	r3, #12005	; 0x2ee5
    1012:	1c81      	adds	r1, r0, #2
    1014:	f2c0 0300 	movt	r3, #0
    1018:	1eba      	subs	r2, r7, #2
    101a:	3004      	adds	r0, #4
    101c:	4798      	blx	r3
		x[1] = z;
    101e:	464b      	mov	r3, r9
    1020:	8063      	strh	r3, [r4, #2]
		a = (a0 << 15) + x[mlen];
    1022:	465b      	mov	r3, fp
    1024:	8819      	ldrh	r1, [r3, #0]
		b = m[mlen];
    1026:	9b01      	ldr	r3, [sp, #4]
		a = (a0 << 15) + x[mlen];
    1028:	03e8      	lsls	r0, r5, #15
		b = m[mlen];
    102a:	5bdb      	ldrh	r3, [r3, r7]
		a = (a0 << 15) + x[mlen];
    102c:	1841      	adds	r1, r0, r1
		b = m[mlen];
    102e:	469a      	mov	sl, r3
		a0 = x[mlen];
    1030:	9500      	str	r5, [sp, #0]
    1032:	e65b      	b.n	cec <br_i15_muladd_small+0x24c>

00001034 <br_i15_ninv15>:
#include "inner.h"

/* see inner.h */
uint16_t
br_i15_ninv15(uint16_t x)
{
    1034:	b510      	push	{r4, lr}
	uint32_t y;

	y = 2 - x;
    1036:	2402      	movs	r4, #2
	y = MUL15(y, 2 - MUL15(x, y));
    1038:	0002      	movs	r2, r0
	y = 2 - x;
    103a:	1a21      	subs	r1, r4, r0
	y = MUL15(y, 2 - MUL15(x, y));
    103c:	434a      	muls	r2, r1
    103e:	1aa2      	subs	r2, r4, r2
    1040:	4351      	muls	r1, r2
	y = MUL15(y, 2 - MUL15(x, y));
    1042:	000b      	movs	r3, r1
    1044:	4343      	muls	r3, r0
    1046:	1ae3      	subs	r3, r4, r3
    1048:	434b      	muls	r3, r1
	y = MUL15(y, 2 - MUL15(x, y));
    104a:	001a      	movs	r2, r3
    104c:	4342      	muls	r2, r0
    104e:	1b12      	subs	r2, r2, r4
	return MUX(x & 1, -y, 0) & 0x7FFF;
    1050:	4353      	muls	r3, r2
    1052:	07c0      	lsls	r0, r0, #31
    return y ^ (-ctl & (x ^ y));
    1054:	17c0      	asrs	r0, r0, #31
    1056:	4018      	ands	r0, r3
    1058:	f647 73ff 	movw	r3, #32767	; 0x7fff
    105c:	4018      	ands	r0, r3
}
    105e:	bd10      	pop	{r4, pc}

00001060 <br_i15_sub>:
#include "inner.h"

/* see inner.h */
uint32_t
br_i15_sub(uint16_t *a, const uint16_t *b, uint32_t ctl)
{
    1060:	b5f0      	push	{r4, r5, r6, r7, lr}
    1062:	46c6      	mov	lr, r8
	uint32_t cc;
	size_t u, m;

	cc = 0;
	m = (a[0] + 31) >> 4;
    1064:	8807      	ldrh	r7, [r0, #0]
{
    1066:	b500      	push	{lr}
	m = (a[0] + 31) >> 4;
    1068:	371f      	adds	r7, #31
    106a:	113f      	asrs	r7, r7, #4
	for (u = 1; u < m; u ++) {
    106c:	2f01      	cmp	r7, #1
    106e:	d019      	beq.n	10a4 <br_i15_sub+0x44>
    1070:	4253      	negs	r3, r2
    1072:	4698      	mov	r8, r3
    1074:	2502      	movs	r5, #2
    1076:	2600      	movs	r6, #0

		aw = a[u];
		bw = b[u];
		naw = aw - bw - cc;
		cc = naw >> 31;
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
    1078:	f647 7cff 	movw	ip, #32767	; 0x7fff
    107c:	007f      	lsls	r7, r7, #1
    107e:	4664      	mov	r4, ip
		aw = a[u];
    1080:	5b42      	ldrh	r2, [r0, r5]
		bw = b[u];
    1082:	5b4b      	ldrh	r3, [r1, r5]
		naw = aw - bw - cc;
    1084:	1ad3      	subs	r3, r2, r3
    1086:	1b9b      	subs	r3, r3, r6
		cc = naw >> 31;
    1088:	0fde      	lsrs	r6, r3, #31
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
    108a:	4023      	ands	r3, r4
    108c:	4644      	mov	r4, r8
    108e:	4053      	eors	r3, r2
    1090:	4023      	ands	r3, r4
    1092:	4053      	eors	r3, r2
    1094:	5343      	strh	r3, [r0, r5]
    1096:	3502      	adds	r5, #2
	for (u = 1; u < m; u ++) {
    1098:	42af      	cmp	r7, r5
    109a:	d1f0      	bne.n	107e <br_i15_sub+0x1e>
	}
	return cc;
}
    109c:	0030      	movs	r0, r6
    109e:	bc04      	pop	{r2}
    10a0:	4690      	mov	r8, r2
    10a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cc = 0;
    10a4:	2600      	movs	r6, #0
	return cc;
    10a6:	e7f9      	b.n	109c <br_i15_sub+0x3c>

000010a8 <br_i15_to_monty>:
#include "inner.h"

/* see inner.h */
void
br_i15_to_monty(uint16_t *x, const uint16_t *m)
{
    10a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned k;

	for (k = (m[0] + 15) >> 4; k > 0; k --) {
    10aa:	880c      	ldrh	r4, [r1, #0]
{
    10ac:	0007      	movs	r7, r0
	for (k = (m[0] + 15) >> 4; k > 0; k --) {
    10ae:	340f      	adds	r4, #15
    10b0:	1124      	asrs	r4, r4, #4
{
    10b2:	000e      	movs	r6, r1
	for (k = (m[0] + 15) >> 4; k > 0; k --) {
    10b4:	b154      	cbz	r4, 10cc <br_i15_to_monty+0x24>
    10b6:	f640 25a1 	movw	r5, #2721	; 0xaa1
    10ba:	f2c0 0500 	movt	r5, #0
		br_i15_muladd_small(x, 0, m);
    10be:	0032      	movs	r2, r6
    10c0:	2100      	movs	r1, #0
    10c2:	0038      	movs	r0, r7
	for (k = (m[0] + 15) >> 4; k > 0; k --) {
    10c4:	3c01      	subs	r4, #1
		br_i15_muladd_small(x, 0, m);
    10c6:	47a8      	blx	r5
	for (k = (m[0] + 15) >> 4; k > 0; k --) {
    10c8:	2c00      	cmp	r4, #0
    10ca:	d1f8      	bne.n	10be <br_i15_to_monty+0x16>
	}
}
    10cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10ce:	46c0      	nop			; (mov r8, r8)

000010d0 <br_mgf1_xor>:

/* see inner.h */
void
br_mgf1_xor(void *data, size_t len,
	const br_hash_class *dig, const void *seed, size_t seed_len)
{
    10d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10d2:	4645      	mov	r5, r8
    10d4:	46de      	mov	lr, fp
    10d6:	4657      	mov	r7, sl
    10d8:	464e      	mov	r6, r9
    10da:	b5e0      	push	{r5, r6, r7, lr}
    10dc:	b0c7      	sub	sp, #284	; 0x11c
    10de:	9301      	str	r3, [sp, #4]

static inline size_t
br_digest_size(const br_hash_class *digest_class)
{
    return (size_t)(digest_class->desc >> BR_HASHDESC_OUT_OFF)
           & BR_HASHDESC_OUT_MASK;
    10e0:	6853      	ldr	r3, [r2, #4]
    10e2:	0005      	movs	r5, r0
    10e4:	045b      	lsls	r3, r3, #17
    10e6:	0e5b      	lsrs	r3, r3, #25
    10e8:	4688      	mov	r8, r1
    10ea:	4692      	mov	sl, r2
    10ec:	469b      	mov	fp, r3
	size_t u, hlen;
	uint32_t c;

	buf = (unsigned char *)data;
	hlen = br_digest_size(dig);
	for (u = 0, c = 0; u < len; u += hlen, c ++) {
    10ee:	2900      	cmp	r1, #0
    10f0:	d047      	beq.n	1182 <br_mgf1_xor+0xb2>
    10f2:	465b      	mov	r3, fp
    10f4:	465a      	mov	r2, fp
    10f6:	1e5e      	subs	r6, r3, #1
    10f8:	2301      	movs	r3, #1
    10fa:	f240 0900 	movw	r9, #0
    10fe:	1a9b      	subs	r3, r3, r2
    1100:	af02      	add	r7, sp, #8
    1102:	9300      	str	r3, [sp, #0]
    1104:	9b00      	ldr	r3, [sp, #0]
		br_hash_compat_context hc;
		unsigned char tmp[64];
		size_t v;

		hc.vtable = dig;
		dig->init(&hc.vtable);
    1106:	a812      	add	r0, sp, #72	; 0x48
    1108:	18f4      	adds	r4, r6, r3
		hc.vtable = dig;
    110a:	4653      	mov	r3, sl
    110c:	9312      	str	r3, [sp, #72]	; 0x48
		dig->init(&hc.vtable);
    110e:	689b      	ldr	r3, [r3, #8]
    1110:	4798      	blx	r3
		dig->update(&hc.vtable, seed, seed_len);
    1112:	4653      	mov	r3, sl
    1114:	9a50      	ldr	r2, [sp, #320]	; 0x140
    1116:	9901      	ldr	r1, [sp, #4]
    1118:	a812      	add	r0, sp, #72	; 0x48
    111a:	68db      	ldr	r3, [r3, #12]
    111c:	4798      	blx	r3
    buf[0] = (unsigned char)(x >> 24);
    111e:	464b      	mov	r3, r9
    1120:	aa02      	add	r2, sp, #8
    1122:	0e1b      	lsrs	r3, r3, #24
    1124:	7013      	strb	r3, [r2, #0]
    buf[1] = (unsigned char)(x >> 16);
    1126:	464b      	mov	r3, r9
    1128:	0c1b      	lsrs	r3, r3, #16
    112a:	7053      	strb	r3, [r2, #1]
    buf[2] = (unsigned char)(x >> 8);
    112c:	464b      	mov	r3, r9
    112e:	0a1b      	lsrs	r3, r3, #8
    1130:	7093      	strb	r3, [r2, #2]
    buf[3] = (unsigned char)x;
    1132:	0013      	movs	r3, r2
    1134:	464a      	mov	r2, r9
		br_enc32be(tmp, c);
		dig->update(&hc.vtable, tmp, 4);
    1136:	0019      	movs	r1, r3
    1138:	70da      	strb	r2, [r3, #3]
    113a:	4653      	mov	r3, sl
    113c:	2204      	movs	r2, #4
    113e:	a812      	add	r0, sp, #72	; 0x48
    1140:	68db      	ldr	r3, [r3, #12]
    1142:	4798      	blx	r3
		dig->out(&hc.vtable, tmp);
    1144:	4653      	mov	r3, sl
    1146:	a902      	add	r1, sp, #8
    1148:	691b      	ldr	r3, [r3, #16]
    114a:	a812      	add	r0, sp, #72	; 0x48
    114c:	4798      	blx	r3
		for (v = 0; v < hlen; v ++) {
    114e:	465b      	mov	r3, fp
    1150:	b16b      	cbz	r3, 116e <br_mgf1_xor+0x9e>
    1152:	4641      	mov	r1, r8
			if ((u + v) >= len) {
    1154:	45a0      	cmp	r8, r4
    1156:	d803      	bhi.n	1160 <br_mgf1_xor+0x90>
    1158:	e009      	b.n	116e <br_mgf1_xor+0x9e>
    115a:	3401      	adds	r4, #1
    115c:	42a1      	cmp	r1, r4
    115e:	d905      	bls.n	116c <br_mgf1_xor+0x9c>
				break;
			}
			buf[u + v] ^= tmp[v];
    1160:	5d2b      	ldrb	r3, [r5, r4]
    1162:	5d3a      	ldrb	r2, [r7, r4]
    1164:	4053      	eors	r3, r2
    1166:	552b      	strb	r3, [r5, r4]
		for (v = 0; v < hlen; v ++) {
    1168:	42a6      	cmp	r6, r4
    116a:	d1f6      	bne.n	115a <br_mgf1_xor+0x8a>
    116c:	4688      	mov	r8, r1
    116e:	465b      	mov	r3, fp
	for (u = 0, c = 0; u < len; u += hlen, c ++) {
    1170:	f240 0c01 	movw	ip, #1
    1174:	1aff      	subs	r7, r7, r3
    1176:	9b00      	ldr	r3, [sp, #0]
    1178:	445e      	add	r6, fp
    117a:	18f3      	adds	r3, r6, r3
    117c:	44e1      	add	r9, ip
    117e:	4543      	cmp	r3, r8
    1180:	d3c0      	bcc.n	1104 <br_mgf1_xor+0x34>
		}
	}
}
    1182:	b047      	add	sp, #284	; 0x11c
    1184:	bc3c      	pop	{r2, r3, r4, r5}
    1186:	4690      	mov	r8, r2
    1188:	4699      	mov	r9, r3
    118a:	46a2      	mov	sl, r4
    118c:	46ab      	mov	fp, r5
    118e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001190 <br_rsa_i15_oaep_encrypt>:
	const br_prng_class **rnd, const br_hash_class *dig,
	const void *label, size_t label_len,
	const br_rsa_public_key *pk,
	void *dst, size_t dst_max_len,
	const void *src, size_t src_len)
{
    1190:	b510      	push	{r4, lr}
    1192:	b086      	sub	sp, #24
	size_t dlen;

	dlen = br_rsa_oaep_pad(rnd, dig, label, label_len,
    1194:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    1196:	9404      	str	r4, [sp, #16]
    1198:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    119a:	9403      	str	r4, [sp, #12]
    119c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    119e:	9402      	str	r4, [sp, #8]
    11a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    11a2:	9401      	str	r4, [sp, #4]
    11a4:	9c08      	ldr	r4, [sp, #32]
    11a6:	9400      	str	r4, [sp, #0]
    11a8:	f241 24d5 	movw	r4, #4821	; 0x12d5
    11ac:	f2c0 0400 	movt	r4, #0
    11b0:	47a0      	blx	r4
    11b2:	0004      	movs	r4, r0
		pk, dst, dst_max_len, src, src_len);
	if (dlen == 0) {
    11b4:	b148      	cbz	r0, 11ca <br_rsa_i15_oaep_encrypt+0x3a>
		return 0;
	}
	return dlen & -(size_t)br_rsa_i15_public((unsigned char*)dst, dlen, pk);
    11b6:	f241 13d1 	movw	r3, #4561	; 0x11d1
    11ba:	0001      	movs	r1, r0
    11bc:	9a08      	ldr	r2, [sp, #32]
    11be:	9809      	ldr	r0, [sp, #36]	; 0x24
    11c0:	f2c0 0300 	movt	r3, #0
    11c4:	4798      	blx	r3
    11c6:	4240      	negs	r0, r0
    11c8:	4004      	ands	r4, r0
}
    11ca:	0020      	movs	r0, r4
    11cc:	b006      	add	sp, #24
    11ce:	bd10      	pop	{r4, pc}

000011d0 <br_rsa_i15_public>:

/* see bearssl_rsa.h */
uint32_t
br_rsa_i15_public(unsigned char *x, size_t xlen,
	const br_rsa_public_key *pk)
{
    11d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11d2:	464e      	mov	r6, r9
    11d4:	4645      	mov	r5, r8
    11d6:	46de      	mov	lr, fp
    11d8:	4657      	mov	r7, sl
    11da:	b5e0      	push	{r5, r6, r7, lr}
    11dc:	4c3c      	ldr	r4, [pc, #240]	; (12d0 <br_rsa_i15_public+0x100>)
	/*
	 * Get the actual length of the modulus, and see if it fits within
	 * our stack buffer. We also check that the length of x[] is valid.
	 */
	n = pk->n;
	nlen = pk->nlen;
    11de:	6853      	ldr	r3, [r2, #4]
{
    11e0:	44a5      	add	sp, r4
    11e2:	000d      	movs	r5, r1
    11e4:	0006      	movs	r6, r0
    11e6:	0014      	movs	r4, r2
	n = pk->n;
    11e8:	6811      	ldr	r1, [r2, #0]
	while (nlen > 0 && *n == 0) {
    11ea:	b923      	cbnz	r3, 11f6 <br_rsa_i15_public+0x26>
    11ec:	e063      	b.n	12b6 <br_rsa_i15_public+0xe6>
		n ++;
		nlen --;
    11ee:	3b01      	subs	r3, #1
		n ++;
    11f0:	3101      	adds	r1, #1
	while (nlen > 0 && *n == 0) {
    11f2:	2b00      	cmp	r3, #0
    11f4:	d05f      	beq.n	12b6 <br_rsa_i15_public+0xe6>
    11f6:	780a      	ldrb	r2, [r1, #0]
    11f8:	2a00      	cmp	r2, #0
    11fa:	d0f8      	beq.n	11ee <br_rsa_i15_public+0x1e>
	}
	if (nlen == 0 || nlen > (BR_MAX_RSA_SIZE >> 3) || xlen != nlen) {
    11fc:	f240 10ff 	movw	r0, #511	; 0x1ff
    1200:	1e5a      	subs	r2, r3, #1
		return 0;
    1202:	f240 0800 	movw	r8, #0
	if (nlen == 0 || nlen > (BR_MAX_RSA_SIZE >> 3) || xlen != nlen) {
    1206:	4282      	cmp	r2, r0
    1208:	d857      	bhi.n	12ba <br_rsa_i15_public+0xea>
    120a:	429d      	cmp	r5, r3
    120c:	d155      	bne.n	12ba <br_rsa_i15_public+0xea>
	}
	z = (long)nlen << 3;
    120e:	00eb      	lsls	r3, r5, #3
	fwlen = 1;
    1210:	2201      	movs	r2, #1
    1212:	e000      	b.n	1216 <br_rsa_i15_public+0x46>
	while (z > 0) {
		z -= 15;
		fwlen ++;
    1214:	0002      	movs	r2, r0
		z -= 15;
    1216:	3b0f      	subs	r3, #15
		fwlen ++;
    1218:	1c50      	adds	r0, r2, #1
	while (z > 0) {
    121a:	2b00      	cmp	r3, #0
    121c:	dcfa      	bgt.n	1214 <br_rsa_i15_public+0x44>
	}
	/*
	 * Round up length to an even number.
	 */
	fwlen += (fwlen & 1);
    121e:	f240 0801 	movw	r8, #1
    1222:	4643      	mov	r3, r8
    1224:	3202      	adds	r2, #2
    1226:	439a      	bics	r2, r3
    1228:	0017      	movs	r7, r2
	 */
	m = tmp;
	if (((uintptr_t)m & 2) == 0) {
		m ++;
	}
	a = m + fwlen;
    122a:	0053      	lsls	r3, r2, #1
    122c:	2216      	movs	r2, #22
    122e:	446a      	add	r2, sp
    1230:	4691      	mov	r9, r2
    1232:	4499      	add	r9, r3
	t = m + 2 * fwlen;

	/*
	 * Decode the modulus.
	 */
	br_i15_decode(m, n, nlen);
    1234:	2316      	movs	r3, #22
    1236:	446b      	add	r3, sp
    1238:	0018      	movs	r0, r3
    123a:	f240 432d 	movw	r3, #1069	; 0x42d
    123e:	002a      	movs	r2, r5
    1240:	f2c0 0300 	movt	r3, #0
    1244:	4798      	blx	r3
	m0i = br_i15_ninv15(m[1]);
    1246:	ab05      	add	r3, sp, #20
    1248:	8898      	ldrh	r0, [r3, #4]
    124a:	f241 0335 	movw	r3, #4149	; 0x1035
    124e:	f2c0 0300 	movt	r3, #0
    1252:	4798      	blx	r3

	/*
	 * Note: if m[] is even, then m0i == 0. Otherwise, m0i must be
	 * an odd integer.
	 */
	r = m0i & 1;
    1254:	4643      	mov	r3, r8
    1256:	4003      	ands	r3, r0
    1258:	4698      	mov	r8, r3

	/*
	 * Decode x[] into a[]; we also check that its value is proper.
	 */
	r &= br_i15_decode_mod(a, x, xlen, m);
    125a:	f240 2bed 	movw	fp, #749	; 0x2ed
    125e:	2316      	movs	r3, #22
	m0i = br_i15_ninv15(m[1]);
    1260:	4682      	mov	sl, r0
	r &= br_i15_decode_mod(a, x, xlen, m);
    1262:	446b      	add	r3, sp
    1264:	002a      	movs	r2, r5
    1266:	0031      	movs	r1, r6
    1268:	4648      	mov	r0, r9
    126a:	f2c0 0b00 	movt	fp, #0
    126e:	47d8      	blx	fp
    1270:	4643      	mov	r3, r8

	/*
	 * Compute the modular exponentiation.
	 */
	br_i15_modpow_opt(a, pk->e, pk->elen, m, m0i, t, TLEN - 2 * fwlen);
    1272:	f240 4c50 	movw	ip, #1104	; 0x450
	r &= br_i15_decode_mod(a, x, xlen, m);
    1276:	4003      	ands	r3, r0
    1278:	4698      	mov	r8, r3
	br_i15_modpow_opt(a, pk->e, pk->elen, m, m0i, t, TLEN - 2 * fwlen);
    127a:	007b      	lsls	r3, r7, #1
    127c:	425b      	negs	r3, r3
    127e:	4463      	add	r3, ip
    1280:	68e2      	ldr	r2, [r4, #12]
    1282:	68a1      	ldr	r1, [r4, #8]
    1284:	9302      	str	r3, [sp, #8]
	t = m + 2 * fwlen;
    1286:	2316      	movs	r3, #22
    1288:	446b      	add	r3, sp
    128a:	469c      	mov	ip, r3
	br_i15_modpow_opt(a, pk->e, pk->elen, m, m0i, t, TLEN - 2 * fwlen);
    128c:	f240 545d 	movw	r4, #1373	; 0x55d
    1290:	4653      	mov	r3, sl
	t = m + 2 * fwlen;
    1292:	00bf      	lsls	r7, r7, #2
    1294:	4467      	add	r7, ip
	br_i15_modpow_opt(a, pk->e, pk->elen, m, m0i, t, TLEN - 2 * fwlen);
    1296:	9300      	str	r3, [sp, #0]
    1298:	9701      	str	r7, [sp, #4]
    129a:	4663      	mov	r3, ip
    129c:	4648      	mov	r0, r9
    129e:	f2c0 0400 	movt	r4, #0
    12a2:	47a0      	blx	r4

	/*
	 * Encode the result.
	 */
	br_i15_encode(x, xlen, a);
    12a4:	f240 437d 	movw	r3, #1149	; 0x47d
    12a8:	464a      	mov	r2, r9
    12aa:	0029      	movs	r1, r5
    12ac:	0030      	movs	r0, r6
    12ae:	f2c0 0300 	movt	r3, #0
    12b2:	4798      	blx	r3
	return r;
    12b4:	e001      	b.n	12ba <br_rsa_i15_public+0xea>
		return 0;
    12b6:	f240 0800 	movw	r8, #0
}
    12ba:	4640      	mov	r0, r8
    12bc:	f640 03bc 	movw	r3, #2236	; 0x8bc
    12c0:	449d      	add	sp, r3
    12c2:	bc3c      	pop	{r2, r3, r4, r5}
    12c4:	4690      	mov	r8, r2
    12c6:	4699      	mov	r9, r3
    12c8:	46a2      	mov	sl, r4
    12ca:	46ab      	mov	fp, r5
    12cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	fffff744 	.word	0xfffff744

000012d4 <br_rsa_oaep_pad>:
br_rsa_oaep_pad(const br_prng_class **rnd, const br_hash_class *dig,
	const void *label, size_t label_len,
	const br_rsa_public_key *pk,
	void *dst, size_t dst_max_len,
	const void *src, size_t src_len)
{
    12d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12d6:	464e      	mov	r6, r9
    12d8:	4657      	mov	r7, sl
    12da:	4645      	mov	r5, r8
    12dc:	46de      	mov	lr, fp
    12de:	b5e0      	push	{r5, r6, r7, lr}
    12e0:	b0bb      	sub	sp, #236	; 0xec
    12e2:	469a      	mov	sl, r3
    12e4:	9b44      	ldr	r3, [sp, #272]	; 0x110
    12e6:	4680      	mov	r8, r0
	hlen = br_digest_size(dig);

	/*
	 * Compute actual modulus length (in bytes).
	 */
	k = pk->nlen;
    12e8:	685c      	ldr	r4, [r3, #4]
{
    12ea:	000e      	movs	r6, r1
    12ec:	4691      	mov	r9, r2
	while (k > 0 && pk->n[k - 1] == 0) {
    12ee:	b15c      	cbz	r4, 1308 <br_rsa_oaep_pad+0x34>
    12f0:	6818      	ldr	r0, [r3, #0]
    12f2:	1e63      	subs	r3, r4, #1
    12f4:	5cc2      	ldrb	r2, [r0, r3]
    12f6:	b982      	cbnz	r2, 131a <br_rsa_oaep_pad+0x46>
    12f8:	b12b      	cbz	r3, 1306 <br_rsa_oaep_pad+0x32>
    12fa:	1e5a      	subs	r2, r3, #1
    12fc:	5c81      	ldrb	r1, [r0, r2]
    12fe:	b959      	cbnz	r1, 1318 <br_rsa_oaep_pad+0x44>
    1300:	0013      	movs	r3, r2
    1302:	2b00      	cmp	r3, #0
    1304:	d1f9      	bne.n	12fa <br_rsa_oaep_pad+0x26>
	 */
	if (k < ((hlen << 1) + 2)
		|| src_len > (k - (hlen << 1) - 2)
		|| dst_max_len < k)
	{
		return 0;
    1306:	2400      	movs	r4, #0
	/*
	 * Padding result: EM = 0x00 || maskedSeed || maskedDB.
	 */
	buf[0] = 0x00;
	return k;
}
    1308:	0020      	movs	r0, r4
    130a:	b03b      	add	sp, #236	; 0xec
    130c:	bc3c      	pop	{r2, r3, r4, r5}
    130e:	4690      	mov	r8, r2
    1310:	4699      	mov	r9, r3
    1312:	46a2      	mov	sl, r4
    1314:	46ab      	mov	fp, r5
    1316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1318:	001c      	movs	r4, r3
           & BR_HASHDESC_OUT_MASK;
    131a:	6873      	ldr	r3, [r6, #4]
    131c:	045d      	lsls	r5, r3, #17
    131e:	0e6d      	lsrs	r5, r5, #25
	if (k < ((hlen << 1) + 2)
    1320:	006f      	lsls	r7, r5, #1
    1322:	1cbb      	adds	r3, r7, #2
    1324:	42a3      	cmp	r3, r4
    1326:	d8ee      	bhi.n	1306 <br_rsa_oaep_pad+0x32>
    1328:	2202      	movs	r2, #2
    132a:	4252      	negs	r2, r2
    132c:	1bd3      	subs	r3, r2, r7
		|| src_len > (k - (hlen << 1) - 2)
    132e:	9a48      	ldr	r2, [sp, #288]	; 0x120
    1330:	469b      	mov	fp, r3
    1332:	191b      	adds	r3, r3, r4
    1334:	4293      	cmp	r3, r2
    1336:	d3e6      	bcc.n	1306 <br_rsa_oaep_pad+0x32>
		|| dst_max_len < k)
    1338:	9b46      	ldr	r3, [sp, #280]	; 0x118
    133a:	42a3      	cmp	r3, r4
    133c:	d3e3      	bcc.n	1306 <br_rsa_oaep_pad+0x32>
	memmove(buf + k - src_len, src, src_len);
    133e:	1aa3      	subs	r3, r4, r2
    1340:	469c      	mov	ip, r3
    1342:	9945      	ldr	r1, [sp, #276]	; 0x114
    1344:	9303      	str	r3, [sp, #12]
    1346:	4461      	add	r1, ip
    1348:	f642 63e5 	movw	r3, #12005	; 0x2ee5
    134c:	0008      	movs	r0, r1
    134e:	9a48      	ldr	r2, [sp, #288]	; 0x120
    1350:	9947      	ldr	r1, [sp, #284]	; 0x11c
    1352:	f2c0 0300 	movt	r3, #0
    1356:	9005      	str	r0, [sp, #20]
    1358:	4798      	blx	r3
	hash_data(dig, buf + 1 + hlen, label, label_len);
    135a:	9845      	ldr	r0, [sp, #276]	; 0x114
    135c:	1c6b      	adds	r3, r5, #1
    135e:	4684      	mov	ip, r0
    1360:	0019      	movs	r1, r3
	dig->init(&hc.vtable);
    1362:	a806      	add	r0, sp, #24
	hash_data(dig, buf + 1 + hlen, label, label_len);
    1364:	4461      	add	r1, ip
	dig->init(&hc.vtable);
    1366:	68b3      	ldr	r3, [r6, #8]
	hc.vtable = dig;
    1368:	9606      	str	r6, [sp, #24]
	hash_data(dig, buf + 1 + hlen, label, label_len);
    136a:	9104      	str	r1, [sp, #16]
	dig->init(&hc.vtable);
    136c:	4798      	blx	r3
	dig->update(&hc.vtable, src, len);
    136e:	4652      	mov	r2, sl
    1370:	4649      	mov	r1, r9
    1372:	a806      	add	r0, sp, #24
    1374:	68f3      	ldr	r3, [r6, #12]
    1376:	4798      	blx	r3
	dig->out(&hc.vtable, dst);
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	a806      	add	r0, sp, #24
    137c:	469a      	mov	sl, r3
    137e:	0019      	movs	r1, r3
    1380:	6933      	ldr	r3, [r6, #16]
    1382:	4798      	blx	r3
	memset(buf + 1 + (hlen << 1), 0, k - src_len - (hlen << 1) - 2);
    1384:	9b45      	ldr	r3, [sp, #276]	; 0x114
    1386:	9a03      	ldr	r2, [sp, #12]
    1388:	469c      	mov	ip, r3
    138a:	f642 7309 	movw	r3, #12041	; 0x2f09
    138e:	1c78      	adds	r0, r7, #1
    1390:	4460      	add	r0, ip
    1392:	445a      	add	r2, fp
    1394:	2100      	movs	r1, #0
    1396:	f2c0 0300 	movt	r3, #0
    139a:	4798      	blx	r3
	buf[k - src_len - 1] = 0x01;
    139c:	2201      	movs	r2, #1
    139e:	9805      	ldr	r0, [sp, #20]
	br_mgf1_xor(buf + 1 + hlen, k - hlen - 1, dig, buf + 1, hlen);
    13a0:	f241 07d1 	movw	r7, #4305	; 0x10d1
	buf[k - src_len - 1] = 0x01;
    13a4:	1e43      	subs	r3, r0, #1
    13a6:	701a      	strb	r2, [r3, #0]
	(*rnd)->generate(rnd, buf + 1, hlen);
    13a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    13aa:	4640      	mov	r0, r8
    13ac:	3301      	adds	r3, #1
    13ae:	4699      	mov	r9, r3
    13b0:	4643      	mov	r3, r8
    13b2:	681b      	ldr	r3, [r3, #0]
    13b4:	002a      	movs	r2, r5
    13b6:	689b      	ldr	r3, [r3, #8]
    13b8:	4649      	mov	r1, r9
    13ba:	4798      	blx	r3
	br_mgf1_xor(buf + 1 + hlen, k - hlen - 1, dig, buf + 1, hlen);
    13bc:	43eb      	mvns	r3, r5
    13be:	4698      	mov	r8, r3
    13c0:	44a0      	add	r8, r4
    13c2:	464b      	mov	r3, r9
    13c4:	0032      	movs	r2, r6
    13c6:	4641      	mov	r1, r8
    13c8:	4650      	mov	r0, sl
    13ca:	f2c0 0700 	movt	r7, #0
    13ce:	9500      	str	r5, [sp, #0]
    13d0:	47b8      	blx	r7
	br_mgf1_xor(buf + 1, hlen, dig, buf + 1 + hlen, k - hlen - 1);
    13d2:	4642      	mov	r2, r8
    13d4:	4653      	mov	r3, sl
    13d6:	9200      	str	r2, [sp, #0]
    13d8:	0029      	movs	r1, r5
    13da:	0032      	movs	r2, r6
    13dc:	4648      	mov	r0, r9
    13de:	47b8      	blx	r7
	buf[0] = 0x00;
    13e0:	2300      	movs	r3, #0
    13e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
    13e4:	7013      	strb	r3, [r2, #0]
	return k;
    13e6:	e78f      	b.n	1308 <br_rsa_oaep_pad+0x34>

000013e8 <br_sha1_set_state>:
}

/* see bearssl.h */
void
br_sha1_set_state(br_sha1_context *cc, const void *stb, uint64_t count)
{
    13e8:	b570      	push	{r4, r5, r6, lr}
    13ea:	001d      	movs	r5, r3
	br_range_dec32be(cc->val, 5, stb);
    13ec:	f240 13a9 	movw	r3, #425	; 0x1a9
{
    13f0:	0006      	movs	r6, r0
    13f2:	0014      	movs	r4, r2
	br_range_dec32be(cc->val, 5, stb);
    13f4:	3050      	adds	r0, #80	; 0x50
    13f6:	000a      	movs	r2, r1
    13f8:	f2c0 0300 	movt	r3, #0
    13fc:	2105      	movs	r1, #5
    13fe:	4798      	blx	r3
	cc->count = count;
    1400:	64b4      	str	r4, [r6, #72]	; 0x48
    1402:	64f5      	str	r5, [r6, #76]	; 0x4c
}
    1404:	bd70      	pop	{r4, r5, r6, pc}
    1406:	46c0      	nop			; (mov r8, r8)

00001408 <br_sha1_init>:
	cc->vtable = &br_sha1_vtable;
    1408:	f643 1150 	movw	r1, #14672	; 0x3950
	memcpy(cc->val, br_sha1_IV, sizeof cc->val);
    140c:	f642 63d3 	movw	r3, #11987	; 0x2ed3
	cc->vtable = &br_sha1_vtable;
    1410:	f2c0 0100 	movt	r1, #0
{
    1414:	b510      	push	{r4, lr}
	memcpy(cc->val, br_sha1_IV, sizeof cc->val);
    1416:	2214      	movs	r2, #20
{
    1418:	0004      	movs	r4, r0
	cc->vtable = &br_sha1_vtable;
    141a:	6001      	str	r1, [r0, #0]
	memcpy(cc->val, br_sha1_IV, sizeof cc->val);
    141c:	f2c0 0300 	movt	r3, #0
    1420:	311c      	adds	r1, #28
    1422:	3050      	adds	r0, #80	; 0x50
    1424:	4798      	blx	r3
	cc->count = 0;
    1426:	2200      	movs	r2, #0
    1428:	2300      	movs	r3, #0
    142a:	64a2      	str	r2, [r4, #72]	; 0x48
    142c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
    142e:	bd10      	pop	{r4, pc}

00001430 <br_sha1_state>:
{
    1430:	b510      	push	{r4, lr}
    1432:	0004      	movs	r4, r0
	br_range_enc32be(dst, cc->val, 5);
    1434:	f240 13cd 	movw	r3, #461	; 0x1cd
{
    1438:	0008      	movs	r0, r1
	br_range_enc32be(dst, cc->val, 5);
    143a:	0021      	movs	r1, r4
    143c:	2205      	movs	r2, #5
    143e:	3150      	adds	r1, #80	; 0x50
    1440:	f2c0 0300 	movt	r3, #0
    1444:	4798      	blx	r3
	return cc->count;
    1446:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1448:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
    144a:	bd10      	pop	{r4, pc}

0000144c <br_sha1_round>:
{
    144c:	b5f0      	push	{r4, r5, r6, r7, lr}
    144e:	46de      	mov	lr, fp
    1450:	4657      	mov	r7, sl
    1452:	464e      	mov	r6, r9
    1454:	4645      	mov	r5, r8
    1456:	b5e0      	push	{r5, r6, r7, lr}
	a = val[0];
    1458:	680b      	ldr	r3, [r1, #0]
{
    145a:	b0d5      	sub	sp, #340	; 0x154
	a = val[0];
    145c:	9300      	str	r3, [sp, #0]
	b = val[1];
    145e:	684b      	ldr	r3, [r1, #4]
{
    1460:	0002      	movs	r2, r0
	b = val[1];
    1462:	9301      	str	r3, [sp, #4]
	c = val[2];
    1464:	688b      	ldr	r3, [r1, #8]
{
    1466:	000d      	movs	r5, r1
	c = val[2];
    1468:	4699      	mov	r9, r3
	d = val[3];
    146a:	68cb      	ldr	r3, [r1, #12]
	br_range_dec32be(m, 16, buf);
    146c:	a804      	add	r0, sp, #16
	d = val[3];
    146e:	4698      	mov	r8, r3
	e = val[4];
    1470:	690b      	ldr	r3, [r1, #16]
	br_range_dec32be(m, 16, buf);
    1472:	2110      	movs	r1, #16
	e = val[4];
    1474:	9302      	str	r3, [sp, #8]
	br_range_dec32be(m, 16, buf);
    1476:	f240 13a9 	movw	r3, #425	; 0x1a9
    147a:	f2c0 0300 	movt	r3, #0
    147e:	4798      	blx	r3
    1480:	9b12      	ldr	r3, [sp, #72]	; 0x48
	for (i = 16; i < 80; i ++) {
    1482:	2710      	movs	r7, #16
    1484:	469a      	mov	sl, r3
    1486:	9911      	ldr	r1, [sp, #68]	; 0x44
    1488:	9c05      	ldr	r4, [sp, #20]
    148a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		m[i] = ROTL(x, 1);
    148c:	9503      	str	r5, [sp, #12]
    148e:	221f      	movs	r2, #31
    1490:	000d      	movs	r5, r1
    1492:	46bb      	mov	fp, r7
    1494:	0021      	movs	r1, r4
    1496:	4654      	mov	r4, sl
    1498:	469a      	mov	sl, r3
    149a:	9e04      	ldr	r6, [sp, #16]
    149c:	a806      	add	r0, sp, #24
		uint32_t x = m[i - 3] ^ m[i - 8] ^ m[i - 14] ^ m[i - 16];
    149e:	4657      	mov	r7, sl
    14a0:	6983      	ldr	r3, [r0, #24]
    14a2:	4075      	eors	r5, r6
    14a4:	405d      	eors	r5, r3
    14a6:	6803      	ldr	r3, [r0, #0]
    14a8:	404c      	eors	r4, r1
    14aa:	405d      	eors	r5, r3
    14ac:	69c3      	ldr	r3, [r0, #28]
    14ae:	6881      	ldr	r1, [r0, #8]
    14b0:	405c      	eors	r4, r3
    14b2:	6a03      	ldr	r3, [r0, #32]
    14b4:	f240 0c03 	movw	ip, #3
    14b8:	404b      	eors	r3, r1
    14ba:	407b      	eors	r3, r7
    14bc:	6807      	ldr	r7, [r0, #0]
    14be:	6846      	ldr	r6, [r0, #4]
    14c0:	407b      	eors	r3, r7
		m[i] = ROTL(x, 1);
    14c2:	41d3      	rors	r3, r2
		uint32_t x = m[i - 3] ^ m[i - 8] ^ m[i - 14] ^ m[i - 16];
    14c4:	4074      	eors	r4, r6
    14c6:	44e3      	add	fp, ip
		m[i] = ROTL(x, 1);
    14c8:	6403      	str	r3, [r0, #64]	; 0x40
    14ca:	41d5      	rors	r5, r2
    14cc:	41d4      	rors	r4, r2
    14ce:	469a      	mov	sl, r3
    14d0:	465b      	mov	r3, fp
    14d2:	6385      	str	r5, [r0, #56]	; 0x38
    14d4:	63c4      	str	r4, [r0, #60]	; 0x3c
    14d6:	300c      	adds	r0, #12
    14d8:	2b4f      	cmp	r3, #79	; 0x4f
    14da:	d1e0      	bne.n	149e <br_sha1_round+0x52>
    14dc:	211f      	movs	r1, #31
    14de:	9d03      	ldr	r5, [sp, #12]
    14e0:	aa43      	add	r2, sp, #268	; 0x10c
    14e2:	a844      	add	r0, sp, #272	; 0x110
		uint32_t x = m[i - 3] ^ m[i - 8] ^ m[i - 14] ^ m[i - 16];
    14e4:	6b54      	ldr	r4, [r2, #52]	; 0x34
    14e6:	6a13      	ldr	r3, [r2, #32]
    14e8:	4063      	eors	r3, r4
    14ea:	6894      	ldr	r4, [r2, #8]
    14ec:	4063      	eors	r3, r4
    14ee:	6814      	ldr	r4, [r2, #0]
    14f0:	3204      	adds	r2, #4
    14f2:	4063      	eors	r3, r4
		m[i] = ROTL(x, 1);
    14f4:	41cb      	rors	r3, r1
    14f6:	63d3      	str	r3, [r2, #60]	; 0x3c
	for (i = 16; i < 80; i ++) {
    14f8:	4290      	cmp	r0, r2
    14fa:	d1f3      	bne.n	14e4 <br_sha1_round+0x98>
    14fc:	f647 1299 	movw	r2, #31129	; 0x7999
    1500:	f6c5 2282 	movt	r2, #23170	; 0x5a82
    1504:	4694      	mov	ip, r2
    1506:	9b04      	ldr	r3, [sp, #16]
		e += ROTL(a, 5) + F(b, c, d) + K1 + m[i + 0]; b = ROTL(b, 30);
    1508:	9e00      	ldr	r6, [sp, #0]
    150a:	4463      	add	r3, ip
    150c:	0019      	movs	r1, r3
    150e:	9b02      	ldr	r3, [sp, #8]
    1510:	221b      	movs	r2, #27
    1512:	469c      	mov	ip, r3
    1514:	0033      	movs	r3, r6
    1516:	41d3      	rors	r3, r2
    1518:	4461      	add	r1, ip
    151a:	18cb      	adds	r3, r1, r3
    151c:	4640      	mov	r0, r8
    151e:	4649      	mov	r1, r9
    1520:	f647 1799 	movw	r7, #31129	; 0x7999
    1524:	4644      	mov	r4, r8
    1526:	4041      	eors	r1, r0
    1528:	9801      	ldr	r0, [sp, #4]
    152a:	f6c5 2782 	movt	r7, #23170	; 0x5a82
    152e:	46bc      	mov	ip, r7
    1530:	4001      	ands	r1, r0
    1532:	4061      	eors	r1, r4
    1534:	18c9      	adds	r1, r1, r3
    1536:	2302      	movs	r3, #2
    1538:	9c05      	ldr	r4, [sp, #20]
    153a:	41d8      	rors	r0, r3
    153c:	4464      	add	r4, ip
    153e:	4444      	add	r4, r8
    1540:	46a4      	mov	ip, r4
		d += ROTL(e, 5) + F(a, b, c) + K1 + m[i + 1]; a = ROTL(a, 30);
    1542:	464c      	mov	r4, r9
    1544:	464f      	mov	r7, r9
    1546:	4044      	eors	r4, r0
    1548:	4034      	ands	r4, r6
    154a:	41de      	rors	r6, r3
    154c:	407c      	eors	r4, r7
    154e:	4464      	add	r4, ip
    1550:	0027      	movs	r7, r4
    1552:	000c      	movs	r4, r1
    1554:	46b4      	mov	ip, r6
    1556:	f647 1699 	movw	r6, #31129	; 0x7999
    155a:	41d4      	rors	r4, r2
    155c:	f6c5 2682 	movt	r6, #23170	; 0x5a82
    1560:	46b0      	mov	r8, r6
    1562:	19e7      	adds	r7, r4, r7
    1564:	9c06      	ldr	r4, [sp, #24]
    1566:	4444      	add	r4, r8
    1568:	444c      	add	r4, r9
    156a:	0026      	movs	r6, r4
		c += ROTL(d, 5) + F(e, a, b) + K1 + m[i + 2]; e = ROTL(e, 30);
    156c:	4664      	mov	r4, ip
    156e:	4044      	eors	r4, r0
    1570:	400c      	ands	r4, r1
    1572:	4044      	eors	r4, r0
    1574:	1936      	adds	r6, r6, r4
    1576:	003c      	movs	r4, r7
    1578:	41d4      	rors	r4, r2
    157a:	19a6      	adds	r6, r4, r6
    157c:	9c07      	ldr	r4, [sp, #28]
    157e:	41d9      	rors	r1, r3
    1580:	46a1      	mov	r9, r4
    1582:	44c1      	add	r9, r8
    1584:	46c8      	mov	r8, r9
    1586:	4480      	add	r8, r0
		b += ROTL(c, 5) + F(d, e, a) + K1 + m[i + 3]; d = ROTL(d, 30);
    1588:	4660      	mov	r0, ip
    158a:	4664      	mov	r4, ip
    158c:	4048      	eors	r0, r1
    158e:	4038      	ands	r0, r7
    1590:	4060      	eors	r0, r4
    1592:	4440      	add	r0, r8
    1594:	0004      	movs	r4, r0
    1596:	0030      	movs	r0, r6
    1598:	41d0      	rors	r0, r2
    159a:	4682      	mov	sl, r0
    159c:	44a2      	add	sl, r4
    159e:	f647 1499 	movw	r4, #31129	; 0x7999
    15a2:	41df      	rors	r7, r3
    15a4:	f6c5 2482 	movt	r4, #23170	; 0x5a82
    15a8:	46a0      	mov	r8, r4
		a += ROTL(b, 5) + F(c, d, e) + K1 + m[i + 4]; c = ROTL(c, 30);
    15aa:	003c      	movs	r4, r7
    15ac:	9808      	ldr	r0, [sp, #32]
    15ae:	404c      	eors	r4, r1
    15b0:	4034      	ands	r4, r6
    15b2:	404c      	eors	r4, r1
    15b4:	4440      	add	r0, r8
    15b6:	4460      	add	r0, ip
    15b8:	46a4      	mov	ip, r4
    15ba:	4654      	mov	r4, sl
    15bc:	41d4      	rors	r4, r2
    15be:	41de      	rors	r6, r3
    15c0:	4460      	add	r0, ip
    15c2:	46a4      	mov	ip, r4
    15c4:	4484      	add	ip, r0
		e += ROTL(a, 5) + F(b, c, d) + K1 + m[i + 0]; b = ROTL(b, 30);
    15c6:	0030      	movs	r0, r6
    15c8:	4654      	mov	r4, sl
    15ca:	4078      	eors	r0, r7
    15cc:	4020      	ands	r0, r4
    15ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
    15d0:	4078      	eors	r0, r7
    15d2:	46a0      	mov	r8, r4
    15d4:	f647 1499 	movw	r4, #31129	; 0x7999
    15d8:	f6c5 2482 	movt	r4, #23170	; 0x5a82
    15dc:	46a1      	mov	r9, r4
    15de:	44c8      	add	r8, r9
    15e0:	4441      	add	r1, r8
    15e2:	1841      	adds	r1, r0, r1
    15e4:	4660      	mov	r0, ip
    15e6:	41d0      	rors	r0, r2
    15e8:	1841      	adds	r1, r0, r1
    15ea:	980a      	ldr	r0, [sp, #40]	; 0x28
    15ec:	4654      	mov	r4, sl
    15ee:	4681      	mov	r9, r0
    15f0:	f647 1099 	movw	r0, #31129	; 0x7999
    15f4:	f6c5 2082 	movt	r0, #23170	; 0x5a82
    15f8:	4680      	mov	r8, r0
    15fa:	41dc      	rors	r4, r3
    15fc:	44c1      	add	r9, r8
    15fe:	46c8      	mov	r8, r9
		d += ROTL(e, 5) + F(a, b, c) + K1 + m[i + 1]; a = ROTL(a, 30);
    1600:	0020      	movs	r0, r4
    1602:	44b8      	add	r8, r7
    1604:	4667      	mov	r7, ip
    1606:	4070      	eors	r0, r6
    1608:	4038      	ands	r0, r7
    160a:	4070      	eors	r0, r6
    160c:	4440      	add	r0, r8
    160e:	0007      	movs	r7, r0
    1610:	0008      	movs	r0, r1
    1612:	41d0      	rors	r0, r2
    1614:	4680      	mov	r8, r0
    1616:	44b8      	add	r8, r7
    1618:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    161a:	4660      	mov	r0, ip
    161c:	46b9      	mov	r9, r7
    161e:	f647 1799 	movw	r7, #31129	; 0x7999
    1622:	f6c5 2782 	movt	r7, #23170	; 0x5a82
    1626:	46bc      	mov	ip, r7
    1628:	44e1      	add	r9, ip
    162a:	41d8      	rors	r0, r3
    162c:	464f      	mov	r7, r9
    162e:	19be      	adds	r6, r7, r6
		c += ROTL(d, 5) + F(e, a, b) + K1 + m[i + 2]; e = ROTL(e, 30);
    1630:	0007      	movs	r7, r0
    1632:	4067      	eors	r7, r4
    1634:	400f      	ands	r7, r1
    1636:	4067      	eors	r7, r4
    1638:	19f6      	adds	r6, r6, r7
    163a:	4647      	mov	r7, r8
    163c:	41d7      	rors	r7, r2
    163e:	41d9      	rors	r1, r3
    1640:	19be      	adds	r6, r7, r6
    1642:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    1644:	468a      	mov	sl, r1
    1646:	0039      	movs	r1, r7
		b += ROTL(c, 5) + F(d, e, a) + K1 + m[i + 3]; d = ROTL(d, 30);
    1648:	4657      	mov	r7, sl
    164a:	4461      	add	r1, ip
    164c:	190c      	adds	r4, r1, r4
    164e:	4641      	mov	r1, r8
    1650:	4047      	eors	r7, r0
    1652:	400f      	ands	r7, r1
    1654:	4047      	eors	r7, r0
    1656:	19e4      	adds	r4, r4, r7
    1658:	0037      	movs	r7, r6
    165a:	41d7      	rors	r7, r2
    165c:	46bc      	mov	ip, r7
    165e:	990d      	ldr	r1, [sp, #52]	; 0x34
    1660:	44a4      	add	ip, r4
    1662:	000c      	movs	r4, r1
    1664:	f647 1199 	movw	r1, #31129	; 0x7999
    1668:	4647      	mov	r7, r8
    166a:	f6c5 2182 	movt	r1, #23170	; 0x5a82
    166e:	4688      	mov	r8, r1
    1670:	41df      	rors	r7, r3
    1672:	4444      	add	r4, r8
		a += ROTL(b, 5) + F(c, d, e) + K1 + m[i + 4]; c = ROTL(c, 30);
    1674:	4651      	mov	r1, sl
    1676:	1820      	adds	r0, r4, r0
    1678:	003c      	movs	r4, r7
    167a:	404c      	eors	r4, r1
    167c:	4034      	ands	r4, r6
    167e:	404c      	eors	r4, r1
    1680:	1900      	adds	r0, r0, r4
    1682:	4664      	mov	r4, ip
    1684:	41de      	rors	r6, r3
    1686:	41d4      	rors	r4, r2
    1688:	1820      	adds	r0, r4, r0
		e += ROTL(a, 5) + F(b, c, d) + K1 + m[i + 0]; b = ROTL(b, 30);
    168a:	0034      	movs	r4, r6
    168c:	4661      	mov	r1, ip
    168e:	407c      	eors	r4, r7
    1690:	400c      	ands	r4, r1
    1692:	990e      	ldr	r1, [sp, #56]	; 0x38
    1694:	407c      	eors	r4, r7
    1696:	4688      	mov	r8, r1
    1698:	f647 1199 	movw	r1, #31129	; 0x7999
    169c:	f6c5 2182 	movt	r1, #23170	; 0x5a82
    16a0:	4689      	mov	r9, r1
    16a2:	4651      	mov	r1, sl
    16a4:	44c8      	add	r8, r9
    16a6:	4441      	add	r1, r8
    16a8:	1861      	adds	r1, r4, r1
    16aa:	0004      	movs	r4, r0
    16ac:	41d4      	rors	r4, r2
    16ae:	46a0      	mov	r8, r4
    16b0:	4488      	add	r8, r1
    16b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    16b4:	4664      	mov	r4, ip
    16b6:	4689      	mov	r9, r1
    16b8:	f647 1199 	movw	r1, #31129	; 0x7999
    16bc:	f6c5 2182 	movt	r1, #23170	; 0x5a82
    16c0:	468c      	mov	ip, r1
    16c2:	44e1      	add	r9, ip
    16c4:	41dc      	rors	r4, r3
    16c6:	4649      	mov	r1, r9
    16c8:	19cf      	adds	r7, r1, r7
		d += ROTL(e, 5) + F(a, b, c) + K1 + m[i + 1]; a = ROTL(a, 30);
    16ca:	0021      	movs	r1, r4
    16cc:	4071      	eors	r1, r6
    16ce:	4001      	ands	r1, r0
    16d0:	4071      	eors	r1, r6
    16d2:	187f      	adds	r7, r7, r1
    16d4:	4641      	mov	r1, r8
    16d6:	41d1      	rors	r1, r2
    16d8:	19cf      	adds	r7, r1, r7
    16da:	9910      	ldr	r1, [sp, #64]	; 0x40
    16dc:	41d8      	rors	r0, r3
    16de:	4689      	mov	r9, r1
    16e0:	44e1      	add	r9, ip
    16e2:	46cc      	mov	ip, r9
		c += ROTL(d, 5) + F(e, a, b) + K1 + m[i + 2]; e = ROTL(e, 30);
    16e4:	0001      	movs	r1, r0
    16e6:	44b4      	add	ip, r6
    16e8:	4646      	mov	r6, r8
    16ea:	4061      	eors	r1, r4
    16ec:	4031      	ands	r1, r6
    16ee:	4061      	eors	r1, r4
    16f0:	4461      	add	r1, ip
    16f2:	000e      	movs	r6, r1
    16f4:	0039      	movs	r1, r7
    16f6:	41d1      	rors	r1, r2
    16f8:	468c      	mov	ip, r1
    16fa:	44b4      	add	ip, r6
    16fc:	9e11      	ldr	r6, [sp, #68]	; 0x44
    16fe:	4641      	mov	r1, r8
    1700:	46b1      	mov	r9, r6
    1702:	f647 1699 	movw	r6, #31129	; 0x7999
    1706:	f6c5 2682 	movt	r6, #23170	; 0x5a82
    170a:	46b0      	mov	r8, r6
    170c:	44c1      	add	r9, r8
    170e:	41d9      	rors	r1, r3
    1710:	464e      	mov	r6, r9
    1712:	1934      	adds	r4, r6, r4
		b += ROTL(c, 5) + F(d, e, a) + K1 + m[i + 3]; d = ROTL(d, 30);
    1714:	000e      	movs	r6, r1
    1716:	4046      	eors	r6, r0
    1718:	403e      	ands	r6, r7
    171a:	4046      	eors	r6, r0
    171c:	19a4      	adds	r4, r4, r6
    171e:	4666      	mov	r6, ip
    1720:	41d6      	rors	r6, r2
    1722:	46b2      	mov	sl, r6
    1724:	9e12      	ldr	r6, [sp, #72]	; 0x48
    1726:	44a2      	add	sl, r4
    1728:	41df      	rors	r7, r3
    172a:	0034      	movs	r4, r6
		a += ROTL(b, 5) + F(c, d, e) + K1 + m[i + 4]; c = ROTL(c, 30);
    172c:	003e      	movs	r6, r7
    172e:	4444      	add	r4, r8
    1730:	1820      	adds	r0, r4, r0
    1732:	4664      	mov	r4, ip
    1734:	404e      	eors	r6, r1
    1736:	4026      	ands	r6, r4
    1738:	404e      	eors	r6, r1
    173a:	1980      	adds	r0, r0, r6
    173c:	4656      	mov	r6, sl
    173e:	41d6      	rors	r6, r2
    1740:	46b0      	mov	r8, r6
    1742:	4666      	mov	r6, ip
    1744:	41de      	rors	r6, r3
    1746:	4480      	add	r8, r0
		e += ROTL(a, 5) + F(b, c, d) + K1 + m[i + 0]; b = ROTL(b, 30);
    1748:	0030      	movs	r0, r6
    174a:	4654      	mov	r4, sl
    174c:	4078      	eors	r0, r7
    174e:	4020      	ands	r0, r4
    1750:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    1752:	4078      	eors	r0, r7
    1754:	46a4      	mov	ip, r4
    1756:	f647 1499 	movw	r4, #31129	; 0x7999
    175a:	f6c5 2482 	movt	r4, #23170	; 0x5a82
    175e:	46a1      	mov	r9, r4
    1760:	44cc      	add	ip, r9
    1762:	4461      	add	r1, ip
    1764:	1841      	adds	r1, r0, r1
    1766:	4640      	mov	r0, r8
    1768:	41d0      	rors	r0, r2
    176a:	1841      	adds	r1, r0, r1
    176c:	4650      	mov	r0, sl
    176e:	41d8      	rors	r0, r3
    1770:	4682      	mov	sl, r0
    1772:	9814      	ldr	r0, [sp, #80]	; 0x50
    1774:	0004      	movs	r4, r0
		d += ROTL(e, 5) + F(a, b, c) + K1 + m[i + 1]; a = ROTL(a, 30);
    1776:	4650      	mov	r0, sl
    1778:	444c      	add	r4, r9
    177a:	19e7      	adds	r7, r4, r7
    177c:	4644      	mov	r4, r8
    177e:	4070      	eors	r0, r6
    1780:	4020      	ands	r0, r4
    1782:	4070      	eors	r0, r6
    1784:	183f      	adds	r7, r7, r0
    1786:	0008      	movs	r0, r1
    1788:	41d0      	rors	r0, r2
    178a:	4684      	mov	ip, r0
    178c:	4640      	mov	r0, r8
    178e:	44bc      	add	ip, r7
    1790:	41d8      	rors	r0, r3
		c += ROTL(d, 5) + F(e, a, b) + K1 + m[i + 2]; e = ROTL(e, 30);
    1792:	4657      	mov	r7, sl
    1794:	4654      	mov	r4, sl
    1796:	4047      	eors	r7, r0
    1798:	400f      	ands	r7, r1
    179a:	4067      	eors	r7, r4
    179c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    179e:	41d9      	rors	r1, r3
    17a0:	46a0      	mov	r8, r4
    17a2:	44c8      	add	r8, r9
    17a4:	4446      	add	r6, r8
    17a6:	19be      	adds	r6, r7, r6
    17a8:	4667      	mov	r7, ip
    17aa:	41d7      	rors	r7, r2
    17ac:	19be      	adds	r6, r7, r6
		b += ROTL(c, 5) + F(d, e, a) + K1 + m[i + 3]; d = ROTL(d, 30);
    17ae:	0007      	movs	r7, r0
    17b0:	4664      	mov	r4, ip
    17b2:	404f      	eors	r7, r1
    17b4:	4027      	ands	r7, r4
    17b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
    17b8:	4047      	eors	r7, r0
    17ba:	46a0      	mov	r8, r4
    17bc:	4654      	mov	r4, sl
    17be:	44c8      	add	r8, r9
    17c0:	4444      	add	r4, r8
    17c2:	193c      	adds	r4, r7, r4
    17c4:	0037      	movs	r7, r6
    17c6:	41d7      	rors	r7, r2
    17c8:	46b8      	mov	r8, r7
    17ca:	44a0      	add	r8, r4
    17cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    17ce:	4667      	mov	r7, ip
    17d0:	46a1      	mov	r9, r4
    17d2:	f647 1499 	movw	r4, #31129	; 0x7999
    17d6:	f6c5 2482 	movt	r4, #23170	; 0x5a82
    17da:	46a4      	mov	ip, r4
    17dc:	44e1      	add	r9, ip
    17de:	464c      	mov	r4, r9
    17e0:	41df      	rors	r7, r3
    17e2:	1820      	adds	r0, r4, r0
		a += ROTL(b, 5) + F(c, d, e) + K1 + m[i + 4]; c = ROTL(c, 30);
    17e4:	000c      	movs	r4, r1
    17e6:	407c      	eors	r4, r7
    17e8:	4034      	ands	r4, r6
    17ea:	404c      	eors	r4, r1
    17ec:	1900      	adds	r0, r0, r4
    17ee:	4644      	mov	r4, r8
    17f0:	41d4      	rors	r4, r2
    17f2:	1820      	adds	r0, r4, r0
    17f4:	9c18      	ldr	r4, [sp, #96]	; 0x60
    17f6:	41de      	rors	r6, r3
    17f8:	46a1      	mov	r9, r4
    17fa:	f64e 34a1 	movw	r4, #60321	; 0xeba1
    17fe:	f6c6 64d9 	movt	r4, #28377	; 0x6ed9
    1802:	46a4      	mov	ip, r4
    1804:	44e1      	add	r9, ip
    1806:	46cc      	mov	ip, r9
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
    1808:	003c      	movs	r4, r7
    180a:	448c      	add	ip, r1
    180c:	4641      	mov	r1, r8
    180e:	4074      	eors	r4, r6
    1810:	404c      	eors	r4, r1
    1812:	0021      	movs	r1, r4
    1814:	0004      	movs	r4, r0
    1816:	41d4      	rors	r4, r2
    1818:	4461      	add	r1, ip
    181a:	46a4      	mov	ip, r4
    181c:	448c      	add	ip, r1
    181e:	9919      	ldr	r1, [sp, #100]	; 0x64
    1820:	4644      	mov	r4, r8
    1822:	4689      	mov	r9, r1
    1824:	f64e 31a1 	movw	r1, #60321	; 0xeba1
    1828:	f6c6 61d9 	movt	r1, #28377	; 0x6ed9
    182c:	4688      	mov	r8, r1
    182e:	44c1      	add	r9, r8
    1830:	4649      	mov	r1, r9
    1832:	41dc      	rors	r4, r3
    1834:	19cf      	adds	r7, r1, r7
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
    1836:	0031      	movs	r1, r6
    1838:	4061      	eors	r1, r4
    183a:	4041      	eors	r1, r0
    183c:	187f      	adds	r7, r7, r1
    183e:	4661      	mov	r1, ip
    1840:	41d1      	rors	r1, r2
    1842:	19cf      	adds	r7, r1, r7
    1844:	991a      	ldr	r1, [sp, #104]	; 0x68
    1846:	41d8      	rors	r0, r3
    1848:	4689      	mov	r9, r1
    184a:	44c1      	add	r9, r8
    184c:	46c8      	mov	r8, r9
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    184e:	0001      	movs	r1, r0
    1850:	44b0      	add	r8, r6
    1852:	4666      	mov	r6, ip
    1854:	4061      	eors	r1, r4
    1856:	4071      	eors	r1, r6
    1858:	4441      	add	r1, r8
    185a:	000e      	movs	r6, r1
    185c:	0039      	movs	r1, r7
    185e:	41d1      	rors	r1, r2
    1860:	4688      	mov	r8, r1
    1862:	44b0      	add	r8, r6
    1864:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
    1866:	4661      	mov	r1, ip
    1868:	46b1      	mov	r9, r6
    186a:	f64e 36a1 	movw	r6, #60321	; 0xeba1
    186e:	f6c6 66d9 	movt	r6, #28377	; 0x6ed9
    1872:	46b4      	mov	ip, r6
    1874:	44e1      	add	r9, ip
    1876:	41d9      	rors	r1, r3
    1878:	464e      	mov	r6, r9
    187a:	1934      	adds	r4, r6, r4
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    187c:	000e      	movs	r6, r1
    187e:	4046      	eors	r6, r0
    1880:	407e      	eors	r6, r7
    1882:	19a4      	adds	r4, r4, r6
    1884:	4646      	mov	r6, r8
    1886:	41d6      	rors	r6, r2
    1888:	1934      	adds	r4, r6, r4
    188a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    188c:	41df      	rors	r7, r3
    188e:	46b1      	mov	r9, r6
    1890:	44e1      	add	r9, ip
    1892:	46cc      	mov	ip, r9
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    1894:	003e      	movs	r6, r7
    1896:	4484      	add	ip, r0
    1898:	4640      	mov	r0, r8
    189a:	404e      	eors	r6, r1
    189c:	4046      	eors	r6, r0
    189e:	0030      	movs	r0, r6
    18a0:	0026      	movs	r6, r4
    18a2:	41d6      	rors	r6, r2
    18a4:	4460      	add	r0, ip
    18a6:	46b4      	mov	ip, r6
    18a8:	4484      	add	ip, r0
    18aa:	981d      	ldr	r0, [sp, #116]	; 0x74
    18ac:	4646      	mov	r6, r8
    18ae:	4681      	mov	r9, r0
    18b0:	f64e 30a1 	movw	r0, #60321	; 0xeba1
    18b4:	f6c6 60d9 	movt	r0, #28377	; 0x6ed9
    18b8:	4680      	mov	r8, r0
    18ba:	44c1      	add	r9, r8
    18bc:	41de      	rors	r6, r3
    18be:	4648      	mov	r0, r9
    18c0:	1841      	adds	r1, r0, r1
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
    18c2:	0030      	movs	r0, r6
    18c4:	4078      	eors	r0, r7
    18c6:	4060      	eors	r0, r4
    18c8:	1809      	adds	r1, r1, r0
    18ca:	4660      	mov	r0, ip
    18cc:	41d0      	rors	r0, r2
    18ce:	1841      	adds	r1, r0, r1
    18d0:	981e      	ldr	r0, [sp, #120]	; 0x78
    18d2:	41dc      	rors	r4, r3
    18d4:	4681      	mov	r9, r0
    18d6:	44c1      	add	r9, r8
    18d8:	46c8      	mov	r8, r9
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
    18da:	0020      	movs	r0, r4
    18dc:	44b8      	add	r8, r7
    18de:	4667      	mov	r7, ip
    18e0:	4070      	eors	r0, r6
    18e2:	4078      	eors	r0, r7
    18e4:	4440      	add	r0, r8
    18e6:	0007      	movs	r7, r0
    18e8:	0008      	movs	r0, r1
    18ea:	41d0      	rors	r0, r2
    18ec:	4680      	mov	r8, r0
    18ee:	44b8      	add	r8, r7
    18f0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
    18f2:	4660      	mov	r0, ip
    18f4:	46b9      	mov	r9, r7
    18f6:	f64e 37a1 	movw	r7, #60321	; 0xeba1
    18fa:	f6c6 67d9 	movt	r7, #28377	; 0x6ed9
    18fe:	46bc      	mov	ip, r7
    1900:	44e1      	add	r9, ip
    1902:	41d8      	rors	r0, r3
    1904:	464f      	mov	r7, r9
    1906:	19be      	adds	r6, r7, r6
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    1908:	0007      	movs	r7, r0
    190a:	4067      	eors	r7, r4
    190c:	404f      	eors	r7, r1
    190e:	19f6      	adds	r6, r6, r7
    1910:	4647      	mov	r7, r8
    1912:	41d7      	rors	r7, r2
    1914:	19be      	adds	r6, r7, r6
    1916:	9f20      	ldr	r7, [sp, #128]	; 0x80
    1918:	41d9      	rors	r1, r3
    191a:	46b9      	mov	r9, r7
    191c:	44e1      	add	r9, ip
    191e:	46cc      	mov	ip, r9
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    1920:	000f      	movs	r7, r1
    1922:	44a4      	add	ip, r4
    1924:	4644      	mov	r4, r8
    1926:	4047      	eors	r7, r0
    1928:	4067      	eors	r7, r4
    192a:	003c      	movs	r4, r7
    192c:	0037      	movs	r7, r6
    192e:	41d7      	rors	r7, r2
    1930:	4464      	add	r4, ip
    1932:	46bc      	mov	ip, r7
    1934:	44a4      	add	ip, r4
    1936:	9c21      	ldr	r4, [sp, #132]	; 0x84
    1938:	4647      	mov	r7, r8
    193a:	46a1      	mov	r9, r4
    193c:	f64e 34a1 	movw	r4, #60321	; 0xeba1
    1940:	f6c6 64d9 	movt	r4, #28377	; 0x6ed9
    1944:	46a0      	mov	r8, r4
    1946:	44c1      	add	r9, r8
    1948:	41df      	rors	r7, r3
    194a:	464c      	mov	r4, r9
    194c:	1820      	adds	r0, r4, r0
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    194e:	003c      	movs	r4, r7
    1950:	404c      	eors	r4, r1
    1952:	4074      	eors	r4, r6
    1954:	1900      	adds	r0, r0, r4
    1956:	4664      	mov	r4, ip
    1958:	41d4      	rors	r4, r2
    195a:	41de      	rors	r6, r3
    195c:	1820      	adds	r0, r4, r0
    195e:	9c22      	ldr	r4, [sp, #136]	; 0x88
    1960:	46b2      	mov	sl, r6
    1962:	0026      	movs	r6, r4
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
    1964:	4654      	mov	r4, sl
    1966:	4446      	add	r6, r8
    1968:	1871      	adds	r1, r6, r1
    196a:	4666      	mov	r6, ip
    196c:	407c      	eors	r4, r7
    196e:	4074      	eors	r4, r6
    1970:	1909      	adds	r1, r1, r4
    1972:	0004      	movs	r4, r0
    1974:	41d4      	rors	r4, r2
    1976:	f64e 36a1 	movw	r6, #60321	; 0xeba1
    197a:	46a0      	mov	r8, r4
    197c:	4664      	mov	r4, ip
    197e:	f6c6 66d9 	movt	r6, #28377	; 0x6ed9
    1982:	46b4      	mov	ip, r6
    1984:	41dc      	rors	r4, r3
    1986:	4488      	add	r8, r1
    1988:	9923      	ldr	r1, [sp, #140]	; 0x8c
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
    198a:	4656      	mov	r6, sl
    198c:	9100      	str	r1, [sp, #0]
    198e:	4461      	add	r1, ip
    1990:	19cf      	adds	r7, r1, r7
    1992:	0021      	movs	r1, r4
    1994:	4071      	eors	r1, r6
    1996:	4041      	eors	r1, r0
    1998:	187f      	adds	r7, r7, r1
    199a:	4641      	mov	r1, r8
    199c:	41d1      	rors	r1, r2
    199e:	19cf      	adds	r7, r1, r7
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    19a0:	2180      	movs	r1, #128	; 0x80
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
    19a2:	41d8      	rors	r0, r3
    19a4:	ae04      	add	r6, sp, #16
    19a6:	5871      	ldr	r1, [r6, r1]
    19a8:	4681      	mov	r9, r0
    19aa:	4461      	add	r1, ip
    19ac:	4451      	add	r1, sl
    19ae:	000e      	movs	r6, r1
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    19b0:	0001      	movs	r1, r0
    19b2:	4640      	mov	r0, r8
    19b4:	4061      	eors	r1, r4
    19b6:	4041      	eors	r1, r0
    19b8:	1876      	adds	r6, r6, r1
    19ba:	0039      	movs	r1, r7
    19bc:	41d1      	rors	r1, r2
    19be:	468c      	mov	ip, r1
    19c0:	44b4      	add	ip, r6
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    19c2:	2684      	movs	r6, #132	; 0x84
    19c4:	a804      	add	r0, sp, #16
    19c6:	5986      	ldr	r6, [r0, r6]
    19c8:	f64e 30a1 	movw	r0, #60321	; 0xeba1
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    19cc:	4641      	mov	r1, r8
    19ce:	f6c6 60d9 	movt	r0, #28377	; 0x6ed9
    19d2:	4680      	mov	r8, r0
    19d4:	41d9      	rors	r1, r3
    19d6:	4446      	add	r6, r8
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    19d8:	4648      	mov	r0, r9
    19da:	1934      	adds	r4, r6, r4
    19dc:	000e      	movs	r6, r1
    19de:	4046      	eors	r6, r0
    19e0:	407e      	eors	r6, r7
    19e2:	19a4      	adds	r4, r4, r6
    19e4:	4666      	mov	r6, ip
    19e6:	41d6      	rors	r6, r2
    19e8:	1934      	adds	r4, r6, r4
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    19ea:	2688      	movs	r6, #136	; 0x88
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    19ec:	41df      	rors	r7, r3
    19ee:	a804      	add	r0, sp, #16
    19f0:	5986      	ldr	r6, [r0, r6]
    19f2:	46ba      	mov	sl, r7
    19f4:	4446      	add	r6, r8
    19f6:	0030      	movs	r0, r6
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    19f8:	003e      	movs	r6, r7
    19fa:	4667      	mov	r7, ip
    19fc:	404e      	eors	r6, r1
    19fe:	407e      	eors	r6, r7
    1a00:	4448      	add	r0, r9
    1a02:	1980      	adds	r0, r0, r6
    1a04:	0026      	movs	r6, r4
    1a06:	41d6      	rors	r6, r2
    1a08:	46b0      	mov	r8, r6
    1a0a:	4480      	add	r8, r0
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
    1a0c:	208c      	movs	r0, #140	; 0x8c
    1a0e:	af04      	add	r7, sp, #16
    1a10:	5838      	ldr	r0, [r7, r0]
    1a12:	f64e 37a1 	movw	r7, #60321	; 0xeba1
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    1a16:	4666      	mov	r6, ip
    1a18:	f6c6 67d9 	movt	r7, #28377	; 0x6ed9
    1a1c:	46bc      	mov	ip, r7
    1a1e:	41de      	rors	r6, r3
    1a20:	4460      	add	r0, ip
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
    1a22:	4657      	mov	r7, sl
    1a24:	1841      	adds	r1, r0, r1
    1a26:	0030      	movs	r0, r6
    1a28:	4078      	eors	r0, r7
    1a2a:	4060      	eors	r0, r4
    1a2c:	1809      	adds	r1, r1, r0
    1a2e:	4640      	mov	r0, r8
    1a30:	41d0      	rors	r0, r2
    1a32:	1841      	adds	r1, r0, r1
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
    1a34:	2090      	movs	r0, #144	; 0x90
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
    1a36:	41dc      	rors	r4, r3
    1a38:	af04      	add	r7, sp, #16
    1a3a:	5838      	ldr	r0, [r7, r0]
    1a3c:	46a1      	mov	r9, r4
    1a3e:	4460      	add	r0, ip
    1a40:	4450      	add	r0, sl
    1a42:	0007      	movs	r7, r0
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
    1a44:	0020      	movs	r0, r4
    1a46:	4644      	mov	r4, r8
    1a48:	4070      	eors	r0, r6
    1a4a:	4060      	eors	r0, r4
    1a4c:	183f      	adds	r7, r7, r0
    1a4e:	0008      	movs	r0, r1
    1a50:	41d0      	rors	r0, r2
    1a52:	4684      	mov	ip, r0
    1a54:	44bc      	add	ip, r7
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    1a56:	2794      	movs	r7, #148	; 0x94
    1a58:	ac04      	add	r4, sp, #16
    1a5a:	59e7      	ldr	r7, [r4, r7]
    1a5c:	f64e 34a1 	movw	r4, #60321	; 0xeba1
    1a60:	f6c6 64d9 	movt	r4, #28377	; 0x6ed9
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
    1a64:	4640      	mov	r0, r8
    1a66:	46a0      	mov	r8, r4
    1a68:	4447      	add	r7, r8
    1a6a:	41d8      	rors	r0, r3
    1a6c:	19be      	adds	r6, r7, r6
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    1a6e:	464f      	mov	r7, r9
    1a70:	4047      	eors	r7, r0
    1a72:	404f      	eors	r7, r1
    1a74:	19f6      	adds	r6, r6, r7
    1a76:	4667      	mov	r7, ip
    1a78:	41d7      	rors	r7, r2
    1a7a:	19be      	adds	r6, r7, r6
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    1a7c:	2798      	movs	r7, #152	; 0x98
    1a7e:	ac04      	add	r4, sp, #16
    1a80:	59e7      	ldr	r7, [r4, r7]
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    1a82:	41d9      	rors	r1, r3
    1a84:	4447      	add	r7, r8
    1a86:	003c      	movs	r4, r7
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    1a88:	0007      	movs	r7, r0
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
    1a8a:	468a      	mov	sl, r1
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    1a8c:	404f      	eors	r7, r1
    1a8e:	4661      	mov	r1, ip
    1a90:	444c      	add	r4, r9
    1a92:	404f      	eors	r7, r1
    1a94:	19e4      	adds	r4, r4, r7
    1a96:	0037      	movs	r7, r6
    1a98:	41d7      	rors	r7, r2
    1a9a:	46b8      	mov	r8, r7
    1a9c:	44a0      	add	r8, r4
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    1a9e:	249c      	movs	r4, #156	; 0x9c
    1aa0:	a904      	add	r1, sp, #16
    1aa2:	590c      	ldr	r4, [r1, r4]
    1aa4:	f64e 31a1 	movw	r1, #60321	; 0xeba1
    1aa8:	f6c6 61d9 	movt	r1, #28377	; 0x6ed9
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
    1aac:	4667      	mov	r7, ip
    1aae:	468c      	mov	ip, r1
    1ab0:	4464      	add	r4, ip
    1ab2:	41df      	rors	r7, r3
    1ab4:	1820      	adds	r0, r4, r0
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    1ab6:	4654      	mov	r4, sl
    1ab8:	407c      	eors	r4, r7
    1aba:	4074      	eors	r4, r6
    1abc:	1900      	adds	r0, r0, r4
    1abe:	4644      	mov	r4, r8
    1ac0:	41d4      	rors	r4, r2
    1ac2:	41de      	rors	r6, r3
    1ac4:	46a3      	mov	fp, r4
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1ac6:	003c      	movs	r4, r7
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
    1ac8:	4483      	add	fp, r0
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1aca:	4641      	mov	r1, r8
    1acc:	0030      	movs	r0, r6
    1ace:	f240 0ca0 	movw	ip, #160	; 0xa0
    1ad2:	4334      	orrs	r4, r6
    1ad4:	4038      	ands	r0, r7
    1ad6:	400c      	ands	r4, r1
    1ad8:	4304      	orrs	r4, r0
    1ada:	4660      	mov	r0, ip
    1adc:	a904      	add	r1, sp, #16
    1ade:	5809      	ldr	r1, [r1, r0]
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1ae0:	4658      	mov	r0, fp
    1ae2:	468c      	mov	ip, r1
    1ae4:	f64b 41dc 	movw	r1, #48348	; 0xbcdc
    1ae8:	f6c8 711b 	movt	r1, #36635	; 0x8f1b
    1aec:	4689      	mov	r9, r1
    1aee:	4651      	mov	r1, sl
    1af0:	44cc      	add	ip, r9
    1af2:	4461      	add	r1, ip
    1af4:	1861      	adds	r1, r4, r1
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1af6:	465c      	mov	r4, fp
    1af8:	41d4      	rors	r4, r2
    1afa:	46a4      	mov	ip, r4
    1afc:	4644      	mov	r4, r8
    1afe:	448c      	add	ip, r1
    1b00:	41dc      	rors	r4, r3
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1b02:	0031      	movs	r1, r6
    1b04:	4321      	orrs	r1, r4
    1b06:	4001      	ands	r1, r0
    1b08:	0020      	movs	r0, r4
    1b0a:	f240 08a4 	movw	r8, #164	; 0xa4
    1b0e:	4030      	ands	r0, r6
    1b10:	4301      	orrs	r1, r0
    1b12:	468a      	mov	sl, r1
    1b14:	4641      	mov	r1, r8
    1b16:	a804      	add	r0, sp, #16
    1b18:	5841      	ldr	r1, [r0, r1]
    1b1a:	4658      	mov	r0, fp
    1b1c:	4688      	mov	r8, r1
    1b1e:	4661      	mov	r1, ip
    1b20:	41d1      	rors	r1, r2
    1b22:	44c8      	add	r8, r9
    1b24:	41d8      	rors	r0, r3
    1b26:	4447      	add	r7, r8
    1b28:	4457      	add	r7, sl
    1b2a:	468a      	mov	sl, r1
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1b2c:	0001      	movs	r1, r0
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1b2e:	44ba      	add	sl, r7
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1b30:	4667      	mov	r7, ip
    1b32:	4321      	orrs	r1, r4
    1b34:	4039      	ands	r1, r7
    1b36:	0027      	movs	r7, r4
    1b38:	f240 08a8 	movw	r8, #168	; 0xa8
    1b3c:	4007      	ands	r7, r0
    1b3e:	4339      	orrs	r1, r7
    1b40:	468b      	mov	fp, r1
    1b42:	4641      	mov	r1, r8
    1b44:	af04      	add	r7, sp, #16
    1b46:	5879      	ldr	r1, [r7, r1]
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1b48:	4657      	mov	r7, sl
    1b4a:	4688      	mov	r8, r1
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1b4c:	4651      	mov	r1, sl
    1b4e:	41d1      	rors	r1, r2
    1b50:	44c8      	add	r8, r9
    1b52:	4446      	add	r6, r8
    1b54:	4688      	mov	r8, r1
    1b56:	4661      	mov	r1, ip
    1b58:	41d9      	rors	r1, r3
    1b5a:	445e      	add	r6, fp
    1b5c:	44b0      	add	r8, r6
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1b5e:	000e      	movs	r6, r1
    1b60:	4306      	orrs	r6, r0
    1b62:	403e      	ands	r6, r7
    1b64:	0007      	movs	r7, r0
    1b66:	f240 0cac 	movw	ip, #172	; 0xac
    1b6a:	400f      	ands	r7, r1
    1b6c:	433e      	orrs	r6, r7
    1b6e:	46b3      	mov	fp, r6
    1b70:	4666      	mov	r6, ip
    1b72:	af04      	add	r7, sp, #16
    1b74:	59be      	ldr	r6, [r7, r6]
    1b76:	4657      	mov	r7, sl
    1b78:	46b4      	mov	ip, r6
    1b7a:	4646      	mov	r6, r8
    1b7c:	41d6      	rors	r6, r2
    1b7e:	44cc      	add	ip, r9
    1b80:	41df      	rors	r7, r3
    1b82:	4464      	add	r4, ip
    1b84:	445c      	add	r4, fp
    1b86:	46b3      	mov	fp, r6
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1b88:	003e      	movs	r6, r7
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1b8a:	44a3      	add	fp, r4
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1b8c:	4644      	mov	r4, r8
    1b8e:	430e      	orrs	r6, r1
    1b90:	4026      	ands	r6, r4
    1b92:	000c      	movs	r4, r1
    1b94:	f240 0cb0 	movw	ip, #176	; 0xb0
    1b98:	403c      	ands	r4, r7
    1b9a:	4326      	orrs	r6, r4
    1b9c:	46b2      	mov	sl, r6
    1b9e:	4666      	mov	r6, ip
    1ba0:	ac04      	add	r4, sp, #16
    1ba2:	59a4      	ldr	r4, [r4, r6]
    1ba4:	465e      	mov	r6, fp
    1ba6:	46a4      	mov	ip, r4
    1ba8:	41d6      	rors	r6, r2
    1baa:	44cc      	add	ip, r9
    1bac:	4460      	add	r0, ip
    1bae:	46b4      	mov	ip, r6
    1bb0:	4646      	mov	r6, r8
    1bb2:	41de      	rors	r6, r3
    1bb4:	4450      	add	r0, sl
    1bb6:	4484      	add	ip, r0
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1bb8:	0030      	movs	r0, r6
    1bba:	465c      	mov	r4, fp
    1bbc:	4338      	orrs	r0, r7
    1bbe:	4020      	ands	r0, r4
    1bc0:	003c      	movs	r4, r7
    1bc2:	f240 08b4 	movw	r8, #180	; 0xb4
    1bc6:	4034      	ands	r4, r6
    1bc8:	4320      	orrs	r0, r4
    1bca:	4682      	mov	sl, r0
    1bcc:	4640      	mov	r0, r8
    1bce:	ac04      	add	r4, sp, #16
    1bd0:	5820      	ldr	r0, [r4, r0]
    1bd2:	465c      	mov	r4, fp
    1bd4:	4680      	mov	r8, r0
    1bd6:	4660      	mov	r0, ip
    1bd8:	41d0      	rors	r0, r2
    1bda:	44c8      	add	r8, r9
    1bdc:	41dc      	rors	r4, r3
    1bde:	4441      	add	r1, r8
    1be0:	4451      	add	r1, sl
    1be2:	4682      	mov	sl, r0
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1be4:	0020      	movs	r0, r4
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1be6:	448a      	add	sl, r1
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1be8:	4661      	mov	r1, ip
    1bea:	4330      	orrs	r0, r6
    1bec:	4008      	ands	r0, r1
    1bee:	0031      	movs	r1, r6
    1bf0:	f240 08b8 	movw	r8, #184	; 0xb8
    1bf4:	4021      	ands	r1, r4
    1bf6:	4308      	orrs	r0, r1
    1bf8:	4683      	mov	fp, r0
    1bfa:	4640      	mov	r0, r8
    1bfc:	a904      	add	r1, sp, #16
    1bfe:	5809      	ldr	r1, [r1, r0]
    1c00:	4650      	mov	r0, sl
    1c02:	4688      	mov	r8, r1
    1c04:	41d0      	rors	r0, r2
    1c06:	44c8      	add	r8, r9
    1c08:	4447      	add	r7, r8
    1c0a:	4680      	mov	r8, r0
    1c0c:	4660      	mov	r0, ip
    1c0e:	41d8      	rors	r0, r3
    1c10:	445f      	add	r7, fp
    1c12:	44b8      	add	r8, r7
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1c14:	0007      	movs	r7, r0
    1c16:	4651      	mov	r1, sl
    1c18:	4327      	orrs	r7, r4
    1c1a:	400f      	ands	r7, r1
    1c1c:	0021      	movs	r1, r4
    1c1e:	f240 0cbc 	movw	ip, #188	; 0xbc
    1c22:	4001      	ands	r1, r0
    1c24:	430f      	orrs	r7, r1
    1c26:	46bb      	mov	fp, r7
    1c28:	4667      	mov	r7, ip
    1c2a:	a904      	add	r1, sp, #16
    1c2c:	59c9      	ldr	r1, [r1, r7]
    1c2e:	4647      	mov	r7, r8
    1c30:	468c      	mov	ip, r1
    1c32:	4651      	mov	r1, sl
    1c34:	41d7      	rors	r7, r2
    1c36:	44cc      	add	ip, r9
    1c38:	41d9      	rors	r1, r3
    1c3a:	4466      	add	r6, ip
    1c3c:	445e      	add	r6, fp
    1c3e:	46bb      	mov	fp, r7
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1c40:	000f      	movs	r7, r1
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1c42:	44b3      	add	fp, r6
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1c44:	4646      	mov	r6, r8
    1c46:	4307      	orrs	r7, r0
    1c48:	4037      	ands	r7, r6
    1c4a:	0006      	movs	r6, r0
    1c4c:	f240 0cc0 	movw	ip, #192	; 0xc0
    1c50:	400e      	ands	r6, r1
    1c52:	4337      	orrs	r7, r6
    1c54:	46ba      	mov	sl, r7
    1c56:	4667      	mov	r7, ip
    1c58:	ae04      	add	r6, sp, #16
    1c5a:	59f6      	ldr	r6, [r6, r7]
    1c5c:	465f      	mov	r7, fp
    1c5e:	46b4      	mov	ip, r6
    1c60:	41d7      	rors	r7, r2
    1c62:	44cc      	add	ip, r9
    1c64:	4464      	add	r4, ip
    1c66:	46bc      	mov	ip, r7
    1c68:	4647      	mov	r7, r8
    1c6a:	41df      	rors	r7, r3
    1c6c:	4454      	add	r4, sl
    1c6e:	44a4      	add	ip, r4
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1c70:	003c      	movs	r4, r7
    1c72:	465e      	mov	r6, fp
    1c74:	430c      	orrs	r4, r1
    1c76:	4034      	ands	r4, r6
    1c78:	000e      	movs	r6, r1
    1c7a:	f240 08c4 	movw	r8, #196	; 0xc4
    1c7e:	403e      	ands	r6, r7
    1c80:	4334      	orrs	r4, r6
    1c82:	46a2      	mov	sl, r4
    1c84:	4644      	mov	r4, r8
    1c86:	ae04      	add	r6, sp, #16
    1c88:	5934      	ldr	r4, [r6, r4]
    1c8a:	465e      	mov	r6, fp
    1c8c:	46a0      	mov	r8, r4
    1c8e:	4664      	mov	r4, ip
    1c90:	41d4      	rors	r4, r2
    1c92:	44c8      	add	r8, r9
    1c94:	41de      	rors	r6, r3
    1c96:	4440      	add	r0, r8
    1c98:	4450      	add	r0, sl
    1c9a:	46a2      	mov	sl, r4
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1c9c:	0034      	movs	r4, r6
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1c9e:	4482      	add	sl, r0
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1ca0:	4660      	mov	r0, ip
    1ca2:	433c      	orrs	r4, r7
    1ca4:	4004      	ands	r4, r0
    1ca6:	0038      	movs	r0, r7
    1ca8:	f240 08c8 	movw	r8, #200	; 0xc8
    1cac:	4030      	ands	r0, r6
    1cae:	4304      	orrs	r4, r0
    1cb0:	46a3      	mov	fp, r4
    1cb2:	4644      	mov	r4, r8
    1cb4:	a804      	add	r0, sp, #16
    1cb6:	5900      	ldr	r0, [r0, r4]
    1cb8:	4654      	mov	r4, sl
    1cba:	4680      	mov	r8, r0
    1cbc:	41d4      	rors	r4, r2
    1cbe:	44c8      	add	r8, r9
    1cc0:	4441      	add	r1, r8
    1cc2:	46a0      	mov	r8, r4
    1cc4:	4664      	mov	r4, ip
    1cc6:	41dc      	rors	r4, r3
    1cc8:	4459      	add	r1, fp
    1cca:	4488      	add	r8, r1
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1ccc:	0021      	movs	r1, r4
    1cce:	4650      	mov	r0, sl
    1cd0:	4331      	orrs	r1, r6
    1cd2:	4001      	ands	r1, r0
    1cd4:	0030      	movs	r0, r6
    1cd6:	f240 0ccc 	movw	ip, #204	; 0xcc
    1cda:	4020      	ands	r0, r4
    1cdc:	4301      	orrs	r1, r0
    1cde:	468b      	mov	fp, r1
    1ce0:	4661      	mov	r1, ip
    1ce2:	a804      	add	r0, sp, #16
    1ce4:	5841      	ldr	r1, [r0, r1]
    1ce6:	4650      	mov	r0, sl
    1ce8:	468c      	mov	ip, r1
    1cea:	4641      	mov	r1, r8
    1cec:	41d1      	rors	r1, r2
    1cee:	44cc      	add	ip, r9
    1cf0:	41d8      	rors	r0, r3
    1cf2:	4467      	add	r7, ip
    1cf4:	445f      	add	r7, fp
    1cf6:	468b      	mov	fp, r1
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1cf8:	0001      	movs	r1, r0
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1cfa:	44bb      	add	fp, r7
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1cfc:	4647      	mov	r7, r8
    1cfe:	4321      	orrs	r1, r4
    1d00:	4039      	ands	r1, r7
    1d02:	0027      	movs	r7, r4
    1d04:	f240 0cd0 	movw	ip, #208	; 0xd0
    1d08:	4007      	ands	r7, r0
    1d0a:	4339      	orrs	r1, r7
    1d0c:	468a      	mov	sl, r1
    1d0e:	4661      	mov	r1, ip
    1d10:	af04      	add	r7, sp, #16
    1d12:	5879      	ldr	r1, [r7, r1]
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1d14:	465f      	mov	r7, fp
    1d16:	468c      	mov	ip, r1
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1d18:	4659      	mov	r1, fp
    1d1a:	41d1      	rors	r1, r2
    1d1c:	44cc      	add	ip, r9
    1d1e:	4466      	add	r6, ip
    1d20:	468c      	mov	ip, r1
    1d22:	4641      	mov	r1, r8
    1d24:	41d9      	rors	r1, r3
    1d26:	4456      	add	r6, sl
    1d28:	44b4      	add	ip, r6
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1d2a:	000e      	movs	r6, r1
    1d2c:	4306      	orrs	r6, r0
    1d2e:	403e      	ands	r6, r7
    1d30:	0007      	movs	r7, r0
    1d32:	f240 08d4 	movw	r8, #212	; 0xd4
    1d36:	400f      	ands	r7, r1
    1d38:	433e      	orrs	r6, r7
    1d3a:	46b2      	mov	sl, r6
    1d3c:	4646      	mov	r6, r8
    1d3e:	af04      	add	r7, sp, #16
    1d40:	59be      	ldr	r6, [r7, r6]
    1d42:	465f      	mov	r7, fp
    1d44:	46b0      	mov	r8, r6
    1d46:	4666      	mov	r6, ip
    1d48:	41d6      	rors	r6, r2
    1d4a:	44c8      	add	r8, r9
    1d4c:	41df      	rors	r7, r3
    1d4e:	4444      	add	r4, r8
    1d50:	4454      	add	r4, sl
    1d52:	46b2      	mov	sl, r6
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1d54:	003e      	movs	r6, r7
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1d56:	44a2      	add	sl, r4
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1d58:	4664      	mov	r4, ip
    1d5a:	430e      	orrs	r6, r1
    1d5c:	4026      	ands	r6, r4
    1d5e:	000c      	movs	r4, r1
    1d60:	f240 08d8 	movw	r8, #216	; 0xd8
    1d64:	403c      	ands	r4, r7
    1d66:	4326      	orrs	r6, r4
    1d68:	46b3      	mov	fp, r6
    1d6a:	4646      	mov	r6, r8
    1d6c:	ac04      	add	r4, sp, #16
    1d6e:	59a4      	ldr	r4, [r4, r6]
    1d70:	4656      	mov	r6, sl
    1d72:	46a0      	mov	r8, r4
    1d74:	41d6      	rors	r6, r2
    1d76:	44c8      	add	r8, r9
    1d78:	4440      	add	r0, r8
    1d7a:	46b0      	mov	r8, r6
    1d7c:	4666      	mov	r6, ip
    1d7e:	41de      	rors	r6, r3
    1d80:	4458      	add	r0, fp
    1d82:	4480      	add	r8, r0
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1d84:	0030      	movs	r0, r6
    1d86:	4654      	mov	r4, sl
    1d88:	4338      	orrs	r0, r7
    1d8a:	4020      	ands	r0, r4
    1d8c:	003c      	movs	r4, r7
    1d8e:	f240 0cdc 	movw	ip, #220	; 0xdc
    1d92:	4034      	ands	r4, r6
    1d94:	4320      	orrs	r0, r4
    1d96:	4683      	mov	fp, r0
    1d98:	4660      	mov	r0, ip
    1d9a:	ac04      	add	r4, sp, #16
    1d9c:	5820      	ldr	r0, [r4, r0]
    1d9e:	4654      	mov	r4, sl
    1da0:	4684      	mov	ip, r0
    1da2:	4640      	mov	r0, r8
    1da4:	41d0      	rors	r0, r2
    1da6:	44cc      	add	ip, r9
    1da8:	41dc      	rors	r4, r3
    1daa:	4461      	add	r1, ip
    1dac:	4459      	add	r1, fp
    1dae:	4683      	mov	fp, r0
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1db0:	0020      	movs	r0, r4
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
    1db2:	448b      	add	fp, r1
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1db4:	4641      	mov	r1, r8
    1db6:	4330      	orrs	r0, r6
    1db8:	4008      	ands	r0, r1
    1dba:	0031      	movs	r1, r6
    1dbc:	f240 0ce0 	movw	ip, #224	; 0xe0
    1dc0:	4021      	ands	r1, r4
    1dc2:	4308      	orrs	r0, r1
    1dc4:	4682      	mov	sl, r0
    1dc6:	4660      	mov	r0, ip
    1dc8:	a904      	add	r1, sp, #16
    1dca:	5809      	ldr	r1, [r1, r0]
    1dcc:	4658      	mov	r0, fp
    1dce:	468c      	mov	ip, r1
    1dd0:	41d0      	rors	r0, r2
    1dd2:	44cc      	add	ip, r9
    1dd4:	4467      	add	r7, ip
    1dd6:	4684      	mov	ip, r0
    1dd8:	4640      	mov	r0, r8
    1dda:	4457      	add	r7, sl
    1ddc:	44bc      	add	ip, r7
    1dde:	41d8      	rors	r0, r3
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1de0:	0027      	movs	r7, r4
    1de2:	4659      	mov	r1, fp
    1de4:	f240 08e4 	movw	r8, #228	; 0xe4
    1de8:	4307      	orrs	r7, r0
    1dea:	400f      	ands	r7, r1
    1dec:	0001      	movs	r1, r0
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
    1dee:	4682      	mov	sl, r0
    1df0:	4640      	mov	r0, r8
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1df2:	4021      	ands	r1, r4
    1df4:	430f      	orrs	r7, r1
    1df6:	a904      	add	r1, sp, #16
    1df8:	5809      	ldr	r1, [r1, r0]
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1dfa:	4660      	mov	r0, ip
    1dfc:	4688      	mov	r8, r1
    1dfe:	44c8      	add	r8, r9
    1e00:	4446      	add	r6, r8
    1e02:	19be      	adds	r6, r7, r6
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1e04:	4667      	mov	r7, ip
    1e06:	4659      	mov	r1, fp
    1e08:	41d7      	rors	r7, r2
    1e0a:	41d9      	rors	r1, r3
    1e0c:	46b8      	mov	r8, r7
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1e0e:	4657      	mov	r7, sl
    1e10:	430f      	orrs	r7, r1
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
    1e12:	44b0      	add	r8, r6
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1e14:	4007      	ands	r7, r0
    1e16:	000e      	movs	r6, r1
    1e18:	4650      	mov	r0, sl
    1e1a:	4006      	ands	r6, r0
    1e1c:	4337      	orrs	r7, r6
    1e1e:	26e8      	movs	r6, #232	; 0xe8
    1e20:	a804      	add	r0, sp, #16
    1e22:	5986      	ldr	r6, [r0, r6]
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1e24:	4640      	mov	r0, r8
    1e26:	444e      	add	r6, r9
    1e28:	1934      	adds	r4, r6, r4
    1e2a:	193f      	adds	r7, r7, r4
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1e2c:	4644      	mov	r4, r8
    1e2e:	41d4      	rors	r4, r2
    1e30:	46a3      	mov	fp, r4
    1e32:	4664      	mov	r4, ip
    1e34:	41dc      	rors	r4, r3
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1e36:	000e      	movs	r6, r1
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
    1e38:	44bb      	add	fp, r7
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1e3a:	0027      	movs	r7, r4
    1e3c:	f240 0cec 	movw	ip, #236	; 0xec
    1e40:	4326      	orrs	r6, r4
    1e42:	400f      	ands	r7, r1
    1e44:	4006      	ands	r6, r0
    1e46:	433e      	orrs	r6, r7
    1e48:	4667      	mov	r7, ip
    1e4a:	a804      	add	r0, sp, #16
    1e4c:	59c0      	ldr	r0, [r0, r7]
    1e4e:	af04      	add	r7, sp, #16
    1e50:	4684      	mov	ip, r0
    1e52:	4650      	mov	r0, sl
    1e54:	44cc      	add	ip, r9
    1e56:	4460      	add	r0, ip
    1e58:	1830      	adds	r0, r6, r0
    1e5a:	465e      	mov	r6, fp
    1e5c:	41d6      	rors	r6, r2
    1e5e:	46b4      	mov	ip, r6
    1e60:	4484      	add	ip, r0
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1e62:	20f0      	movs	r0, #240	; 0xf0
    1e64:	5838      	ldr	r0, [r7, r0]
    1e66:	f24c 17d6 	movw	r7, #49622	; 0xc1d6
    1e6a:	f6cc 2762 	movt	r7, #51810	; 0xca62
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
    1e6e:	4646      	mov	r6, r8
    1e70:	46b8      	mov	r8, r7
    1e72:	4440      	add	r0, r8
    1e74:	41de      	rors	r6, r3
    1e76:	1841      	adds	r1, r0, r1
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1e78:	0020      	movs	r0, r4
    1e7a:	465f      	mov	r7, fp
    1e7c:	4070      	eors	r0, r6
    1e7e:	4078      	eors	r0, r7
    1e80:	1809      	adds	r1, r1, r0
    1e82:	4660      	mov	r0, ip
    1e84:	41d0      	rors	r0, r2
    1e86:	4680      	mov	r8, r0
    1e88:	4488      	add	r8, r1
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    1e8a:	21f4      	movs	r1, #244	; 0xf4
    1e8c:	a804      	add	r0, sp, #16
    1e8e:	5840      	ldr	r0, [r0, r1]
    1e90:	f24c 11d6 	movw	r1, #49622	; 0xc1d6
    1e94:	f6cc 2162 	movt	r1, #51810	; 0xca62
    1e98:	4689      	mov	r9, r1
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1e9a:	41df      	rors	r7, r3
    1e9c:	4448      	add	r0, r9
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    1e9e:	0031      	movs	r1, r6
    1ea0:	1904      	adds	r4, r0, r4
    1ea2:	4660      	mov	r0, ip
    1ea4:	4079      	eors	r1, r7
    1ea6:	4041      	eors	r1, r0
    1ea8:	1864      	adds	r4, r4, r1
    1eaa:	4641      	mov	r1, r8
    1eac:	41d1      	rors	r1, r2
    1eae:	190c      	adds	r4, r1, r4
    1eb0:	4661      	mov	r1, ip
    1eb2:	41d9      	rors	r1, r3
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    1eb4:	20f8      	movs	r0, #248	; 0xf8
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    1eb6:	468a      	mov	sl, r1
    1eb8:	a904      	add	r1, sp, #16
    1eba:	5808      	ldr	r0, [r1, r0]
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    1ebc:	4641      	mov	r1, r8
    1ebe:	4448      	add	r0, r9
    1ec0:	1986      	adds	r6, r0, r6
    1ec2:	4650      	mov	r0, sl
    1ec4:	4078      	eors	r0, r7
    1ec6:	4048      	eors	r0, r1
    1ec8:	1836      	adds	r6, r6, r0
    1eca:	0020      	movs	r0, r4
    1ecc:	41d0      	rors	r0, r2
    1ece:	4684      	mov	ip, r0
    1ed0:	4640      	mov	r0, r8
    1ed2:	44b4      	add	ip, r6
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    1ed4:	26fc      	movs	r6, #252	; 0xfc
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    1ed6:	41d8      	rors	r0, r3
    1ed8:	a904      	add	r1, sp, #16
    1eda:	598e      	ldr	r6, [r1, r6]
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    1edc:	4651      	mov	r1, sl
    1ede:	444e      	add	r6, r9
    1ee0:	19f7      	adds	r7, r6, r7
    1ee2:	0006      	movs	r6, r0
    1ee4:	404e      	eors	r6, r1
    1ee6:	4066      	eors	r6, r4
    1ee8:	19bf      	adds	r7, r7, r6
    1eea:	4666      	mov	r6, ip
    1eec:	41d6      	rors	r6, r2
    1eee:	19f7      	adds	r7, r6, r7
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    1ef0:	f240 1600 	movw	r6, #256	; 0x100
    1ef4:	46c8      	mov	r8, r9
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    1ef6:	41dc      	rors	r4, r3
    1ef8:	a904      	add	r1, sp, #16
    1efa:	598e      	ldr	r6, [r1, r6]
    1efc:	46a1      	mov	r9, r4
    1efe:	4446      	add	r6, r8
    1f00:	0031      	movs	r1, r6
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    1f02:	0026      	movs	r6, r4
    1f04:	4664      	mov	r4, ip
    1f06:	4046      	eors	r6, r0
    1f08:	4066      	eors	r6, r4
    1f0a:	4451      	add	r1, sl
    1f0c:	1989      	adds	r1, r1, r6
    1f0e:	003e      	movs	r6, r7
    1f10:	41d6      	rors	r6, r2
    1f12:	46b0      	mov	r8, r6
    1f14:	4488      	add	r8, r1
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1f16:	f240 1104 	movw	r1, #260	; 0x104
    1f1a:	ac04      	add	r4, sp, #16
    1f1c:	5861      	ldr	r1, [r4, r1]
    1f1e:	f24c 14d6 	movw	r4, #49622	; 0xc1d6
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    1f22:	4666      	mov	r6, ip
    1f24:	f6cc 2462 	movt	r4, #51810	; 0xca62
    1f28:	46a4      	mov	ip, r4
    1f2a:	41de      	rors	r6, r3
    1f2c:	4461      	add	r1, ip
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1f2e:	464c      	mov	r4, r9
    1f30:	1808      	adds	r0, r1, r0
    1f32:	0031      	movs	r1, r6
    1f34:	4061      	eors	r1, r4
    1f36:	4079      	eors	r1, r7
    1f38:	1840      	adds	r0, r0, r1
    1f3a:	4641      	mov	r1, r8
    1f3c:	41d1      	rors	r1, r2
    1f3e:	1808      	adds	r0, r1, r0
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    1f40:	f240 1108 	movw	r1, #264	; 0x108
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1f44:	41df      	rors	r7, r3
    1f46:	ac04      	add	r4, sp, #16
    1f48:	5861      	ldr	r1, [r4, r1]
    1f4a:	46ba      	mov	sl, r7
    1f4c:	4461      	add	r1, ip
    1f4e:	4449      	add	r1, r9
    1f50:	000c      	movs	r4, r1
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    1f52:	0039      	movs	r1, r7
    1f54:	4647      	mov	r7, r8
    1f56:	4071      	eors	r1, r6
    1f58:	4079      	eors	r1, r7
    1f5a:	1864      	adds	r4, r4, r1
    1f5c:	0001      	movs	r1, r0
    1f5e:	41d1      	rors	r1, r2
    1f60:	468c      	mov	ip, r1
    1f62:	44a4      	add	ip, r4
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    1f64:	f240 140c 	movw	r4, #268	; 0x10c
    1f68:	af04      	add	r7, sp, #16
    1f6a:	593c      	ldr	r4, [r7, r4]
    1f6c:	f24c 17d6 	movw	r7, #49622	; 0xc1d6
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    1f70:	4641      	mov	r1, r8
    1f72:	f6cc 2762 	movt	r7, #51810	; 0xca62
    1f76:	46b8      	mov	r8, r7
    1f78:	41d9      	rors	r1, r3
    1f7a:	4444      	add	r4, r8
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    1f7c:	4657      	mov	r7, sl
    1f7e:	19a6      	adds	r6, r4, r6
    1f80:	000c      	movs	r4, r1
    1f82:	407c      	eors	r4, r7
    1f84:	4044      	eors	r4, r0
    1f86:	1936      	adds	r6, r6, r4
    1f88:	4664      	mov	r4, ip
    1f8a:	41d4      	rors	r4, r2
    1f8c:	19a6      	adds	r6, r4, r6
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    1f8e:	f240 1410 	movw	r4, #272	; 0x110
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    1f92:	41d8      	rors	r0, r3
    1f94:	af04      	add	r7, sp, #16
    1f96:	593c      	ldr	r4, [r7, r4]
    1f98:	4681      	mov	r9, r0
    1f9a:	4444      	add	r4, r8
    1f9c:	4454      	add	r4, sl
    1f9e:	0027      	movs	r7, r4
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    1fa0:	0004      	movs	r4, r0
    1fa2:	4660      	mov	r0, ip
    1fa4:	404c      	eors	r4, r1
    1fa6:	4044      	eors	r4, r0
    1fa8:	193f      	adds	r7, r7, r4
    1faa:	0034      	movs	r4, r6
    1fac:	41d4      	rors	r4, r2
    1fae:	46a0      	mov	r8, r4
    1fb0:	44b8      	add	r8, r7
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    1fb2:	f240 1714 	movw	r7, #276	; 0x114
    1fb6:	a804      	add	r0, sp, #16
    1fb8:	59c7      	ldr	r7, [r0, r7]
    1fba:	f24c 10d6 	movw	r0, #49622	; 0xc1d6
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    1fbe:	4664      	mov	r4, ip
    1fc0:	f6cc 2062 	movt	r0, #51810	; 0xca62
    1fc4:	4684      	mov	ip, r0
    1fc6:	41dc      	rors	r4, r3
    1fc8:	4467      	add	r7, ip
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    1fca:	4648      	mov	r0, r9
    1fcc:	1879      	adds	r1, r7, r1
    1fce:	0027      	movs	r7, r4
    1fd0:	4047      	eors	r7, r0
    1fd2:	4077      	eors	r7, r6
    1fd4:	19c9      	adds	r1, r1, r7
    1fd6:	4647      	mov	r7, r8
    1fd8:	41d7      	rors	r7, r2
    1fda:	1879      	adds	r1, r7, r1
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1fdc:	f240 1718 	movw	r7, #280	; 0x118
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    1fe0:	41de      	rors	r6, r3
    1fe2:	a804      	add	r0, sp, #16
    1fe4:	59c7      	ldr	r7, [r0, r7]
    1fe6:	46b2      	mov	sl, r6
    1fe8:	4467      	add	r7, ip
    1fea:	0038      	movs	r0, r7
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    1fec:	0037      	movs	r7, r6
    1fee:	4646      	mov	r6, r8
    1ff0:	4067      	eors	r7, r4
    1ff2:	4077      	eors	r7, r6
    1ff4:	4448      	add	r0, r9
    1ff6:	19c0      	adds	r0, r0, r7
    1ff8:	000f      	movs	r7, r1
    1ffa:	41d7      	rors	r7, r2
    1ffc:	46bc      	mov	ip, r7
    1ffe:	4484      	add	ip, r0
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    2000:	f240 101c 	movw	r0, #284	; 0x11c
    2004:	ae04      	add	r6, sp, #16
    2006:	5830      	ldr	r0, [r6, r0]
    2008:	f24c 16d6 	movw	r6, #49622	; 0xc1d6
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    200c:	4647      	mov	r7, r8
    200e:	f6cc 2662 	movt	r6, #51810	; 0xca62
    2012:	46b0      	mov	r8, r6
    2014:	41df      	rors	r7, r3
    2016:	4440      	add	r0, r8
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    2018:	4656      	mov	r6, sl
    201a:	1904      	adds	r4, r0, r4
    201c:	0038      	movs	r0, r7
    201e:	4070      	eors	r0, r6
    2020:	4048      	eors	r0, r1
    2022:	1824      	adds	r4, r4, r0
    2024:	4660      	mov	r0, ip
    2026:	41d0      	rors	r0, r2
    2028:	1904      	adds	r4, r0, r4
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    202a:	f240 1020 	movw	r0, #288	; 0x120
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    202e:	41d9      	rors	r1, r3
    2030:	ae04      	add	r6, sp, #16
    2032:	5830      	ldr	r0, [r6, r0]
    2034:	4689      	mov	r9, r1
    2036:	4440      	add	r0, r8
    2038:	4450      	add	r0, sl
    203a:	0006      	movs	r6, r0
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    203c:	0008      	movs	r0, r1
    203e:	4661      	mov	r1, ip
    2040:	4078      	eors	r0, r7
    2042:	4048      	eors	r0, r1
    2044:	1836      	adds	r6, r6, r0
    2046:	0020      	movs	r0, r4
    2048:	41d0      	rors	r0, r2
    204a:	4680      	mov	r8, r0
    204c:	44b0      	add	r8, r6
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    204e:	f240 1624 	movw	r6, #292	; 0x124
    2052:	a904      	add	r1, sp, #16
    2054:	598e      	ldr	r6, [r1, r6]
    2056:	f24c 11d6 	movw	r1, #49622	; 0xc1d6
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    205a:	4660      	mov	r0, ip
    205c:	f6cc 2162 	movt	r1, #51810	; 0xca62
    2060:	468c      	mov	ip, r1
    2062:	41d8      	rors	r0, r3
    2064:	4466      	add	r6, ip
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    2066:	4649      	mov	r1, r9
    2068:	19f7      	adds	r7, r6, r7
    206a:	0006      	movs	r6, r0
    206c:	404e      	eors	r6, r1
    206e:	4066      	eors	r6, r4
    2070:	19bf      	adds	r7, r7, r6
    2072:	4646      	mov	r6, r8
    2074:	41d6      	rors	r6, r2
    2076:	19f7      	adds	r7, r6, r7
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    2078:	f240 1628 	movw	r6, #296	; 0x128
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    207c:	41dc      	rors	r4, r3
    207e:	a904      	add	r1, sp, #16
    2080:	598e      	ldr	r6, [r1, r6]
    2082:	46a2      	mov	sl, r4
    2084:	4466      	add	r6, ip
    2086:	0031      	movs	r1, r6
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    2088:	0026      	movs	r6, r4
    208a:	4644      	mov	r4, r8
    208c:	4046      	eors	r6, r0
    208e:	4066      	eors	r6, r4
    2090:	4449      	add	r1, r9
    2092:	1989      	adds	r1, r1, r6
    2094:	003e      	movs	r6, r7
    2096:	41d6      	rors	r6, r2
    2098:	46b4      	mov	ip, r6
    209a:	448c      	add	ip, r1
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    209c:	f240 112c 	movw	r1, #300	; 0x12c
    20a0:	ac04      	add	r4, sp, #16
    20a2:	5861      	ldr	r1, [r4, r1]
    20a4:	f24c 14d6 	movw	r4, #49622	; 0xc1d6
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    20a8:	4646      	mov	r6, r8
    20aa:	f6cc 2462 	movt	r4, #51810	; 0xca62
    20ae:	46a0      	mov	r8, r4
    20b0:	41de      	rors	r6, r3
    20b2:	4441      	add	r1, r8
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    20b4:	4654      	mov	r4, sl
    20b6:	1808      	adds	r0, r1, r0
    20b8:	0031      	movs	r1, r6
    20ba:	4061      	eors	r1, r4
    20bc:	4079      	eors	r1, r7
    20be:	1840      	adds	r0, r0, r1
    20c0:	4661      	mov	r1, ip
    20c2:	41d1      	rors	r1, r2
    20c4:	4689      	mov	r9, r1
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    20c6:	f240 1130 	movw	r1, #304	; 0x130
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
    20ca:	41df      	rors	r7, r3
    20cc:	ac04      	add	r4, sp, #16
    20ce:	5861      	ldr	r1, [r4, r1]
    20d0:	4481      	add	r9, r0
    20d2:	4441      	add	r1, r8
    20d4:	4451      	add	r1, sl
    20d6:	000c      	movs	r4, r1
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
    20d8:	0039      	movs	r1, r7
    20da:	4660      	mov	r0, ip
    20dc:	4071      	eors	r1, r6
    20de:	4041      	eors	r1, r0
    20e0:	1864      	adds	r4, r4, r1
    20e2:	4649      	mov	r1, r9
    20e4:	41d1      	rors	r1, r2
    20e6:	190c      	adds	r4, r1, r4
    20e8:	4661      	mov	r1, ip
    20ea:	41d9      	rors	r1, r3
    20ec:	468c      	mov	ip, r1
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    20ee:	f240 1134 	movw	r1, #308	; 0x134
    20f2:	a804      	add	r0, sp, #16
    20f4:	5841      	ldr	r1, [r0, r1]
    20f6:	4648      	mov	r0, r9
    20f8:	4441      	add	r1, r8
    20fa:	198e      	adds	r6, r1, r6
    20fc:	4661      	mov	r1, ip
    20fe:	4079      	eors	r1, r7
    2100:	4041      	eors	r1, r0
    2102:	1876      	adds	r6, r6, r1
    2104:	0021      	movs	r1, r4
    2106:	41d1      	rors	r1, r2
    2108:	468a      	mov	sl, r1
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    210a:	f240 1138 	movw	r1, #312	; 0x138
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
    210e:	44b2      	add	sl, r6
    2110:	ae04      	add	r6, sp, #16
    2112:	5871      	ldr	r1, [r6, r1]
    2114:	41d8      	rors	r0, r3
    2116:	4441      	add	r1, r8
    2118:	19cf      	adds	r7, r1, r7
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    211a:	4661      	mov	r1, ip
    211c:	4041      	eors	r1, r0
    211e:	4061      	eors	r1, r4
    2120:	187f      	adds	r7, r7, r1
    2122:	4651      	mov	r1, sl
    2124:	41d1      	rors	r1, r2
    2126:	19cf      	adds	r7, r1, r7
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    2128:	f240 113c 	movw	r1, #316	; 0x13c
	val[0] += a;
    212c:	ae04      	add	r6, sp, #16
    212e:	5871      	ldr	r1, [r6, r1]
    2130:	682e      	ldr	r6, [r5, #0]
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
    2132:	41dc      	rors	r4, r3
	val[0] += a;
    2134:	46b0      	mov	r8, r6
    2136:	f24c 16d6 	movw	r6, #49622	; 0xc1d6
    213a:	f6cc 2662 	movt	r6, #51810	; 0xca62
    213e:	4441      	add	r1, r8
    2140:	46b0      	mov	r8, r6
    2142:	4441      	add	r1, r8
    2144:	4461      	add	r1, ip
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    2146:	0006      	movs	r6, r0
	val[0] += a;
    2148:	4688      	mov	r8, r1
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    214a:	4651      	mov	r1, sl
    214c:	4066      	eors	r6, r4
    214e:	404e      	eors	r6, r1
    2150:	46b4      	mov	ip, r6
    2152:	003e      	movs	r6, r7
	val[0] += a;
    2154:	4641      	mov	r1, r8
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    2156:	41d6      	rors	r6, r2
	val[0] += a;
    2158:	4461      	add	r1, ip
    215a:	198a      	adds	r2, r1, r6
    215c:	602a      	str	r2, [r5, #0]
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    215e:	4656      	mov	r6, sl
	val[1] += b;
    2160:	686a      	ldr	r2, [r5, #4]
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
    2162:	41de      	rors	r6, r3
	val[1] += b;
    2164:	4694      	mov	ip, r2
	val[2] += c;
    2166:	68ab      	ldr	r3, [r5, #8]
	val[1] += b;
    2168:	4467      	add	r7, ip
	val[2] += c;
    216a:	469c      	mov	ip, r3
	val[3] += d;
    216c:	68eb      	ldr	r3, [r5, #12]
	val[2] += c;
    216e:	4466      	add	r6, ip
	val[3] += d;
    2170:	469c      	mov	ip, r3
	val[4] += e;
    2172:	692b      	ldr	r3, [r5, #16]
	val[3] += d;
    2174:	4464      	add	r4, ip
	val[4] += e;
    2176:	469c      	mov	ip, r3
    2178:	4460      	add	r0, ip
	val[1] += b;
    217a:	606f      	str	r7, [r5, #4]
	val[2] += c;
    217c:	60ae      	str	r6, [r5, #8]
	val[3] += d;
    217e:	60ec      	str	r4, [r5, #12]
	val[4] += e;
    2180:	6128      	str	r0, [r5, #16]
}
    2182:	b055      	add	sp, #340	; 0x154
    2184:	bc3c      	pop	{r2, r3, r4, r5}
    2186:	4690      	mov	r8, r2
    2188:	4699      	mov	r9, r3
    218a:	46a2      	mov	sl, r4
    218c:	46ab      	mov	fp, r5
    218e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002190 <br_sha1_update>:
{
    2190:	b5f0      	push	{r4, r5, r6, r7, lr}
    2192:	4645      	mov	r5, r8
    2194:	464e      	mov	r6, r9
    2196:	46de      	mov	lr, fp
    2198:	4657      	mov	r7, sl
    219a:	b5e0      	push	{r5, r6, r7, lr}
	ptr = (size_t)cc->count & 63;
    219c:	253f      	movs	r5, #63	; 0x3f
    219e:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
    21a0:	b085      	sub	sp, #20
    21a2:	4680      	mov	r8, r0
    21a4:	0016      	movs	r6, r2
	ptr = (size_t)cc->count & 63;
    21a6:	401d      	ands	r5, r3
	while (len > 0) {
    21a8:	b37a      	cbz	r2, 220a <br_sha1_update+0x7a>
    21aa:	2304      	movs	r3, #4
    21ac:	4443      	add	r3, r8
    21ae:	469a      	mov	sl, r3
			br_sha1_round(cc->buf, cc->val);
    21b0:	2350      	movs	r3, #80	; 0x50
    21b2:	4443      	add	r3, r8
    21b4:	9302      	str	r3, [sp, #8]
    21b6:	f241 434d 	movw	r3, #5197	; 0x144d
    21ba:	f642 69d3 	movw	r9, #11987	; 0x2ed3
	while (len > 0) {
    21be:	000f      	movs	r7, r1
		clen = 64 - ptr;
    21c0:	f240 0b40 	movw	fp, #64	; 0x40
			br_sha1_round(cc->buf, cc->val);
    21c4:	f2c0 0300 	movt	r3, #0
    21c8:	f2c0 0900 	movt	r9, #0
    21cc:	9303      	str	r3, [sp, #12]
		clen = 64 - ptr;
    21ce:	465b      	mov	r3, fp
    21d0:	1b5c      	subs	r4, r3, r5
    21d2:	42b4      	cmp	r4, r6
    21d4:	d900      	bls.n	21d8 <br_sha1_update+0x48>
    21d6:	0034      	movs	r4, r6
		memcpy(cc->buf + ptr, buf, clen);
    21d8:	4653      	mov	r3, sl
    21da:	0039      	movs	r1, r7
    21dc:	1958      	adds	r0, r3, r5
    21de:	0022      	movs	r2, r4
    21e0:	47c8      	blx	r9
		cc->count += (uint64_t)clen;
    21e2:	2300      	movs	r3, #0
    21e4:	9301      	str	r3, [sp, #4]
    21e6:	4643      	mov	r3, r8
    21e8:	9400      	str	r4, [sp, #0]
    21ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    21ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    21ee:	9800      	ldr	r0, [sp, #0]
    21f0:	9901      	ldr	r1, [sp, #4]
    21f2:	1812      	adds	r2, r2, r0
    21f4:	414b      	adcs	r3, r1
    21f6:	4641      	mov	r1, r8
		ptr += clen;
    21f8:	192d      	adds	r5, r5, r4
		buf += clen;
    21fa:	193f      	adds	r7, r7, r4
		len -= clen;
    21fc:	1b36      	subs	r6, r6, r4
		cc->count += (uint64_t)clen;
    21fe:	648a      	str	r2, [r1, #72]	; 0x48
    2200:	64cb      	str	r3, [r1, #76]	; 0x4c
		if (ptr == 64) {
    2202:	2d40      	cmp	r5, #64	; 0x40
    2204:	d008      	beq.n	2218 <br_sha1_update+0x88>
	while (len > 0) {
    2206:	2e00      	cmp	r6, #0
    2208:	d1e1      	bne.n	21ce <br_sha1_update+0x3e>
}
    220a:	b005      	add	sp, #20
    220c:	bc3c      	pop	{r2, r3, r4, r5}
    220e:	4690      	mov	r8, r2
    2210:	4699      	mov	r9, r3
    2212:	46a2      	mov	sl, r4
    2214:	46ab      	mov	fp, r5
    2216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			br_sha1_round(cc->buf, cc->val);
    2218:	9902      	ldr	r1, [sp, #8]
    221a:	4650      	mov	r0, sl
    221c:	9b03      	ldr	r3, [sp, #12]
    221e:	4798      	blx	r3
			ptr = 0;
    2220:	2500      	movs	r5, #0
	while (len > 0) {
    2222:	2e00      	cmp	r6, #0
    2224:	d1d3      	bne.n	21ce <br_sha1_update+0x3e>
    2226:	e7f0      	b.n	220a <br_sha1_update+0x7a>

00002228 <br_sha1_out>:
{
    2228:	b5f0      	push	{r4, r5, r6, r7, lr}
    222a:	46d6      	mov	lr, sl
    222c:	464f      	mov	r7, r9
    222e:	4646      	mov	r6, r8
	ptr = (size_t)cc->count & 63;
    2230:	233f      	movs	r3, #63	; 0x3f
	memcpy(buf, cc->buf, ptr);
    2232:	f642 6ad3 	movw	sl, #11987	; 0x2ed3
{
    2236:	b5c0      	push	{r6, r7, lr}
    2238:	0007      	movs	r7, r0
	ptr = (size_t)cc->count & 63;
    223a:	6c85      	ldr	r5, [r0, #72]	; 0x48
{
    223c:	b096      	sub	sp, #88	; 0x58
	ptr = (size_t)cc->count & 63;
    223e:	402b      	ands	r3, r5
	memcpy(buf, cc->buf, ptr);
    2240:	ac06      	add	r4, sp, #24
    2242:	001a      	movs	r2, r3
	ptr = (size_t)cc->count & 63;
    2244:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
	memcpy(buf, cc->buf, ptr);
    2246:	f2c0 0a00 	movt	sl, #0
{
    224a:	4689      	mov	r9, r1
	memcpy(buf, cc->buf, ptr);
    224c:	1d01      	adds	r1, r0, #4
    224e:	0020      	movs	r0, r4
	ptr = (size_t)cc->count & 63;
    2250:	4698      	mov	r8, r3
	memcpy(buf, cc->buf, ptr);
    2252:	47d0      	blx	sl
	memcpy(val, cc->val, sizeof val);
    2254:	0039      	movs	r1, r7
    2256:	2214      	movs	r2, #20
    2258:	3150      	adds	r1, #80	; 0x50
    225a:	a801      	add	r0, sp, #4
    225c:	47d0      	blx	sl
	buf[ptr ++] = 0x80;
    225e:	4643      	mov	r3, r8
    2260:	4642      	mov	r2, r8
    2262:	1c58      	adds	r0, r3, #1
    2264:	2380      	movs	r3, #128	; 0x80
    2266:	54a3      	strb	r3, [r4, r2]
	if (ptr > 56) {
    2268:	2838      	cmp	r0, #56	; 0x38
    226a:	d837      	bhi.n	22dc <br_sha1_out+0xb4>
		memset(buf + ptr, 0, 56 - ptr);
    226c:	2238      	movs	r2, #56	; 0x38
    226e:	f642 7309 	movw	r3, #12041	; 0x2f09
    2272:	1a12      	subs	r2, r2, r0
    2274:	2100      	movs	r1, #0
    2276:	1820      	adds	r0, r4, r0
    2278:	f2c0 0300 	movt	r3, #0
    227c:	f241 484d 	movw	r8, #5197	; 0x144d
    2280:	4798      	blx	r3
    2282:	f2c0 0800 	movt	r8, #0
	br_enc64be(buf + 56, cc->count << 3);
    2286:	0f6a      	lsrs	r2, r5, #29
    2288:	00f6      	lsls	r6, r6, #3
    228a:	4316      	orrs	r6, r2
    buf[0] = (unsigned char)(x >> 24);
    228c:	2238      	movs	r2, #56	; 0x38
    228e:	233c      	movs	r3, #60	; 0x3c
    2290:	0e31      	lsrs	r1, r6, #24
    2292:	54a1      	strb	r1, [r4, r2]
    buf[1] = (unsigned char)(x >> 16);
    2294:	0c31      	lsrs	r1, r6, #16
    2296:	3201      	adds	r2, #1
    2298:	54a1      	strb	r1, [r4, r2]
    buf[2] = (unsigned char)(x >> 8);
    229a:	0a31      	lsrs	r1, r6, #8
    229c:	3201      	adds	r2, #1
    229e:	00ed      	lsls	r5, r5, #3
    22a0:	54a1      	strb	r1, [r4, r2]
    buf[3] = (unsigned char)x;
    22a2:	3201      	adds	r2, #1
    22a4:	54a6      	strb	r6, [r4, r2]
    buf[0] = (unsigned char)(x >> 24);
    22a6:	0e2a      	lsrs	r2, r5, #24
    22a8:	54e2      	strb	r2, [r4, r3]
    buf[1] = (unsigned char)(x >> 16);
    22aa:	0c2a      	lsrs	r2, r5, #16
    22ac:	3301      	adds	r3, #1
    22ae:	54e2      	strb	r2, [r4, r3]
    buf[2] = (unsigned char)(x >> 8);
    22b0:	0a2a      	lsrs	r2, r5, #8
    22b2:	3301      	adds	r3, #1
    22b4:	54e2      	strb	r2, [r4, r3]
    buf[3] = (unsigned char)x;
    22b6:	3301      	adds	r3, #1
    22b8:	54e5      	strb	r5, [r4, r3]
	br_sha1_round(buf, val);
    22ba:	a901      	add	r1, sp, #4
    22bc:	0020      	movs	r0, r4
    22be:	47c0      	blx	r8
	br_range_enc32be(dst, val, 5);
    22c0:	f240 13cd 	movw	r3, #461	; 0x1cd
    22c4:	2205      	movs	r2, #5
    22c6:	a901      	add	r1, sp, #4
    22c8:	4648      	mov	r0, r9
    22ca:	f2c0 0300 	movt	r3, #0
    22ce:	4798      	blx	r3
}
    22d0:	b016      	add	sp, #88	; 0x58
    22d2:	bc1c      	pop	{r2, r3, r4}
    22d4:	4690      	mov	r8, r2
    22d6:	4699      	mov	r9, r3
    22d8:	46a2      	mov	sl, r4
    22da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(buf + ptr, 0, 64 - ptr);
    22dc:	2240      	movs	r2, #64	; 0x40
    22de:	f642 7509 	movw	r5, #12041	; 0x2f09
		br_sha1_round(buf, val);
    22e2:	f241 484d 	movw	r8, #5197	; 0x144d
		memset(buf + ptr, 0, 64 - ptr);
    22e6:	1a12      	subs	r2, r2, r0
    22e8:	f2c0 0500 	movt	r5, #0
    22ec:	2100      	movs	r1, #0
    22ee:	1820      	adds	r0, r4, r0
    22f0:	47a8      	blx	r5
		br_sha1_round(buf, val);
    22f2:	f2c0 0800 	movt	r8, #0
    22f6:	a901      	add	r1, sp, #4
    22f8:	0020      	movs	r0, r4
    22fa:	47c0      	blx	r8
		memset(buf, 0, 56);
    22fc:	2238      	movs	r2, #56	; 0x38
    22fe:	2100      	movs	r1, #0
    2300:	0020      	movs	r0, r4
    2302:	47a8      	blx	r5
    2304:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    2306:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    2308:	e7bd      	b.n	2286 <br_sha1_out+0x5e>
    230a:	46c0      	nop			; (mov r8, r8)

0000230c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    230c:	e7fe      	b.n	230c <Dummy_Handler>
    230e:	46c0      	nop			; (mov r8, r8)

00002310 <Reset_Handler>:
        if (pSrc != pDest) {
    2310:	f643 71ac 	movw	r1, #16300	; 0x3fac
    2314:	f240 0000 	movw	r0, #0
    2318:	f2c0 0100 	movt	r1, #0
    231c:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
    2320:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2322:	4281      	cmp	r1, r0
    2324:	d00f      	beq.n	2346 <Reset_Handler+0x36>
                for (; pDest < &_erelocate;) {
    2326:	f240 0364 	movw	r3, #100	; 0x64
    232a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    232e:	4298      	cmp	r0, r3
    2330:	d209      	bcs.n	2346 <Reset_Handler+0x36>
                        *pDest++ = *pSrc++;
    2332:	43c2      	mvns	r2, r0
    2334:	18d2      	adds	r2, r2, r3
    2336:	f642 63d3 	movw	r3, #11987	; 0x2ed3
    233a:	0892      	lsrs	r2, r2, #2
    233c:	3201      	adds	r2, #1
    233e:	0092      	lsls	r2, r2, #2
    2340:	f2c0 0300 	movt	r3, #0
    2344:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    2346:	f240 0064 	movw	r0, #100	; 0x64
    234a:	f640 1318 	movw	r3, #2328	; 0x918
    234e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2356:	4298      	cmp	r0, r3
    2358:	d20a      	bcs.n	2370 <Reset_Handler+0x60>
                *pDest++ = 0;
    235a:	43c2      	mvns	r2, r0
    235c:	18d2      	adds	r2, r2, r3
    235e:	f642 7309 	movw	r3, #12041	; 0x2f09
    2362:	0892      	lsrs	r2, r2, #2
    2364:	3201      	adds	r2, #1
    2366:	0092      	lsls	r2, r2, #2
    2368:	2100      	movs	r1, #0
    236a:	f2c0 0300 	movt	r3, #0
    236e:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2370:	f240 0300 	movw	r3, #0
    2374:	227f      	movs	r2, #127	; 0x7f
    2376:	f2c0 0300 	movt	r3, #0
    237a:	4393      	bics	r3, r2
    237c:	f64e 5200 	movw	r2, #60672	; 0xed00
    2380:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2384:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    2386:	f642 539d 	movw	r3, #11677	; 0x2d9d
    238a:	f2c0 0300 	movt	r3, #0
    238e:	4798      	blx	r3
        main();
    2390:	f642 1309 	movw	r3, #10505	; 0x2909
    2394:	f2c0 0300 	movt	r3, #0
    2398:	4798      	blx	r3
    239a:	e7fe      	b.n	239a <Reset_Handler+0x8a>

0000239c <system_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    239c:	23c0      	movs	r3, #192	; 0xc0
    239e:	2280      	movs	r2, #128	; 0x80
    23a0:	05db      	lsls	r3, r3, #23
{
	delay_init(SysTick);
}

void system_init(void)
{
    23a2:	b510      	push	{r4, lr}
    23a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    23a6:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    23a8:	f243 0300 	movw	r3, #12288	; 0x3000
    23ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
    23b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    23b4:	629a      	str	r2, [r3, #40]	; 0x28
    23b6:	22c0      	movs	r2, #192	; 0xc0
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23b8:	2147      	movs	r1, #71	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
    23ba:	2001      	movs	r0, #1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    23bc:	0612      	lsls	r2, r2, #24
    23be:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23c0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
    23c2:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    23c4:	545a      	strb	r2, [r3, r1]
	delay_init(SysTick);
    23c6:	f24e 0010 	movw	r0, #57360	; 0xe010
    23ca:	f242 33dd 	movw	r3, #9181	; 0x23dd
    23ce:	f2ce 0000 	movt	r0, #57344	; 0xe000
    23d2:	f2c0 0300 	movt	r3, #0
    23d6:	4798      	blx	r3
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
}
    23d8:	bd10      	pop	{r4, pc}
    23da:	46c0      	nop			; (mov r8, r8)

000023dc <delay_init>:
/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
	_delay_init(hardware = hw);
    23dc:	f240 0380 	movw	r3, #128	; 0x80
    23e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
    23e4:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    23e6:	6018      	str	r0, [r3, #0]
    23e8:	f242 4349 	movw	r3, #9289	; 0x2449
    23ec:	f2c0 0300 	movt	r3, #0
    23f0:	4798      	blx	r3
}
    23f2:	bd10      	pop	{r4, pc}

000023f4 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    23f4:	f240 0384 	movw	r3, #132	; 0x84
    23f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    23fc:	681a      	ldr	r2, [r3, #0]
    23fe:	b11a      	cbz	r2, 2408 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
    2400:	1810      	adds	r0, r2, r0
    2402:	6018      	str	r0, [r3, #0]

	return (caddr_t)prev_heap;
}
    2404:	0010      	movs	r0, r2
    2406:	4770      	bx	lr
    2408:	f640 7218 	movw	r2, #3864	; 0xf18
    240c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2410:	e7f6      	b.n	2400 <_sbrk+0xc>
    2412:	46c0      	nop			; (mov r8, r8)

00002414 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    2414:	2001      	movs	r0, #1
    2416:	4240      	negs	r0, r0
    2418:	4770      	bx	lr
    241a:	46c0      	nop			; (mov r8, r8)

0000241c <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    241c:	f242 0300 	movw	r3, #8192	; 0x2000

	return 0;
}
    2420:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    2422:	604b      	str	r3, [r1, #4]
}
    2424:	4770      	bx	lr
    2426:	46c0      	nop			; (mov r8, r8)

00002428 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    2428:	2001      	movs	r0, #1
    242a:	4770      	bx	lr

0000242c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    242c:	2000      	movs	r0, #0
    242e:	4770      	bx	lr

00002430 <_exit>:

/**
 * \brief Replacement of C library of _exit
 */
extern void _exit(int status)
{
    2430:	0001      	movs	r1, r0
	printf("Exiting with status %d.\n", status);
    2432:	f243 53e5 	movw	r3, #13797	; 0x35e5
    2436:	f643 1080 	movw	r0, #14720	; 0x3980
{
    243a:	b510      	push	{r4, lr}
	printf("Exiting with status %d.\n", status);
    243c:	f2c0 0000 	movt	r0, #0
    2440:	f2c0 0300 	movt	r3, #0
    2444:	4798      	blx	r3
    2446:	e7fe      	b.n	2446 <_exit+0x16>

00002448 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2448:	f24e 0310 	movw	r3, #57360	; 0xe010
    244c:	4a03      	ldr	r2, [pc, #12]	; (245c <_delay_init+0x14>)
    244e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2452:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2454:	2205      	movs	r2, #5
    2456:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
    2458:	4770      	bx	lr
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	00ffffff 	.word	0x00ffffff

00002460 <rng_fake_update>:
static void rng_fake_update(rng_fake_ctx *cc, const void *src, size_t len)
{
    (void) cc;
    (void) src;
    (void) len;
    fprintf(stderr, "unexpected update\n");
    2460:	f240 0300 	movw	r3, #0
{
    2464:	b510      	push	{r4, lr}
    fprintf(stderr, "unexpected update\n");
    2466:	f643 10ac 	movw	r0, #14764	; 0x39ac
    246a:	f642 5485 	movw	r4, #11653	; 0x2d85
    246e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2472:	681b      	ldr	r3, [r3, #0]
    2474:	f2c0 0000 	movt	r0, #0
    2478:	68db      	ldr	r3, [r3, #12]
    247a:	2212      	movs	r2, #18
    247c:	2101      	movs	r1, #1
    247e:	f2c0 0400 	movt	r4, #0
    2482:	47a0      	blx	r4
    exit(EXIT_FAILURE);
    2484:	f642 13a1 	movw	r3, #10657	; 0x29a1
    2488:	2001      	movs	r0, #1
    248a:	f2c0 0300 	movt	r3, #0
    248e:	4798      	blx	r3

00002490 <rng_fake_init.part.0>:
        fprintf(stderr, "seed is too large (%lu bytes)\n", (unsigned long) len);
    2490:	f240 0300 	movw	r3, #0
    2494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2498:	681b      	ldr	r3, [r3, #0]
static void rng_fake_init(rng_fake_ctx *cc, const void *params,
    249a:	0002      	movs	r2, r0
        fprintf(stderr, "seed is too large (%lu bytes)\n", (unsigned long) len);
    249c:	f643 11c0 	movw	r1, #14784	; 0x39c0
    24a0:	68d8      	ldr	r0, [r3, #12]
    24a2:	f642 438d 	movw	r3, #11405	; 0x2c8d
static void rng_fake_init(rng_fake_ctx *cc, const void *params,
    24a6:	b510      	push	{r4, lr}
        fprintf(stderr, "seed is too large (%lu bytes)\n", (unsigned long) len);
    24a8:	f2c0 0300 	movt	r3, #0
    24ac:	f2c0 0100 	movt	r1, #0
    24b0:	4798      	blx	r3
        exit(EXIT_FAILURE);
    24b2:	f642 13a1 	movw	r3, #10657	; 0x29a1
    24b6:	2001      	movs	r0, #1
    24b8:	f2c0 0300 	movt	r3, #0
    24bc:	4798      	blx	r3
	...

000024c0 <rng_fake_init>:
{
    24c0:	b570      	push	{r4, r5, r6, lr}
    24c2:	0011      	movs	r1, r2
    24c4:	0005      	movs	r5, r0
    24c6:	001c      	movs	r4, r3
    if (len > sizeof cc->buf)
    24c8:	2b80      	cmp	r3, #128	; 0x80
    24ca:	d810      	bhi.n	24ee <rng_fake_init+0x2e>
    cc->vtable = &rng_fake_vtable;
    24cc:	f643 139c 	movw	r3, #14748	; 0x399c
    24d0:	f2c0 0300 	movt	r3, #0
    24d4:	c008      	stmia	r0!, {r3}
    memcpy(cc->buf, seed, len);
    24d6:	f642 63d3 	movw	r3, #11987	; 0x2ed3
    24da:	0022      	movs	r2, r4
    24dc:	f2c0 0300 	movt	r3, #0
    24e0:	4798      	blx	r3
    cc->ptr = 0;
    24e2:	2200      	movs	r2, #0
    24e4:	2384      	movs	r3, #132	; 0x84
    24e6:	50ea      	str	r2, [r5, r3]
    cc->len = len;
    24e8:	3304      	adds	r3, #4
    24ea:	50ec      	str	r4, [r5, r3]
}
    24ec:	bd70      	pop	{r4, r5, r6, pc}
    24ee:	0018      	movs	r0, r3
    24f0:	f242 4391 	movw	r3, #9361	; 0x2491
    24f4:	f2c0 0300 	movt	r3, #0
    24f8:	4798      	blx	r3
    24fa:	46c0      	nop			; (mov r8, r8)

000024fc <rng_fake_generate>:
{
    24fc:	b570      	push	{r4, r5, r6, lr}
    if (len > (cc->len - cc->ptr))
    24fe:	2388      	movs	r3, #136	; 0x88
{
    2500:	0004      	movs	r4, r0
    if (len > (cc->len - cc->ptr))
    2502:	2584      	movs	r5, #132	; 0x84
{
    2504:	0016      	movs	r6, r2
    if (len > (cc->len - cc->ptr))
    2506:	58e3      	ldr	r3, [r4, r3]
    2508:	5962      	ldr	r2, [r4, r5]
{
    250a:	0008      	movs	r0, r1
    if (len > (cc->len - cc->ptr))
    250c:	1a9b      	subs	r3, r3, r2
    250e:	42b3      	cmp	r3, r6
    2510:	d30c      	bcc.n	252c <rng_fake_generate+0x30>
    memcpy(dst, cc->buf + cc->ptr, len);
    2512:	f642 63d3 	movw	r3, #11987	; 0x2ed3
    2516:	1d21      	adds	r1, r4, #4
    2518:	1889      	adds	r1, r1, r2
    251a:	f2c0 0300 	movt	r3, #0
    251e:	0032      	movs	r2, r6
    2520:	4798      	blx	r3
    cc->ptr += len;
    2522:	5963      	ldr	r3, [r4, r5]
    2524:	469c      	mov	ip, r3
    2526:	4466      	add	r6, ip
    2528:	5166      	str	r6, [r4, r5]
}
    252a:	bd70      	pop	{r4, r5, r6, pc}
        fprintf(stderr, "asking for more data than expected\n");
    252c:	f240 0300 	movw	r3, #0
    2530:	f643 10e0 	movw	r0, #14816	; 0x39e0
    2534:	f642 5485 	movw	r4, #11653	; 0x2d85
    2538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253c:	681b      	ldr	r3, [r3, #0]
    253e:	2223      	movs	r2, #35	; 0x23
    2540:	68db      	ldr	r3, [r3, #12]
    2542:	2101      	movs	r1, #1
    2544:	f2c0 0000 	movt	r0, #0
    2548:	f2c0 0400 	movt	r4, #0
    254c:	47a0      	blx	r4
        exit(EXIT_FAILURE);
    254e:	f642 13a1 	movw	r3, #10657	; 0x29a1
    2552:	2001      	movs	r0, #1
    2554:	f2c0 0300 	movt	r3, #0
    2558:	4798      	blx	r3
    255a:	46c0      	nop			; (mov r8, r8)

0000255c <test_encrypt>:
}

#endif

void test_encrypt()
{
    255c:	b5f0      	push	{r4, r5, r6, r7, lr}
    255e:	4647      	mov	r7, r8
    2560:	46ce      	mov	lr, r9
    2562:	b580      	push	{r7, lr}
    2564:	4cb2      	ldr	r4, [pc, #712]	; (2830 <test_encrypt+0x2d4>)
    unsigned char iq[256];
    br_rsa_public_key pk;
    br_rsa_private_key sk;
    size_t v;

    pk.n = n;
    2566:	f643 2104 	movw	r1, #14852	; 0x3a04
{
    256a:	44a5      	add	sp, r4
    pk.n = n;
    256c:	f240 54c0 	movw	r4, #1472	; 0x5c0
    num = 0;
    2570:	2500      	movs	r5, #0
    acc = 0;
    2572:	2700      	movs	r7, #0
    z = 0;
    2574:	2000      	movs	r0, #0
    while (*src != 0)
    2576:	2242      	movs	r2, #66	; 0x42
    2578:	2601      	movs	r6, #1
    pk.n = n;
    257a:	446c      	add	r4, sp
    257c:	9409      	str	r4, [sp, #36]	; 0x24
    257e:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    2582:	0013      	movs	r3, r2
    2584:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    2586:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    2588:	2b09      	cmp	r3, #9
    258a:	d907      	bls.n	259c <test_encrypt+0x40>
        else if (c >= 'A' && c <= 'F')
    258c:	3b11      	subs	r3, #17
    258e:	2b05      	cmp	r3, #5
    2590:	d903      	bls.n	259a <test_encrypt+0x3e>
        else if (c >= 'a' && c <= 'f')
    2592:	0013      	movs	r3, r2
    2594:	3b61      	subs	r3, #97	; 0x61
    2596:	2b05      	cmp	r3, #5
    2598:	d809      	bhi.n	25ae <test_encrypt+0x52>
            c -= ('a' - 10);
    259a:	330a      	adds	r3, #10
        if (z)
    259c:	2800      	cmp	r0, #0
    259e:	d100      	bne.n	25a2 <test_encrypt+0x46>
    25a0:	e1a8      	b.n	28f4 <test_encrypt+0x398>
            *dst++ = (acc << 4) + c;
    25a2:	013a      	lsls	r2, r7, #4
    25a4:	18d3      	adds	r3, r2, r3
    25a6:	7023      	strb	r3, [r4, #0]
            num++;
    25a8:	3501      	adds	r5, #1
            *dst++ = (acc << 4) + c;
    25aa:	3401      	adds	r4, #1
    25ac:	4070      	eors	r0, r6
    while (*src != 0)
    25ae:	780a      	ldrb	r2, [r1, #0]
    25b0:	2a00      	cmp	r2, #0
    25b2:	d1e6      	bne.n	2582 <test_encrypt+0x26>
    pk.nlen = hextobin(n, KAT_RSA_OAEP[u++]);
    25b4:	af09      	add	r7, sp, #36	; 0x24
    pk.e = e;
    25b6:	f643 3108 	movw	r1, #15112	; 0x3b08
    pk.nlen = hextobin(n, KAT_RSA_OAEP[u++]);
    25ba:	607d      	str	r5, [r7, #4]
    acc = 0;
    25bc:	f240 0c00 	movw	ip, #0
    num = 0;
    25c0:	2500      	movs	r5, #0
    z = 0;
    25c2:	2000      	movs	r0, #0
    25c4:	2601      	movs	r6, #1
    pk.e = e;
    25c6:	ac07      	add	r4, sp, #28
    25c8:	60bc      	str	r4, [r7, #8]
    while (*src != 0)
    25ca:	3231      	adds	r2, #49	; 0x31
    pk.e = e;
    25cc:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    25d0:	0013      	movs	r3, r2
    25d2:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    25d4:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    25d6:	2b09      	cmp	r3, #9
    25d8:	d907      	bls.n	25ea <test_encrypt+0x8e>
        else if (c >= 'A' && c <= 'F')
    25da:	3b11      	subs	r3, #17
    25dc:	2b05      	cmp	r3, #5
    25de:	d903      	bls.n	25e8 <test_encrypt+0x8c>
        else if (c >= 'a' && c <= 'f')
    25e0:	0013      	movs	r3, r2
    25e2:	3b61      	subs	r3, #97	; 0x61
    25e4:	2b05      	cmp	r3, #5
    25e6:	d80a      	bhi.n	25fe <test_encrypt+0xa2>
            c -= ('a' - 10);
    25e8:	330a      	adds	r3, #10
        if (z)
    25ea:	2800      	cmp	r0, #0
    25ec:	d100      	bne.n	25f0 <test_encrypt+0x94>
    25ee:	e17e      	b.n	28ee <test_encrypt+0x392>
            *dst++ = (acc << 4) + c;
    25f0:	4662      	mov	r2, ip
    25f2:	0112      	lsls	r2, r2, #4
    25f4:	18d3      	adds	r3, r2, r3
    25f6:	7023      	strb	r3, [r4, #0]
            num++;
    25f8:	3501      	adds	r5, #1
            *dst++ = (acc << 4) + c;
    25fa:	3401      	adds	r4, #1
    25fc:	4070      	eors	r0, r6
    while (*src != 0)
    25fe:	780a      	ldrb	r2, [r1, #0]
    2600:	2a00      	cmp	r2, #0
    2602:	d1e5      	bne.n	25d0 <test_encrypt+0x74>
    pk.elen = hextobin(e, KAT_RSA_OAEP[u++]);
    2604:	f643 310c 	movw	r1, #15116	; 0x3b0c
    2608:	60fd      	str	r5, [r7, #12]
    acc = 0;
    260a:	2600      	movs	r6, #0
    z = 0;
    260c:	2000      	movs	r0, #0
    260e:	2501      	movs	r5, #1
    pk.elen = hextobin(e, KAT_RSA_OAEP[u++]);
    2610:	ac30      	add	r4, sp, #192	; 0xc0
    while (*src != 0)
    2612:	3245      	adds	r2, #69	; 0x45
    pk.elen = hextobin(e, KAT_RSA_OAEP[u++]);
    2614:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    2618:	0013      	movs	r3, r2
    261a:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    261c:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    261e:	2b09      	cmp	r3, #9
    2620:	d907      	bls.n	2632 <test_encrypt+0xd6>
        else if (c >= 'A' && c <= 'F')
    2622:	3b11      	subs	r3, #17
    2624:	2b05      	cmp	r3, #5
    2626:	d903      	bls.n	2630 <test_encrypt+0xd4>
        else if (c >= 'a' && c <= 'f')
    2628:	0013      	movs	r3, r2
    262a:	3b61      	subs	r3, #97	; 0x61
    262c:	2b05      	cmp	r3, #5
    262e:	d808      	bhi.n	2642 <test_encrypt+0xe6>
            c -= ('a' - 10);
    2630:	330a      	adds	r3, #10
        if (z)
    2632:	2800      	cmp	r0, #0
    2634:	d100      	bne.n	2638 <test_encrypt+0xdc>
    2636:	e157      	b.n	28e8 <test_encrypt+0x38c>
            *dst++ = (acc << 4) + c;
    2638:	0132      	lsls	r2, r6, #4
    263a:	18d3      	adds	r3, r2, r3
    263c:	7023      	strb	r3, [r4, #0]
    263e:	4068      	eors	r0, r5
    2640:	3401      	adds	r4, #1
    while (*src != 0)
    2642:	780a      	ldrb	r2, [r1, #0]
    2644:	2a00      	cmp	r2, #0
    2646:	d1e7      	bne.n	2618 <test_encrypt+0xbc>
    2648:	f643 3190 	movw	r1, #15248	; 0x3b90
    264c:	2600      	movs	r6, #0
    264e:	2000      	movs	r0, #0
    2650:	2501      	movs	r5, #1
    2652:	ac70      	add	r4, sp, #448	; 0x1c0
    2654:	3243      	adds	r2, #67	; 0x43
    2656:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    265a:	0013      	movs	r3, r2
    265c:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    265e:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    2660:	2b09      	cmp	r3, #9
    2662:	d907      	bls.n	2674 <test_encrypt+0x118>
        else if (c >= 'A' && c <= 'F')
    2664:	3b11      	subs	r3, #17
    2666:	2b05      	cmp	r3, #5
    2668:	d903      	bls.n	2672 <test_encrypt+0x116>
        else if (c >= 'a' && c <= 'f')
    266a:	0013      	movs	r3, r2
    266c:	3b61      	subs	r3, #97	; 0x61
    266e:	2b05      	cmp	r3, #5
    2670:	d808      	bhi.n	2684 <test_encrypt+0x128>
            c -= ('a' - 10);
    2672:	330a      	adds	r3, #10
        if (z)
    2674:	2800      	cmp	r0, #0
    2676:	d100      	bne.n	267a <test_encrypt+0x11e>
    2678:	e133      	b.n	28e2 <test_encrypt+0x386>
            *dst++ = (acc << 4) + c;
    267a:	0132      	lsls	r2, r6, #4
    267c:	18d3      	adds	r3, r2, r3
    267e:	7023      	strb	r3, [r4, #0]
    2680:	4068      	eors	r0, r5
    2682:	3401      	adds	r4, #1
    while (*src != 0)
    2684:	780a      	ldrb	r2, [r1, #0]
    2686:	2a00      	cmp	r2, #0
    2688:	d1e7      	bne.n	265a <test_encrypt+0xfe>
    268a:	f643 4114 	movw	r1, #15380	; 0x3c14
    268e:	2600      	movs	r6, #0
    2690:	2000      	movs	r0, #0
    2692:	2501      	movs	r5, #1
    2694:	acb0      	add	r4, sp, #704	; 0x2c0
    2696:	3235      	adds	r2, #53	; 0x35
    2698:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    269c:	0013      	movs	r3, r2
    269e:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    26a0:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    26a2:	2b09      	cmp	r3, #9
    26a4:	d907      	bls.n	26b6 <test_encrypt+0x15a>
        else if (c >= 'A' && c <= 'F')
    26a6:	3b11      	subs	r3, #17
    26a8:	2b05      	cmp	r3, #5
    26aa:	d903      	bls.n	26b4 <test_encrypt+0x158>
        else if (c >= 'a' && c <= 'f')
    26ac:	0013      	movs	r3, r2
    26ae:	3b61      	subs	r3, #97	; 0x61
    26b0:	2b05      	cmp	r3, #5
    26b2:	d808      	bhi.n	26c6 <test_encrypt+0x16a>
            c -= ('a' - 10);
    26b4:	330a      	adds	r3, #10
        if (z)
    26b6:	2800      	cmp	r0, #0
    26b8:	d100      	bne.n	26bc <test_encrypt+0x160>
    26ba:	e10f      	b.n	28dc <test_encrypt+0x380>
            *dst++ = (acc << 4) + c;
    26bc:	0132      	lsls	r2, r6, #4
    26be:	18d3      	adds	r3, r2, r3
    26c0:	7023      	strb	r3, [r4, #0]
    26c2:	4068      	eors	r0, r5
    26c4:	3401      	adds	r4, #1
    while (*src != 0)
    26c6:	780a      	ldrb	r2, [r1, #0]
    26c8:	2a00      	cmp	r2, #0
    26ca:	d1e7      	bne.n	269c <test_encrypt+0x140>
    26cc:	f643 4198 	movw	r1, #15512	; 0x3c98
    26d0:	2600      	movs	r6, #0
    26d2:	2000      	movs	r0, #0
    26d4:	2501      	movs	r5, #1
    26d6:	acf0      	add	r4, sp, #960	; 0x3c0
    26d8:	3234      	adds	r2, #52	; 0x34
    26da:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    26de:	0013      	movs	r3, r2
    26e0:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    26e2:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    26e4:	2b09      	cmp	r3, #9
    26e6:	d907      	bls.n	26f8 <test_encrypt+0x19c>
        else if (c >= 'A' && c <= 'F')
    26e8:	3b11      	subs	r3, #17
    26ea:	2b05      	cmp	r3, #5
    26ec:	d903      	bls.n	26f6 <test_encrypt+0x19a>
        else if (c >= 'a' && c <= 'f')
    26ee:	0013      	movs	r3, r2
    26f0:	3b61      	subs	r3, #97	; 0x61
    26f2:	2b05      	cmp	r3, #5
    26f4:	d808      	bhi.n	2708 <test_encrypt+0x1ac>
            c -= ('a' - 10);
    26f6:	330a      	adds	r3, #10
        if (z)
    26f8:	2800      	cmp	r0, #0
    26fa:	d100      	bne.n	26fe <test_encrypt+0x1a2>
    26fc:	e0eb      	b.n	28d6 <test_encrypt+0x37a>
            *dst++ = (acc << 4) + c;
    26fe:	0132      	lsls	r2, r6, #4
    2700:	18d3      	adds	r3, r2, r3
    2702:	7023      	strb	r3, [r4, #0]
    2704:	4068      	eors	r0, r5
    2706:	3401      	adds	r4, #1
    while (*src != 0)
    2708:	780a      	ldrb	r2, [r1, #0]
    270a:	2a00      	cmp	r2, #0
    270c:	d1e7      	bne.n	26de <test_encrypt+0x182>
    270e:	f643 511c 	movw	r1, #15644	; 0x3d1c
    2712:	2600      	movs	r6, #0
    2714:	2000      	movs	r0, #0
    2716:	2501      	movs	r5, #1
    2718:	acff      	add	r4, sp, #1020	; 0x3fc
    271a:	34c4      	adds	r4, #196	; 0xc4
    271c:	3242      	adds	r2, #66	; 0x42
    271e:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    2722:	0013      	movs	r3, r2
    2724:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    2726:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    2728:	2b09      	cmp	r3, #9
    272a:	d907      	bls.n	273c <test_encrypt+0x1e0>
        else if (c >= 'A' && c <= 'F')
    272c:	3b11      	subs	r3, #17
    272e:	2b05      	cmp	r3, #5
    2730:	d903      	bls.n	273a <test_encrypt+0x1de>
        else if (c >= 'a' && c <= 'f')
    2732:	0013      	movs	r3, r2
    2734:	3b61      	subs	r3, #97	; 0x61
    2736:	2b05      	cmp	r3, #5
    2738:	d808      	bhi.n	274c <test_encrypt+0x1f0>
            c -= ('a' - 10);
    273a:	330a      	adds	r3, #10
        if (z)
    273c:	2800      	cmp	r0, #0
    273e:	d100      	bne.n	2742 <test_encrypt+0x1e6>
    2740:	e0c6      	b.n	28d0 <test_encrypt+0x374>
            *dst++ = (acc << 4) + c;
    2742:	0132      	lsls	r2, r6, #4
    2744:	18d3      	adds	r3, r2, r3
    2746:	7023      	strb	r3, [r4, #0]
    2748:	4068      	eors	r0, r5
    274a:	3401      	adds	r4, #1
    while (*src != 0)
    274c:	780a      	ldrb	r2, [r1, #0]
    274e:	2a00      	cmp	r2, #0
    2750:	d1e7      	bne.n	2722 <test_encrypt+0x1c6>
    2752:	f240 7814 	movw	r8, #1812	; 0x714
    2756:	f643 51a0 	movw	r1, #15776	; 0x3da0
    275a:	f2c2 0800 	movt	r8, #8192	; 0x2000
    275e:	2600      	movs	r6, #0
    2760:	f240 0c00 	movw	ip, #0
    2764:	4644      	mov	r4, r8
    2766:	2000      	movs	r0, #0
    2768:	2501      	movs	r5, #1
    276a:	3244      	adds	r2, #68	; 0x44
    276c:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    2770:	0013      	movs	r3, r2
    2772:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    2774:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    2776:	2b09      	cmp	r3, #9
    2778:	d907      	bls.n	278a <test_encrypt+0x22e>
        else if (c >= 'A' && c <= 'F')
    277a:	3b11      	subs	r3, #17
    277c:	2b05      	cmp	r3, #5
    277e:	d903      	bls.n	2788 <test_encrypt+0x22c>
        else if (c >= 'a' && c <= 'f')
    2780:	0013      	movs	r3, r2
    2782:	3b61      	subs	r3, #97	; 0x61
    2784:	2b05      	cmp	r3, #5
    2786:	d80a      	bhi.n	279e <test_encrypt+0x242>
            c -= ('a' - 10);
    2788:	330a      	adds	r3, #10
        if (z)
    278a:	2800      	cmp	r0, #0
    278c:	d100      	bne.n	2790 <test_encrypt+0x234>
    278e:	e09c      	b.n	28ca <test_encrypt+0x36e>
            *dst++ = (acc << 4) + c;
    2790:	4662      	mov	r2, ip
    2792:	0112      	lsls	r2, r2, #4
    2794:	18d3      	adds	r3, r2, r3
    2796:	7023      	strb	r3, [r4, #0]
            num++;
    2798:	3601      	adds	r6, #1
            *dst++ = (acc << 4) + c;
    279a:	3401      	adds	r4, #1
    279c:	4068      	eors	r0, r5
    while (*src != 0)
    279e:	780a      	ldrb	r2, [r1, #0]
    27a0:	2a00      	cmp	r2, #0
    27a2:	d1e5      	bne.n	2770 <test_encrypt+0x214>
    27a4:	f240 6494 	movw	r4, #1684	; 0x694
    27a8:	f643 51c4 	movw	r1, #15812	; 0x3dc4
    27ac:	2500      	movs	r5, #0
    27ae:	f240 0900 	movw	r9, #0
    27b2:	2000      	movs	r0, #0
    27b4:	f240 0c01 	movw	ip, #1
    27b8:	f2c2 0400 	movt	r4, #8192	; 0x2000
    27bc:	3241      	adds	r2, #65	; 0x41
    27be:	f2c0 0100 	movt	r1, #0
        if (c >= '0' && c <= '9')
    27c2:	0013      	movs	r3, r2
    27c4:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    27c6:	3101      	adds	r1, #1
        if (c >= '0' && c <= '9')
    27c8:	2b09      	cmp	r3, #9
    27ca:	d907      	bls.n	27dc <test_encrypt+0x280>
        else if (c >= 'A' && c <= 'F')
    27cc:	3b11      	subs	r3, #17
    27ce:	2b05      	cmp	r3, #5
    27d0:	d903      	bls.n	27da <test_encrypt+0x27e>
        else if (c >= 'a' && c <= 'f')
    27d2:	0013      	movs	r3, r2
    27d4:	3b61      	subs	r3, #97	; 0x61
    27d6:	2b05      	cmp	r3, #5
    27d8:	d80b      	bhi.n	27f2 <test_encrypt+0x296>
            c -= ('a' - 10);
    27da:	330a      	adds	r3, #10
        if (z)
    27dc:	2800      	cmp	r0, #0
    27de:	d100      	bne.n	27e2 <test_encrypt+0x286>
    27e0:	e06f      	b.n	28c2 <test_encrypt+0x366>
            *dst++ = (acc << 4) + c;
    27e2:	464a      	mov	r2, r9
    27e4:	0112      	lsls	r2, r2, #4
    27e6:	18d3      	adds	r3, r2, r3
    27e8:	7023      	strb	r3, [r4, #0]
            num++;
    27ea:	3501      	adds	r5, #1
            *dst++ = (acc << 4) + c;
    27ec:	3401      	adds	r4, #1
    27ee:	4663      	mov	r3, ip
    27f0:	4058      	eors	r0, r3
    while (*src != 0)
    27f2:	780a      	ldrb	r2, [r1, #0]
    27f4:	2a00      	cmp	r2, #0
    27f6:	d1e4      	bne.n	27c2 <test_encrypt+0x266>
    27f8:	f240 4094 	movw	r0, #1172	; 0x494
    27fc:	f643 52f0 	movw	r2, #15856	; 0x3df0
    2800:	f240 0900 	movw	r9, #0
    2804:	2100      	movs	r1, #0
    2806:	2431      	movs	r4, #49	; 0x31
    2808:	f240 0c01 	movw	ip, #1
    280c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2810:	f2c0 0200 	movt	r2, #0
        if (c >= '0' && c <= '9')
    2814:	0023      	movs	r3, r4
    2816:	3b30      	subs	r3, #48	; 0x30
        int c = *src++;
    2818:	3201      	adds	r2, #1
        if (c >= '0' && c <= '9')
    281a:	2b09      	cmp	r3, #9
    281c:	d90b      	bls.n	2836 <test_encrypt+0x2da>
        else if (c >= 'A' && c <= 'F')
    281e:	3b11      	subs	r3, #17
    2820:	2b05      	cmp	r3, #5
    2822:	d907      	bls.n	2834 <test_encrypt+0x2d8>
        else if (c >= 'a' && c <= 'f')
    2824:	0023      	movs	r3, r4
    2826:	3b61      	subs	r3, #97	; 0x61
    2828:	2b05      	cmp	r3, #5
    282a:	d80d      	bhi.n	2848 <test_encrypt+0x2ec>
    282c:	e002      	b.n	2834 <test_encrypt+0x2d8>
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	fffff83c 	.word	0xfffff83c
            c -= ('a' - 10);
    2834:	330a      	adds	r3, #10
        if (z)
    2836:	2900      	cmp	r1, #0
    2838:	d045      	beq.n	28c6 <test_encrypt+0x36a>
            *dst++ = (acc << 4) + c;
    283a:	464c      	mov	r4, r9
    283c:	0124      	lsls	r4, r4, #4
    283e:	18e3      	adds	r3, r4, r3
    2840:	7003      	strb	r3, [r0, #0]
    2842:	3001      	adds	r0, #1
    2844:	4663      	mov	r3, ip
    2846:	4059      	eors	r1, r3
    while (*src != 0)
    2848:	7814      	ldrb	r4, [r2, #0]
    284a:	2c00      	cmp	r4, #0
    284c:	d1e2      	bne.n	2814 <test_encrypt+0x2b8>
    if (len > sizeof cc->buf)
    284e:	2d80      	cmp	r5, #128	; 0x80
    2850:	d853      	bhi.n	28fa <test_encrypt+0x39e>
    cc->vtable = &rng_fake_vtable;
    2852:	f643 139c 	movw	r3, #14748	; 0x399c
    2856:	f2c0 0300 	movt	r3, #0
    285a:	930d      	str	r3, [sp, #52]	; 0x34
    memcpy(cc->buf, seed, len);
    285c:	f240 6194 	movw	r1, #1684	; 0x694
    2860:	f642 63d3 	movw	r3, #11987	; 0x2ed3
    2864:	002a      	movs	r2, r5
    2866:	f2c2 0100 	movt	r1, #8192	; 0x2000
    286a:	a80e      	add	r0, sp, #56	; 0x38
    286c:	f2c0 0300 	movt	r3, #0
    2870:	4798      	blx	r3
    cc->ptr = 0;
    2872:	2134      	movs	r1, #52	; 0x34
    2874:	466a      	mov	r2, sp
    2876:	2384      	movs	r3, #132	; 0x84
    2878:	1852      	adds	r2, r2, r1
    287a:	50d4      	str	r4, [r2, r3]
    cc->len = len;
    287c:	466a      	mov	r2, sp
    287e:	3304      	adds	r3, #4
    2880:	1852      	adds	r2, r2, r1
    2882:	50d5      	str	r5, [r2, r3]
    plain_len = hextobin(plain, KAT_RSA_OAEP[u++]);
    seed_len = hextobin(seed, KAT_RSA_OAEP[u++]);
    cipher_len = hextobin(cipher, KAT_RSA_OAEP[u++]);
    rng_fake_init(&rng, NULL, seed, seed_len);

    br_rsa_i15_oaep_encrypt(&rng.vtable, &br_sha1_vtable, NULL, 0, &pk, resultBuffer, sizeof resultBuffer, plain, plain_len);
    2884:	4643      	mov	r3, r8
    2886:	9303      	str	r3, [sp, #12]
    2888:	f240 4300 	movw	r3, #1024	; 0x400
    288c:	9302      	str	r3, [sp, #8]
    288e:	f240 0394 	movw	r3, #148	; 0x94
    2892:	f643 1150 	movw	r1, #14672	; 0x3950
    2896:	f241 1491 	movw	r4, #4497	; 0x1191
    289a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    289e:	9301      	str	r3, [sp, #4]
    28a0:	9604      	str	r6, [sp, #16]
    28a2:	9700      	str	r7, [sp, #0]
    28a4:	2300      	movs	r3, #0
    28a6:	2200      	movs	r2, #0
    28a8:	f2c0 0100 	movt	r1, #0
    28ac:	a80d      	add	r0, sp, #52	; 0x34
    28ae:	f2c0 0400 	movt	r4, #0
    28b2:	47a0      	blx	r4

    mbedtls_pk_encrypt( &pk, plaintext, sizeof(plaintext),
                        resultBuffer, &olen, sizeof(resultBuffer),
                        NULL, NULL );
#endif
}
    28b4:	f240 73c4 	movw	r3, #1988	; 0x7c4
    28b8:	449d      	add	sp, r3
    28ba:	bc0c      	pop	{r2, r3}
    28bc:	4690      	mov	r8, r2
    28be:	4699      	mov	r9, r3
    28c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            acc = c;
    28c2:	4699      	mov	r9, r3
    28c4:	e793      	b.n	27ee <test_encrypt+0x292>
    28c6:	4699      	mov	r9, r3
    28c8:	e7bc      	b.n	2844 <test_encrypt+0x2e8>
    28ca:	469c      	mov	ip, r3
    28cc:	4068      	eors	r0, r5
    28ce:	e766      	b.n	279e <test_encrypt+0x242>
    28d0:	001e      	movs	r6, r3
    28d2:	4068      	eors	r0, r5
    28d4:	e73a      	b.n	274c <test_encrypt+0x1f0>
    28d6:	001e      	movs	r6, r3
    28d8:	4068      	eors	r0, r5
    28da:	e715      	b.n	2708 <test_encrypt+0x1ac>
    28dc:	001e      	movs	r6, r3
    28de:	4068      	eors	r0, r5
    28e0:	e6f1      	b.n	26c6 <test_encrypt+0x16a>
    28e2:	001e      	movs	r6, r3
    28e4:	4068      	eors	r0, r5
    28e6:	e6cd      	b.n	2684 <test_encrypt+0x128>
    28e8:	001e      	movs	r6, r3
    28ea:	4068      	eors	r0, r5
    28ec:	e6a9      	b.n	2642 <test_encrypt+0xe6>
    28ee:	469c      	mov	ip, r3
    28f0:	4070      	eors	r0, r6
    28f2:	e684      	b.n	25fe <test_encrypt+0xa2>
    28f4:	001f      	movs	r7, r3
    28f6:	4070      	eors	r0, r6
    28f8:	e659      	b.n	25ae <test_encrypt+0x52>
    28fa:	f242 4391 	movw	r3, #9361	; 0x2491
    28fe:	0028      	movs	r0, r5
    2900:	f2c0 0300 	movt	r3, #0
    2904:	4798      	blx	r3
    2906:	46c0      	nop			; (mov r8, r8)

00002908 <main>:
}

void main(void)
{

atmel_start_init();
    2908:	f240 1361 	movw	r3, #353	; 0x161
{
    290c:	b510      	push	{r4, lr}
atmel_start_init();
    290e:	f2c0 0300 	movt	r3, #0
{
    2912:	b082      	sub	sp, #8
atmel_start_init();
    2914:	4798      	blx	r3

#ifdef TIMER
volatile uint32_t a = 0;
    2916:	2300      	movs	r3, #0
    2918:	9301      	str	r3, [sp, #4]
	GCLK->PCHCTRL[14].reg = (GCLK_PCHCTRL_CHEN|GCLK_PCHCTRL_GEN_GCLK0); 
    291a:	f641 4300 	movw	r3, #7168	; 0x1c00
    291e:	2140      	movs	r1, #64	; 0x40
    2920:	22b8      	movs	r2, #184	; 0xb8
    2922:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2926:	5099      	str	r1, [r3, r2]
	TC0->COUNT32.CTRLA.bit.ENABLE = 0; // CNTLA is write protected to so we have to disable it before writing.
    2928:	f241 0300 	movw	r3, #4096	; 0x1000
	while(TC0->COUNT32.SYNCBUSY.reg & TC_SYNCBUSY_ENABLE);
    292c:	2002      	movs	r0, #2
	TC0->COUNT32.CTRLA.bit.ENABLE = 0; // CNTLA is write protected to so we have to disable it before writing.
    292e:	f2c4 2300 	movt	r3, #16896	; 0x4200
    2932:	681a      	ldr	r2, [r3, #0]
    2934:	393e      	subs	r1, #62	; 0x3e
    2936:	438a      	bics	r2, r1
    2938:	601a      	str	r2, [r3, #0]
	while(TC0->COUNT32.SYNCBUSY.reg & TC_SYNCBUSY_ENABLE);
    293a:	691a      	ldr	r2, [r3, #16]
    293c:	4210      	tst	r0, r2
    293e:	d1fc      	bne.n	293a <main+0x32>
	TC0->COUNT32.CTRLA.bit.MODE = 0x2; // set the counter to be in 32 bit mode.
    2940:	210c      	movs	r1, #12
    2942:	681a      	ldr	r2, [r3, #0]
	while(TC0->COUNT32.SYNCBUSY.bit.ENABLE);// wait for it to be activated
    2944:	f241 0400 	movw	r4, #4096	; 0x1000
	TC0->COUNT32.CTRLA.bit.MODE = 0x2; // set the counter to be in 32 bit mode.
    2948:	438a      	bics	r2, r1
    294a:	3904      	subs	r1, #4
    294c:	430a      	orrs	r2, r1
    294e:	601a      	str	r2, [r3, #0]
	TC0->COUNT32.DBGCTRL.bit.DBGRUN = 0x1; // keep timer running even when the device is halted.
    2950:	2201      	movs	r2, #1
    2952:	7bd9      	ldrb	r1, [r3, #15]
	while(TC0->COUNT32.SYNCBUSY.bit.ENABLE);// wait for it to be activated
    2954:	f2c4 2400 	movt	r4, #16896	; 0x4200
	TC0->COUNT32.DBGCTRL.bit.DBGRUN = 0x1; // keep timer running even when the device is halted.
    2958:	4311      	orrs	r1, r2
    295a:	73d9      	strb	r1, [r3, #15]
	TC0->COUNT32.CTRLA.bit.ENABLE = 0x1; // start the counter
    295c:	681a      	ldr	r2, [r3, #0]
    295e:	4302      	orrs	r2, r0
    2960:	601a      	str	r2, [r3, #0]
	while(TC0->COUNT32.SYNCBUSY.bit.ENABLE);// wait for it to be activated
    2962:	6923      	ldr	r3, [r4, #16]
    2964:	079b      	lsls	r3, r3, #30
    2966:	d4fc      	bmi.n	2962 <main+0x5a>
start_timer_0_32_bit();
/* Test functions*/
for(int test= 0; test<1; test ++){ // if you want average; increase the test variable range.
	test_encrypt(); // replace with test_decrypt to test the decrypt execution
    2968:	f242 535d 	movw	r3, #9565	; 0x255d
    296c:	f2c0 0300 	movt	r3, #0
    2970:	4798      	blx	r3
	TC0->COUNT32.CTRLBSET.bit.CMD = 0X4;// READSYNC
    2972:	231f      	movs	r3, #31
    2974:	7962      	ldrb	r2, [r4, #5]
    2976:	401a      	ands	r2, r3
    2978:	3b9f      	subs	r3, #159	; 0x9f
    297a:	4313      	orrs	r3, r2
    297c:	7163      	strb	r3, [r4, #5]
	while(TC0->COUNT32.SYNCBUSY.reg & TC_SYNCBUSY_CTRLB);
    297e:	f241 0300 	movw	r3, #4096	; 0x1000
    2982:	2204      	movs	r2, #4
    2984:	f2c4 2300 	movt	r3, #16896	; 0x4200
    2988:	6919      	ldr	r1, [r3, #16]
    298a:	420a      	tst	r2, r1
    298c:	d1fc      	bne.n	2988 <main+0x80>
	return TC0->COUNT32.COUNT.reg; // return count register.
    298e:	695b      	ldr	r3, [r3, #20]
}
a = read_time_0_32_bit(); // add a watch point to this variable if you want to see it live.
    2990:	9301      	str	r3, [sp, #4]
*(uint32_t *)(0x2000383C) = a; // store the timer data in the SRAM at @ 0x2000383C; plan is to get it out of the
    2992:	f643 033c 	movw	r3, #14396	; 0x383c
    2996:	9a01      	ldr	r2, [sp, #4]
    2998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    299c:	601a      	str	r2, [r3, #0]
    299e:	e7fe      	b.n	299e <main+0x96>

000029a0 <exit>:
    29a0:	4b07      	ldr	r3, [pc, #28]	; (29c0 <exit+0x20>)
    29a2:	b510      	push	{r4, lr}
    29a4:	0004      	movs	r4, r0
    29a6:	b113      	cbz	r3, 29ae <exit+0xe>
    29a8:	2100      	movs	r1, #0
    29aa:	e000      	b.n	29ae <exit+0xe>
    29ac:	bf00      	nop
    29ae:	4b05      	ldr	r3, [pc, #20]	; (29c4 <exit+0x24>)
    29b0:	6818      	ldr	r0, [r3, #0]
    29b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    29b4:	b103      	cbz	r3, 29b8 <exit+0x18>
    29b6:	4798      	blx	r3
    29b8:	0020      	movs	r0, r4
    29ba:	f7ff fd39 	bl	2430 <_exit>
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	00000000 	.word	0x00000000
    29c4:	00003f54 	.word	0x00003f54

000029c8 <__sflush_r>:
    29c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    29ca:	898a      	ldrh	r2, [r1, #12]
    29cc:	0005      	movs	r5, r0
    29ce:	000c      	movs	r4, r1
    29d0:	0713      	lsls	r3, r2, #28
    29d2:	d45e      	bmi.n	2a92 <__sflush_r+0xca>
    29d4:	684b      	ldr	r3, [r1, #4]
    29d6:	2b00      	cmp	r3, #0
    29d8:	dc04      	bgt.n	29e4 <__sflush_r+0x1c>
    29da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    29dc:	2b00      	cmp	r3, #0
    29de:	dc01      	bgt.n	29e4 <__sflush_r+0x1c>
    29e0:	2000      	movs	r0, #0
    29e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    29e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    29e6:	2f00      	cmp	r7, #0
    29e8:	d0fa      	beq.n	29e0 <__sflush_r+0x18>
    29ea:	2300      	movs	r3, #0
    29ec:	682e      	ldr	r6, [r5, #0]
    29ee:	602b      	str	r3, [r5, #0]
    29f0:	f241 0300 	movw	r3, #4096	; 0x1000
    29f4:	401a      	ands	r2, r3
    29f6:	b392      	cbz	r2, 2a5e <__sflush_r+0x96>
    29f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    29fa:	89a3      	ldrh	r3, [r4, #12]
    29fc:	075b      	lsls	r3, r3, #29
    29fe:	d505      	bpl.n	2a0c <__sflush_r+0x44>
    2a00:	6863      	ldr	r3, [r4, #4]
    2a02:	1ac0      	subs	r0, r0, r3
    2a04:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2a06:	b10b      	cbz	r3, 2a0c <__sflush_r+0x44>
    2a08:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2a0a:	1ac0      	subs	r0, r0, r3
    2a0c:	0002      	movs	r2, r0
    2a0e:	6a21      	ldr	r1, [r4, #32]
    2a10:	2300      	movs	r3, #0
    2a12:	0028      	movs	r0, r5
    2a14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2a16:	47b8      	blx	r7
    2a18:	89a1      	ldrh	r1, [r4, #12]
    2a1a:	1c43      	adds	r3, r0, #1
    2a1c:	d106      	bne.n	2a2c <__sflush_r+0x64>
    2a1e:	682b      	ldr	r3, [r5, #0]
    2a20:	2b1d      	cmp	r3, #29
    2a22:	d830      	bhi.n	2a86 <__sflush_r+0xbe>
    2a24:	4a2b      	ldr	r2, [pc, #172]	; (2ad4 <__sflush_r+0x10c>)
    2a26:	40da      	lsrs	r2, r3
    2a28:	07d3      	lsls	r3, r2, #31
    2a2a:	d52c      	bpl.n	2a86 <__sflush_r+0xbe>
    2a2c:	2300      	movs	r3, #0
    2a2e:	6063      	str	r3, [r4, #4]
    2a30:	6923      	ldr	r3, [r4, #16]
    2a32:	6023      	str	r3, [r4, #0]
    2a34:	04cb      	lsls	r3, r1, #19
    2a36:	d504      	bpl.n	2a42 <__sflush_r+0x7a>
    2a38:	1c43      	adds	r3, r0, #1
    2a3a:	d101      	bne.n	2a40 <__sflush_r+0x78>
    2a3c:	682b      	ldr	r3, [r5, #0]
    2a3e:	b903      	cbnz	r3, 2a42 <__sflush_r+0x7a>
    2a40:	6560      	str	r0, [r4, #84]	; 0x54
    2a42:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2a44:	602e      	str	r6, [r5, #0]
    2a46:	2900      	cmp	r1, #0
    2a48:	d0ca      	beq.n	29e0 <__sflush_r+0x18>
    2a4a:	0023      	movs	r3, r4
    2a4c:	3344      	adds	r3, #68	; 0x44
    2a4e:	4299      	cmp	r1, r3
    2a50:	d002      	beq.n	2a58 <__sflush_r+0x90>
    2a52:	0028      	movs	r0, r5
    2a54:	f000 fa60 	bl	2f18 <_free_r>
    2a58:	2000      	movs	r0, #0
    2a5a:	6360      	str	r0, [r4, #52]	; 0x34
    2a5c:	e7c1      	b.n	29e2 <__sflush_r+0x1a>
    2a5e:	2301      	movs	r3, #1
    2a60:	6a21      	ldr	r1, [r4, #32]
    2a62:	0028      	movs	r0, r5
    2a64:	47b8      	blx	r7
    2a66:	1c43      	adds	r3, r0, #1
    2a68:	d1c7      	bne.n	29fa <__sflush_r+0x32>
    2a6a:	682b      	ldr	r3, [r5, #0]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d0c4      	beq.n	29fa <__sflush_r+0x32>
    2a70:	2b1d      	cmp	r3, #29
    2a72:	d001      	beq.n	2a78 <__sflush_r+0xb0>
    2a74:	2b16      	cmp	r3, #22
    2a76:	d101      	bne.n	2a7c <__sflush_r+0xb4>
    2a78:	602e      	str	r6, [r5, #0]
    2a7a:	e7b1      	b.n	29e0 <__sflush_r+0x18>
    2a7c:	2340      	movs	r3, #64	; 0x40
    2a7e:	89a2      	ldrh	r2, [r4, #12]
    2a80:	4313      	orrs	r3, r2
    2a82:	81a3      	strh	r3, [r4, #12]
    2a84:	e7ad      	b.n	29e2 <__sflush_r+0x1a>
    2a86:	2340      	movs	r3, #64	; 0x40
    2a88:	430b      	orrs	r3, r1
    2a8a:	2001      	movs	r0, #1
    2a8c:	81a3      	strh	r3, [r4, #12]
    2a8e:	4240      	negs	r0, r0
    2a90:	e7a7      	b.n	29e2 <__sflush_r+0x1a>
    2a92:	690f      	ldr	r7, [r1, #16]
    2a94:	2f00      	cmp	r7, #0
    2a96:	d0a3      	beq.n	29e0 <__sflush_r+0x18>
    2a98:	680b      	ldr	r3, [r1, #0]
    2a9a:	600f      	str	r7, [r1, #0]
    2a9c:	1bdb      	subs	r3, r3, r7
    2a9e:	9301      	str	r3, [sp, #4]
    2aa0:	2300      	movs	r3, #0
    2aa2:	0792      	lsls	r2, r2, #30
    2aa4:	d100      	bne.n	2aa8 <__sflush_r+0xe0>
    2aa6:	694b      	ldr	r3, [r1, #20]
    2aa8:	60a3      	str	r3, [r4, #8]
    2aaa:	9b01      	ldr	r3, [sp, #4]
    2aac:	2b00      	cmp	r3, #0
    2aae:	dc00      	bgt.n	2ab2 <__sflush_r+0xea>
    2ab0:	e796      	b.n	29e0 <__sflush_r+0x18>
    2ab2:	9b01      	ldr	r3, [sp, #4]
    2ab4:	003a      	movs	r2, r7
    2ab6:	6a21      	ldr	r1, [r4, #32]
    2ab8:	0028      	movs	r0, r5
    2aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2abc:	47b0      	blx	r6
    2abe:	2800      	cmp	r0, #0
    2ac0:	dc03      	bgt.n	2aca <__sflush_r+0x102>
    2ac2:	2340      	movs	r3, #64	; 0x40
    2ac4:	89a2      	ldrh	r2, [r4, #12]
    2ac6:	4313      	orrs	r3, r2
    2ac8:	e7df      	b.n	2a8a <__sflush_r+0xc2>
    2aca:	9b01      	ldr	r3, [sp, #4]
    2acc:	183f      	adds	r7, r7, r0
    2ace:	1a1b      	subs	r3, r3, r0
    2ad0:	9301      	str	r3, [sp, #4]
    2ad2:	e7ea      	b.n	2aaa <__sflush_r+0xe2>
    2ad4:	20400001 	.word	0x20400001

00002ad8 <_fflush_r>:
    2ad8:	690b      	ldr	r3, [r1, #16]
    2ada:	b570      	push	{r4, r5, r6, lr}
    2adc:	0005      	movs	r5, r0
    2ade:	000c      	movs	r4, r1
    2ae0:	b90b      	cbnz	r3, 2ae6 <_fflush_r+0xe>
    2ae2:	2000      	movs	r0, #0
    2ae4:	bd70      	pop	{r4, r5, r6, pc}
    2ae6:	b118      	cbz	r0, 2af0 <_fflush_r+0x18>
    2ae8:	6983      	ldr	r3, [r0, #24]
    2aea:	b90b      	cbnz	r3, 2af0 <_fflush_r+0x18>
    2aec:	f000 f860 	bl	2bb0 <__sinit>
    2af0:	4b0b      	ldr	r3, [pc, #44]	; (2b20 <_fflush_r+0x48>)
    2af2:	429c      	cmp	r4, r3
    2af4:	d109      	bne.n	2b0a <_fflush_r+0x32>
    2af6:	686c      	ldr	r4, [r5, #4]
    2af8:	220c      	movs	r2, #12
    2afa:	5ea3      	ldrsh	r3, [r4, r2]
    2afc:	2b00      	cmp	r3, #0
    2afe:	d0f0      	beq.n	2ae2 <_fflush_r+0xa>
    2b00:	0021      	movs	r1, r4
    2b02:	0028      	movs	r0, r5
    2b04:	f7ff ff60 	bl	29c8 <__sflush_r>
    2b08:	e7ec      	b.n	2ae4 <_fflush_r+0xc>
    2b0a:	4b06      	ldr	r3, [pc, #24]	; (2b24 <_fflush_r+0x4c>)
    2b0c:	429c      	cmp	r4, r3
    2b0e:	d101      	bne.n	2b14 <_fflush_r+0x3c>
    2b10:	68ac      	ldr	r4, [r5, #8]
    2b12:	e7f1      	b.n	2af8 <_fflush_r+0x20>
    2b14:	4b04      	ldr	r3, [pc, #16]	; (2b28 <_fflush_r+0x50>)
    2b16:	429c      	cmp	r4, r3
    2b18:	d1ee      	bne.n	2af8 <_fflush_r+0x20>
    2b1a:	68ec      	ldr	r4, [r5, #12]
    2b1c:	e7ec      	b.n	2af8 <_fflush_r+0x20>
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	00003f14 	.word	0x00003f14
    2b24:	00003f34 	.word	0x00003f34
    2b28:	00003ef4 	.word	0x00003ef4

00002b2c <_cleanup_r>:
    2b2c:	b510      	push	{r4, lr}
    2b2e:	4902      	ldr	r1, [pc, #8]	; (2b38 <_cleanup_r+0xc>)
    2b30:	f000 f8bc 	bl	2cac <_fwalk_reent>
    2b34:	bd10      	pop	{r4, pc}
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	00002ad9 	.word	0x00002ad9

00002b3c <std.isra.0>:
    2b3c:	2300      	movs	r3, #0
    2b3e:	b510      	push	{r4, lr}
    2b40:	0004      	movs	r4, r0
    2b42:	6003      	str	r3, [r0, #0]
    2b44:	6043      	str	r3, [r0, #4]
    2b46:	6083      	str	r3, [r0, #8]
    2b48:	8181      	strh	r1, [r0, #12]
    2b4a:	6643      	str	r3, [r0, #100]	; 0x64
    2b4c:	81c2      	strh	r2, [r0, #14]
    2b4e:	6103      	str	r3, [r0, #16]
    2b50:	6143      	str	r3, [r0, #20]
    2b52:	6183      	str	r3, [r0, #24]
    2b54:	0019      	movs	r1, r3
    2b56:	2208      	movs	r2, #8
    2b58:	305c      	adds	r0, #92	; 0x5c
    2b5a:	f000 f9d5 	bl	2f08 <memset>
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <std.isra.0+0x38>)
    2b60:	6224      	str	r4, [r4, #32]
    2b62:	6263      	str	r3, [r4, #36]	; 0x24
    2b64:	4b04      	ldr	r3, [pc, #16]	; (2b78 <std.isra.0+0x3c>)
    2b66:	62a3      	str	r3, [r4, #40]	; 0x28
    2b68:	4b04      	ldr	r3, [pc, #16]	; (2b7c <std.isra.0+0x40>)
    2b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    2b6c:	4b04      	ldr	r3, [pc, #16]	; (2b80 <std.isra.0+0x44>)
    2b6e:	6323      	str	r3, [r4, #48]	; 0x30
    2b70:	bd10      	pop	{r4, pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	00003635 	.word	0x00003635
    2b78:	0000365d 	.word	0x0000365d
    2b7c:	00003695 	.word	0x00003695
    2b80:	000036c1 	.word	0x000036c1

00002b84 <__sfmoreglue>:
    2b84:	b570      	push	{r4, r5, r6, lr}
    2b86:	2568      	movs	r5, #104	; 0x68
    2b88:	1e4a      	subs	r2, r1, #1
    2b8a:	4355      	muls	r5, r2
    2b8c:	000e      	movs	r6, r1
    2b8e:	0029      	movs	r1, r5
    2b90:	3174      	adds	r1, #116	; 0x74
    2b92:	f000 fa0b 	bl	2fac <_malloc_r>
    2b96:	0004      	movs	r4, r0
    2b98:	b140      	cbz	r0, 2bac <__sfmoreglue+0x28>
    2b9a:	2100      	movs	r1, #0
    2b9c:	002a      	movs	r2, r5
    2b9e:	6001      	str	r1, [r0, #0]
    2ba0:	6046      	str	r6, [r0, #4]
    2ba2:	300c      	adds	r0, #12
    2ba4:	60a0      	str	r0, [r4, #8]
    2ba6:	3268      	adds	r2, #104	; 0x68
    2ba8:	f000 f9ae 	bl	2f08 <memset>
    2bac:	0020      	movs	r0, r4
    2bae:	bd70      	pop	{r4, r5, r6, pc}

00002bb0 <__sinit>:
    2bb0:	6983      	ldr	r3, [r0, #24]
    2bb2:	b513      	push	{r0, r1, r4, lr}
    2bb4:	0004      	movs	r4, r0
    2bb6:	bb43      	cbnz	r3, 2c0a <__sinit+0x5a>
    2bb8:	6483      	str	r3, [r0, #72]	; 0x48
    2bba:	64c3      	str	r3, [r0, #76]	; 0x4c
    2bbc:	6503      	str	r3, [r0, #80]	; 0x50
    2bbe:	4b13      	ldr	r3, [pc, #76]	; (2c0c <__sinit+0x5c>)
    2bc0:	4a13      	ldr	r2, [pc, #76]	; (2c10 <__sinit+0x60>)
    2bc2:	681b      	ldr	r3, [r3, #0]
    2bc4:	6282      	str	r2, [r0, #40]	; 0x28
    2bc6:	9301      	str	r3, [sp, #4]
    2bc8:	4298      	cmp	r0, r3
    2bca:	d101      	bne.n	2bd0 <__sinit+0x20>
    2bcc:	2301      	movs	r3, #1
    2bce:	6183      	str	r3, [r0, #24]
    2bd0:	0020      	movs	r0, r4
    2bd2:	f000 f81f 	bl	2c14 <__sfp>
    2bd6:	6060      	str	r0, [r4, #4]
    2bd8:	0020      	movs	r0, r4
    2bda:	f000 f81b 	bl	2c14 <__sfp>
    2bde:	60a0      	str	r0, [r4, #8]
    2be0:	0020      	movs	r0, r4
    2be2:	f000 f817 	bl	2c14 <__sfp>
    2be6:	2200      	movs	r2, #0
    2be8:	60e0      	str	r0, [r4, #12]
    2bea:	2104      	movs	r1, #4
    2bec:	6860      	ldr	r0, [r4, #4]
    2bee:	f7ff ffa5 	bl	2b3c <std.isra.0>
    2bf2:	2201      	movs	r2, #1
    2bf4:	2109      	movs	r1, #9
    2bf6:	68a0      	ldr	r0, [r4, #8]
    2bf8:	f7ff ffa0 	bl	2b3c <std.isra.0>
    2bfc:	2202      	movs	r2, #2
    2bfe:	2112      	movs	r1, #18
    2c00:	68e0      	ldr	r0, [r4, #12]
    2c02:	f7ff ff9b 	bl	2b3c <std.isra.0>
    2c06:	2301      	movs	r3, #1
    2c08:	61a3      	str	r3, [r4, #24]
    2c0a:	bd13      	pop	{r0, r1, r4, pc}
    2c0c:	00003f54 	.word	0x00003f54
    2c10:	00002b2d 	.word	0x00002b2d

00002c14 <__sfp>:
    2c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c16:	4b1c      	ldr	r3, [pc, #112]	; (2c88 <__sfp+0x74>)
    2c18:	0007      	movs	r7, r0
    2c1a:	681e      	ldr	r6, [r3, #0]
    2c1c:	69b3      	ldr	r3, [r6, #24]
    2c1e:	b913      	cbnz	r3, 2c26 <__sfp+0x12>
    2c20:	0030      	movs	r0, r6
    2c22:	f7ff ffc5 	bl	2bb0 <__sinit>
    2c26:	3648      	adds	r6, #72	; 0x48
    2c28:	68b4      	ldr	r4, [r6, #8]
    2c2a:	6873      	ldr	r3, [r6, #4]
    2c2c:	3b01      	subs	r3, #1
    2c2e:	d503      	bpl.n	2c38 <__sfp+0x24>
    2c30:	6833      	ldr	r3, [r6, #0]
    2c32:	b133      	cbz	r3, 2c42 <__sfp+0x2e>
    2c34:	6836      	ldr	r6, [r6, #0]
    2c36:	e7f7      	b.n	2c28 <__sfp+0x14>
    2c38:	220c      	movs	r2, #12
    2c3a:	5ea5      	ldrsh	r5, [r4, r2]
    2c3c:	b16d      	cbz	r5, 2c5a <__sfp+0x46>
    2c3e:	3468      	adds	r4, #104	; 0x68
    2c40:	e7f4      	b.n	2c2c <__sfp+0x18>
    2c42:	2104      	movs	r1, #4
    2c44:	0038      	movs	r0, r7
    2c46:	f7ff ff9d 	bl	2b84 <__sfmoreglue>
    2c4a:	6030      	str	r0, [r6, #0]
    2c4c:	2800      	cmp	r0, #0
    2c4e:	d1f1      	bne.n	2c34 <__sfp+0x20>
    2c50:	230c      	movs	r3, #12
    2c52:	0004      	movs	r4, r0
    2c54:	603b      	str	r3, [r7, #0]
    2c56:	0020      	movs	r0, r4
    2c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c5a:	2301      	movs	r3, #1
    2c5c:	0020      	movs	r0, r4
    2c5e:	425b      	negs	r3, r3
    2c60:	81e3      	strh	r3, [r4, #14]
    2c62:	3302      	adds	r3, #2
    2c64:	81a3      	strh	r3, [r4, #12]
    2c66:	6665      	str	r5, [r4, #100]	; 0x64
    2c68:	6025      	str	r5, [r4, #0]
    2c6a:	60a5      	str	r5, [r4, #8]
    2c6c:	6065      	str	r5, [r4, #4]
    2c6e:	6125      	str	r5, [r4, #16]
    2c70:	6165      	str	r5, [r4, #20]
    2c72:	61a5      	str	r5, [r4, #24]
    2c74:	2208      	movs	r2, #8
    2c76:	0029      	movs	r1, r5
    2c78:	305c      	adds	r0, #92	; 0x5c
    2c7a:	f000 f945 	bl	2f08 <memset>
    2c7e:	6365      	str	r5, [r4, #52]	; 0x34
    2c80:	63a5      	str	r5, [r4, #56]	; 0x38
    2c82:	64a5      	str	r5, [r4, #72]	; 0x48
    2c84:	64e5      	str	r5, [r4, #76]	; 0x4c
    2c86:	e7e6      	b.n	2c56 <__sfp+0x42>
    2c88:	00003f54 	.word	0x00003f54

00002c8c <fiprintf>:
    2c8c:	b40e      	push	{r1, r2, r3}
    2c8e:	b503      	push	{r0, r1, lr}
    2c90:	0001      	movs	r1, r0
    2c92:	ab03      	add	r3, sp, #12
    2c94:	4804      	ldr	r0, [pc, #16]	; (2ca8 <fiprintf+0x1c>)
    2c96:	cb04      	ldmia	r3!, {r2}
    2c98:	6800      	ldr	r0, [r0, #0]
    2c9a:	9301      	str	r3, [sp, #4]
    2c9c:	f000 fa0c 	bl	30b8 <_vfiprintf_r>
    2ca0:	b002      	add	sp, #8
    2ca2:	bc08      	pop	{r3}
    2ca4:	b003      	add	sp, #12
    2ca6:	4718      	bx	r3
    2ca8:	20000000 	.word	0x20000000

00002cac <_fwalk_reent>:
    2cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cae:	0004      	movs	r4, r0
    2cb0:	0007      	movs	r7, r0
    2cb2:	2600      	movs	r6, #0
    2cb4:	9101      	str	r1, [sp, #4]
    2cb6:	3448      	adds	r4, #72	; 0x48
    2cb8:	b90c      	cbnz	r4, 2cbe <_fwalk_reent+0x12>
    2cba:	0030      	movs	r0, r6
    2cbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2cbe:	6863      	ldr	r3, [r4, #4]
    2cc0:	68a5      	ldr	r5, [r4, #8]
    2cc2:	9300      	str	r3, [sp, #0]
    2cc4:	9b00      	ldr	r3, [sp, #0]
    2cc6:	3b01      	subs	r3, #1
    2cc8:	9300      	str	r3, [sp, #0]
    2cca:	d501      	bpl.n	2cd0 <_fwalk_reent+0x24>
    2ccc:	6824      	ldr	r4, [r4, #0]
    2cce:	e7f3      	b.n	2cb8 <_fwalk_reent+0xc>
    2cd0:	89ab      	ldrh	r3, [r5, #12]
    2cd2:	2b01      	cmp	r3, #1
    2cd4:	d908      	bls.n	2ce8 <_fwalk_reent+0x3c>
    2cd6:	220e      	movs	r2, #14
    2cd8:	5eab      	ldrsh	r3, [r5, r2]
    2cda:	3301      	adds	r3, #1
    2cdc:	d004      	beq.n	2ce8 <_fwalk_reent+0x3c>
    2cde:	0029      	movs	r1, r5
    2ce0:	0038      	movs	r0, r7
    2ce2:	9b01      	ldr	r3, [sp, #4]
    2ce4:	4798      	blx	r3
    2ce6:	4306      	orrs	r6, r0
    2ce8:	3568      	adds	r5, #104	; 0x68
    2cea:	e7eb      	b.n	2cc4 <_fwalk_reent+0x18>

00002cec <_fwrite_r>:
    2cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cee:	4353      	muls	r3, r2
    2cf0:	0006      	movs	r6, r0
    2cf2:	9101      	str	r1, [sp, #4]
    2cf4:	0017      	movs	r7, r2
    2cf6:	9c08      	ldr	r4, [sp, #32]
    2cf8:	9300      	str	r3, [sp, #0]
    2cfa:	b118      	cbz	r0, 2d04 <_fwrite_r+0x18>
    2cfc:	6983      	ldr	r3, [r0, #24]
    2cfe:	b90b      	cbnz	r3, 2d04 <_fwrite_r+0x18>
    2d00:	f7ff ff56 	bl	2bb0 <__sinit>
    2d04:	4b1c      	ldr	r3, [pc, #112]	; (2d78 <_fwrite_r+0x8c>)
    2d06:	429c      	cmp	r4, r3
    2d08:	d11b      	bne.n	2d42 <_fwrite_r+0x56>
    2d0a:	6874      	ldr	r4, [r6, #4]
    2d0c:	89a3      	ldrh	r3, [r4, #12]
    2d0e:	071b      	lsls	r3, r3, #28
    2d10:	d521      	bpl.n	2d56 <_fwrite_r+0x6a>
    2d12:	6923      	ldr	r3, [r4, #16]
    2d14:	b1fb      	cbz	r3, 2d56 <_fwrite_r+0x6a>
    2d16:	2500      	movs	r5, #0
    2d18:	9b00      	ldr	r3, [sp, #0]
    2d1a:	429d      	cmp	r5, r3
    2d1c:	d022      	beq.n	2d64 <_fwrite_r+0x78>
    2d1e:	9b01      	ldr	r3, [sp, #4]
    2d20:	5d59      	ldrb	r1, [r3, r5]
    2d22:	68a3      	ldr	r3, [r4, #8]
    2d24:	3b01      	subs	r3, #1
    2d26:	60a3      	str	r3, [r4, #8]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	da04      	bge.n	2d36 <_fwrite_r+0x4a>
    2d2c:	69a2      	ldr	r2, [r4, #24]
    2d2e:	4293      	cmp	r3, r2
    2d30:	db1b      	blt.n	2d6a <_fwrite_r+0x7e>
    2d32:	290a      	cmp	r1, #10
    2d34:	d019      	beq.n	2d6a <_fwrite_r+0x7e>
    2d36:	6823      	ldr	r3, [r4, #0]
    2d38:	1c5a      	adds	r2, r3, #1
    2d3a:	6022      	str	r2, [r4, #0]
    2d3c:	7019      	strb	r1, [r3, #0]
    2d3e:	3501      	adds	r5, #1
    2d40:	e7ea      	b.n	2d18 <_fwrite_r+0x2c>
    2d42:	4b0e      	ldr	r3, [pc, #56]	; (2d7c <_fwrite_r+0x90>)
    2d44:	429c      	cmp	r4, r3
    2d46:	d101      	bne.n	2d4c <_fwrite_r+0x60>
    2d48:	68b4      	ldr	r4, [r6, #8]
    2d4a:	e7df      	b.n	2d0c <_fwrite_r+0x20>
    2d4c:	4b0c      	ldr	r3, [pc, #48]	; (2d80 <_fwrite_r+0x94>)
    2d4e:	429c      	cmp	r4, r3
    2d50:	d1dc      	bne.n	2d0c <_fwrite_r+0x20>
    2d52:	68f4      	ldr	r4, [r6, #12]
    2d54:	e7da      	b.n	2d0c <_fwrite_r+0x20>
    2d56:	0021      	movs	r1, r4
    2d58:	0030      	movs	r0, r6
    2d5a:	f000 fd1b 	bl	3794 <__swsetup_r>
    2d5e:	2500      	movs	r5, #0
    2d60:	2800      	cmp	r0, #0
    2d62:	d0d8      	beq.n	2d16 <_fwrite_r+0x2a>
    2d64:	fbb5 f0f7 	udiv	r0, r5, r7
    2d68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2d6a:	0022      	movs	r2, r4
    2d6c:	0030      	movs	r0, r6
    2d6e:	f000 fcad 	bl	36cc <__swbuf_r>
    2d72:	1c43      	adds	r3, r0, #1
    2d74:	d1e3      	bne.n	2d3e <_fwrite_r+0x52>
    2d76:	e7f5      	b.n	2d64 <_fwrite_r+0x78>
    2d78:	00003f14 	.word	0x00003f14
    2d7c:	00003f34 	.word	0x00003f34
    2d80:	00003ef4 	.word	0x00003ef4

00002d84 <fwrite>:
    2d84:	b507      	push	{r0, r1, r2, lr}
    2d86:	9300      	str	r3, [sp, #0]
    2d88:	0013      	movs	r3, r2
    2d8a:	000a      	movs	r2, r1
    2d8c:	0001      	movs	r1, r0
    2d8e:	4802      	ldr	r0, [pc, #8]	; (2d98 <fwrite+0x14>)
    2d90:	6800      	ldr	r0, [r0, #0]
    2d92:	f7ff ffab 	bl	2cec <_fwrite_r>
    2d96:	bd0e      	pop	{r1, r2, r3, pc}
    2d98:	20000000 	.word	0x20000000

00002d9c <__libc_init_array>:
    2d9c:	b570      	push	{r4, r5, r6, lr}
    2d9e:	2500      	movs	r5, #0
    2da0:	4b0e      	ldr	r3, [pc, #56]	; (2ddc <__libc_init_array+0x40>)
    2da2:	4c0f      	ldr	r4, [pc, #60]	; (2de0 <__libc_init_array+0x44>)
    2da4:	1ae4      	subs	r4, r4, r3
    2da6:	10a4      	asrs	r4, r4, #2
    2da8:	42a5      	cmp	r5, r4
    2daa:	d109      	bne.n	2dc0 <__libc_init_array+0x24>
    2dac:	2500      	movs	r5, #0
    2dae:	f001 f8ed 	bl	3f8c <_init>
    2db2:	4c0c      	ldr	r4, [pc, #48]	; (2de4 <__libc_init_array+0x48>)
    2db4:	4b0c      	ldr	r3, [pc, #48]	; (2de8 <__libc_init_array+0x4c>)
    2db6:	1ae4      	subs	r4, r4, r3
    2db8:	10a4      	asrs	r4, r4, #2
    2dba:	42a5      	cmp	r5, r4
    2dbc:	d107      	bne.n	2dce <__libc_init_array+0x32>
    2dbe:	bd70      	pop	{r4, r5, r6, pc}
    2dc0:	4a06      	ldr	r2, [pc, #24]	; (2ddc <__libc_init_array+0x40>)
    2dc2:	00ab      	lsls	r3, r5, #2
    2dc4:	189b      	adds	r3, r3, r2
    2dc6:	681b      	ldr	r3, [r3, #0]
    2dc8:	4798      	blx	r3
    2dca:	3501      	adds	r5, #1
    2dcc:	e7ec      	b.n	2da8 <__libc_init_array+0xc>
    2dce:	4a06      	ldr	r2, [pc, #24]	; (2de8 <__libc_init_array+0x4c>)
    2dd0:	00ab      	lsls	r3, r5, #2
    2dd2:	189b      	adds	r3, r3, r2
    2dd4:	681b      	ldr	r3, [r3, #0]
    2dd6:	4798      	blx	r3
    2dd8:	3501      	adds	r5, #1
    2dda:	e7ee      	b.n	2dba <__libc_init_array+0x1e>
    2ddc:	00003f98 	.word	0x00003f98
    2de0:	00003f98 	.word	0x00003f98
    2de4:	00003f9c 	.word	0x00003f9c
    2de8:	00003f98 	.word	0x00003f98

00002dec <__swhatbuf_r>:
    2dec:	b570      	push	{r4, r5, r6, lr}
    2dee:	000e      	movs	r6, r1
    2df0:	001d      	movs	r5, r3
    2df2:	230e      	movs	r3, #14
    2df4:	5ec9      	ldrsh	r1, [r1, r3]
    2df6:	b090      	sub	sp, #64	; 0x40
    2df8:	0014      	movs	r4, r2
    2dfa:	2900      	cmp	r1, #0
    2dfc:	da07      	bge.n	2e0e <__swhatbuf_r+0x22>
    2dfe:	2300      	movs	r3, #0
    2e00:	602b      	str	r3, [r5, #0]
    2e02:	89b3      	ldrh	r3, [r6, #12]
    2e04:	061b      	lsls	r3, r3, #24
    2e06:	d411      	bmi.n	2e2c <__swhatbuf_r+0x40>
    2e08:	f240 4300 	movw	r3, #1024	; 0x400
    2e0c:	e00f      	b.n	2e2e <__swhatbuf_r+0x42>
    2e0e:	aa01      	add	r2, sp, #4
    2e10:	f000 fd42 	bl	3898 <_fstat_r>
    2e14:	2800      	cmp	r0, #0
    2e16:	dbf2      	blt.n	2dfe <__swhatbuf_r+0x12>
    2e18:	f24f 0200 	movw	r2, #61440	; 0xf000
    2e1c:	9b02      	ldr	r3, [sp, #8]
    2e1e:	4013      	ands	r3, r2
    2e20:	4a05      	ldr	r2, [pc, #20]	; (2e38 <__swhatbuf_r+0x4c>)
    2e22:	189b      	adds	r3, r3, r2
    2e24:	425a      	negs	r2, r3
    2e26:	4153      	adcs	r3, r2
    2e28:	602b      	str	r3, [r5, #0]
    2e2a:	e7ed      	b.n	2e08 <__swhatbuf_r+0x1c>
    2e2c:	2340      	movs	r3, #64	; 0x40
    2e2e:	2000      	movs	r0, #0
    2e30:	6023      	str	r3, [r4, #0]
    2e32:	b010      	add	sp, #64	; 0x40
    2e34:	bd70      	pop	{r4, r5, r6, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	ffffe000 	.word	0xffffe000

00002e3c <__smakebuf_r>:
    2e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2e3e:	2602      	movs	r6, #2
    2e40:	898b      	ldrh	r3, [r1, #12]
    2e42:	0005      	movs	r5, r0
    2e44:	000c      	movs	r4, r1
    2e46:	4233      	tst	r3, r6
    2e48:	d006      	beq.n	2e58 <__smakebuf_r+0x1c>
    2e4a:	0023      	movs	r3, r4
    2e4c:	3347      	adds	r3, #71	; 0x47
    2e4e:	6023      	str	r3, [r4, #0]
    2e50:	6123      	str	r3, [r4, #16]
    2e52:	2301      	movs	r3, #1
    2e54:	6163      	str	r3, [r4, #20]
    2e56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2e58:	ab01      	add	r3, sp, #4
    2e5a:	466a      	mov	r2, sp
    2e5c:	f7ff ffc6 	bl	2dec <__swhatbuf_r>
    2e60:	9900      	ldr	r1, [sp, #0]
    2e62:	0007      	movs	r7, r0
    2e64:	0028      	movs	r0, r5
    2e66:	f000 f8a1 	bl	2fac <_malloc_r>
    2e6a:	b940      	cbnz	r0, 2e7e <__smakebuf_r+0x42>
    2e6c:	220c      	movs	r2, #12
    2e6e:	5ea3      	ldrsh	r3, [r4, r2]
    2e70:	059a      	lsls	r2, r3, #22
    2e72:	d4f0      	bmi.n	2e56 <__smakebuf_r+0x1a>
    2e74:	2203      	movs	r2, #3
    2e76:	4393      	bics	r3, r2
    2e78:	431e      	orrs	r6, r3
    2e7a:	81a6      	strh	r6, [r4, #12]
    2e7c:	e7e5      	b.n	2e4a <__smakebuf_r+0xe>
    2e7e:	4b0e      	ldr	r3, [pc, #56]	; (2eb8 <__smakebuf_r+0x7c>)
    2e80:	62ab      	str	r3, [r5, #40]	; 0x28
    2e82:	2380      	movs	r3, #128	; 0x80
    2e84:	89a2      	ldrh	r2, [r4, #12]
    2e86:	6020      	str	r0, [r4, #0]
    2e88:	4313      	orrs	r3, r2
    2e8a:	81a3      	strh	r3, [r4, #12]
    2e8c:	9b00      	ldr	r3, [sp, #0]
    2e8e:	6120      	str	r0, [r4, #16]
    2e90:	6163      	str	r3, [r4, #20]
    2e92:	9b01      	ldr	r3, [sp, #4]
    2e94:	b163      	cbz	r3, 2eb0 <__smakebuf_r+0x74>
    2e96:	230e      	movs	r3, #14
    2e98:	5ee1      	ldrsh	r1, [r4, r3]
    2e9a:	0028      	movs	r0, r5
    2e9c:	f000 fd0e 	bl	38bc <_isatty_r>
    2ea0:	b130      	cbz	r0, 2eb0 <__smakebuf_r+0x74>
    2ea2:	2203      	movs	r2, #3
    2ea4:	89a3      	ldrh	r3, [r4, #12]
    2ea6:	4393      	bics	r3, r2
    2ea8:	001a      	movs	r2, r3
    2eaa:	2301      	movs	r3, #1
    2eac:	4313      	orrs	r3, r2
    2eae:	81a3      	strh	r3, [r4, #12]
    2eb0:	89a0      	ldrh	r0, [r4, #12]
    2eb2:	4338      	orrs	r0, r7
    2eb4:	81a0      	strh	r0, [r4, #12]
    2eb6:	e7ce      	b.n	2e56 <__smakebuf_r+0x1a>
    2eb8:	00002b2d 	.word	0x00002b2d

00002ebc <memchr>:
    2ebc:	b2c9      	uxtb	r1, r1
    2ebe:	1882      	adds	r2, r0, r2
    2ec0:	4290      	cmp	r0, r2
    2ec2:	d101      	bne.n	2ec8 <memchr+0xc>
    2ec4:	2000      	movs	r0, #0
    2ec6:	4770      	bx	lr
    2ec8:	7803      	ldrb	r3, [r0, #0]
    2eca:	428b      	cmp	r3, r1
    2ecc:	d0fb      	beq.n	2ec6 <memchr+0xa>
    2ece:	3001      	adds	r0, #1
    2ed0:	e7f6      	b.n	2ec0 <memchr+0x4>

00002ed2 <memcpy>:
    2ed2:	2300      	movs	r3, #0
    2ed4:	b510      	push	{r4, lr}
    2ed6:	429a      	cmp	r2, r3
    2ed8:	d100      	bne.n	2edc <memcpy+0xa>
    2eda:	bd10      	pop	{r4, pc}
    2edc:	5ccc      	ldrb	r4, [r1, r3]
    2ede:	54c4      	strb	r4, [r0, r3]
    2ee0:	3301      	adds	r3, #1
    2ee2:	e7f8      	b.n	2ed6 <memcpy+0x4>

00002ee4 <memmove>:
    2ee4:	b510      	push	{r4, lr}
    2ee6:	4288      	cmp	r0, r1
    2ee8:	d902      	bls.n	2ef0 <memmove+0xc>
    2eea:	188b      	adds	r3, r1, r2
    2eec:	4298      	cmp	r0, r3
    2eee:	d308      	bcc.n	2f02 <memmove+0x1e>
    2ef0:	2300      	movs	r3, #0
    2ef2:	429a      	cmp	r2, r3
    2ef4:	d007      	beq.n	2f06 <memmove+0x22>
    2ef6:	5ccc      	ldrb	r4, [r1, r3]
    2ef8:	54c4      	strb	r4, [r0, r3]
    2efa:	3301      	adds	r3, #1
    2efc:	e7f9      	b.n	2ef2 <memmove+0xe>
    2efe:	5c8b      	ldrb	r3, [r1, r2]
    2f00:	5483      	strb	r3, [r0, r2]
    2f02:	3a01      	subs	r2, #1
    2f04:	d2fb      	bcs.n	2efe <memmove+0x1a>
    2f06:	bd10      	pop	{r4, pc}

00002f08 <memset>:
    2f08:	0003      	movs	r3, r0
    2f0a:	1882      	adds	r2, r0, r2
    2f0c:	4293      	cmp	r3, r2
    2f0e:	d100      	bne.n	2f12 <memset+0xa>
    2f10:	4770      	bx	lr
    2f12:	7019      	strb	r1, [r3, #0]
    2f14:	3301      	adds	r3, #1
    2f16:	e7f9      	b.n	2f0c <memset+0x4>

00002f18 <_free_r>:
    2f18:	b570      	push	{r4, r5, r6, lr}
    2f1a:	0005      	movs	r5, r0
    2f1c:	b181      	cbz	r1, 2f40 <_free_r+0x28>
    2f1e:	1f0c      	subs	r4, r1, #4
    2f20:	6823      	ldr	r3, [r4, #0]
    2f22:	2b00      	cmp	r3, #0
    2f24:	da00      	bge.n	2f28 <_free_r+0x10>
    2f26:	18e4      	adds	r4, r4, r3
    2f28:	0028      	movs	r0, r5
    2f2a:	f000 fce9 	bl	3900 <__malloc_lock>
    2f2e:	4a1e      	ldr	r2, [pc, #120]	; (2fa8 <_free_r+0x90>)
    2f30:	6813      	ldr	r3, [r2, #0]
    2f32:	0011      	movs	r1, r2
    2f34:	b92b      	cbnz	r3, 2f42 <_free_r+0x2a>
    2f36:	6063      	str	r3, [r4, #4]
    2f38:	6014      	str	r4, [r2, #0]
    2f3a:	0028      	movs	r0, r5
    2f3c:	f000 fce1 	bl	3902 <__malloc_unlock>
    2f40:	bd70      	pop	{r4, r5, r6, pc}
    2f42:	42a3      	cmp	r3, r4
    2f44:	d90b      	bls.n	2f5e <_free_r+0x46>
    2f46:	6822      	ldr	r2, [r4, #0]
    2f48:	18a0      	adds	r0, r4, r2
    2f4a:	4283      	cmp	r3, r0
    2f4c:	d103      	bne.n	2f56 <_free_r+0x3e>
    2f4e:	6818      	ldr	r0, [r3, #0]
    2f50:	685b      	ldr	r3, [r3, #4]
    2f52:	1882      	adds	r2, r0, r2
    2f54:	6022      	str	r2, [r4, #0]
    2f56:	6063      	str	r3, [r4, #4]
    2f58:	600c      	str	r4, [r1, #0]
    2f5a:	e7ee      	b.n	2f3a <_free_r+0x22>
    2f5c:	0013      	movs	r3, r2
    2f5e:	685a      	ldr	r2, [r3, #4]
    2f60:	b10a      	cbz	r2, 2f66 <_free_r+0x4e>
    2f62:	42a2      	cmp	r2, r4
    2f64:	d9fa      	bls.n	2f5c <_free_r+0x44>
    2f66:	6819      	ldr	r1, [r3, #0]
    2f68:	1858      	adds	r0, r3, r1
    2f6a:	42a0      	cmp	r0, r4
    2f6c:	d10b      	bne.n	2f86 <_free_r+0x6e>
    2f6e:	6820      	ldr	r0, [r4, #0]
    2f70:	1809      	adds	r1, r1, r0
    2f72:	1858      	adds	r0, r3, r1
    2f74:	6019      	str	r1, [r3, #0]
    2f76:	4282      	cmp	r2, r0
    2f78:	d1df      	bne.n	2f3a <_free_r+0x22>
    2f7a:	6810      	ldr	r0, [r2, #0]
    2f7c:	6852      	ldr	r2, [r2, #4]
    2f7e:	1841      	adds	r1, r0, r1
    2f80:	6019      	str	r1, [r3, #0]
    2f82:	605a      	str	r2, [r3, #4]
    2f84:	e7d9      	b.n	2f3a <_free_r+0x22>
    2f86:	42a0      	cmp	r0, r4
    2f88:	d902      	bls.n	2f90 <_free_r+0x78>
    2f8a:	230c      	movs	r3, #12
    2f8c:	602b      	str	r3, [r5, #0]
    2f8e:	e7d4      	b.n	2f3a <_free_r+0x22>
    2f90:	6821      	ldr	r1, [r4, #0]
    2f92:	1860      	adds	r0, r4, r1
    2f94:	4282      	cmp	r2, r0
    2f96:	d103      	bne.n	2fa0 <_free_r+0x88>
    2f98:	6810      	ldr	r0, [r2, #0]
    2f9a:	6852      	ldr	r2, [r2, #4]
    2f9c:	1841      	adds	r1, r0, r1
    2f9e:	6021      	str	r1, [r4, #0]
    2fa0:	6062      	str	r2, [r4, #4]
    2fa2:	605c      	str	r4, [r3, #4]
    2fa4:	e7c9      	b.n	2f3a <_free_r+0x22>
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	20000088 	.word	0x20000088

00002fac <_malloc_r>:
    2fac:	2303      	movs	r3, #3
    2fae:	b570      	push	{r4, r5, r6, lr}
    2fb0:	1ccd      	adds	r5, r1, #3
    2fb2:	439d      	bics	r5, r3
    2fb4:	3508      	adds	r5, #8
    2fb6:	0006      	movs	r6, r0
    2fb8:	2d0c      	cmp	r5, #12
    2fba:	d21c      	bcs.n	2ff6 <_malloc_r+0x4a>
    2fbc:	250c      	movs	r5, #12
    2fbe:	42a9      	cmp	r1, r5
    2fc0:	d81b      	bhi.n	2ffa <_malloc_r+0x4e>
    2fc2:	0030      	movs	r0, r6
    2fc4:	f000 fc9c 	bl	3900 <__malloc_lock>
    2fc8:	4a25      	ldr	r2, [pc, #148]	; (3060 <_malloc_r+0xb4>)
    2fca:	6814      	ldr	r4, [r2, #0]
    2fcc:	0021      	movs	r1, r4
    2fce:	b9c1      	cbnz	r1, 3002 <_malloc_r+0x56>
    2fd0:	4c24      	ldr	r4, [pc, #144]	; (3064 <_malloc_r+0xb8>)
    2fd2:	6823      	ldr	r3, [r4, #0]
    2fd4:	b91b      	cbnz	r3, 2fde <_malloc_r+0x32>
    2fd6:	0030      	movs	r0, r6
    2fd8:	f000 fb1c 	bl	3614 <_sbrk_r>
    2fdc:	6020      	str	r0, [r4, #0]
    2fde:	0029      	movs	r1, r5
    2fe0:	0030      	movs	r0, r6
    2fe2:	f000 fb17 	bl	3614 <_sbrk_r>
    2fe6:	1c43      	adds	r3, r0, #1
    2fe8:	d12d      	bne.n	3046 <_malloc_r+0x9a>
    2fea:	230c      	movs	r3, #12
    2fec:	0030      	movs	r0, r6
    2fee:	6033      	str	r3, [r6, #0]
    2ff0:	f000 fc87 	bl	3902 <__malloc_unlock>
    2ff4:	e003      	b.n	2ffe <_malloc_r+0x52>
    2ff6:	2d00      	cmp	r5, #0
    2ff8:	dae1      	bge.n	2fbe <_malloc_r+0x12>
    2ffa:	230c      	movs	r3, #12
    2ffc:	6033      	str	r3, [r6, #0]
    2ffe:	2000      	movs	r0, #0
    3000:	bd70      	pop	{r4, r5, r6, pc}
    3002:	680b      	ldr	r3, [r1, #0]
    3004:	1b5b      	subs	r3, r3, r5
    3006:	d41b      	bmi.n	3040 <_malloc_r+0x94>
    3008:	2b0b      	cmp	r3, #11
    300a:	d903      	bls.n	3014 <_malloc_r+0x68>
    300c:	600b      	str	r3, [r1, #0]
    300e:	18cc      	adds	r4, r1, r3
    3010:	6025      	str	r5, [r4, #0]
    3012:	e003      	b.n	301c <_malloc_r+0x70>
    3014:	428c      	cmp	r4, r1
    3016:	d10f      	bne.n	3038 <_malloc_r+0x8c>
    3018:	6863      	ldr	r3, [r4, #4]
    301a:	6013      	str	r3, [r2, #0]
    301c:	0030      	movs	r0, r6
    301e:	f000 fc70 	bl	3902 <__malloc_unlock>
    3022:	0020      	movs	r0, r4
    3024:	2207      	movs	r2, #7
    3026:	300b      	adds	r0, #11
    3028:	1d23      	adds	r3, r4, #4
    302a:	4390      	bics	r0, r2
    302c:	1ac3      	subs	r3, r0, r3
    302e:	2b00      	cmp	r3, #0
    3030:	d0e6      	beq.n	3000 <_malloc_r+0x54>
    3032:	425a      	negs	r2, r3
    3034:	50e2      	str	r2, [r4, r3]
    3036:	e7e3      	b.n	3000 <_malloc_r+0x54>
    3038:	684b      	ldr	r3, [r1, #4]
    303a:	6063      	str	r3, [r4, #4]
    303c:	000c      	movs	r4, r1
    303e:	e7ed      	b.n	301c <_malloc_r+0x70>
    3040:	000c      	movs	r4, r1
    3042:	6849      	ldr	r1, [r1, #4]
    3044:	e7c3      	b.n	2fce <_malloc_r+0x22>
    3046:	2303      	movs	r3, #3
    3048:	1cc4      	adds	r4, r0, #3
    304a:	439c      	bics	r4, r3
    304c:	42a0      	cmp	r0, r4
    304e:	d0df      	beq.n	3010 <_malloc_r+0x64>
    3050:	1a21      	subs	r1, r4, r0
    3052:	0030      	movs	r0, r6
    3054:	f000 fade 	bl	3614 <_sbrk_r>
    3058:	1c43      	adds	r3, r0, #1
    305a:	d1d9      	bne.n	3010 <_malloc_r+0x64>
    305c:	e7c5      	b.n	2fea <_malloc_r+0x3e>
    305e:	46c0      	nop			; (mov r8, r8)
    3060:	20000088 	.word	0x20000088
    3064:	2000008c 	.word	0x2000008c

00003068 <__sfputc_r>:
    3068:	6893      	ldr	r3, [r2, #8]
    306a:	b510      	push	{r4, lr}
    306c:	3b01      	subs	r3, #1
    306e:	6093      	str	r3, [r2, #8]
    3070:	2b00      	cmp	r3, #0
    3072:	da05      	bge.n	3080 <__sfputc_r+0x18>
    3074:	6994      	ldr	r4, [r2, #24]
    3076:	42a3      	cmp	r3, r4
    3078:	db08      	blt.n	308c <__sfputc_r+0x24>
    307a:	b2cb      	uxtb	r3, r1
    307c:	2b0a      	cmp	r3, #10
    307e:	d005      	beq.n	308c <__sfputc_r+0x24>
    3080:	6813      	ldr	r3, [r2, #0]
    3082:	1c58      	adds	r0, r3, #1
    3084:	6010      	str	r0, [r2, #0]
    3086:	7019      	strb	r1, [r3, #0]
    3088:	b2c8      	uxtb	r0, r1
    308a:	bd10      	pop	{r4, pc}
    308c:	f000 fb1e 	bl	36cc <__swbuf_r>
    3090:	e7fb      	b.n	308a <__sfputc_r+0x22>

00003092 <__sfputs_r>:
    3092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3094:	0006      	movs	r6, r0
    3096:	000f      	movs	r7, r1
    3098:	0014      	movs	r4, r2
    309a:	18d5      	adds	r5, r2, r3
    309c:	42ac      	cmp	r4, r5
    309e:	d101      	bne.n	30a4 <__sfputs_r+0x12>
    30a0:	2000      	movs	r0, #0
    30a2:	e007      	b.n	30b4 <__sfputs_r+0x22>
    30a4:	7821      	ldrb	r1, [r4, #0]
    30a6:	003a      	movs	r2, r7
    30a8:	0030      	movs	r0, r6
    30aa:	f7ff ffdd 	bl	3068 <__sfputc_r>
    30ae:	3401      	adds	r4, #1
    30b0:	1c43      	adds	r3, r0, #1
    30b2:	d1f3      	bne.n	309c <__sfputs_r+0xa>
    30b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000030b8 <_vfiprintf_r>:
    30b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ba:	b09f      	sub	sp, #124	; 0x7c
    30bc:	9002      	str	r0, [sp, #8]
    30be:	000f      	movs	r7, r1
    30c0:	0016      	movs	r6, r2
    30c2:	9305      	str	r3, [sp, #20]
    30c4:	b120      	cbz	r0, 30d0 <_vfiprintf_r+0x18>
    30c6:	6983      	ldr	r3, [r0, #24]
    30c8:	9304      	str	r3, [sp, #16]
    30ca:	b90b      	cbnz	r3, 30d0 <_vfiprintf_r+0x18>
    30cc:	f7ff fd70 	bl	2bb0 <__sinit>
    30d0:	4b7e      	ldr	r3, [pc, #504]	; (32cc <_vfiprintf_r+0x214>)
    30d2:	429f      	cmp	r7, r3
    30d4:	d15b      	bne.n	318e <_vfiprintf_r+0xd6>
    30d6:	9b02      	ldr	r3, [sp, #8]
    30d8:	685f      	ldr	r7, [r3, #4]
    30da:	89bb      	ldrh	r3, [r7, #12]
    30dc:	071b      	lsls	r3, r3, #28
    30de:	d562      	bpl.n	31a6 <_vfiprintf_r+0xee>
    30e0:	693b      	ldr	r3, [r7, #16]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d05f      	beq.n	31a6 <_vfiprintf_r+0xee>
    30e6:	2300      	movs	r3, #0
    30e8:	ad06      	add	r5, sp, #24
    30ea:	616b      	str	r3, [r5, #20]
    30ec:	3320      	adds	r3, #32
    30ee:	766b      	strb	r3, [r5, #25]
    30f0:	3310      	adds	r3, #16
    30f2:	76ab      	strb	r3, [r5, #26]
    30f4:	0034      	movs	r4, r6
    30f6:	7823      	ldrb	r3, [r4, #0]
    30f8:	2b00      	cmp	r3, #0
    30fa:	d15e      	bne.n	31ba <_vfiprintf_r+0x102>
    30fc:	1ba3      	subs	r3, r4, r6
    30fe:	9304      	str	r3, [sp, #16]
    3100:	b16b      	cbz	r3, 311e <_vfiprintf_r+0x66>
    3102:	1ba3      	subs	r3, r4, r6
    3104:	0032      	movs	r2, r6
    3106:	0039      	movs	r1, r7
    3108:	9802      	ldr	r0, [sp, #8]
    310a:	f7ff ffc2 	bl	3092 <__sfputs_r>
    310e:	1c43      	adds	r3, r0, #1
    3110:	d100      	bne.n	3114 <_vfiprintf_r+0x5c>
    3112:	e0cb      	b.n	32ac <_vfiprintf_r+0x1f4>
    3114:	696a      	ldr	r2, [r5, #20]
    3116:	9b04      	ldr	r3, [sp, #16]
    3118:	4694      	mov	ip, r2
    311a:	4463      	add	r3, ip
    311c:	616b      	str	r3, [r5, #20]
    311e:	7823      	ldrb	r3, [r4, #0]
    3120:	2b00      	cmp	r3, #0
    3122:	d100      	bne.n	3126 <_vfiprintf_r+0x6e>
    3124:	e0c2      	b.n	32ac <_vfiprintf_r+0x1f4>
    3126:	2201      	movs	r2, #1
    3128:	2300      	movs	r3, #0
    312a:	4252      	negs	r2, r2
    312c:	606a      	str	r2, [r5, #4]
    312e:	a902      	add	r1, sp, #8
    3130:	3254      	adds	r2, #84	; 0x54
    3132:	1852      	adds	r2, r2, r1
    3134:	3401      	adds	r4, #1
    3136:	602b      	str	r3, [r5, #0]
    3138:	60eb      	str	r3, [r5, #12]
    313a:	60ab      	str	r3, [r5, #8]
    313c:	7013      	strb	r3, [r2, #0]
    313e:	65ab      	str	r3, [r5, #88]	; 0x58
    3140:	4e63      	ldr	r6, [pc, #396]	; (32d0 <_vfiprintf_r+0x218>)
    3142:	2205      	movs	r2, #5
    3144:	7821      	ldrb	r1, [r4, #0]
    3146:	0030      	movs	r0, r6
    3148:	f7ff feb8 	bl	2ebc <memchr>
    314c:	1c62      	adds	r2, r4, #1
    314e:	2800      	cmp	r0, #0
    3150:	d137      	bne.n	31c2 <_vfiprintf_r+0x10a>
    3152:	6829      	ldr	r1, [r5, #0]
    3154:	06cb      	lsls	r3, r1, #27
    3156:	d504      	bpl.n	3162 <_vfiprintf_r+0xaa>
    3158:	2353      	movs	r3, #83	; 0x53
    315a:	ae02      	add	r6, sp, #8
    315c:	3020      	adds	r0, #32
    315e:	199b      	adds	r3, r3, r6
    3160:	7018      	strb	r0, [r3, #0]
    3162:	070b      	lsls	r3, r1, #28
    3164:	d504      	bpl.n	3170 <_vfiprintf_r+0xb8>
    3166:	2353      	movs	r3, #83	; 0x53
    3168:	202b      	movs	r0, #43	; 0x2b
    316a:	ae02      	add	r6, sp, #8
    316c:	199b      	adds	r3, r3, r6
    316e:	7018      	strb	r0, [r3, #0]
    3170:	7823      	ldrb	r3, [r4, #0]
    3172:	2b2a      	cmp	r3, #42	; 0x2a
    3174:	d02d      	beq.n	31d2 <_vfiprintf_r+0x11a>
    3176:	2100      	movs	r1, #0
    3178:	200a      	movs	r0, #10
    317a:	2601      	movs	r6, #1
    317c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    317e:	7822      	ldrb	r2, [r4, #0]
    3180:	3a30      	subs	r2, #48	; 0x30
    3182:	2a09      	cmp	r2, #9
    3184:	d969      	bls.n	325a <_vfiprintf_r+0x1a2>
    3186:	2900      	cmp	r1, #0
    3188:	d02b      	beq.n	31e2 <_vfiprintf_r+0x12a>
    318a:	9309      	str	r3, [sp, #36]	; 0x24
    318c:	e029      	b.n	31e2 <_vfiprintf_r+0x12a>
    318e:	4b51      	ldr	r3, [pc, #324]	; (32d4 <_vfiprintf_r+0x21c>)
    3190:	429f      	cmp	r7, r3
    3192:	d102      	bne.n	319a <_vfiprintf_r+0xe2>
    3194:	9b02      	ldr	r3, [sp, #8]
    3196:	689f      	ldr	r7, [r3, #8]
    3198:	e79f      	b.n	30da <_vfiprintf_r+0x22>
    319a:	4b4f      	ldr	r3, [pc, #316]	; (32d8 <_vfiprintf_r+0x220>)
    319c:	429f      	cmp	r7, r3
    319e:	d19c      	bne.n	30da <_vfiprintf_r+0x22>
    31a0:	9b02      	ldr	r3, [sp, #8]
    31a2:	68df      	ldr	r7, [r3, #12]
    31a4:	e799      	b.n	30da <_vfiprintf_r+0x22>
    31a6:	0039      	movs	r1, r7
    31a8:	9802      	ldr	r0, [sp, #8]
    31aa:	f000 faf3 	bl	3794 <__swsetup_r>
    31ae:	2800      	cmp	r0, #0
    31b0:	d099      	beq.n	30e6 <_vfiprintf_r+0x2e>
    31b2:	2001      	movs	r0, #1
    31b4:	4240      	negs	r0, r0
    31b6:	b01f      	add	sp, #124	; 0x7c
    31b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31ba:	2b25      	cmp	r3, #37	; 0x25
    31bc:	d09e      	beq.n	30fc <_vfiprintf_r+0x44>
    31be:	3401      	adds	r4, #1
    31c0:	e799      	b.n	30f6 <_vfiprintf_r+0x3e>
    31c2:	2301      	movs	r3, #1
    31c4:	1b80      	subs	r0, r0, r6
    31c6:	4083      	lsls	r3, r0
    31c8:	6829      	ldr	r1, [r5, #0]
    31ca:	0014      	movs	r4, r2
    31cc:	430b      	orrs	r3, r1
    31ce:	602b      	str	r3, [r5, #0]
    31d0:	e7b6      	b.n	3140 <_vfiprintf_r+0x88>
    31d2:	9b05      	ldr	r3, [sp, #20]
    31d4:	1d18      	adds	r0, r3, #4
    31d6:	681b      	ldr	r3, [r3, #0]
    31d8:	9005      	str	r0, [sp, #20]
    31da:	2b00      	cmp	r3, #0
    31dc:	db37      	blt.n	324e <_vfiprintf_r+0x196>
    31de:	9309      	str	r3, [sp, #36]	; 0x24
    31e0:	0014      	movs	r4, r2
    31e2:	7823      	ldrb	r3, [r4, #0]
    31e4:	2b2e      	cmp	r3, #46	; 0x2e
    31e6:	d10b      	bne.n	3200 <_vfiprintf_r+0x148>
    31e8:	7863      	ldrb	r3, [r4, #1]
    31ea:	1c62      	adds	r2, r4, #1
    31ec:	2b2a      	cmp	r3, #42	; 0x2a
    31ee:	d13c      	bne.n	326a <_vfiprintf_r+0x1b2>
    31f0:	9b05      	ldr	r3, [sp, #20]
    31f2:	3402      	adds	r4, #2
    31f4:	1d1a      	adds	r2, r3, #4
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	9205      	str	r2, [sp, #20]
    31fa:	2b00      	cmp	r3, #0
    31fc:	db32      	blt.n	3264 <_vfiprintf_r+0x1ac>
    31fe:	9307      	str	r3, [sp, #28]
    3200:	4e36      	ldr	r6, [pc, #216]	; (32dc <_vfiprintf_r+0x224>)
    3202:	7821      	ldrb	r1, [r4, #0]
    3204:	2203      	movs	r2, #3
    3206:	0030      	movs	r0, r6
    3208:	f7ff fe58 	bl	2ebc <memchr>
    320c:	b130      	cbz	r0, 321c <_vfiprintf_r+0x164>
    320e:	2340      	movs	r3, #64	; 0x40
    3210:	1b80      	subs	r0, r0, r6
    3212:	4083      	lsls	r3, r0
    3214:	682a      	ldr	r2, [r5, #0]
    3216:	3401      	adds	r4, #1
    3218:	4313      	orrs	r3, r2
    321a:	602b      	str	r3, [r5, #0]
    321c:	7821      	ldrb	r1, [r4, #0]
    321e:	2206      	movs	r2, #6
    3220:	482f      	ldr	r0, [pc, #188]	; (32e0 <_vfiprintf_r+0x228>)
    3222:	1c66      	adds	r6, r4, #1
    3224:	7629      	strb	r1, [r5, #24]
    3226:	f7ff fe49 	bl	2ebc <memchr>
    322a:	2800      	cmp	r0, #0
    322c:	d044      	beq.n	32b8 <_vfiprintf_r+0x200>
    322e:	4b2d      	ldr	r3, [pc, #180]	; (32e4 <_vfiprintf_r+0x22c>)
    3230:	bb83      	cbnz	r3, 3294 <_vfiprintf_r+0x1dc>
    3232:	6829      	ldr	r1, [r5, #0]
    3234:	9b05      	ldr	r3, [sp, #20]
    3236:	2207      	movs	r2, #7
    3238:	05c9      	lsls	r1, r1, #23
    323a:	d529      	bpl.n	3290 <_vfiprintf_r+0x1d8>
    323c:	189b      	adds	r3, r3, r2
    323e:	4393      	bics	r3, r2
    3240:	3308      	adds	r3, #8
    3242:	9305      	str	r3, [sp, #20]
    3244:	696b      	ldr	r3, [r5, #20]
    3246:	9a03      	ldr	r2, [sp, #12]
    3248:	189b      	adds	r3, r3, r2
    324a:	616b      	str	r3, [r5, #20]
    324c:	e752      	b.n	30f4 <_vfiprintf_r+0x3c>
    324e:	425b      	negs	r3, r3
    3250:	60eb      	str	r3, [r5, #12]
    3252:	2302      	movs	r3, #2
    3254:	430b      	orrs	r3, r1
    3256:	602b      	str	r3, [r5, #0]
    3258:	e7c2      	b.n	31e0 <_vfiprintf_r+0x128>
    325a:	4343      	muls	r3, r0
    325c:	3401      	adds	r4, #1
    325e:	189b      	adds	r3, r3, r2
    3260:	0031      	movs	r1, r6
    3262:	e78c      	b.n	317e <_vfiprintf_r+0xc6>
    3264:	2301      	movs	r3, #1
    3266:	425b      	negs	r3, r3
    3268:	e7c9      	b.n	31fe <_vfiprintf_r+0x146>
    326a:	2300      	movs	r3, #0
    326c:	0014      	movs	r4, r2
    326e:	200a      	movs	r0, #10
    3270:	001a      	movs	r2, r3
    3272:	2601      	movs	r6, #1
    3274:	606b      	str	r3, [r5, #4]
    3276:	7821      	ldrb	r1, [r4, #0]
    3278:	3930      	subs	r1, #48	; 0x30
    327a:	2909      	cmp	r1, #9
    327c:	d903      	bls.n	3286 <_vfiprintf_r+0x1ce>
    327e:	2b00      	cmp	r3, #0
    3280:	d0be      	beq.n	3200 <_vfiprintf_r+0x148>
    3282:	9207      	str	r2, [sp, #28]
    3284:	e7bc      	b.n	3200 <_vfiprintf_r+0x148>
    3286:	4342      	muls	r2, r0
    3288:	3401      	adds	r4, #1
    328a:	1852      	adds	r2, r2, r1
    328c:	0033      	movs	r3, r6
    328e:	e7f2      	b.n	3276 <_vfiprintf_r+0x1be>
    3290:	3307      	adds	r3, #7
    3292:	e7d4      	b.n	323e <_vfiprintf_r+0x186>
    3294:	ab05      	add	r3, sp, #20
    3296:	9300      	str	r3, [sp, #0]
    3298:	003a      	movs	r2, r7
    329a:	4b13      	ldr	r3, [pc, #76]	; (32e8 <_vfiprintf_r+0x230>)
    329c:	0029      	movs	r1, r5
    329e:	9802      	ldr	r0, [sp, #8]
    32a0:	e000      	b.n	32a4 <_vfiprintf_r+0x1ec>
    32a2:	bf00      	nop
    32a4:	9003      	str	r0, [sp, #12]
    32a6:	9b03      	ldr	r3, [sp, #12]
    32a8:	3301      	adds	r3, #1
    32aa:	d1cb      	bne.n	3244 <_vfiprintf_r+0x18c>
    32ac:	89bb      	ldrh	r3, [r7, #12]
    32ae:	065b      	lsls	r3, r3, #25
    32b0:	d500      	bpl.n	32b4 <_vfiprintf_r+0x1fc>
    32b2:	e77e      	b.n	31b2 <_vfiprintf_r+0xfa>
    32b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    32b6:	e77e      	b.n	31b6 <_vfiprintf_r+0xfe>
    32b8:	ab05      	add	r3, sp, #20
    32ba:	9300      	str	r3, [sp, #0]
    32bc:	003a      	movs	r2, r7
    32be:	4b0a      	ldr	r3, [pc, #40]	; (32e8 <_vfiprintf_r+0x230>)
    32c0:	0029      	movs	r1, r5
    32c2:	9802      	ldr	r0, [sp, #8]
    32c4:	f000 f87e 	bl	33c4 <_printf_i>
    32c8:	e7ec      	b.n	32a4 <_vfiprintf_r+0x1ec>
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	00003f14 	.word	0x00003f14
    32d0:	00003f58 	.word	0x00003f58
    32d4:	00003f34 	.word	0x00003f34
    32d8:	00003ef4 	.word	0x00003ef4
    32dc:	00003f5e 	.word	0x00003f5e
    32e0:	00003f62 	.word	0x00003f62
    32e4:	00000000 	.word	0x00000000
    32e8:	00003093 	.word	0x00003093

000032ec <_printf_common>:
    32ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32ee:	0015      	movs	r5, r2
    32f0:	9301      	str	r3, [sp, #4]
    32f2:	688a      	ldr	r2, [r1, #8]
    32f4:	690b      	ldr	r3, [r1, #16]
    32f6:	9000      	str	r0, [sp, #0]
    32f8:	000c      	movs	r4, r1
    32fa:	4293      	cmp	r3, r2
    32fc:	da00      	bge.n	3300 <_printf_common+0x14>
    32fe:	0013      	movs	r3, r2
    3300:	0022      	movs	r2, r4
    3302:	602b      	str	r3, [r5, #0]
    3304:	3243      	adds	r2, #67	; 0x43
    3306:	7812      	ldrb	r2, [r2, #0]
    3308:	b10a      	cbz	r2, 330e <_printf_common+0x22>
    330a:	3301      	adds	r3, #1
    330c:	602b      	str	r3, [r5, #0]
    330e:	6823      	ldr	r3, [r4, #0]
    3310:	069b      	lsls	r3, r3, #26
    3312:	d502      	bpl.n	331a <_printf_common+0x2e>
    3314:	682b      	ldr	r3, [r5, #0]
    3316:	3302      	adds	r3, #2
    3318:	602b      	str	r3, [r5, #0]
    331a:	2706      	movs	r7, #6
    331c:	6823      	ldr	r3, [r4, #0]
    331e:	401f      	ands	r7, r3
    3320:	b33f      	cbz	r7, 3372 <_printf_common+0x86>
    3322:	0023      	movs	r3, r4
    3324:	3343      	adds	r3, #67	; 0x43
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	1e5a      	subs	r2, r3, #1
    332a:	4193      	sbcs	r3, r2
    332c:	6822      	ldr	r2, [r4, #0]
    332e:	0692      	lsls	r2, r2, #26
    3330:	d430      	bmi.n	3394 <_printf_common+0xa8>
    3332:	0022      	movs	r2, r4
    3334:	9901      	ldr	r1, [sp, #4]
    3336:	3243      	adds	r2, #67	; 0x43
    3338:	9800      	ldr	r0, [sp, #0]
    333a:	9e08      	ldr	r6, [sp, #32]
    333c:	47b0      	blx	r6
    333e:	1c43      	adds	r3, r0, #1
    3340:	d025      	beq.n	338e <_printf_common+0xa2>
    3342:	2306      	movs	r3, #6
    3344:	6820      	ldr	r0, [r4, #0]
    3346:	682a      	ldr	r2, [r5, #0]
    3348:	68e1      	ldr	r1, [r4, #12]
    334a:	4003      	ands	r3, r0
    334c:	2500      	movs	r5, #0
    334e:	2b04      	cmp	r3, #4
    3350:	d103      	bne.n	335a <_printf_common+0x6e>
    3352:	1a8d      	subs	r5, r1, r2
    3354:	43eb      	mvns	r3, r5
    3356:	17db      	asrs	r3, r3, #31
    3358:	401d      	ands	r5, r3
    335a:	68a3      	ldr	r3, [r4, #8]
    335c:	6922      	ldr	r2, [r4, #16]
    335e:	4293      	cmp	r3, r2
    3360:	dd01      	ble.n	3366 <_printf_common+0x7a>
    3362:	1a9b      	subs	r3, r3, r2
    3364:	18ed      	adds	r5, r5, r3
    3366:	2700      	movs	r7, #0
    3368:	42bd      	cmp	r5, r7
    336a:	d120      	bne.n	33ae <_printf_common+0xc2>
    336c:	2000      	movs	r0, #0
    336e:	e010      	b.n	3392 <_printf_common+0xa6>
    3370:	3701      	adds	r7, #1
    3372:	68e3      	ldr	r3, [r4, #12]
    3374:	682a      	ldr	r2, [r5, #0]
    3376:	1a9b      	subs	r3, r3, r2
    3378:	429f      	cmp	r7, r3
    337a:	dad2      	bge.n	3322 <_printf_common+0x36>
    337c:	0022      	movs	r2, r4
    337e:	2301      	movs	r3, #1
    3380:	3219      	adds	r2, #25
    3382:	9901      	ldr	r1, [sp, #4]
    3384:	9800      	ldr	r0, [sp, #0]
    3386:	9e08      	ldr	r6, [sp, #32]
    3388:	47b0      	blx	r6
    338a:	1c43      	adds	r3, r0, #1
    338c:	d1f0      	bne.n	3370 <_printf_common+0x84>
    338e:	2001      	movs	r0, #1
    3390:	4240      	negs	r0, r0
    3392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3394:	2030      	movs	r0, #48	; 0x30
    3396:	18e1      	adds	r1, r4, r3
    3398:	3143      	adds	r1, #67	; 0x43
    339a:	7008      	strb	r0, [r1, #0]
    339c:	0021      	movs	r1, r4
    339e:	1c5a      	adds	r2, r3, #1
    33a0:	3145      	adds	r1, #69	; 0x45
    33a2:	7809      	ldrb	r1, [r1, #0]
    33a4:	18a2      	adds	r2, r4, r2
    33a6:	3243      	adds	r2, #67	; 0x43
    33a8:	3302      	adds	r3, #2
    33aa:	7011      	strb	r1, [r2, #0]
    33ac:	e7c1      	b.n	3332 <_printf_common+0x46>
    33ae:	0022      	movs	r2, r4
    33b0:	2301      	movs	r3, #1
    33b2:	321a      	adds	r2, #26
    33b4:	9901      	ldr	r1, [sp, #4]
    33b6:	9800      	ldr	r0, [sp, #0]
    33b8:	9e08      	ldr	r6, [sp, #32]
    33ba:	47b0      	blx	r6
    33bc:	1c43      	adds	r3, r0, #1
    33be:	d0e6      	beq.n	338e <_printf_common+0xa2>
    33c0:	3701      	adds	r7, #1
    33c2:	e7d1      	b.n	3368 <_printf_common+0x7c>

000033c4 <_printf_i>:
    33c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33c6:	000e      	movs	r6, r1
    33c8:	b089      	sub	sp, #36	; 0x24
    33ca:	9305      	str	r3, [sp, #20]
    33cc:	9003      	str	r0, [sp, #12]
    33ce:	9204      	str	r2, [sp, #16]
    33d0:	7e0a      	ldrb	r2, [r1, #24]
    33d2:	000c      	movs	r4, r1
    33d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    33d6:	3643      	adds	r6, #67	; 0x43
    33d8:	2a6e      	cmp	r2, #110	; 0x6e
    33da:	d100      	bne.n	33de <_printf_i+0x1a>
    33dc:	e08b      	b.n	34f6 <_printf_i+0x132>
    33de:	d817      	bhi.n	3410 <_printf_i+0x4c>
    33e0:	2a63      	cmp	r2, #99	; 0x63
    33e2:	d02c      	beq.n	343e <_printf_i+0x7a>
    33e4:	d808      	bhi.n	33f8 <_printf_i+0x34>
    33e6:	2a00      	cmp	r2, #0
    33e8:	d100      	bne.n	33ec <_printf_i+0x28>
    33ea:	e095      	b.n	3518 <_printf_i+0x154>
    33ec:	2a58      	cmp	r2, #88	; 0x58
    33ee:	d065      	beq.n	34bc <_printf_i+0xf8>
    33f0:	0025      	movs	r5, r4
    33f2:	3542      	adds	r5, #66	; 0x42
    33f4:	702a      	strb	r2, [r5, #0]
    33f6:	e029      	b.n	344c <_printf_i+0x88>
    33f8:	2a64      	cmp	r2, #100	; 0x64
    33fa:	d001      	beq.n	3400 <_printf_i+0x3c>
    33fc:	2a69      	cmp	r2, #105	; 0x69
    33fe:	d1f7      	bne.n	33f0 <_printf_i+0x2c>
    3400:	6821      	ldr	r1, [r4, #0]
    3402:	681a      	ldr	r2, [r3, #0]
    3404:	0608      	lsls	r0, r1, #24
    3406:	d523      	bpl.n	3450 <_printf_i+0x8c>
    3408:	1d11      	adds	r1, r2, #4
    340a:	6019      	str	r1, [r3, #0]
    340c:	6813      	ldr	r3, [r2, #0]
    340e:	e025      	b.n	345c <_printf_i+0x98>
    3410:	2a73      	cmp	r2, #115	; 0x73
    3412:	d100      	bne.n	3416 <_printf_i+0x52>
    3414:	e084      	b.n	3520 <_printf_i+0x15c>
    3416:	d808      	bhi.n	342a <_printf_i+0x66>
    3418:	2a6f      	cmp	r2, #111	; 0x6f
    341a:	d027      	beq.n	346c <_printf_i+0xa8>
    341c:	2a70      	cmp	r2, #112	; 0x70
    341e:	d1e7      	bne.n	33f0 <_printf_i+0x2c>
    3420:	2220      	movs	r2, #32
    3422:	6809      	ldr	r1, [r1, #0]
    3424:	430a      	orrs	r2, r1
    3426:	6022      	str	r2, [r4, #0]
    3428:	e003      	b.n	3432 <_printf_i+0x6e>
    342a:	2a75      	cmp	r2, #117	; 0x75
    342c:	d01e      	beq.n	346c <_printf_i+0xa8>
    342e:	2a78      	cmp	r2, #120	; 0x78
    3430:	d1de      	bne.n	33f0 <_printf_i+0x2c>
    3432:	0022      	movs	r2, r4
    3434:	2178      	movs	r1, #120	; 0x78
    3436:	3245      	adds	r2, #69	; 0x45
    3438:	7011      	strb	r1, [r2, #0]
    343a:	4968      	ldr	r1, [pc, #416]	; (35dc <_printf_i+0x218>)
    343c:	e041      	b.n	34c2 <_printf_i+0xfe>
    343e:	000d      	movs	r5, r1
    3440:	681a      	ldr	r2, [r3, #0]
    3442:	3542      	adds	r5, #66	; 0x42
    3444:	1d11      	adds	r1, r2, #4
    3446:	6019      	str	r1, [r3, #0]
    3448:	6813      	ldr	r3, [r2, #0]
    344a:	702b      	strb	r3, [r5, #0]
    344c:	2301      	movs	r3, #1
    344e:	e074      	b.n	353a <_printf_i+0x176>
    3450:	0649      	lsls	r1, r1, #25
    3452:	d5d9      	bpl.n	3408 <_printf_i+0x44>
    3454:	1d11      	adds	r1, r2, #4
    3456:	6019      	str	r1, [r3, #0]
    3458:	2300      	movs	r3, #0
    345a:	5ed3      	ldrsh	r3, [r2, r3]
    345c:	2b00      	cmp	r3, #0
    345e:	da02      	bge.n	3466 <_printf_i+0xa2>
    3460:	222d      	movs	r2, #45	; 0x2d
    3462:	425b      	negs	r3, r3
    3464:	7032      	strb	r2, [r6, #0]
    3466:	495e      	ldr	r1, [pc, #376]	; (35e0 <_printf_i+0x21c>)
    3468:	220a      	movs	r2, #10
    346a:	e015      	b.n	3498 <_printf_i+0xd4>
    346c:	6820      	ldr	r0, [r4, #0]
    346e:	6819      	ldr	r1, [r3, #0]
    3470:	0605      	lsls	r5, r0, #24
    3472:	d503      	bpl.n	347c <_printf_i+0xb8>
    3474:	1d08      	adds	r0, r1, #4
    3476:	6018      	str	r0, [r3, #0]
    3478:	680b      	ldr	r3, [r1, #0]
    347a:	e005      	b.n	3488 <_printf_i+0xc4>
    347c:	0640      	lsls	r0, r0, #25
    347e:	d5f9      	bpl.n	3474 <_printf_i+0xb0>
    3480:	1d08      	adds	r0, r1, #4
    3482:	6018      	str	r0, [r3, #0]
    3484:	680b      	ldr	r3, [r1, #0]
    3486:	b29b      	uxth	r3, r3
    3488:	4955      	ldr	r1, [pc, #340]	; (35e0 <_printf_i+0x21c>)
    348a:	2a6f      	cmp	r2, #111	; 0x6f
    348c:	d131      	bne.n	34f2 <_printf_i+0x12e>
    348e:	3a67      	subs	r2, #103	; 0x67
    3490:	0020      	movs	r0, r4
    3492:	2500      	movs	r5, #0
    3494:	3043      	adds	r0, #67	; 0x43
    3496:	7005      	strb	r5, [r0, #0]
    3498:	6860      	ldr	r0, [r4, #4]
    349a:	60a0      	str	r0, [r4, #8]
    349c:	2800      	cmp	r0, #0
    349e:	db72      	blt.n	3586 <_printf_i+0x1c2>
    34a0:	2504      	movs	r5, #4
    34a2:	6827      	ldr	r7, [r4, #0]
    34a4:	43af      	bics	r7, r5
    34a6:	6027      	str	r7, [r4, #0]
    34a8:	2b00      	cmp	r3, #0
    34aa:	d16e      	bne.n	358a <_printf_i+0x1c6>
    34ac:	0035      	movs	r5, r6
    34ae:	2800      	cmp	r0, #0
    34b0:	d077      	beq.n	35a2 <_printf_i+0x1de>
    34b2:	0025      	movs	r5, r4
    34b4:	780b      	ldrb	r3, [r1, #0]
    34b6:	3542      	adds	r5, #66	; 0x42
    34b8:	702b      	strb	r3, [r5, #0]
    34ba:	e072      	b.n	35a2 <_printf_i+0x1de>
    34bc:	3145      	adds	r1, #69	; 0x45
    34be:	700a      	strb	r2, [r1, #0]
    34c0:	4947      	ldr	r1, [pc, #284]	; (35e0 <_printf_i+0x21c>)
    34c2:	681a      	ldr	r2, [r3, #0]
    34c4:	6820      	ldr	r0, [r4, #0]
    34c6:	1d15      	adds	r5, r2, #4
    34c8:	601d      	str	r5, [r3, #0]
    34ca:	6813      	ldr	r3, [r2, #0]
    34cc:	0605      	lsls	r5, r0, #24
    34ce:	d50c      	bpl.n	34ea <_printf_i+0x126>
    34d0:	07c2      	lsls	r2, r0, #31
    34d2:	d502      	bpl.n	34da <_printf_i+0x116>
    34d4:	2220      	movs	r2, #32
    34d6:	4310      	orrs	r0, r2
    34d8:	6020      	str	r0, [r4, #0]
    34da:	2210      	movs	r2, #16
    34dc:	2b00      	cmp	r3, #0
    34de:	d1d7      	bne.n	3490 <_printf_i+0xcc>
    34e0:	2020      	movs	r0, #32
    34e2:	6825      	ldr	r5, [r4, #0]
    34e4:	4385      	bics	r5, r0
    34e6:	6025      	str	r5, [r4, #0]
    34e8:	e7d2      	b.n	3490 <_printf_i+0xcc>
    34ea:	0645      	lsls	r5, r0, #25
    34ec:	d5f0      	bpl.n	34d0 <_printf_i+0x10c>
    34ee:	b29b      	uxth	r3, r3
    34f0:	e7ee      	b.n	34d0 <_printf_i+0x10c>
    34f2:	220a      	movs	r2, #10
    34f4:	e7cc      	b.n	3490 <_printf_i+0xcc>
    34f6:	6809      	ldr	r1, [r1, #0]
    34f8:	681a      	ldr	r2, [r3, #0]
    34fa:	0608      	lsls	r0, r1, #24
    34fc:	d505      	bpl.n	350a <_printf_i+0x146>
    34fe:	1d11      	adds	r1, r2, #4
    3500:	6019      	str	r1, [r3, #0]
    3502:	6813      	ldr	r3, [r2, #0]
    3504:	6962      	ldr	r2, [r4, #20]
    3506:	601a      	str	r2, [r3, #0]
    3508:	e006      	b.n	3518 <_printf_i+0x154>
    350a:	0649      	lsls	r1, r1, #25
    350c:	d5f7      	bpl.n	34fe <_printf_i+0x13a>
    350e:	1d11      	adds	r1, r2, #4
    3510:	6019      	str	r1, [r3, #0]
    3512:	6813      	ldr	r3, [r2, #0]
    3514:	8aa2      	ldrh	r2, [r4, #20]
    3516:	801a      	strh	r2, [r3, #0]
    3518:	2300      	movs	r3, #0
    351a:	0035      	movs	r5, r6
    351c:	6123      	str	r3, [r4, #16]
    351e:	e04e      	b.n	35be <_printf_i+0x1fa>
    3520:	681a      	ldr	r2, [r3, #0]
    3522:	1d11      	adds	r1, r2, #4
    3524:	6019      	str	r1, [r3, #0]
    3526:	6815      	ldr	r5, [r2, #0]
    3528:	2100      	movs	r1, #0
    352a:	6862      	ldr	r2, [r4, #4]
    352c:	0028      	movs	r0, r5
    352e:	f7ff fcc5 	bl	2ebc <memchr>
    3532:	b108      	cbz	r0, 3538 <_printf_i+0x174>
    3534:	1b40      	subs	r0, r0, r5
    3536:	6060      	str	r0, [r4, #4]
    3538:	6863      	ldr	r3, [r4, #4]
    353a:	6123      	str	r3, [r4, #16]
    353c:	2300      	movs	r3, #0
    353e:	7033      	strb	r3, [r6, #0]
    3540:	e03d      	b.n	35be <_printf_i+0x1fa>
    3542:	6923      	ldr	r3, [r4, #16]
    3544:	002a      	movs	r2, r5
    3546:	9904      	ldr	r1, [sp, #16]
    3548:	9803      	ldr	r0, [sp, #12]
    354a:	9d05      	ldr	r5, [sp, #20]
    354c:	47a8      	blx	r5
    354e:	1c43      	adds	r3, r0, #1
    3550:	d03f      	beq.n	35d2 <_printf_i+0x20e>
    3552:	6823      	ldr	r3, [r4, #0]
    3554:	2500      	movs	r5, #0
    3556:	079b      	lsls	r3, r3, #30
    3558:	d40f      	bmi.n	357a <_printf_i+0x1b6>
    355a:	9b07      	ldr	r3, [sp, #28]
    355c:	68e0      	ldr	r0, [r4, #12]
    355e:	4298      	cmp	r0, r3
    3560:	da39      	bge.n	35d6 <_printf_i+0x212>
    3562:	0018      	movs	r0, r3
    3564:	e037      	b.n	35d6 <_printf_i+0x212>
    3566:	0022      	movs	r2, r4
    3568:	2301      	movs	r3, #1
    356a:	3219      	adds	r2, #25
    356c:	9904      	ldr	r1, [sp, #16]
    356e:	9803      	ldr	r0, [sp, #12]
    3570:	9e05      	ldr	r6, [sp, #20]
    3572:	47b0      	blx	r6
    3574:	1c43      	adds	r3, r0, #1
    3576:	d02c      	beq.n	35d2 <_printf_i+0x20e>
    3578:	3501      	adds	r5, #1
    357a:	68e3      	ldr	r3, [r4, #12]
    357c:	9a07      	ldr	r2, [sp, #28]
    357e:	1a9b      	subs	r3, r3, r2
    3580:	429d      	cmp	r5, r3
    3582:	dbf0      	blt.n	3566 <_printf_i+0x1a2>
    3584:	e7e9      	b.n	355a <_printf_i+0x196>
    3586:	2b00      	cmp	r3, #0
    3588:	d093      	beq.n	34b2 <_printf_i+0xee>
    358a:	0035      	movs	r5, r6
    358c:	fbb3 f0f2 	udiv	r0, r3, r2
    3590:	0017      	movs	r7, r2
    3592:	4347      	muls	r7, r0
    3594:	1bdb      	subs	r3, r3, r7
    3596:	5ccb      	ldrb	r3, [r1, r3]
    3598:	3d01      	subs	r5, #1
    359a:	702b      	strb	r3, [r5, #0]
    359c:	0003      	movs	r3, r0
    359e:	2800      	cmp	r0, #0
    35a0:	d1f4      	bne.n	358c <_printf_i+0x1c8>
    35a2:	2a08      	cmp	r2, #8
    35a4:	d109      	bne.n	35ba <_printf_i+0x1f6>
    35a6:	6823      	ldr	r3, [r4, #0]
    35a8:	07db      	lsls	r3, r3, #31
    35aa:	d506      	bpl.n	35ba <_printf_i+0x1f6>
    35ac:	6863      	ldr	r3, [r4, #4]
    35ae:	6922      	ldr	r2, [r4, #16]
    35b0:	4293      	cmp	r3, r2
    35b2:	dc02      	bgt.n	35ba <_printf_i+0x1f6>
    35b4:	2330      	movs	r3, #48	; 0x30
    35b6:	3d01      	subs	r5, #1
    35b8:	702b      	strb	r3, [r5, #0]
    35ba:	1b76      	subs	r6, r6, r5
    35bc:	6126      	str	r6, [r4, #16]
    35be:	9b05      	ldr	r3, [sp, #20]
    35c0:	aa07      	add	r2, sp, #28
    35c2:	9300      	str	r3, [sp, #0]
    35c4:	0021      	movs	r1, r4
    35c6:	9b04      	ldr	r3, [sp, #16]
    35c8:	9803      	ldr	r0, [sp, #12]
    35ca:	f7ff fe8f 	bl	32ec <_printf_common>
    35ce:	1c43      	adds	r3, r0, #1
    35d0:	d1b7      	bne.n	3542 <_printf_i+0x17e>
    35d2:	2001      	movs	r0, #1
    35d4:	4240      	negs	r0, r0
    35d6:	b009      	add	sp, #36	; 0x24
    35d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	00003f7a 	.word	0x00003f7a
    35e0:	00003f69 	.word	0x00003f69

000035e4 <iprintf>:
    35e4:	b40f      	push	{r0, r1, r2, r3}
    35e6:	4b0a      	ldr	r3, [pc, #40]	; (3610 <iprintf+0x2c>)
    35e8:	b513      	push	{r0, r1, r4, lr}
    35ea:	681c      	ldr	r4, [r3, #0]
    35ec:	b124      	cbz	r4, 35f8 <iprintf+0x14>
    35ee:	69a3      	ldr	r3, [r4, #24]
    35f0:	b913      	cbnz	r3, 35f8 <iprintf+0x14>
    35f2:	0020      	movs	r0, r4
    35f4:	f7ff fadc 	bl	2bb0 <__sinit>
    35f8:	ab05      	add	r3, sp, #20
    35fa:	9a04      	ldr	r2, [sp, #16]
    35fc:	68a1      	ldr	r1, [r4, #8]
    35fe:	0020      	movs	r0, r4
    3600:	9301      	str	r3, [sp, #4]
    3602:	f7ff fd59 	bl	30b8 <_vfiprintf_r>
    3606:	bc16      	pop	{r1, r2, r4}
    3608:	bc08      	pop	{r3}
    360a:	b004      	add	sp, #16
    360c:	4718      	bx	r3
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	20000000 	.word	0x20000000

00003614 <_sbrk_r>:
    3614:	2300      	movs	r3, #0
    3616:	b570      	push	{r4, r5, r6, lr}
    3618:	4c05      	ldr	r4, [pc, #20]	; (3630 <_sbrk_r+0x1c>)
    361a:	0005      	movs	r5, r0
    361c:	0008      	movs	r0, r1
    361e:	6023      	str	r3, [r4, #0]
    3620:	f7fe fee8 	bl	23f4 <_sbrk>
    3624:	1c43      	adds	r3, r0, #1
    3626:	d102      	bne.n	362e <_sbrk_r+0x1a>
    3628:	6823      	ldr	r3, [r4, #0]
    362a:	b103      	cbz	r3, 362e <_sbrk_r+0x1a>
    362c:	602b      	str	r3, [r5, #0]
    362e:	bd70      	pop	{r4, r5, r6, pc}
    3630:	20000914 	.word	0x20000914

00003634 <__sread>:
    3634:	b570      	push	{r4, r5, r6, lr}
    3636:	000c      	movs	r4, r1
    3638:	250e      	movs	r5, #14
    363a:	5f49      	ldrsh	r1, [r1, r5]
    363c:	f000 f962 	bl	3904 <_read_r>
    3640:	2800      	cmp	r0, #0
    3642:	db03      	blt.n	364c <__sread+0x18>
    3644:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3646:	181b      	adds	r3, r3, r0
    3648:	6563      	str	r3, [r4, #84]	; 0x54
    364a:	bd70      	pop	{r4, r5, r6, pc}
    364c:	89a3      	ldrh	r3, [r4, #12]
    364e:	4a02      	ldr	r2, [pc, #8]	; (3658 <__sread+0x24>)
    3650:	4013      	ands	r3, r2
    3652:	81a3      	strh	r3, [r4, #12]
    3654:	e7f9      	b.n	364a <__sread+0x16>
    3656:	46c0      	nop			; (mov r8, r8)
    3658:	ffffefff 	.word	0xffffefff

0000365c <__swrite>:
    365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    365e:	001f      	movs	r7, r3
    3660:	898b      	ldrh	r3, [r1, #12]
    3662:	0005      	movs	r5, r0
    3664:	000c      	movs	r4, r1
    3666:	0016      	movs	r6, r2
    3668:	05db      	lsls	r3, r3, #23
    366a:	d505      	bpl.n	3678 <__swrite+0x1c>
    366c:	230e      	movs	r3, #14
    366e:	5ec9      	ldrsh	r1, [r1, r3]
    3670:	2200      	movs	r2, #0
    3672:	2302      	movs	r3, #2
    3674:	f000 f932 	bl	38dc <_lseek_r>
    3678:	89a3      	ldrh	r3, [r4, #12]
    367a:	4a05      	ldr	r2, [pc, #20]	; (3690 <__swrite+0x34>)
    367c:	0028      	movs	r0, r5
    367e:	4013      	ands	r3, r2
    3680:	81a3      	strh	r3, [r4, #12]
    3682:	0032      	movs	r2, r6
    3684:	230e      	movs	r3, #14
    3686:	5ee1      	ldrsh	r1, [r4, r3]
    3688:	003b      	movs	r3, r7
    368a:	f000 f871 	bl	3770 <_write_r>
    368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3690:	ffffefff 	.word	0xffffefff

00003694 <__sseek>:
    3694:	b570      	push	{r4, r5, r6, lr}
    3696:	000c      	movs	r4, r1
    3698:	250e      	movs	r5, #14
    369a:	5f49      	ldrsh	r1, [r1, r5]
    369c:	f000 f91e 	bl	38dc <_lseek_r>
    36a0:	89a3      	ldrh	r3, [r4, #12]
    36a2:	1c42      	adds	r2, r0, #1
    36a4:	d103      	bne.n	36ae <__sseek+0x1a>
    36a6:	4a05      	ldr	r2, [pc, #20]	; (36bc <__sseek+0x28>)
    36a8:	4013      	ands	r3, r2
    36aa:	81a3      	strh	r3, [r4, #12]
    36ac:	bd70      	pop	{r4, r5, r6, pc}
    36ae:	f241 0200 	movw	r2, #4096	; 0x1000
    36b2:	4313      	orrs	r3, r2
    36b4:	81a3      	strh	r3, [r4, #12]
    36b6:	6560      	str	r0, [r4, #84]	; 0x54
    36b8:	e7f8      	b.n	36ac <__sseek+0x18>
    36ba:	46c0      	nop			; (mov r8, r8)
    36bc:	ffffefff 	.word	0xffffefff

000036c0 <__sclose>:
    36c0:	b510      	push	{r4, lr}
    36c2:	230e      	movs	r3, #14
    36c4:	5ec9      	ldrsh	r1, [r1, r3]
    36c6:	f000 f8d7 	bl	3878 <_close_r>
    36ca:	bd10      	pop	{r4, pc}

000036cc <__swbuf_r>:
    36cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ce:	0005      	movs	r5, r0
    36d0:	000e      	movs	r6, r1
    36d2:	0014      	movs	r4, r2
    36d4:	b118      	cbz	r0, 36de <__swbuf_r+0x12>
    36d6:	6983      	ldr	r3, [r0, #24]
    36d8:	b90b      	cbnz	r3, 36de <__swbuf_r+0x12>
    36da:	f7ff fa69 	bl	2bb0 <__sinit>
    36de:	4b21      	ldr	r3, [pc, #132]	; (3764 <__swbuf_r+0x98>)
    36e0:	429c      	cmp	r4, r3
    36e2:	d12a      	bne.n	373a <__swbuf_r+0x6e>
    36e4:	686c      	ldr	r4, [r5, #4]
    36e6:	69a3      	ldr	r3, [r4, #24]
    36e8:	60a3      	str	r3, [r4, #8]
    36ea:	89a3      	ldrh	r3, [r4, #12]
    36ec:	071b      	lsls	r3, r3, #28
    36ee:	d52e      	bpl.n	374e <__swbuf_r+0x82>
    36f0:	6923      	ldr	r3, [r4, #16]
    36f2:	b363      	cbz	r3, 374e <__swbuf_r+0x82>
    36f4:	6823      	ldr	r3, [r4, #0]
    36f6:	6922      	ldr	r2, [r4, #16]
    36f8:	b2f7      	uxtb	r7, r6
    36fa:	1a98      	subs	r0, r3, r2
    36fc:	6963      	ldr	r3, [r4, #20]
    36fe:	b2f6      	uxtb	r6, r6
    3700:	4298      	cmp	r0, r3
    3702:	db04      	blt.n	370e <__swbuf_r+0x42>
    3704:	0021      	movs	r1, r4
    3706:	0028      	movs	r0, r5
    3708:	f7ff f9e6 	bl	2ad8 <_fflush_r>
    370c:	bb28      	cbnz	r0, 375a <__swbuf_r+0x8e>
    370e:	68a3      	ldr	r3, [r4, #8]
    3710:	3001      	adds	r0, #1
    3712:	3b01      	subs	r3, #1
    3714:	60a3      	str	r3, [r4, #8]
    3716:	6823      	ldr	r3, [r4, #0]
    3718:	1c5a      	adds	r2, r3, #1
    371a:	6022      	str	r2, [r4, #0]
    371c:	701f      	strb	r7, [r3, #0]
    371e:	6963      	ldr	r3, [r4, #20]
    3720:	4298      	cmp	r0, r3
    3722:	d004      	beq.n	372e <__swbuf_r+0x62>
    3724:	89a3      	ldrh	r3, [r4, #12]
    3726:	07db      	lsls	r3, r3, #31
    3728:	d519      	bpl.n	375e <__swbuf_r+0x92>
    372a:	2e0a      	cmp	r6, #10
    372c:	d117      	bne.n	375e <__swbuf_r+0x92>
    372e:	0021      	movs	r1, r4
    3730:	0028      	movs	r0, r5
    3732:	f7ff f9d1 	bl	2ad8 <_fflush_r>
    3736:	b190      	cbz	r0, 375e <__swbuf_r+0x92>
    3738:	e00f      	b.n	375a <__swbuf_r+0x8e>
    373a:	4b0b      	ldr	r3, [pc, #44]	; (3768 <__swbuf_r+0x9c>)
    373c:	429c      	cmp	r4, r3
    373e:	d101      	bne.n	3744 <__swbuf_r+0x78>
    3740:	68ac      	ldr	r4, [r5, #8]
    3742:	e7d0      	b.n	36e6 <__swbuf_r+0x1a>
    3744:	4b09      	ldr	r3, [pc, #36]	; (376c <__swbuf_r+0xa0>)
    3746:	429c      	cmp	r4, r3
    3748:	d1cd      	bne.n	36e6 <__swbuf_r+0x1a>
    374a:	68ec      	ldr	r4, [r5, #12]
    374c:	e7cb      	b.n	36e6 <__swbuf_r+0x1a>
    374e:	0021      	movs	r1, r4
    3750:	0028      	movs	r0, r5
    3752:	f000 f81f 	bl	3794 <__swsetup_r>
    3756:	2800      	cmp	r0, #0
    3758:	d0cc      	beq.n	36f4 <__swbuf_r+0x28>
    375a:	2601      	movs	r6, #1
    375c:	4276      	negs	r6, r6
    375e:	0030      	movs	r0, r6
    3760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	00003f14 	.word	0x00003f14
    3768:	00003f34 	.word	0x00003f34
    376c:	00003ef4 	.word	0x00003ef4

00003770 <_write_r>:
    3770:	b570      	push	{r4, r5, r6, lr}
    3772:	0005      	movs	r5, r0
    3774:	0008      	movs	r0, r1
    3776:	0011      	movs	r1, r2
    3778:	2200      	movs	r2, #0
    377a:	4c05      	ldr	r4, [pc, #20]	; (3790 <_write_r+0x20>)
    377c:	6022      	str	r2, [r4, #0]
    377e:	001a      	movs	r2, r3
    3780:	f000 f8dc 	bl	393c <_write>
    3784:	1c43      	adds	r3, r0, #1
    3786:	d102      	bne.n	378e <_write_r+0x1e>
    3788:	6823      	ldr	r3, [r4, #0]
    378a:	b103      	cbz	r3, 378e <_write_r+0x1e>
    378c:	602b      	str	r3, [r5, #0]
    378e:	bd70      	pop	{r4, r5, r6, pc}
    3790:	20000914 	.word	0x20000914

00003794 <__swsetup_r>:
    3794:	4b34      	ldr	r3, [pc, #208]	; (3868 <__swsetup_r+0xd4>)
    3796:	b570      	push	{r4, r5, r6, lr}
    3798:	681d      	ldr	r5, [r3, #0]
    379a:	0006      	movs	r6, r0
    379c:	000c      	movs	r4, r1
    379e:	b125      	cbz	r5, 37aa <__swsetup_r+0x16>
    37a0:	69ab      	ldr	r3, [r5, #24]
    37a2:	b913      	cbnz	r3, 37aa <__swsetup_r+0x16>
    37a4:	0028      	movs	r0, r5
    37a6:	f7ff fa03 	bl	2bb0 <__sinit>
    37aa:	4b30      	ldr	r3, [pc, #192]	; (386c <__swsetup_r+0xd8>)
    37ac:	429c      	cmp	r4, r3
    37ae:	d10f      	bne.n	37d0 <__swsetup_r+0x3c>
    37b0:	686c      	ldr	r4, [r5, #4]
    37b2:	230c      	movs	r3, #12
    37b4:	5ee2      	ldrsh	r2, [r4, r3]
    37b6:	b293      	uxth	r3, r2
    37b8:	0719      	lsls	r1, r3, #28
    37ba:	d42c      	bmi.n	3816 <__swsetup_r+0x82>
    37bc:	06d9      	lsls	r1, r3, #27
    37be:	d411      	bmi.n	37e4 <__swsetup_r+0x50>
    37c0:	2309      	movs	r3, #9
    37c2:	2001      	movs	r0, #1
    37c4:	6033      	str	r3, [r6, #0]
    37c6:	3337      	adds	r3, #55	; 0x37
    37c8:	4313      	orrs	r3, r2
    37ca:	81a3      	strh	r3, [r4, #12]
    37cc:	4240      	negs	r0, r0
    37ce:	bd70      	pop	{r4, r5, r6, pc}
    37d0:	4b27      	ldr	r3, [pc, #156]	; (3870 <__swsetup_r+0xdc>)
    37d2:	429c      	cmp	r4, r3
    37d4:	d101      	bne.n	37da <__swsetup_r+0x46>
    37d6:	68ac      	ldr	r4, [r5, #8]
    37d8:	e7eb      	b.n	37b2 <__swsetup_r+0x1e>
    37da:	4b26      	ldr	r3, [pc, #152]	; (3874 <__swsetup_r+0xe0>)
    37dc:	429c      	cmp	r4, r3
    37de:	d1e8      	bne.n	37b2 <__swsetup_r+0x1e>
    37e0:	68ec      	ldr	r4, [r5, #12]
    37e2:	e7e6      	b.n	37b2 <__swsetup_r+0x1e>
    37e4:	075b      	lsls	r3, r3, #29
    37e6:	d512      	bpl.n	380e <__swsetup_r+0x7a>
    37e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    37ea:	b141      	cbz	r1, 37fe <__swsetup_r+0x6a>
    37ec:	0023      	movs	r3, r4
    37ee:	3344      	adds	r3, #68	; 0x44
    37f0:	4299      	cmp	r1, r3
    37f2:	d002      	beq.n	37fa <__swsetup_r+0x66>
    37f4:	0030      	movs	r0, r6
    37f6:	f7ff fb8f 	bl	2f18 <_free_r>
    37fa:	2300      	movs	r3, #0
    37fc:	6363      	str	r3, [r4, #52]	; 0x34
    37fe:	2224      	movs	r2, #36	; 0x24
    3800:	89a3      	ldrh	r3, [r4, #12]
    3802:	4393      	bics	r3, r2
    3804:	81a3      	strh	r3, [r4, #12]
    3806:	2300      	movs	r3, #0
    3808:	6063      	str	r3, [r4, #4]
    380a:	6923      	ldr	r3, [r4, #16]
    380c:	6023      	str	r3, [r4, #0]
    380e:	2308      	movs	r3, #8
    3810:	89a2      	ldrh	r2, [r4, #12]
    3812:	4313      	orrs	r3, r2
    3814:	81a3      	strh	r3, [r4, #12]
    3816:	6923      	ldr	r3, [r4, #16]
    3818:	b95b      	cbnz	r3, 3832 <__swsetup_r+0x9e>
    381a:	f240 2180 	movw	r1, #640	; 0x280
    381e:	f240 2200 	movw	r2, #512	; 0x200
    3822:	89a3      	ldrh	r3, [r4, #12]
    3824:	400b      	ands	r3, r1
    3826:	4293      	cmp	r3, r2
    3828:	d003      	beq.n	3832 <__swsetup_r+0x9e>
    382a:	0021      	movs	r1, r4
    382c:	0030      	movs	r0, r6
    382e:	f7ff fb05 	bl	2e3c <__smakebuf_r>
    3832:	2301      	movs	r3, #1
    3834:	89a2      	ldrh	r2, [r4, #12]
    3836:	4013      	ands	r3, r2
    3838:	b18b      	cbz	r3, 385e <__swsetup_r+0xca>
    383a:	2300      	movs	r3, #0
    383c:	60a3      	str	r3, [r4, #8]
    383e:	6963      	ldr	r3, [r4, #20]
    3840:	425b      	negs	r3, r3
    3842:	61a3      	str	r3, [r4, #24]
    3844:	6923      	ldr	r3, [r4, #16]
    3846:	2000      	movs	r0, #0
    3848:	2b00      	cmp	r3, #0
    384a:	d1c0      	bne.n	37ce <__swsetup_r+0x3a>
    384c:	230c      	movs	r3, #12
    384e:	5ee2      	ldrsh	r2, [r4, r3]
    3850:	0613      	lsls	r3, r2, #24
    3852:	d5bc      	bpl.n	37ce <__swsetup_r+0x3a>
    3854:	2340      	movs	r3, #64	; 0x40
    3856:	4313      	orrs	r3, r2
    3858:	81a3      	strh	r3, [r4, #12]
    385a:	3801      	subs	r0, #1
    385c:	e7b7      	b.n	37ce <__swsetup_r+0x3a>
    385e:	0792      	lsls	r2, r2, #30
    3860:	d400      	bmi.n	3864 <__swsetup_r+0xd0>
    3862:	6963      	ldr	r3, [r4, #20]
    3864:	60a3      	str	r3, [r4, #8]
    3866:	e7ed      	b.n	3844 <__swsetup_r+0xb0>
    3868:	20000000 	.word	0x20000000
    386c:	00003f14 	.word	0x00003f14
    3870:	00003f34 	.word	0x00003f34
    3874:	00003ef4 	.word	0x00003ef4

00003878 <_close_r>:
    3878:	2300      	movs	r3, #0
    387a:	b570      	push	{r4, r5, r6, lr}
    387c:	4c05      	ldr	r4, [pc, #20]	; (3894 <_close_r+0x1c>)
    387e:	0005      	movs	r5, r0
    3880:	0008      	movs	r0, r1
    3882:	6023      	str	r3, [r4, #0]
    3884:	f7fe fdc6 	bl	2414 <_close>
    3888:	1c43      	adds	r3, r0, #1
    388a:	d102      	bne.n	3892 <_close_r+0x1a>
    388c:	6823      	ldr	r3, [r4, #0]
    388e:	b103      	cbz	r3, 3892 <_close_r+0x1a>
    3890:	602b      	str	r3, [r5, #0]
    3892:	bd70      	pop	{r4, r5, r6, pc}
    3894:	20000914 	.word	0x20000914

00003898 <_fstat_r>:
    3898:	2300      	movs	r3, #0
    389a:	b570      	push	{r4, r5, r6, lr}
    389c:	4c06      	ldr	r4, [pc, #24]	; (38b8 <_fstat_r+0x20>)
    389e:	0005      	movs	r5, r0
    38a0:	0008      	movs	r0, r1
    38a2:	0011      	movs	r1, r2
    38a4:	6023      	str	r3, [r4, #0]
    38a6:	f7fe fdb9 	bl	241c <_fstat>
    38aa:	1c43      	adds	r3, r0, #1
    38ac:	d102      	bne.n	38b4 <_fstat_r+0x1c>
    38ae:	6823      	ldr	r3, [r4, #0]
    38b0:	b103      	cbz	r3, 38b4 <_fstat_r+0x1c>
    38b2:	602b      	str	r3, [r5, #0]
    38b4:	bd70      	pop	{r4, r5, r6, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	20000914 	.word	0x20000914

000038bc <_isatty_r>:
    38bc:	2300      	movs	r3, #0
    38be:	b570      	push	{r4, r5, r6, lr}
    38c0:	4c05      	ldr	r4, [pc, #20]	; (38d8 <_isatty_r+0x1c>)
    38c2:	0005      	movs	r5, r0
    38c4:	0008      	movs	r0, r1
    38c6:	6023      	str	r3, [r4, #0]
    38c8:	f7fe fdae 	bl	2428 <_isatty>
    38cc:	1c43      	adds	r3, r0, #1
    38ce:	d102      	bne.n	38d6 <_isatty_r+0x1a>
    38d0:	6823      	ldr	r3, [r4, #0]
    38d2:	b103      	cbz	r3, 38d6 <_isatty_r+0x1a>
    38d4:	602b      	str	r3, [r5, #0]
    38d6:	bd70      	pop	{r4, r5, r6, pc}
    38d8:	20000914 	.word	0x20000914

000038dc <_lseek_r>:
    38dc:	b570      	push	{r4, r5, r6, lr}
    38de:	0005      	movs	r5, r0
    38e0:	0008      	movs	r0, r1
    38e2:	0011      	movs	r1, r2
    38e4:	2200      	movs	r2, #0
    38e6:	4c05      	ldr	r4, [pc, #20]	; (38fc <_lseek_r+0x20>)
    38e8:	6022      	str	r2, [r4, #0]
    38ea:	001a      	movs	r2, r3
    38ec:	f7fe fd9e 	bl	242c <_lseek>
    38f0:	1c43      	adds	r3, r0, #1
    38f2:	d102      	bne.n	38fa <_lseek_r+0x1e>
    38f4:	6823      	ldr	r3, [r4, #0]
    38f6:	b103      	cbz	r3, 38fa <_lseek_r+0x1e>
    38f8:	602b      	str	r3, [r5, #0]
    38fa:	bd70      	pop	{r4, r5, r6, pc}
    38fc:	20000914 	.word	0x20000914

00003900 <__malloc_lock>:
    3900:	4770      	bx	lr

00003902 <__malloc_unlock>:
    3902:	4770      	bx	lr

00003904 <_read_r>:
    3904:	b570      	push	{r4, r5, r6, lr}
    3906:	0005      	movs	r5, r0
    3908:	0008      	movs	r0, r1
    390a:	0011      	movs	r1, r2
    390c:	2200      	movs	r2, #0
    390e:	4c05      	ldr	r4, [pc, #20]	; (3924 <_read_r+0x20>)
    3910:	6022      	str	r2, [r4, #0]
    3912:	001a      	movs	r2, r3
    3914:	f000 f808 	bl	3928 <_read>
    3918:	1c43      	adds	r3, r0, #1
    391a:	d102      	bne.n	3922 <_read_r+0x1e>
    391c:	6823      	ldr	r3, [r4, #0]
    391e:	b103      	cbz	r3, 3922 <_read_r+0x1e>
    3920:	602b      	str	r3, [r5, #0]
    3922:	bd70      	pop	{r4, r5, r6, pc}
    3924:	20000914 	.word	0x20000914

00003928 <_read>:
    3928:	f640 1314 	movw	r3, #2324	; 0x914
    392c:	2258      	movs	r2, #88	; 0x58
    392e:	2001      	movs	r0, #1
    3930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3934:	4240      	negs	r0, r0
    3936:	601a      	str	r2, [r3, #0]
    3938:	4770      	bx	lr
    393a:	46c0      	nop			; (mov r8, r8)

0000393c <_write>:
    393c:	f640 1314 	movw	r3, #2324	; 0x914
    3940:	2258      	movs	r2, #88	; 0x58
    3942:	2001      	movs	r0, #1
    3944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3948:	4240      	negs	r0, r0
    394a:	601a      	str	r2, [r3, #0]
    394c:	4770      	bx	lr
    394e:	46c0      	nop			; (mov r8, r8)

00003950 <br_sha1_vtable>:
    3950:	0068 0000 1402 530a 1409 0000 2191 0000     h......S.....!..
    3960:	2229 0000 1431 0000 13e9 0000               )"..1.......

0000396c <br_sha1_IV>:
    396c:	2301 6745 ab89 efcd dcfe 98ba 5476 1032     .#Eg........vT2.
    397c:	e1f0 c3d2 7845 7469 6e69 2067 6977 6874     ....Exiting with
    398c:	7320 6174 7574 2073 6425 0a2e 0000 0000      status %d......

0000399c <rng_fake_vtable>:
    399c:	008c 0000 24c1 0000 24fd 0000 2461 0000     .....$...$..a$..
    39ac:	6e75 7865 6570 7463 6465 7520 6470 7461     unexpected updat
    39bc:	0a65 0000 6573 6465 6920 2073 6f74 206f     e...seed is too 
    39cc:	616c 6772 2065 2528 756c 6220 7479 7365     large (%lu bytes
    39dc:	0a29 0000 7361 696b 676e 6620 726f 6d20     )...asking for m
    39ec:	726f 2065 6164 6174 7420 6168 206e 7865     ore data than ex
    39fc:	6570 7463 6465 000a 4242 3846 4632 3930     pected..BBF82F09
    3a0c:	3630 3238 4543 4339 3332 3833 4341 4232     0682CE9C2338AC2B
    3a1c:	4439 3841 3137 3746 3633 4438 3730 4545     9DA871F7368D07EE
    3a2c:	3444 3031 3334 3441 3034 3644 3642 3046     D41043A440D6B6F0
    3a3c:	3437 3435 3546 4631 3842 4644 4142 4641     7454F51FB8DFBAAF
    3a4c:	3330 4335 3230 4241 3136 4145 3834 4543     035C02AB61EA48CE
    3a5c:	4245 4636 4443 3834 3637 4445 3235 4430     EB6FCD4876ED520D
    3a6c:	3036 3145 4345 3634 3931 3137 4439 4138     60E1EC4619719D8A
    3a7c:	4235 4238 3038 4637 4641 3842 3045 3341     5B8B807FAFB8E0A3
    3a8c:	4644 3743 3733 3237 4533 3645 3442 3742     DFC737723EE6B4B7
    3a9c:	3944 4133 3532 3438 4545 4136 3436 4439     D93A2584EE6A649D
    3aac:	3630 3930 3335 3437 3838 3433 3242 3534     060953748834B245
    3abc:	3534 3839 3933 4534 3045 4141 3142 4432     4598394EE0AAB12D
    3acc:	4237 3136 3541 4631 3235 4137 4139 3134     7B61A51F527A9A41
    3adc:	3646 3143 3836 4637 3245 3335 3237 3839     F6C1687FE2537298
    3aec:	4143 4132 4638 3935 3634 3846 3545 4446     CA2A8F5946F8E5FD
    3afc:	3930 4431 4442 4243 0000 0000 3131 0000     091DBDCB....11..
    3b0c:	4545 4643 4541 3138 3142 3942 3342 3943     EECFAE81B1B9B3C9
    3b1c:	3830 3138 4230 3031 3141 3542 3036 3130     08810B10A1B56001
    3b2c:	3939 4245 4639 3434 4541 3446 4446 3441     99EB9F44AEF4FDA4
    3b3c:	3339 3842 4131 4539 4433 3438 3646 3233     93B81A9E3D84F632
    3b4c:	3231 4534 3046 3332 4536 4435 4531 4233     124EF0236E5D1E3B
    3b5c:	4537 3832 4146 3745 4141 3430 4130 4432     7E28FAE7AA040A2D
    3b6c:	4235 3532 3132 3637 3534 4439 4631 3933     5B252176459D1F39
    3b7c:	3537 3134 4142 4132 3835 4246 3536 3939     7541BA2A58FB6599
    3b8c:	0000 0000 3943 4637 3142 3046 3732 3446     ....C97FB1F027F4
    3b9c:	3335 3646 3433 3231 3333 4145 4141 3144     53F6341233EAAAD1
    3bac:	3944 3533 4633 4336 3234 3044 3838 3636     D9353F6C42D08866
    3bbc:	3142 3044 4135 4630 3032 3533 3230 4238     B1D05A0F2035028B
    3bcc:	4439 3638 3839 3034 3442 3631 3636 3442     9D869840B41666B4
    3bdc:	4532 3239 4145 4430 3341 3442 3233 3430     2E92EA0DA3B43204
    3bec:	3542 4643 4543 3333 3235 3235 4434 3430     B5CFCE3352524D04
    3bfc:	3631 3541 3441 3134 3745 3030 4641 3634     16A5A441E700AF46
    3c0c:	3531 3330 0000 0000 3435 3934 4334 3641     1503....54494CA6
    3c1c:	4533 4142 3330 3733 3445 3245 3034 3332     3EBA0337E4E24023
    3c2c:	4346 3644 4139 4135 4245 3730 4444 4344     FCD69A5AEB07DDDC
    3c3c:	3130 3338 3441 3044 4341 4239 3435 3042     0183A4D0AC9B54B0
    3c4c:	3135 3246 3142 4533 3944 3934 3930 3537     51F2B13ED9490975
    3c5c:	4145 3742 3437 3431 4646 3935 3143 3746     EAB77414FF59C1F7
    3c6c:	3936 4532 4139 4532 3032 4232 3833 4346     692E9A2E202B38FC
    3c7c:	3139 4130 3734 3134 3437 4441 3943 4333     910A474174ADC93C
    3c8c:	4631 3736 3943 3138 0000 0000 3734 4531     1F67C981....471E
    3c9c:	3230 3039 4646 4130 3046 3537 3330 3135     0290FF0AF0750351
    3cac:	3742 3846 3837 3638 4334 3941 3136 4441     B7F878864CA961AD
    3cbc:	4442 4133 4138 4537 3939 4331 4335 3530     BD3A8A7E991C5C05
    3ccc:	3635 3941 4334 3133 3634 3741 3946 3038     56A94C3146A7F980
    3cdc:	4633 4638 4636 4138 3345 3234 3945 3133     3F8F6F8AE342E931
    3cec:	4446 4138 3445 4137 3232 4430 4231 3939     FD8AE47A220D1B99
    3cfc:	3441 3539 3438 3839 3730 4546 3933 3946     A495849807FE39F9
    3d0c:	3432 4135 3839 3633 4144 4433 0000 0000     245A9836DA3D....
    3d1c:	3042 4336 4634 4144 4242 3336 3130 3931     B06C4FDABB630119
    3d2c:	4438 3632 4235 4244 4541 3439 3332 3342     8D265BDBAE9423B3
    3d3c:	3038 3246 3137 3746 3433 3335 3838 3035     80F271F734538850
    3d4c:	3339 3730 4637 4443 3933 3245 3131 4639     93077FCD39E2119F
    3d5c:	3943 3638 3233 3531 4634 3835 3338 3142     C98632154F5883B1
    3d6c:	3736 3941 3736 4642 3034 4232 4534 4539     67A967BF402B4E9E
    3d7c:	4532 4630 3639 3635 3645 3839 4145 3633     2E0F9656E698EA36
    3d8c:	3636 4445 4246 3532 3937 3038 3933 3746     66EDFB25798039F7
    3d9c:	0000 0000 3444 3633 3945 3539 3936 4446     ....D436E99569FD
    3dac:	3233 3741 3843 3041 4235 4342 3039 3344     32A7C8A05BBC90D3
    3dbc:	4332 3934 0000 0000 4141 4446 3231 3646     2C49....AAFD12F6
    3dcc:	3935 4143 3645 3433 3938 3442 3937 3545     59CAE63489B479E5
    3ddc:	3730 4436 4544 3243 3046 4336 3542 4638     076DDEC2F06CB58F
    3dec:	0000 0000 3231 3335 3045 4434 3043 3541     ....1253E04DC0A5
    3dfc:	3933 4237 3442 4134 4137 3842 4537 4239     397BB44A7AB87E9B
    3e0c:	3246 3041 3933 3341 4433 4531 3939 4636     F2A039A33D1E996F
    3e1c:	3843 4132 3439 4343 3344 3030 3437 3943     C82A94CCD30074C9
    3e2c:	4435 3746 3336 3237 3032 3731 3630 4539     5DF763722017069E
    3e3c:	3235 3836 4144 4435 4331 4230 4634 3738     5268DA5D1C0B4F87
    3e4c:	4332 3646 3335 3143 4431 3846 3332 3431     2CF653C11DF82314
    3e5c:	3641 3937 3836 4644 4145 3245 4438 4645     A67968DFEAE28DEF
    3e6c:	3430 4242 4436 3438 3142 3343 4431 3536     04BB6D84B1C31D65
    3e7c:	4134 3931 3037 3545 3837 4233 3644 4245     4A1970E5783BD6EB
    3e8c:	3639 3041 3432 3243 4143 4632 4134 3039     96A024C2CA2F4A90
    3e9c:	4546 4639 4532 3546 3943 3143 3034 3545     FE9F2EF5C9C140E5
    3eac:	4242 3834 4144 3539 3633 4441 3738 3030     BB48DA9536AD8700
    3ebc:	3843 4634 3943 3331 4130 4544 3741 4534     C84FC9130ADEA74E
    3ecc:	3535 4438 3135 3741 4434 4644 3538 3844     558D51A74DDF85D8
    3edc:	3542 4430 3945 3836 3833 3644 3630 4533     B50DE96838D6063E
    3eec:	3930 3535 0000 0000                         0955....

00003ef4 <__sf_fake_stderr>:
	...

00003f14 <__sf_fake_stdin>:
	...

00003f34 <__sf_fake_stdout>:
	...

00003f54 <_global_impure_ptr>:
    3f54:	0004 2000 2d23 2b30 0020 6c68 004c 6665     ... #-0+ .hlL.ef
    3f64:	4567 4746 3000 3231 3433 3635 3837 4139     gEFG.0123456789A
    3f74:	4342 4544 0046 3130 3332 3534 3736 3938     BCDEF.0123456789
    3f84:	6261 6463 6665 0000                         abcdef..

00003f8c <_init>:
    3f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f92:	bc08      	pop	{r3}
    3f94:	469e      	mov	lr, r3
    3f96:	4770      	bx	lr

00003f98 <__init_array_start>:
    3f98:	00000121 	.word	0x00000121

00003f9c <_fini>:
    3f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3fa2:	bc08      	pop	{r3}
    3fa4:	469e      	mov	lr, r3
    3fa6:	4770      	bx	lr

00003fa8 <__fini_array_start>:
    3fa8:	000000f5 	.word	0x000000f5
