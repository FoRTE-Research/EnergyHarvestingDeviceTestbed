
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/debug/sifive-welcome.elf:     file format elf32-littleriscv
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/debug/sifive-welcome.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20010000

Program Header:
    LOAD off    0x00001000 vaddr 0x20010000 paddr 0x20010000 align 2**12
         filesz 0x00001678 memsz 0x00001678 flags rwx
    LOAD off    0x00009000 vaddr 0x80000000 paddr 0x20017288 align 2**12
         filesz 0x00000ac8 memsz 0x00000ac8 flags rw-
     TLS off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00000ac8 vaddr 0x80000ac8 paddr 0x80000ac8 align 2**12
         filesz 0x00000000 memsz 0x00001528 flags rw-
    LOAD off    0x00000114 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00002680 vaddr 0x20011680 paddr 0x20011680 align 2**12
         filesz 0x00005c02 memsz 0x00005c02 flags r-x
    LOAD off    0x00000114 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             000002d0  20010000  20010000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init_array       0000000c  200102d0  200102d0  000012d0  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .ctors            00000054  200102dc  200102dc  000012dc  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata           00001348  20010330  20010330  00001330  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text             00005c02  20011680  20011680  00002680  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data             00000ac8  80000000  20017288  00009000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              00000928  80000ac8  80000ac8  00009ac8  2**3  ALLOC
  7 .stack            00000400  800013f0  800013f0  00009ac8  2**4  ALLOC
  8 .heap             00000800  800017f0  800017f0  00009ac8  2**3  ALLOC
  9 .debug_info       0002a6ee  00000000  00000000  00009ac8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev     000043ba  00000000  00000000  000341b6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc        0000be19  00000000  00000000  00038570  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges    00000c50  00000000  00000000  00044390  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges     00001e90  00000000  00000000  00044fe0  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line       00014f65  00000000  00000000  00046e70  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str        00005b90  00000000  00000000  0005bdd5  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment          00000030  00000000  00000000  00061965  2**0  CONTENTS, READONLY
 17 .riscv.attributes 0000002f  00000000  00000000  00061995  2**0  CONTENTS, READONLY
 18 .debug_frame      00002400  00000000  00000000  000619c4  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
20010000 l    d  .init	00000000 .init
200102d0 l    d  .init_array	00000000 .init_array
200102dc l    d  .ctors	00000000 .ctors
20010330 l    d  .rodata	00000000 .rodata
20011680 l    d  .text	00000000 .text
80000000 l    d  .data	00000000 .data
80000ac8 l    d  .bss	00000000 .bss
800013f0 l    d  .stack	00000000 .stack
800017f0 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 scrub.o
200100c0 l     F .init	00000000 __metal_memory_scrub
2001012e l       .init	00000000 skip_scrub
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20010234 l       .init	00000000 _skip_init
20011628 l       .rodata	00000000 argv
2001162c l       .rodata	00000000 envp
20011630 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 sifive_fe310-g000_pll.c
20010cf0 l     O .rodata	00000880 pll_configs
00000000 l    df *ABS*	00000000 tty.c
00000000 l    df *ABS*	00000000 sifive-welcome.c
2001170e l     F .text	00000010 GT
2001171e l     F .text	0000009a BIT_LENGTH
200117b8 l     F .text	0000005c divrem16
20011814 l     F .text	00000052 hextobin
20011866 l     F .text	00000014 br_i15_zero
200118b0 l     F .text	00000040 rng_fake_init
200118f0 l     F .text	00000020 rng_fake_update
20011910 l     F .text	00000056 rng_fake_generate
200108f8 l     O .rodata	00000010 rng_fake_vtable
00000000 l    df *ABS*	00000000 findfp.c
20013458 l     F .text	0000006a std
00000000 l    df *ABS*	00000000 nano-vfprintf.c
20013902 l     F .text	0000002a __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 riscv_clint0.c
20014d92 l     F .text	00000014 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20011654 l     O .rodata	00000003 CSWTCH.79
00000000 l    df *ABS*	00000000 riscv_plic0.c
00000000 l    df *ABS*	00000000 sifive_gpio0.c
00000000 l    df *ABS*	00000000 sifive_uart0.c
20016a12 l     F .text	00000028 __metal_driver_sifive_uart0_control_base
20016c06 l     F .text	00000008 post_rate_change_callback_func
20016cb6 l     F .text	00000082 pre_rate_change_callback_func
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfrosc.c
00000000 l    df *ABS*	00000000 sifive_fe310-g000_hfxosc.c
00000000 l    df *ABS*	00000000 sifive_fe310-g000_prci.c
00000000 l    df *ABS*	00000000 fixed-clock.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove-stub.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 floatundidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 vector.o
20016e00 l       .text	00000000 IRQ_0
20016e04 l       .text	00000000 IRQ_1
20016e08 l       .text	00000000 IRQ_2
20016e0c l       .text	00000000 IRQ_3
20016e10 l       .text	00000000 IRQ_4
20016e14 l       .text	00000000 IRQ_5
20016e18 l       .text	00000000 IRQ_6
20016e1c l       .text	00000000 IRQ_7
20016e20 l       .text	00000000 IRQ_8
20016e24 l       .text	00000000 IRQ_9
20016e28 l       .text	00000000 IRQ_10
20016e2c l       .text	00000000 IRQ_11
20016e30 l       .text	00000000 IRQ_12
20016e34 l       .text	00000000 IRQ_13
20016e38 l       .text	00000000 IRQ_14
20016e3c l       .text	00000000 IRQ_15
20016e40 l       .text	00000000 IRQ_LC0
20016e44 l       .text	00000000 IRQ_LC1
20016e48 l       .text	00000000 IRQ_LC2
20016e4c l       .text	00000000 IRQ_LC3
20016e50 l       .text	00000000 IRQ_LC4
20016e54 l       .text	00000000 IRQ_LC5
20016e58 l       .text	00000000 IRQ_LC6
20016e5c l       .text	00000000 IRQ_LC7
20016e60 l       .text	00000000 IRQ_LC8
20016e64 l       .text	00000000 IRQ_LC9
20016e68 l       .text	00000000 IRQ_LC10
20016e6c l       .text	00000000 IRQ_LC11
20016e70 l       .text	00000000 IRQ_LC12
20016e74 l       .text	00000000 IRQ_LC13
20016e78 l       .text	00000000 IRQ_LC14
20016e7c l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000ac4 l     O .data	00000004 __brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
80000ae0 l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 init.c
80000ad8 l     O .bss	00000004 fini_done.0
80000adc l     O .bss	00000004 init_done.1
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
200102dc l       .init_array	00000000 metal_constructors_end
200102e0 l       .init_array	00000000 __fini_array_end
200102e0 l       .init_array	00000000 metal_destructors_end
200102e0 l       .init_array	00000000 metal_destructors_start
200102e0 l       .init_array	00000000 __fini_array_start
200102d0 l       .init_array	00000000 __init_array_end
200102d0 l       .init_array	00000000 __preinit_array_end
200102d0 l       .init_array	00000000 __init_array_start
200102d0 l       .init_array	00000000 metal_constructors_start
200102d0 l       .init_array	00000000 __preinit_array_start
200115e8 g     O .rodata	00000040 __metal_driver_vtable_sifive_uart0
20014100 g     F .text	00000030 _isatty_r
2001571e  w    F .text	00000080 metal_lc4_interrupt_vector_handler
20014ca2 g     F .text	0000002a .hidden __ashldi3
20012ffe g     F .text	000000da _puts_r
20014130 g     F .text	00000034 _lseek_r
20016d6c g     F .text	00000006 metal_clock_get_rate_hz
20016b9c g     F .text	0000006a __metal_driver_sifive_uart0_set_baud_rate
20014e14 g     F .text	00000024 __metal_driver_riscv_clint0_set_vector_mode
20016ae8 g     F .text	00000022 __metal_driver_sifive_uart0_set_tx_watermark
2001569e  w    F .text	00000080 metal_lc3_interrupt_vector_handler
20012624 g     F .text	0000001e br_sha1_state
20015d42 g     F .text	0000002e __metal_valid_interrupt_id
200125c0 g     F .text	00000036 br_rsa_i15_oaep_encrypt
20012fc0 g     F .text	0000003e printf
800012a0 g       .data	00000000 __global_pointer$
200102d0 g     O .init_array	00000004 _use_hfxosc_ptr
20015d40 g     F .text	00000002 __metal_driver_riscv_cpu_controller_get_vector_mode
2001031e g     F .ctors	00000012 metal_tty_init
20016d54 g     F .text	00000018 _metal_clock_append_to_callbacks
20015fe6 g     F .text	00000022 __metal_plic0_complete_interrupt
20015d70 g     F .text	000000d4 __metal_driver_riscv_cpu_controller_interrupt_register
200102d4 g     O .init_array	00000004 _metal_sifive_fe310_g000_pll_init_ptr
2001402e g     F .text	00000036 __sseek
20013512 g     F .text	0000006a __sinit
200130e4 g     F .text	000000c0 __swbuf_r
80000ac8 g       .data	00000000 __tls_base
200134cc g     F .text	00000046 __sfmoreglue
20014180 g     F .text	00000002 __malloc_unlock
20016daa g     F .text	0000000c metal_cpu_get
80000a60 g     O .data	00000020 __metal_dt_serial_10013000
200167ee g     F .text	0000001c __metal_driver_sifive_gpio0_disable_io
20010b74 g     O .rodata	00000064 __metal_driver_vtable_riscv_clint0
20011de0 g     F .text	0000004c br_i15_add
800013f0 g       .bss	00000000 metal_segment_bss_target_end
20014ee4 g     F .text	0000002a __metal_clint0_mtime_get
200152b8 g     F .text	00000012 __metal_driver_cpu_get_instruction_length
20012ece g     F .text	0000004a memmove
00000001 g       *ABS*	00000000 __metal_chicken_bit
20016b3e g     F .text	00000012 __metal_driver_sifive_uart0_get_rx_watermark
20011a4e g     F .text	0000011c br_rsa_oaep_pad
2001670c g     F .text	0000001c __metal_driver_sifive_gpio0_disable_input
20016ff4 g     F .text	0000000a __errno
08000000 g       .rodata	00000000 metal_segment_itim_target_start
20016ad8 g     F .text	00000010 __metal_driver_sifive_uart0_txready
20016aae g     F .text	00000016 __metal_driver_sifive_uart0_rx_interrupt_enable
20010142 g     F .init	00000002 __metal_synchronize_harts
80000ac8 g       .data	00000000 metal_segment_bss_target_start
20014d08 g     F .text	0000002c __metal_driver_riscv_clint0_mtimecmp_set
200140ce g     F .text	00000032 _fstat_r
20016884 g     F .text	00000060 __metal_driver_sifive_gpio0_clear_int
80000ad0 g     O .bss	00000004 errno
20016450 g     F .text	000000c0 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
00000400 g       *ABS*	00000000 __stack_size
200122e6 g     F .text	000001ee br_i15_modpow_opt
20016d72 g     F .text	00000016 metal_clock_register_pre_rate_change_callback
2001599e  w    F .text	00000080 metal_lc9_interrupt_vector_handler
200100cc  w    F .init	00000000 __metal_before_start
20017266  w    F .text	00000002 metal_init_run
80000a80 g     O .data	00000020 __metal_dt_serial_10023000
20010c80 g     O .rodata	00000064 __metal_driver_vtable_riscv_plic0
20010bd8 g     O .rodata	00000044 __metal_driver_vtable_cpu
20016c0e g     F .text	000000a8 __metal_driver_sifive_uart0_init
00000000 g       *ABS*	00000000 __metal_eccscrub_bit
20012df2 g     F .text	000000dc memcpy
20015182 g     F .text	00000012 __metal_driver_cpu_mcycle_get
20010ce4 g     O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
800017f0 g       .heap	00000000 metal_segment_heap_target_start
200134c2 g     F .text	0000000a _cleanup_r
200125f6 g     F .text	0000002e br_range_enc32be
80000aac g     O .data	00000008 __metal_dt_cpu_0
2001591e  w    F .text	00000080 metal_lc8_interrupt_vector_handler
20016510 g     F .text	000001ce __metal_driver_sifive_fe310_g000_pll_set_rate_hz
200160a2 g     F .text	00000048 __metal_driver_riscv_plic0_affinity_set_threshold
200130d8 g     F .text	0000000c puts
20015b9e  w    F .text	00000080 metal_lc13_interrupt_vector_handler
200152dc g     F .text	0000000c __metal_default_exception_handler
20011d94 g     F .text	0000004c br_i15_encode
2001187a g     F .text	00000036 br_sha1_init
20016f32 g     F .text	00000014 _fstat
20014fb0 g     F .text	0000001e __metal_driver_riscv_clint0_set_interrupt
20015382 g     F .text	00000032 __metal_driver_riscv_cpu_controller_set_vector_mode
200153b4 g     F .text	00000014 __metal_driver_cpu_get
20010c1c g     O .rodata	00000064 __metal_driver_vtable_riscv_cpu_intc
20016124 g     F .text	0000000e __metal_driver_riscv_plic0_affinity_get_threshold
2001589e  w    F .text	00000080 metal_lc7_interrupt_vector_handler
20015a1e  w    F .text	00000080 metal_lc10_interrupt_vector_handler
20013f80 g     F .text	00000030 _sbrk_r
20016282 g     F .text	0000003c __metal_driver_riscv_plic0_disable
20015eba g     F .text	0000001c __metal_exception_register
200171d6 g     F .text	00000048 metal_init
20014182 g     F .text	00000034 _read_r
200151f0 g     F .text	0000000a __metal_driver_cpu_timer_controller_interrupt
2001676c g     F .text	00000018 __metal_driver_sifive_gpio0_enable_output
80000000 g       .rodata	00000000 metal_segment_lim_target_end
20014fce g     F .text	00000044 __metal_default_sw_handler
20016d88 g     F .text	00000016 metal_clock_register_post_rate_change_callback
80000078 g     O .data	0000000c __metal_dt_clock_2
20016a3a g     F .text	00000026 __metal_driver_sifive_uart0_interrupt_controller
20016f46 g     F .text	00000008 _isatty
200167b8 g     F .text	00000018 __metal_driver_sifive_gpio0_output_toggle
20016a84 g     F .text	00000016 __metal_driver_sifive_uart0_tx_interrupt_enable
20011670 g     O .rodata	00000008 __metal_driver_vtable_fixed_clock
20011650 g     O .rodata	00000004 _global_impure_ptr
2001549e  w    F .text	00000080 metal_timer_interrupt_vector_handler
20017034 g     F .text	0000005e __libc_init_array
20016784 g     F .text	00000018 __metal_driver_sifive_gpio0_output_set
20012a8e g     F .text	00000084 br_sha1_update
20015a9e  w    F .text	00000080 metal_lc11_interrupt_vector_handler
200108dc g     O .rodata	0000001c br_sha1_vtable
20016400 g     F .text	00000002 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20012672 g     F .text	0000041c br_sha1_round
80000b6c g     O .bss	00000004 check_result_len
20015eb2 g     F .text	00000004 __metal_driver_riscv_cpu_controller_interrupt_enable
20016f76 g     F .text	0000003a _sbrk
20016750 g     F .text	0000001c __metal_driver_sifive_gpio0_disable_output
20016d38 g     F .text	0000001c _metal_clock_call_all_callbacks
200122c2 g     F .text	00000024 br_ccopy
200102ae g     F .init	00000002 _init
20011e7a g     F .text	000001e4 br_i15_muladd_small
2001680a g     F .text	0000007a __metal_driver_sifive_gpio0_config_int
20015236 g     F .text	00000034 __metal_driver_cpu_clear_sw_ipi
200115ac g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20016a9a g     F .text	00000014 __metal_driver_sifive_uart0_tx_interrupt_disable
200167d0 g     F .text	0000001e __metal_driver_sifive_gpio0_enable_io
20016ffe g     F .text	00000036 __libc_fini_array
80000090 g     O .data	0000000c __metal_dt_clock_4
2001721e g     F .text	00000048 metal_fini
200168e4 g     F .text	00000016 __metal_driver_gpio_interrupt_controller
200151fe g     F .text	00000004 __metal_driver_cpu_get_sw_interrupt_id
200152d8 g     F .text	00000004 __metal_driver_cpu_get_buserror
80000000 g       .data	00000000 metal_segment_data_target_start
20014f92 g     F .text	0000001e __metal_driver_riscv_clint0_clear_interrupt
2001726a g     F .text	0000000c metal_tty_putc
20012c08 g     F .text	00000100 test_encrypt
20015f32 g     F .text	0000000c __metal_plic0_default_handler
20016fb0  w    F .text	0000003a write
00000000 g       *ABS*	00000000 __tbss_size
2001208e g     F .text	00000086 br_i15_from_monty
20014c78 g     F .text	0000002a .hidden __lshrdi3
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
20016086 g     F .text	0000001c __metal_driver_riscv_plic0_set_threshold
20015012 g     F .text	00000002 __metal_default_beu_handler
20010908 g     O .rodata	00000020 __sf_fake_stderr
20012114 g     F .text	000001ae br_i15_montymul
20016a60 g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
2001517e g     F .text	00000004 __metal_driver_riscv_cpu_controller_command_request
2001531a g     F .text	0000005e __metal_driver_riscv_cpu_controller_interrupt_init
20014ccc g     F .text	0000003c .hidden __clzsi2
2001392c g     F .text	00000042 __sfputs_r
20015ed6 g     F .text	0000001a __metal_driver_cpu_exception_register
2001559e  w    F .text	00000080 metal_lc1_interrupt_vector_handler
20014164 g     F .text	0000001a memchr
2001377e g     F .text	000000a6 _free_r
80000ad4 g     O .bss	00000004 _global_atexit
20015ef0 g     F .text	00000026 __metal_driver_riscv_plic0_set_priority
20015d1e g     F .text	00000022 __metal_controller_interrupt_vector_mode
2001710e g     F .text	000000c8 __call_exitprocs
800017f0 g       .stack	00000000 _sp
200102d8 g     O .init_array	00000004 _metal_tty_init_ptr
20010144 g     F .init	00000000 _start
20016382 g     F .text	00000044 __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
80000b70 g     O .bss	00000400 resultBuffer
20016dc0 g     F .text	00000020 metal_timer_get_cyclecount
20014b30 g     F .text	00000148 .hidden __floatundidf
20016f4e g     F .text	00000014 _lseek
2001529e g     F .text	0000001a __metal_driver_cpu_controller_interrupt
200152ca g     F .text	00000006 __metal_driver_cpu_get_exception_pc
20017092 g     F .text	0000007c __register_exitproc
20016b50 g     F .text	00000026 __metal_driver_sifive_uart0_putc
20011966 g     F .text	000000e8 br_mgf1_xor
80000f70 g     O .bss	00000200 cipher
2001616e g     F .text	000000d8 __metal_driver_riscv_plic0_init
20016246 g     F .text	0000003c __metal_driver_riscv_plic0_enable
2001673c g     F .text	00000014 __metal_driver_sifive_gpio0_output
2001581e  w    F .text	00000080 metal_lc6_interrupt_vector_handler
200153ee g     F .text	00000006 __metal_myhart_id
200168fa g     F .text	00000118 __metal_driver_gpio_get_interrupt_id
20012b12 g     F .text	000000ca br_sha1_out
2001541e  w    F .text	00000080 metal_software_interrupt_vector_handler
20015eb6 g     F .text	00000004 __metal_driver_riscv_cpu_controller_interrupt_disable
2001409e g     F .text	00000030 _close_r
20016d9e g     F .text	00000006 metal_cpu_get_timer
20016b98 g     F .text	00000004 __metal_driver_sifive_uart0_get_baud_rate
20014da6 g     F .text	0000006e __metal_driver_riscv_clint0_register
80000aa4 g     O .data	00000008 __metal_dt_clint_2000000
200131a4 g     F .text	0000010a __swsetup_r
200141b6 g     F .text	00000540 .hidden __divdf3
2001357c g     F .text	0000009e __sfp
80001170 g     O .bss	00000080 seed
800011f0 g     O .bss	00000200 plain
200146f6 g     F .text	0000043a .hidden __muldf3
20013fb0 g     F .text	00000030 __sread
200166f4 g     F .text	00000018 __metal_driver_sifive_gpio0_enable_input
200102b0  w    F .init	00000000 secondary_main
200153f4  w    F .text	0000002a metal_interrupt_vector_handler
2001417e g     F .text	00000002 __malloc_lock
20016ac4 g     F .text	00000014 __metal_driver_sifive_uart0_rx_interrupt_disable
200133f4 g     F .text	00000064 _fflush_r
20012642 g     F .text	00000030 br_range_dec32be
200160ea g     F .text	00000022 __metal_plic0_get_threshold
200166de g     F .text	0000000a __metal_driver_sifive_fe310_g000_prci_get_reg
20010928 g     O .rodata	00000020 __sf_fake_stdin
20015e44 g     F .text	0000006e __metal_local_interrupt_enable
20014f0e g     F .text	00000084 __metal_driver_riscv_clint0_command_request
20012f18 g     F .text	000000a8 memset
2001579e  w    F .text	00000080 metal_lc5_interrupt_vector_handler
20011680 g     F .text	0000008e main
80000ac8 g       .data	00000000 metal_segment_data_target_end
20016b1c g     F .text	00000022 __metal_driver_sifive_uart0_set_rx_watermark
20011658 g     O .rodata	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
20015202 g     F .text	00000034 __metal_driver_cpu_set_sw_ipi
2001526a g     F .text	00000034 __metal_driver_cpu_get_msip
20016dbc g     F .text	00000004 metal_shutdown
08000000 g       .rodata	00000000 metal_segment_itim_target_end
200152d0 g     F .text	00000008 __metal_driver_cpu_set_exception_pc
20015fc4 g     F .text	00000022 __metal_plic0_claim_interrupt
20016b0a g     F .text	00000012 __metal_driver_sifive_uart0_get_tx_watermark
20014064 g     F .text	00000006 __sclose
20015b1e  w    F .text	00000080 metal_lc12_interrupt_vector_handler
2001008a g     F .init	00000000 metal_mem_scrub
20013824 g     F .text	000000de _malloc_r
20014d8e g     F .text	00000004 __metal_driver_riscv_clint0_get_vector_mode
80000ab8 g     O .data	00000004 __metal_dt_prci_10008000
20015194 g     F .text	00000026 __metal_driver_cpu_timebase_get
20012bdc g     F .text	0000002c br_sha1_set_state
20016320 g     F .text	00000062 __metal_driver_riscv_plic0_affinity_disable
20010000 g       .init	00000000 _enter
20016db6 g     F .text	00000006 metal_cpu_get_current_hartid
200163c8 g     F .text	00000038 __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20016e00 g       .text	00000000 __metal_vector_table
20011678 g       *ABS*	00000000 metal_segment_itim_source_start
800000b8 g     O .data	000003d0 __metal_dt_cpu_0_interrupt_controller
200102ae g     F .init	00000002 _fini
20012fc0 g     F .text	0000003e iprintf
80000000 g       .rodata	00000000 metal_segment_lim_target_start
20011c54 g     F .text	00000140 br_i15_decode_mod
20010a74 g     O .rodata	00000100 .hidden __clz_tab
20015f16 g     F .text	0000001c __metal_driver_riscv_plic0_get_priority
200102e8 g     F .ctors	00000036 use_hfxosc
20016fea g     F .text	0000000a atexit
2001406a g     F .text	00000034 _write_r
20016b76 g     F .text	00000022 __metal_driver_sifive_uart0_getc
20014e8e g     F .text	00000056 __metal_driver_riscv_clint0_disable
20013c04 g     F .text	0000010c _printf_common
80000aa0 g     O .data	00000004 _impure_ptr
200152f4 g     F .text	00000026 __metal_driver_cpu_mtimecmp_set
200132ae g     F .text	00000146 __sflush_r
2001610c g     F .text	00000018 __metal_driver_riscv_plic0_get_threshold
20016402 g     F .text	0000004e __metal_driver_sifive_fe310_g000_pll_init
8000009c g     O .data	0000000c __metal_dt_clock_5
200166e8 g     F .text	0000000c __metal_driver_sifive_fe310_g000_prci_set_reg
20016e80 g     F .text	0000004c __metal_driver_fixed_clock_get_rate_hz
20014e38 g     F .text	00000056 __metal_driver_riscv_clint0_enable
20011b6a g     F .text	00000046 br_i15_bit_length
20017288 g       *ABS*	00000000 metal_segment_data_source_start
20010134 g       .init	00000000 early_trap_vector
80001ff0 g       .heap	00000000 metal_segment_heap_target_end
8000006c g     O .data	0000000c __metal_dt_clock_1
80000488 g     O .data	000005d8 __metal_dt_interrupt_controller_c000000
20013684 g     F .text	0000005c __swhatbuf_r
2001679c g     F .text	0000001c __metal_driver_sifive_gpio0_output_clear
200153c8 g     F .text	00000026 __metal_default_timer_handler
20016fb0 g     F .text	0000003a _write
20016008 g     F .text	0000005c __metal_plic0_handler
2001561e  w    F .text	00000080 metal_lc2_interrupt_vector_handler
200124d4 g     F .text	000000ec br_rsa_i15_public
2001205e g     F .text	00000030 br_i15_to_monty
20015c9e  w    F .text	00000080 metal_lc15_interrupt_vector_handler
20012d34 g     F .text	000000b0 _fputs_r
20016da4 g     F .text	00000006 metal_cpu_interrupt_controller
20013fe0 g     F .text	0000004e __swrite
20012d08 g     F .text	0000002c exit
2001396e g     F .text	00000296 _vfiprintf_r
2001361a g     F .text	0000006a _fwalk_reent
20016ecc g     F .text	0000004c __metal_driver_fixed_clock_set_rate_hz
20011678 g       *ABS*	00000000 metal_segment_lim_source_start
20010948 g     O .rodata	00000020 __sf_fake_stdout
20011c1e g     F .text	00000036 br_i15_ninv15
80000ab4 g     O .data	00000004 __metal_dt_gpio_10012000
200152e8 g     F .text	0000000c __metal_default_interrupt_handler
2001727c g     F .text	00000006 metal_uart_putc
20016f62 g     F .text	00000014 _read
20011e2c g     F .text	0000004e br_i15_sub
20017268  w    F .text	00000002 metal_fini_run
20016728 g     F .text	00000014 __metal_driver_sifive_gpio0_input
20015080 g     F .text	000000e2 __metal_exception_handler
2001551e  w    F .text	00000080 metal_lc0_interrupt_vector_handler
20016f2c g     F .text	00000006 _exit
200151ba g     F .text	00000036 __metal_driver_cpu_mtime_get
200136e0 g     F .text	0000009e __smakebuf_r
20014d8a g     F .text	00000004 __metal_driver_riscv_clint0_vector_register
20013d10 g     F .text	00000270 _printf_i
80000acc g     O .bss	00000004 __malloc_sbrk_start
20015c1e  w    F .text	00000080 metal_lc14_interrupt_vector_handler
20011660 g     O .rodata	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
20011bb0 g     F .text	0000006e br_i15_decode
20014d34 g     F .text	00000056 __metal_driver_riscv_clint0_init
20012de4 g     F .text	0000000e fputs
80000ac8 g     O .bss	00000004 __malloc_free_list
200102dc g     F .ctors	0000000c metal_sifive_fe310_g000_pll_init
2001396e g     F .text	00000296 _vfprintf_r
200108c8 g     O .rodata	00000014 br_sha1_IV
200151fa g     F .text	00000004 __metal_driver_cpu_get_timer_interrupt_id
20016132 g     F .text	0000003c __metal_plic0_enable
20010088  w      .init	00000000 __register_frame_info
200163c6 g     F .text	00000002 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
20015378 g     F .text	0000000a __metal_driver_cpu_sw_controller_interrupt
20017276 g     F .text	00000006 metal_uart_init
80000084 g     O .data	0000000c __metal_dt_clock_3
800000a8 g     O .data	0000000c __metal_dt_clock_6
20016064 g     F .text	00000022 __metal_plic0_set_threshold
200162be g     F .text	00000062 __metal_driver_riscv_plic0_affinity_enable
20016f18 g     F .text	00000014 _close
20011668 g     O .rodata	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
00000000 g       *ABS*	00000000 __metal_boot_hart
20015f3e g     F .text	00000086 __metal_driver_riscv_plic0_register



Disassembly of section .init:

20010000 <_enter>:
_enter():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20010000:	5fff1197          	auipc	gp,0x5fff1
20010004:	2a018193          	addi	gp,gp,672 # 800012a0 <__global_pointer$>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:28
.option pop

    /* trap over the chicken bit register clearing, aloe & fe310 dont have it */
    la t0, 1f
20010008:	00000297          	auipc	t0,0x0
2001000c:	01828293          	addi	t0,t0,24 # 20010020 <_enter+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:29
    csrw mtvec, t0
20010010:	30529073          	csrw	mtvec,t0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:31
    /* chicken bit is enable if core are sifive series. */
    la t0, __metal_chicken_bit
20010014:	00100293          	li	t0,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:32
    beqz t0, 1f
20010018:	00028463          	beqz	t0,20010020 <_enter+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:34
    /* If set, always clear the feature disable register for all cores series */
    csrwi 0x7C1, 0
2001001c:	7c105073          	csrwi	0x7c1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:39
.align 4
1:
    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20010020:	00000297          	auipc	t0,0x0
20010024:	11428293          	addi	t0,t0,276 # 20010134 <early_trap_vector>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:40
    csrw mtvec, t0
20010028:	30529073          	csrw	mtvec,t0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:48
     * C, so here we set up a C environment. First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
2001002c:	00000113          	li	sp,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:55
   /* The METAL is designed for a bare-metal environment and therefore is expected
    * to define its own stack pointer. We also align the stack pointer here
    * because the only RISC-V ABI that's currently defined, mandates 16-byte
    * stack alignment. */

    bne sp, zero, 1f
20010030:	00011463          	bnez	sp,20010038 <_enter+0x38>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:56
    la sp, _sp
20010034:	55018113          	addi	sp,gp,1360 # 800017f0 <_sp>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:59
1:
    /* Increment by hartid number of stack sizes */
    csrr a0, mhartid
20010038:	f1402573          	csrr	a0,mhartid
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:60
    li t0, 0
2001003c:	4281                	li	t0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:61
    la t1, __stack_size
2001003e:	40000313          	li	t1,1024
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:63
1:
    andi sp, sp, -16
20010042:	ff017113          	andi	sp,sp,-16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:64
    beq t0, a0, 1f
20010046:	00a28563          	beq	t0,a0,20010050 <_enter+0x50>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:65
    add sp, sp, t1
2001004a:	911a                	add	sp,sp,t1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:66
    addi t0, t0, 1
2001004c:	0285                	addi	t0,t0,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:67
    j 1b
2001004e:	bfd5                	j	20010042 <_enter+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:76
     * just skip over the call entirely.   Note that __metal_initialize isn't
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    la ra, __metal_before_start
20010050:	00000097          	auipc	ra,0x0
20010054:	07c08093          	addi	ra,ra,124 # 200100cc <__metal_before_start>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:77
    beqz ra, 1f
20010058:	00008363          	beqz	ra,2001005e <_enter+0x5e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:78
    jalr ra
2001005c:	9082                	jalr	ra
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:84
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2001005e:	f1402573          	csrr	a0,mhartid
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:85
    li a1, 0
20010062:	4581                	li	a1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:86
    li a2, 0
20010064:	4601                	li	a2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:87
    call _start
20010066:	28f9                	jal	20010144 <_start>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:92

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20010068:	00000093          	li	ra,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:93
    beqz ra, 1f
2001006c:	00008363          	beqz	ra,20010072 <_enter+0x72>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:94
    jalr ra
20010070:	9082                	jalr	ra
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:99
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
20010072:	00000297          	auipc	t0,0x0
20010076:	00c28293          	addi	t0,t0,12 # 2001007e <_enter+0x7e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:100
     csrw mtvec, t0
2001007a:	30529073          	csrw	mtvec,t0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:102
1:
     lw t1, 0(x0)
2001007e:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:103
     j 1b
20010082:	bff5                	j	2001007e <_enter+0x7e>
20010084:	0000                	unimp
	...

20010088 <__register_frame_info>:
__register_frame_info():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/entry.S:117
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
20010088:	8082                	ret

2001008a <metal_mem_scrub>:
metal_mem_scrub():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:24
.type metal_mem_scrub, @function
metal_mem_scrub:

    /* Disable machine interrupts,
    restore previous mstatus value at exit */
    li      a3, 8
2001008a:	46a1                	li	a3,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:25
    csrrc   t1, mstatus, a3
2001008c:	3006b373          	csrrc	t1,mstatus,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:28

#if __riscv_xlen == 32
    addi    t0, x0, 4
20010090:	4291                	li	t0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:30
1:
    blt     a1, t0, 2f
20010092:	0055c563          	blt	a1,t0,2001009c <metal_mem_scrub+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:31
    andi    a2, a0, 3
20010096:	00357613          	andi	a2,a0,3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:32
    beqz    a2, 3f
2001009a:	ca11                	beqz	a2,200100ae <metal_mem_scrub+0x24>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:34
2:
    sb      x0, 0(a0)
2001009c:	00050023          	sb	zero,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:35
    addi    a0, a0, 1
200100a0:	0505                	addi	a0,a0,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:36
    addi    a1, a1, -1
200100a2:	15fd                	addi	a1,a1,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:37
    bgtz    a1, 1b
200100a4:	feb047e3          	bgtz	a1,20010092 <metal_mem_scrub+0x8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:38
    csrw    mstatus, t1
200100a8:	30031073          	csrw	mstatus,t1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:39
    ret
200100ac:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:41
3:
    sw      x0, 0(a0)
200100ae:	00052023          	sw	zero,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:42
    addi    a0, a0, 4
200100b2:	0511                	addi	a0,a0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:43
    addi    a1, a1, -4
200100b4:	15f1                	addi	a1,a1,-4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:44
    bgtz    a1, 1b
200100b6:	fcb04ee3          	bgtz	a1,20010092 <metal_mem_scrub+0x8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:45
    csrw    mstatus, t1
200100ba:	30031073          	csrw	mstatus,t1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:46
    ret
200100be:	8082                	ret

200100c0 <__metal_memory_scrub>:
__metal_memory_scrub():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:74
.type __metal_memory_scrub, @function
__metal_memory_scrub:
/* Zero out specified memory regions */
1:
#if __riscv_xlen == 32
    sw      x0, 0(t1)
200100c0:	00032023          	sw	zero,0(t1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:75
    addi    t1, t1, 4
200100c4:	0311                	addi	t1,t1,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:76
    blt     t1, t2, 1b
200100c6:	fe734de3          	blt	t1,t2,200100c0 <__metal_memory_scrub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:82
#else
    sd      x0, 0(t1)
    addi    t1, t1, 8
    blt     t1, t2, 1b
#endif
    ret
200100ca:	8082                	ret

200100cc <__metal_before_start>:
__metal_before_start():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:94
.weak __metal_before_start
.global __metal_before_start
.type __metal_before_start, @function
__metal_before_start:
    /* Save caller ra */
    mv      s0, ra
200100cc:	8406                	mv	s0,ra
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:96

    la      t0, __metal_eccscrub_bit
200100ce:	dfff0297          	auipc	t0,0xdfff0
200100d2:	f3228293          	addi	t0,t0,-206 # 0 <__metal_boot_hart>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:97
    beqz    t0, skip_scrub
200100d6:	04028c63          	beqz	t0,2001012e <skip_scrub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:99

    la      t0, __metal_boot_hart
200100da:	dfff0297          	auipc	t0,0xdfff0
200100de:	f2628293          	addi	t0,t0,-218 # 0 <__metal_boot_hart>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:100
    csrr    a5, mhartid
200100e2:	f14027f3          	csrr	a5,mhartid
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:103

    /* Disable machine interrupts to be safe */
    li      a3, 8
200100e6:	46a1                	li	a3,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:104
    csrc    mstatus, a3
200100e8:	3006b073          	csrc	mstatus,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:107

    /* Zero out per hart stack */
    mv      t1, sp
200100ec:	830a                	mv	t1,sp
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:108
    la      t2, __stack_size
200100ee:	dfff0397          	auipc	t2,0xdfff0
200100f2:	31238393          	addi	t2,t2,786 # 400 <__stack_size>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:109
    add     t2, t2, sp
200100f6:	938a                	add	t2,t2,sp
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:110
    beq     t1, t2, 1f
200100f8:	00730363          	beq	t1,t2,200100fe <__metal_before_start+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:111
    jal     __metal_memory_scrub
200100fc:	37d1                	jal	200100c0 <__metal_memory_scrub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:113
1:
    bne     a5, t0, skip_scrub
200100fe:	02579863          	bne	a5,t0,2001012e <skip_scrub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:116

    /* Zero out data segment */
    la      t1, metal_segment_data_target_start
20010102:	5fff0317          	auipc	t1,0x5fff0
20010106:	efe30313          	addi	t1,t1,-258 # 80000000 <impure_data>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:117
    la      t2, metal_segment_data_target_end
2001010a:	5fff1397          	auipc	t2,0x5fff1
2001010e:	9be38393          	addi	t2,t2,-1602 # 80000ac8 <__malloc_free_list>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:118
    beq     t1, t2, 1f
20010112:	00730363          	beq	t1,t2,20010118 <__metal_before_start+0x4c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:119
    jal     __metal_memory_scrub
20010116:	376d                	jal	200100c0 <__metal_memory_scrub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:122
1:
    /* Zero out itim memory */
    la      t1, metal_segment_itim_target_start
20010118:	e7ff0317          	auipc	t1,0xe7ff0
2001011c:	ee830313          	addi	t1,t1,-280 # 8000000 <metal_segment_itim_target_end>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:123
    la      t2, metal_segment_itim_target_end
20010120:	e7ff0397          	auipc	t2,0xe7ff0
20010124:	ee038393          	addi	t2,t2,-288 # 8000000 <metal_segment_itim_target_end>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:124
    beq     t1, t2, skip_scrub
20010128:	00730363          	beq	t1,t2,2001012e <skip_scrub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:125
    jal     __metal_memory_scrub
2001012c:	3f51                	jal	200100c0 <__metal_memory_scrub>

2001012e <skip_scrub>:
skip_scrub():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:129

skip_scrub:
    /* Restore caller ra */
    mv      ra, s0
2001012e:	80a2                	mv	ra,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/scrub.S:130
    ret
20010130:	8082                	ret
	...

20010134 <early_trap_vector>:
early_trap_vector():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/trap.S:64
.section .text.metal.init.trapvec
.global early_trap_vector
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20010134:	342022f3          	csrr	t0,mcause
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/trap.S:65
    csrr t1, mepc
20010138:	34102373          	csrr	t1,mepc
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/trap.S:66
    csrr t2, mtval
2001013c:	343023f3          	csrr	t2,mtval
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/trap.S:67
    j early_trap_vector
20010140:	bfd5                	j	20010134 <early_trap_vector>

20010142 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/synchronize_harts.c:66
        while (METAL_MSIP(msip_base, hart) == 1)
            ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20010142:	8082                	ret

20010144 <_start>:
_start():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20010144:	8406                	mv	s0,ra
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20010146:	5fff1197          	auipc	gp,0x5fff1
2001014a:	15a18193          	addi	gp,gp,346 # 800012a0 <__global_pointer$>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:50
.option pop

  /* Stack pointer is expected to be initialized before _start */

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
2001014e:	00000293          	li	t0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:51
  bne a0, t0, _skip_init
20010152:	0e551163          	bne	a0,t0,20010234 <_skip_init>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:60
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
20010156:	00007297          	auipc	t0,0x7
2001015a:	13228293          	addi	t0,t0,306 # 20017288 <metal_segment_data_source_start>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:61
  la t1, metal_segment_data_target_start
2001015e:	5fff0317          	auipc	t1,0x5fff0
20010162:	ea230313          	addi	t1,t1,-350 # 80000000 <impure_data>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:62
  la t2, metal_segment_data_target_end
20010166:	5fff1397          	auipc	t2,0x5fff1
2001016a:	96238393          	addi	t2,t2,-1694 # 80000ac8 <__malloc_free_list>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:64

  beq t0, t1, 2f
2001016e:	00628c63          	beq	t0,t1,20010186 <_start+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:65
  bge t1, t2, 2f
20010172:	00735a63          	bge	t1,t2,20010186 <_start+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:69

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
20010176:	0002a503          	lw	a0,0(t0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:70
  addi t0, t0, 4
2001017a:	0291                	addi	t0,t0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:71
  sw   a0, 0(t1)
2001017c:	00a32023          	sw	a0,0(t1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:72
  addi t1, t1, 4
20010180:	0311                	addi	t1,t1,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:73
  blt  t1, t2, 1b
20010182:	fe734ae3          	blt	t1,t2,20010176 <_start+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:84
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
20010186:	00001297          	auipc	t0,0x1
2001018a:	4f228293          	addi	t0,t0,1266 # 20011678 <metal_segment_itim_source_start>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:85
  la t1, metal_segment_itim_target_start
2001018e:	e7ff0317          	auipc	t1,0xe7ff0
20010192:	e7230313          	addi	t1,t1,-398 # 8000000 <metal_segment_itim_target_end>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:86
  la t2, metal_segment_itim_target_end
20010196:	e7ff0397          	auipc	t2,0xe7ff0
2001019a:	e6a38393          	addi	t2,t2,-406 # 8000000 <metal_segment_itim_target_end>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:88

  beq t0, t1, 2f
2001019e:	00628c63          	beq	t0,t1,200101b6 <_start+0x72>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:89
  bge t1, t2, 2f
200101a2:	00735a63          	bge	t1,t2,200101b6 <_start+0x72>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:93

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200101a6:	0002a503          	lw	a0,0(t0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:94
  addi t0, t0, 4
200101aa:	0291                	addi	t0,t0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:95
  sw   a0, 0(t1)
200101ac:	00a32023          	sw	a0,0(t1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:96
  addi t1, t1, 4
200101b0:	0311                	addi	t1,t1,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:97
  blt  t1, t2, 1b
200101b2:	fe734ae3          	blt	t1,t2,200101a6 <_start+0x62>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:109
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
200101b6:	0000100f          	fence.i
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:114

2:

  /* Copy the LIM section */
  la t0, metal_segment_lim_source_start
200101ba:	00001297          	auipc	t0,0x1
200101be:	4be28293          	addi	t0,t0,1214 # 20011678 <metal_segment_itim_source_start>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:115
  la t1, metal_segment_lim_target_start
200101c2:	5fff0317          	auipc	t1,0x5fff0
200101c6:	e3e30313          	addi	t1,t1,-450 # 80000000 <impure_data>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:116
  la t2, metal_segment_lim_target_end
200101ca:	5fff0397          	auipc	t2,0x5fff0
200101ce:	e3638393          	addi	t2,t2,-458 # 80000000 <impure_data>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:118

  beq t0, t1, 2f
200101d2:	00628c63          	beq	t0,t1,200101ea <_start+0xa6>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:119
  bge t1, t2, 2f
200101d6:	00735a63          	bge	t1,t2,200101ea <_start+0xa6>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:123

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
200101da:	0002a503          	lw	a0,0(t0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:124
  addi t0, t0, 4
200101de:	0291                	addi	t0,t0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:125
  sw   a0, 0(t1)
200101e0:	00a32023          	sw	a0,0(t1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:126
  addi t1, t1, 4
200101e4:	0311                	addi	t1,t1,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:127
  blt  t1, t2, 1b
200101e6:	fe734ae3          	blt	t1,t2,200101da <_start+0x96>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:139
#endif
2:

  /* Fence all subsequent instruction fetches until after the LIM writes
     complete */
  fence.i
200101ea:	0000100f          	fence.i
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:142

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
200101ee:	5fff1317          	auipc	t1,0x5fff1
200101f2:	8da30313          	addi	t1,t1,-1830 # 80000ac8 <__malloc_free_list>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:143
  la t2, metal_segment_bss_target_end
200101f6:	15018393          	addi	t2,gp,336 # 800013f0 <metal_segment_bss_target_end>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:145

  bge t1, t2, 2f
200101fa:	00735763          	bge	t1,t2,20010208 <_start+0xc4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:149

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
200101fe:	00032023          	sw	zero,0(t1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:150
  addi t1, t1, 4
20010202:	0311                	addi	t1,t1,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:151
  blt  t1, t2, 1b
20010204:	fe734de3          	blt	t1,t2,200101fe <_start+0xba>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:161
#endif
2:

  /* Set TLS pointer */
  .weak __tls_base	
  la tp, __tls_base
20010208:	5fff1217          	auipc	tp,0x5fff1
2001020c:	8c020213          	addi	tp,tp,-1856 # 80000ac8 <__malloc_free_list>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:166

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
20010210:	c211                	beqz	a2,20010214 <_start+0xd0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:167
  jalr a2
20010212:	9602                	jalr	a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:171
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20010214:	00007517          	auipc	a0,0x7
20010218:	dea50513          	addi	a0,a0,-534 # 20016ffe <__libc_fini_array>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:172
  call atexit
2001021c:	5cf060ef          	jal	ra,20016fea <atexit>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:173
  call __libc_init_array
20010220:	615060ef          	jal	ra,20017034 <__libc_init_array>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:177

  /* Register metal_fini_run as a destructor and call metal_init_run to
   * run and setup Metal constructors */
  la a0, metal_fini_run
20010224:	00007517          	auipc	a0,0x7
20010228:	04450513          	addi	a0,a0,68 # 20017268 <metal_fini_run>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:178
  call atexit
2001022c:	5bf060ef          	jal	ra,20016fea <atexit>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:179
  call metal_init_run
20010230:	036070ef          	jal	ra,20017266 <metal_init_run>

20010234 <_skip_init>:
_skip_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:185

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20010234:	3739                	jal	20010142 <__metal_synchronize_harts>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:188

  /* Disable and clear all interrupt sources */
  li   a3, -1
20010236:	56fd                	li	a3,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:189
  csrc mie, a3
20010238:	3046b073          	csrc	mie,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:190
  csrc mip, a3
2001023c:	3446b073          	csrc	mip,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:194

  /* The delegation CSRs exist if user mode interrupts (N extension) or
   * supervisor mode (S extension) are supported */
  csrr a5, misa
20010240:	301027f3          	csrr	a5,misa
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:195
  lui  a4, 0x42
20010244:	00042737          	lui	a4,0x42
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:196
  and  a4, a4, a5
20010248:	8f7d                	and	a4,a4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:197
  beqz a4, 1f
2001024a:	c709                	beqz	a4,20010254 <_skip_init+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:198
  csrc mideleg, a3
2001024c:	3036b073          	csrc	mideleg,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:199
  csrc medeleg, a3
20010250:	3026b073          	csrc	medeleg,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:203
1:

  /* The satp CSR exists if supervisor mode (S extension) is supported */
  lui  a4, 0x40
20010254:	00040737          	lui	a4,0x40
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:204
  and  a4, a4, a5
20010258:	8f7d                	and	a4,a4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:205
  beqz a4, 1f
2001025a:	c319                	beqz	a4,20010260 <_skip_init+0x2c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:206
  csrc satp, a3
2001025c:	1806b073          	csrc	satp,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:210
1:

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  li   a4, 0x10028
20010260:	6741                	lui	a4,0x10
20010262:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:211
  and  a5, a5, a4
20010266:	8ff9                	and	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:212
  beqz a5, 1f
20010268:	cb89                	beqz	a5,2001027a <_skip_init+0x46>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:213
  csrr a5, mstatus
2001026a:	300027f3          	csrr	a5,mstatus
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:214
  lui  a4, 0x2
2001026e:	6709                	lui	a4,0x2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:215
  or   a5, a5, a4
20010270:	8fd9                	or	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:216
  csrw mstatus, a5
20010272:	30079073          	csrw	mstatus,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:217
  csrwi fcsr, 0
20010276:	00305073          	csrwi	fcsr,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:221
1:

  /* Check for vector extension support and enable it if found */
  csrr a5, misa
2001027a:	301027f3          	csrr	a5,misa
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:222
  li a4, 0x200000
2001027e:	00200737          	lui	a4,0x200
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:223
  and a5, a5, a4
20010282:	8ff9                	and	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:224
  beqz a5, 1f
20010284:	c799                	beqz	a5,20010292 <_skip_init+0x5e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:225
  csrr a5, mstatus
20010286:	300027f3          	csrr	a5,mstatus
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:226
  ori a5, a5, 0x200
2001028a:	2007e793          	ori	a5,a5,512
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:227
  csrw mstatus, a5
2001028e:	30079073          	csrw	mstatus,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:233
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20010292:	4505                	li	a0,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:234
  la a1, argv  /* argv = {"libgloss", NULL} */
20010294:	00001597          	auipc	a1,0x1
20010298:	39458593          	addi	a1,a1,916 # 20011628 <argv>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:235
  la a2, envp  /* envp = {NULL} */
2001029c:	00001617          	auipc	a2,0x1
200102a0:	39060613          	addi	a2,a2,912 # 2001162c <envp>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:236
  call secondary_main
200102a4:	2031                	jal	200102b0 <secondary_main>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:242

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
200102a6:	263020ef          	jal	ra,20012d08 <exit>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:247

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
200102aa:	80a2                	mv	ra,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:248
  ret
200102ac:	8082                	ret

200102ae <_fini>:
_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:260
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
200102ae:	8082                	ret

200102b0 <secondary_main>:
secondary_main():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:271
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
200102b0:	1141                	addi	sp,sp,-16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:273
#if __riscv_xlen == 32
  sw ra, 4(sp)
200102b2:	c206                	sw	ra,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:277
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
200102b4:	f14022f3          	csrr	t0,mhartid
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:278
  la t1, __metal_boot_hart
200102b8:	00000313          	li	t1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:279
  beq t0, t1, 2f
200102bc:	00628563          	beq	t0,t1,200102c6 <secondary_main+0x16>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:281
1:
  wfi
200102c0:	10500073          	wfi
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:282
  j 1b
200102c4:	bff5                	j	200102c0 <secondary_main+0x10>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:284
2:
  call main
200102c6:	3ba010ef          	jal	ra,20011680 <main>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:286
#if __riscv_xlen == 32
  lw ra, 4(sp)
200102ca:	4092                	lw	ra,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:290
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
200102cc:	0141                	addi	sp,sp,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/crt0.S:291
  ret
200102ce:	8082                	ret

Disassembly of section .ctors:

200102dc <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:155

METAL_CONSTRUCTOR(metal_sifive_fe310_g000_pll_init) {
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if (init_rate != 0)
        __metal_driver_sifive_fe310_g000_pll_init(
200102dc:	80000537          	lui	a0,0x80000
200102e0:	09050513          	addi	a0,a0,144 # 80000090 <metal_segment_heap_target_end+0xffffe0a0>
200102e4:	11e0606f          	j	20016402 <__metal_driver_sifive_fe310_g000_pll_init>

200102e8 <use_hfxosc>:
use_hfxosc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:389

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
}

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
METAL_CONSTRUCTOR(use_hfxosc) {
200102e8:	1141                	addi	sp,sp,-16
200102ea:	c226                	sw	s1,4(sp)
metal_clock_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:129
 *
 * Prior to and after the rate change of the clock, this will call the
 * registered pre- and post-rate change callbacks.
 */
__inline__ long metal_clock_set_rate_hz(struct metal_clock *clk, long hz) {
    _metal_clock_call_all_callbacks(clk->_pre_rate_change_callback);
200102ec:	800004b7          	lui	s1,0x80000
use_hfxosc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:389
200102f0:	c422                	sw	s0,8(sp)
metal_clock_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:129
200102f2:	09048413          	addi	s0,s1,144 # 80000090 <metal_segment_heap_target_end+0xffffe0a0>
200102f6:	4048                	lw	a0,4(s0)
use_hfxosc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:389
200102f8:	c606                	sw	ra,12(sp)
metal_clock_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:129
200102fa:	23f060ef          	jal	ra,20016d38 <_metal_clock_call_all_callbacks>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:131

    long out = clk->vtable->set_rate_hz(clk, hz);
200102fe:	401c                	lw	a5,0(s0)
20010300:	00f425b7          	lui	a1,0xf42
20010304:	09048513          	addi	a0,s1,144
20010308:	43dc                	lw	a5,4(a5)
2001030a:	40058593          	addi	a1,a1,1024 # f42400 <__heap_size+0xf41c00>
2001030e:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:133

    _metal_clock_call_all_callbacks(clk->_post_rate_change_callback);
20010310:	4408                	lw	a0,8(s0)
use_hfxosc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:393
    long init_rate = __metal_driver_sifive_fe310_g000_pll_init_rate();
    metal_clock_set_rate_hz(&__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock,
                            init_rate);
}
20010312:	4422                	lw	s0,8(sp)
20010314:	40b2                	lw	ra,12(sp)
20010316:	4492                	lw	s1,4(sp)
20010318:	0141                	addi	sp,sp,16
metal_clock_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:133
2001031a:	21f0606f          	j	20016d38 <_metal_clock_call_all_callbacks>

2001031e <metal_tty_init>:
metal_tty_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/tty.c:29
#ifndef __METAL_DT_STDOUT_UART_BAUD
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

METAL_CONSTRUCTOR(metal_tty_init) {
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
2001031e:	65f1                	lui	a1,0x1c
20010320:	80001537          	lui	a0,0x80001
20010324:	20058593          	addi	a1,a1,512 # 1c200 <__heap_size+0x1ba00>
20010328:	a6050513          	addi	a0,a0,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
2001032c:	74b0606f          	j	20017276 <metal_uart_init>

Disassembly of section .text:

20011680 <main>:
main():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:466
double cycles_to_ms(unsigned long long cycles) {
	double frequency = 32000000.0; // HiFive1 Rev B board has a 32MHz clock
	return (cycles / frequency) * 1000.0;
}

int main(void) {
20011680:	1101                	addi	sp,sp,-32
20011682:	cc22                	sw	s0,24(sp)
20011684:	ce06                	sw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:467
	int hartid = metal_cpu_get_current_hartid();
20011686:	730050ef          	jal	ra,20016db6 <metal_cpu_get_current_hartid>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:471
	unsigned long long start_cycle_count, end_cycle_count;

	// Get the start cycle count
	if (metal_timer_get_cyclecount(hartid, &start_cycle_count) != 0) {
2001168a:	858a                	mv	a1,sp
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:467
	int hartid = metal_cpu_get_current_hartid();
2001168c:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:471
	if (metal_timer_get_cyclecount(hartid, &start_cycle_count) != 0) {
2001168e:	732050ef          	jal	ra,20016dc0 <metal_timer_get_cyclecount>
20011692:	cd01                	beqz	a0,200116aa <main+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:472
		printf("Failed to get the start cycle count.\n");
20011694:	20011537          	lui	a0,0x20011
20011698:	85850513          	addi	a0,a0,-1960 # 20010858 <metal_tty_init+0x53a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:484
    test_encrypt();
    //test_decrypt();

	// Get the end cycle count
	if (metal_timer_get_cyclecount(hartid, &end_cycle_count) != 0) {
		printf("Failed to get the end cycle count.\n");
2001169c:	23d010ef          	jal	ra,200130d8 <puts>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:507
	while (1)
		;

	return 0;

}
200116a0:	40f2                	lw	ra,28(sp)
200116a2:	4462                	lw	s0,24(sp)
200116a4:	4505                	li	a0,1
200116a6:	6105                	addi	sp,sp,32
200116a8:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:479
    test_encrypt();
200116aa:	55e010ef          	jal	ra,20012c08 <test_encrypt>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:483
	if (metal_timer_get_cyclecount(hartid, &end_cycle_count) != 0) {
200116ae:	002c                	addi	a1,sp,8
200116b0:	8522                	mv	a0,s0
200116b2:	70e050ef          	jal	ra,20016dc0 <metal_timer_get_cyclecount>
200116b6:	c511                	beqz	a0,200116c2 <main+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:484
		printf("Failed to get the end cycle count.\n");
200116b8:	20011537          	lui	a0,0x20011
200116bc:	88050513          	addi	a0,a0,-1920 # 20010880 <metal_tty_init+0x562>
200116c0:	bff1                	j	2001169c <main+0x1c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:491
		elapsed_cycles = end_cycle_count - start_cycle_count;
200116c2:	45a2                	lw	a1,8(sp)
200116c4:	4502                	lw	a0,0(sp)
200116c6:	4712                	lw	a4,4(sp)
200116c8:	47b2                	lw	a5,12(sp)
200116ca:	40a58533          	sub	a0,a1,a0
200116ce:	00a5b5b3          	sltu	a1,a1,a0
200116d2:	8f99                	sub	a5,a5,a4
cycles_to_ms():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:463
	return (cycles / frequency) * 1000.0;
200116d4:	40b785b3          	sub	a1,a5,a1
200116d8:	458030ef          	jal	ra,20014b30 <__floatundidf>
200116dc:	200117b7          	lui	a5,0x20011
200116e0:	6407a603          	lw	a2,1600(a5) # 20011640 <name+0x10>
200116e4:	6447a683          	lw	a3,1604(a5)
200116e8:	2cf020ef          	jal	ra,200141b6 <__divdf3>
200116ec:	200117b7          	lui	a5,0x20011
200116f0:	6487a603          	lw	a2,1608(a5) # 20011648 <name+0x18>
200116f4:	64c7a683          	lw	a3,1612(a5)
200116f8:	7ff020ef          	jal	ra,200146f6 <__muldf3>
200116fc:	862a                	mv	a2,a0
main():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:500
	printf("Function execution time: %.3f ms\n", elapsed_ms);
200116fe:	20011537          	lui	a0,0x20011
cycles_to_ms():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:463
	return (cycles / frequency) * 1000.0;
20011702:	86ae                	mv	a3,a1
main():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:500
	printf("Function execution time: %.3f ms\n", elapsed_ms);
20011704:	8a450513          	addi	a0,a0,-1884 # 200108a4 <metal_tty_init+0x586>
20011708:	0b9010ef          	jal	ra,20012fc0 <iprintf>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:502 (discriminator 1)
	while (1)
2001170c:	a001                	j	2001170c <main+0x8c>

2001170e <GT>:
GT():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:819
     * Since (y-2^31)-(x-2^31) = y-x, the subtraction is already
     * fine.
     */
    uint32_t z;

    z = y - x;
2001170e:	40a587b3          	sub	a5,a1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:820
    return (z ^ ((x ^ y) & (x ^ z))) >> 31;
20011712:	8da9                	xor	a1,a1,a0
20011714:	8d3d                	xor	a0,a0,a5
20011716:	8d6d                	and	a0,a0,a1
20011718:	8d3d                	xor	a0,a0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:821
}
2001171a:	817d                	srli	a0,a0,0x1f
2001171c:	8082                	ret

2001171e <BIT_LENGTH>:
BIT_LENGTH():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:920
BIT_LENGTH(uint32_t x)
{
    uint32_t k, c;

    k = NEQ(x, 0);
    c = GT(x, 0xFFFF); x = MUX(c, x >> 16, x); k += c << 4;
2001171e:	65c1                	lui	a1,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:916
{
20011720:	1101                	addi	sp,sp,-32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:920
    c = GT(x, 0xFFFF); x = MUX(c, x >> 16, x); k += c << 4;
20011722:	15fd                	addi	a1,a1,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:916
{
20011724:	ce06                	sw	ra,28(sp)
20011726:	cc22                	sw	s0,24(sp)
20011728:	ca26                	sw	s1,20(sp)
2001172a:	c84a                	sw	s2,16(sp)
2001172c:	c64e                	sw	s3,12(sp)
2001172e:	c452                	sw	s4,8(sp)
20011730:	c256                	sw	s5,4(sp)
20011732:	8aaa                	mv	s5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:920
    c = GT(x, 0xFFFF); x = MUX(c, x >> 16, x); k += c << 4;
20011734:	3fe9                	jal	2001170e <GT>
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
20011736:	fff50493          	addi	s1,a0,-1
2001173a:	0154f4b3          	and	s1,s1,s5
BIT_LENGTH():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:920
    c = GT(x, 0xFFFF); x = MUX(c, x >> 16, x); k += c << 4;
2001173e:	8a2a                	mv	s4,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:921
    c = GT(x, 0x00FF); x = MUX(c, x >>  8, x); k += c << 3;
20011740:	0ff00593          	li	a1,255
20011744:	8526                	mv	a0,s1
20011746:	37e1                	jal	2001170e <GT>
20011748:	0084d413          	srli	s0,s1,0x8
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
2001174c:	40a007b3          	neg	a5,a0
20011750:	8c25                	xor	s0,s0,s1
20011752:	8c7d                	and	s0,s0,a5
20011754:	8ca1                	xor	s1,s1,s0
BIT_LENGTH():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:921
    c = GT(x, 0x00FF); x = MUX(c, x >>  8, x); k += c << 3;
20011756:	89aa                	mv	s3,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:922
    c = GT(x, 0x000F); x = MUX(c, x >>  4, x); k += c << 2;
20011758:	45bd                	li	a1,15
2001175a:	8526                	mv	a0,s1
2001175c:	3f4d                	jal	2001170e <GT>
2001175e:	0044d413          	srli	s0,s1,0x4
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
20011762:	40a007b3          	neg	a5,a0
20011766:	8c25                	xor	s0,s0,s1
20011768:	8c7d                	and	s0,s0,a5
2001176a:	8c25                	xor	s0,s0,s1
BIT_LENGTH():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:922
    c = GT(x, 0x000F); x = MUX(c, x >>  4, x); k += c << 2;
2001176c:	892a                	mv	s2,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:923
    c = GT(x, 0x0003); x = MUX(c, x >>  2, x); k += c << 1;
2001176e:	458d                	li	a1,3
20011770:	8522                	mv	a0,s0
20011772:	3f71                	jal	2001170e <GT>
20011774:	84aa                	mv	s1,a0
20011776:	00245513          	srli	a0,s0,0x2
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
2001177a:	409007b3          	neg	a5,s1
2001177e:	8d21                	xor	a0,a0,s0
20011780:	8d7d                	and	a0,a0,a5
BIT_LENGTH():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:924
    k += GT(x, 0x0001);
20011782:	8d21                	xor	a0,a0,s0
20011784:	4585                	li	a1,1
20011786:	3761                	jal	2001170e <GT>
NEQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:796
    return (q | -q) >> 31;
20011788:	415007b3          	neg	a5,s5
2001178c:	0157e7b3          	or	a5,a5,s5
20011790:	83fd                	srli	a5,a5,0x1f
BIT_LENGTH():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:924
    k += GT(x, 0x0001);
20011792:	97aa                	add	a5,a5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:920
    c = GT(x, 0xFFFF); x = MUX(c, x >> 16, x); k += c << 4;
20011794:	0a12                	slli	s4,s4,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:926
    return k;
}
20011796:	40f2                	lw	ra,28(sp)
20011798:	4462                	lw	s0,24(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:924
    k += GT(x, 0x0001);
2001179a:	97d2                	add	a5,a5,s4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:921
    c = GT(x, 0x00FF); x = MUX(c, x >>  8, x); k += c << 3;
2001179c:	098e                	slli	s3,s3,0x3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:924
    k += GT(x, 0x0001);
2001179e:	97ce                	add	a5,a5,s3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:922
    c = GT(x, 0x000F); x = MUX(c, x >>  4, x); k += c << 2;
200117a0:	090a                	slli	s2,s2,0x2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:924
    k += GT(x, 0x0001);
200117a2:	97ca                	add	a5,a5,s2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:923
    c = GT(x, 0x0003); x = MUX(c, x >>  2, x); k += c << 1;
200117a4:	00149513          	slli	a0,s1,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:926
}
200117a8:	4942                	lw	s2,16(sp)
200117aa:	44d2                	lw	s1,20(sp)
200117ac:	49b2                	lw	s3,12(sp)
200117ae:	4a22                	lw	s4,8(sp)
200117b0:	4a92                	lw	s5,4(sp)
200117b2:	953e                	add	a0,a0,a5
200117b4:	6105                	addi	sp,sp,32
200117b6:	8082                	ret

200117b8 <divrem16>:
divrem16():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:33
 * Constant-time division. The divisor must not be larger than 16 bits,
 * and the quotient must fit on 17 bits.
 */
static uint32_t
divrem16(uint32_t x, uint32_t d, uint32_t *r)
{
200117b8:	1101                	addi	sp,sp,-32
200117ba:	cc22                	sw	s0,24(sp)
200117bc:	ca26                	sw	s1,20(sp)
200117be:	c84a                	sw	s2,16(sp)
200117c0:	c64e                	sw	s3,12(sp)
200117c2:	c452                	sw	s4,8(sp)
200117c4:	c256                	sw	s5,4(sp)
200117c6:	ce06                	sw	ra,28(sp)
200117c8:	842a                	mv	s0,a0
200117ca:	8932                	mv	s2,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:38
	int i;
	uint32_t q;

	q = 0;
	d <<= 16;
200117cc:	01059493          	slli	s1,a1,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:37
	q = 0;
200117d0:	4a01                	li	s4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:39
	for (i = 16; i >= 0; i --) {
200117d2:	49c1                	li	s3,16
200117d4:	5afd                	li	s5,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:42 (discriminator 3)
		uint32_t ctl;

		ctl = LE(d, x);
200117d6:	85a2                	mv	a1,s0
200117d8:	8526                	mv	a0,s1
200117da:	3f15                	jal	2001170e <GT>
NOT():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:763 (discriminator 3)
    return ctl ^ 1;
200117dc:	00154793          	xori	a5,a0,1
divrem16():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:43 (discriminator 3)
		q |= ctl << i;
200117e0:	01379733          	sll	a4,a5,s3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:44 (discriminator 3)
		x -= (-ctl) & d;
200117e4:	40f007b3          	neg	a5,a5
200117e8:	8fe5                	and	a5,a5,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:39 (discriminator 3)
	for (i = 16; i >= 0; i --) {
200117ea:	19fd                	addi	s3,s3,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:43 (discriminator 3)
		q |= ctl << i;
200117ec:	00ea6a33          	or	s4,s4,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:44 (discriminator 3)
		x -= (-ctl) & d;
200117f0:	8c1d                	sub	s0,s0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:45 (discriminator 3)
		d >>= 1;
200117f2:	8085                	srli	s1,s1,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:39 (discriminator 3)
	for (i = 16; i >= 0; i --) {
200117f4:	ff5991e3          	bne	s3,s5,200117d6 <divrem16+0x1e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:47
	}
	if (r != NULL) {
200117f8:	00090463          	beqz	s2,20011800 <divrem16+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:48
		*r = x;
200117fc:	00892023          	sw	s0,0(s2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:51
	}
	return q;
}
20011800:	40f2                	lw	ra,28(sp)
20011802:	4462                	lw	s0,24(sp)
20011804:	44d2                	lw	s1,20(sp)
20011806:	4942                	lw	s2,16(sp)
20011808:	49b2                	lw	s3,12(sp)
2001180a:	4a92                	lw	s5,4(sp)
2001180c:	8552                	mv	a0,s4
2001180e:	4a22                	lw	s4,8(sp)
20011810:	6105                	addi	sp,sp,32
20011812:	8082                	ret

20011814 <hextobin>:
hextobin():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:186
{
20011814:	86aa                	mv	a3,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:192
    z = 0;
20011816:	4601                	li	a2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:193
    acc = 0;
20011818:	4801                	li	a6,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:191
    num = 0;
2001181a:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:197
        if (c >= '0' && c <= '9')
2001181c:	4325                	li	t1,9
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:201
        else if (c >= 'A' && c <= 'F')
2001181e:	4895                	li	a7,5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:194
    while (*src != 0)
20011820:	0005c703          	lbu	a4,0(a1) # 10000 <__heap_size+0xf800>
20011824:	e311                	bnez	a4,20011828 <hextobin+0x14>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:225
}
20011826:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:197
        if (c >= '0' && c <= '9')
20011828:	fd070793          	addi	a5,a4,-48 # 1fffd0 <__heap_size+0x1ff7d0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:196
        int c = *src++;
2001182c:	0585                	addi	a1,a1,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:197
        if (c >= '0' && c <= '9')
2001182e:	00f37863          	bgeu	t1,a5,2001183e <hextobin+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:201
        else if (c >= 'A' && c <= 'F')
20011832:	fbf70793          	addi	a5,a4,-65
20011836:	00f8ef63          	bltu	a7,a5,20011854 <hextobin+0x40>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:203
            c -= ('A' - 10);
2001183a:	fc970793          	addi	a5,a4,-55
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:213
        if (z)
2001183e:	c215                	beqz	a2,20011862 <hextobin+0x4e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:215
            *dst++ = (acc << 4) + c;
20011840:	00481713          	slli	a4,a6,0x4
20011844:	97ba                	add	a5,a5,a4
20011846:	00f68023          	sb	a5,0(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:216
            num++;
2001184a:	0505                	addi	a0,a0,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:215
            *dst++ = (acc << 4) + c;
2001184c:	0685                	addi	a3,a3,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:222
        z = !z;
2001184e:	00164613          	xori	a2,a2,1
20011852:	b7f9                	j	20011820 <hextobin+0xc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:205
        else if (c >= 'a' && c <= 'f')
20011854:	f9f70793          	addi	a5,a4,-97
20011858:	fcf8e4e3          	bltu	a7,a5,20011820 <hextobin+0xc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:207
            c -= ('a' - 10);
2001185c:	fa970793          	addi	a5,a4,-87
20011860:	bff9                	j	2001183e <hextobin+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:220
            acc = c;
20011862:	883e                	mv	a6,a5
20011864:	b7ed                	j	2001184e <hextobin+0x3a>

20011866 <br_i15_zero>:
br_i15_zero():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1539
 */

static inline void
br_i15_zero(uint16_t *x, uint16_t bit_len)
{
    *x ++ = bit_len;
20011866:	00b51023          	sh	a1,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1540
    memset(x, 0, ((bit_len + 15) >> 4) * sizeof *x);
2001186a:	05bd                	addi	a1,a1,15
2001186c:	4045d613          	srai	a2,a1,0x4
20011870:	0606                	slli	a2,a2,0x1
20011872:	4581                	li	a1,0
20011874:	0509                	addi	a0,a0,2
20011876:	6a20106f          	j	20012f18 <memset>

2001187a <br_sha1_init>:
br_sha1_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:102
}

/* see bearssl.h */
void
br_sha1_init(br_sha1_context *cc)
{
2001187a:	1141                	addi	sp,sp,-16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:103
	cc->vtable = &br_sha1_vtable;
2001187c:	200117b7          	lui	a5,0x20011
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:102
{
20011880:	c422                	sw	s0,8(sp)
20011882:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:103
	cc->vtable = &br_sha1_vtable;
20011884:	8dc78793          	addi	a5,a5,-1828 # 200108dc <br_sha1_vtable>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:104
	memcpy(cc->val, br_sha1_IV, sizeof cc->val);
20011888:	200115b7          	lui	a1,0x20011
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:102
{
2001188c:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:103
	cc->vtable = &br_sha1_vtable;
2001188e:	c11c                	sw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:104
	memcpy(cc->val, br_sha1_IV, sizeof cc->val);
20011890:	4651                	li	a2,20
20011892:	8c858593          	addi	a1,a1,-1848 # 200108c8 <br_sha1_IV>
20011896:	05050513          	addi	a0,a0,80
2001189a:	558010ef          	jal	ra,20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:105
	cc->count = 0;
2001189e:	4781                	li	a5,0
200118a0:	4801                	li	a6,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:106
}
200118a2:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:105
	cc->count = 0;
200118a4:	c43c                	sw	a5,72(s0)
200118a6:	05042623          	sw	a6,76(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:106
}
200118aa:	4422                	lw	s0,8(sp)
200118ac:	0141                	addi	sp,sp,16
200118ae:	8082                	ret

200118b0 <rng_fake_init>:
rng_fake_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:248
{
200118b0:	1141                	addi	sp,sp,-16
200118b2:	c606                	sw	ra,12(sp)
200118b4:	c422                	sw	s0,8(sp)
200118b6:	c226                	sw	s1,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:250
    if (len > sizeof cc->buf)
200118b8:	08000793          	li	a5,128
200118bc:	00d7f563          	bgeu	a5,a3,200118c6 <rng_fake_init+0x16>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:253
        exit(EXIT_FAILURE);
200118c0:	4505                	li	a0,1
200118c2:	446010ef          	jal	ra,20012d08 <exit>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:255
    cc->vtable = &rng_fake_vtable;
200118c6:	200117b7          	lui	a5,0x20011
200118ca:	8f878793          	addi	a5,a5,-1800 # 200108f8 <rng_fake_vtable>
200118ce:	842a                	mv	s0,a0
200118d0:	85b2                	mv	a1,a2
200118d2:	c11c                	sw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:256
    memcpy(cc->buf, seed, len);
200118d4:	8636                	mv	a2,a3
200118d6:	0511                	addi	a0,a0,4
200118d8:	84b6                	mv	s1,a3
200118da:	518010ef          	jal	ra,20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:259
}
200118de:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:258
    cc->len = len;
200118e0:	08942423          	sw	s1,136(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:257
    cc->ptr = 0;
200118e4:	08042223          	sw	zero,132(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:259
}
200118e8:	4422                	lw	s0,8(sp)
200118ea:	4492                	lw	s1,4(sp)
200118ec:	0141                	addi	sp,sp,16
200118ee:	8082                	ret

200118f0 <rng_fake_update>:
rng_fake_update():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:277
    fprintf(stderr, "unexpected update\n");
200118f0:	800017b7          	lui	a5,0x80001
200118f4:	aa07a783          	lw	a5,-1376(a5) # 80000aa0 <metal_segment_heap_target_end+0xffffeab0>
200118f8:	20010537          	lui	a0,0x20010
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:273
{
200118fc:	1141                	addi	sp,sp,-16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:277
    fprintf(stderr, "unexpected update\n");
200118fe:	47cc                	lw	a1,12(a5)
20011900:	33050513          	addi	a0,a0,816 # 20010330 <metal_tty_init+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:273
{
20011904:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:277
    fprintf(stderr, "unexpected update\n");
20011906:	4de010ef          	jal	ra,20012de4 <fputs>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:278
    exit(EXIT_FAILURE);
2001190a:	4505                	li	a0,1
2001190c:	3fc010ef          	jal	ra,20012d08 <exit>

20011910 <rng_fake_generate>:
rng_fake_generate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:263
    if (len > (cc->len - cc->ptr))
20011910:	08452703          	lw	a4,132(a0)
20011914:	08852783          	lw	a5,136(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:262
{
20011918:	1141                	addi	sp,sp,-16
2001191a:	c422                	sw	s0,8(sp)
2001191c:	c606                	sw	ra,12(sp)
2001191e:	c226                	sw	s1,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:263
    if (len > (cc->len - cc->ptr))
20011920:	8f99                	sub	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:262
{
20011922:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:263
    if (len > (cc->len - cc->ptr))
20011924:	02c7f063          	bgeu	a5,a2,20011944 <rng_fake_generate+0x34>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:265
        fprintf(stderr, "asking for more data than expected\n");
20011928:	800017b7          	lui	a5,0x80001
2001192c:	aa07a783          	lw	a5,-1376(a5) # 80000aa0 <metal_segment_heap_target_end+0xffffeab0>
20011930:	20010537          	lui	a0,0x20010
20011934:	34450513          	addi	a0,a0,836 # 20010344 <metal_tty_init+0x26>
20011938:	47cc                	lw	a1,12(a5)
2001193a:	4aa010ef          	jal	ra,20012de4 <fputs>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:266
        exit(EXIT_FAILURE);
2001193e:	4505                	li	a0,1
20011940:	3c8010ef          	jal	ra,20012d08 <exit>
20011944:	852e                	mv	a0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:268
    memcpy(dst, cc->buf + cc->ptr, len);
20011946:	00440593          	addi	a1,s0,4
2001194a:	95ba                	add	a1,a1,a4
2001194c:	84b2                	mv	s1,a2
2001194e:	4a4010ef          	jal	ra,20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:269
    cc->ptr += len;
20011952:	08442603          	lw	a2,132(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:270
}
20011956:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:269
    cc->ptr += len;
20011958:	94b2                	add	s1,s1,a2
2001195a:	08942223          	sw	s1,132(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:270
}
2001195e:	4422                	lw	s0,8(sp)
20011960:	4492                	lw	s1,4(sp)
20011962:	0141                	addi	sp,sp,16
20011964:	8082                	ret

20011966 <br_mgf1_xor>:
br_mgf1_xor():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:31

/* see inner.h */
void
br_mgf1_xor(void *data, size_t len,
	const br_hash_class *dig, const void *seed, size_t seed_len)
{
20011966:	7129                	addi	sp,sp,-320
20011968:	12912a23          	sw	s1,308(sp)
br_digest_size():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1619
/* ==================================================================== */

static inline size_t
br_digest_size(const br_hash_class *digest_class)
{
    return (size_t)(digest_class->desc >> BR_HASHDESC_OUT_OFF)
2001196c:	4244                	lw	s1,4(a2)
br_mgf1_xor():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:31
2001196e:	12812c23          	sw	s0,312(sp)
20011972:	13212823          	sw	s2,304(sp)
br_digest_size():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1619
20011976:	80a1                	srli	s1,s1,0x8
br_mgf1_xor():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:31
20011978:	13312623          	sw	s3,300(sp)
2001197c:	13412423          	sw	s4,296(sp)
20011980:	13512223          	sw	s5,292(sp)
20011984:	13612023          	sw	s6,288(sp)
20011988:	11712e23          	sw	s7,284(sp)
2001198c:	11812c23          	sw	s8,280(sp)
20011990:	12112e23          	sw	ra,316(sp)
20011994:	8c2a                	mv	s8,a0
20011996:	89ae                	mv	s3,a1
20011998:	8432                	mv	s0,a2
2001199a:	8a36                	mv	s4,a3
2001199c:	8aba                	mv	s5,a4
br_digest_size():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1620
           & BR_HASHDESC_OUT_MASK;
2001199e:	07f4f493          	andi	s1,s1,127
br_mgf1_xor():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:38
	size_t u, hlen;
	uint32_t c;

	buf = data;
	hlen = br_digest_size(dig);
	for (u = 0, c = 0; u < len; u += hlen, c ++) {
200119a2:	8bae                	mv	s7,a1
200119a4:	4901                	li	s2,0
200119a6:	4b01                	li	s6,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:38 (discriminator 1)
200119a8:	033b6863          	bltu	s6,s3,200119d8 <br_mgf1_xor+0x72>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:56
				break;
			}
			buf[u + v] ^= tmp[v];
		}
	}
}
200119ac:	13c12083          	lw	ra,316(sp)
200119b0:	13812403          	lw	s0,312(sp)
200119b4:	13412483          	lw	s1,308(sp)
200119b8:	13012903          	lw	s2,304(sp)
200119bc:	12c12983          	lw	s3,300(sp)
200119c0:	12812a03          	lw	s4,296(sp)
200119c4:	12412a83          	lw	s5,292(sp)
200119c8:	12012b03          	lw	s6,288(sp)
200119cc:	11c12b83          	lw	s7,284(sp)
200119d0:	11812c03          	lw	s8,280(sp)
200119d4:	6131                	addi	sp,sp,320
200119d6:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:44
		dig->init(&hc.vtable);
200119d8:	441c                	lw	a5,8(s0)
200119da:	0088                	addi	a0,sp,64
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:43
		hc.vtable = dig;
200119dc:	c0a2                	sw	s0,64(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:44
		dig->init(&hc.vtable);
200119de:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:45
		dig->update(&hc.vtable, seed, seed_len);
200119e0:	445c                	lw	a5,12(s0)
200119e2:	8656                	mv	a2,s5
200119e4:	85d2                	mv	a1,s4
200119e6:	0088                	addi	a0,sp,64
200119e8:	9782                	jalr	a5
br_enc32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:566
    buf[0] = (unsigned char)(x >> 24);
200119ea:	01895793          	srli	a5,s2,0x18
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
200119ee:	01091713          	slli	a4,s2,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:566
    buf[0] = (unsigned char)(x >> 24);
200119f2:	00f10023          	sb	a5,0(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
200119f6:	8341                	srli	a4,a4,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:567
    buf[1] = (unsigned char)(x >> 16);
200119f8:	01095793          	srli	a5,s2,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
200119fc:	8321                	srli	a4,a4,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:567
    buf[1] = (unsigned char)(x >> 16);
200119fe:	00f100a3          	sb	a5,1(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
20011a02:	00891793          	slli	a5,s2,0x8
20011a06:	8fd9                	or	a5,a5,a4
20011a08:	00f11123          	sh	a5,2(sp)
br_mgf1_xor():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:47
		dig->update(&hc.vtable, tmp, 4);
20011a0c:	445c                	lw	a5,12(s0)
20011a0e:	4611                	li	a2,4
20011a10:	858a                	mv	a1,sp
20011a12:	0088                	addi	a0,sp,64
20011a14:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:48
		dig->out(&hc.vtable, tmp);
20011a16:	481c                	lw	a5,16(s0)
20011a18:	858a                	mv	a1,sp
20011a1a:	0088                	addi	a0,sp,64
20011a1c:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:49
		for (v = 0; v < hlen; v ++) {
20011a1e:	016c0733          	add	a4,s8,s6
20011a22:	4781                	li	a5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:49 (discriminator 1)
20011a24:	00979763          	bne	a5,s1,20011a32 <br_mgf1_xor+0xcc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:38 (discriminator 2)
	for (u = 0, c = 0; u < len; u += hlen, c ++) {
20011a28:	9b26                	add	s6,s6,s1
20011a2a:	0905                	addi	s2,s2,1
20011a2c:	409b8bb3          	sub	s7,s7,s1
20011a30:	bfa5                	j	200119a8 <br_mgf1_xor+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:50
			if ((u + v) >= len) {
20011a32:	ff778be3          	beq	a5,s7,20011a28 <br_mgf1_xor+0xc2>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:53 (discriminator 2)
			buf[u + v] ^= tmp[v];
20011a36:	00f106b3          	add	a3,sp,a5
20011a3a:	00074603          	lbu	a2,0(a4)
20011a3e:	0006c683          	lbu	a3,0(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:49 (discriminator 2)
		for (v = 0; v < hlen; v ++) {
20011a42:	0785                	addi	a5,a5,1
20011a44:	0705                	addi	a4,a4,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:53 (discriminator 2)
			buf[u + v] ^= tmp[v];
20011a46:	8eb1                	xor	a3,a3,a2
20011a48:	fed70fa3          	sb	a3,-1(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/mgf1.c:49 (discriminator 2)
		for (v = 0; v < hlen; v ++) {
20011a4c:	bfe1                	j	20011a24 <br_mgf1_xor+0xbe>

20011a4e <br_rsa_oaep_pad>:
br_rsa_oaep_pad():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:50
br_rsa_oaep_pad(const br_prng_class **rnd, const br_hash_class *dig,
	const void *label, size_t label_len,
	const br_rsa_public_key *pk,
	void *dst, size_t dst_max_len,
	const void *src, size_t src_len)
{
20011a4e:	716d                	addi	sp,sp,-272
20011a50:	11212023          	sw	s2,256(sp)
20011a54:	892e                	mv	s2,a1
20011a56:	10912223          	sw	s1,260(sp)
br_digest_size():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1619
    return (size_t)(digest_class->desc >> BR_HASHDESC_OUT_OFF)
20011a5a:	00492483          	lw	s1,4(s2)
br_rsa_oaep_pad():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:50
20011a5e:	10812423          	sw	s0,264(sp)
20011a62:	d5e2                	sw	s8,232(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:59
	hlen = br_digest_size(dig);

	/*
	 * Compute actual modulus length (in bytes).
	 */
	k = pk->nlen;
20011a64:	4340                	lw	s0,4(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:50
{
20011a66:	8c32                	mv	s8,a2
20011a68:	11012603          	lw	a2,272(sp)
br_digest_size():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1619
20011a6c:	80a1                	srli	s1,s1,0x8
br_rsa_oaep_pad():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:50
20011a6e:	dfce                	sw	s3,252(sp)
20011a70:	d9da                	sw	s6,240(sp)
20011a72:	d3e6                	sw	s9,228(sp)
20011a74:	10112623          	sw	ra,268(sp)
20011a78:	ddd2                	sw	s4,248(sp)
20011a7a:	dbd6                	sw	s5,244(sp)
20011a7c:	d7de                	sw	s7,236(sp)
20011a7e:	d1ea                	sw	s10,224(sp)
20011a80:	cfee                	sw	s11,220(sp)
20011a82:	8b2a                	mv	s6,a0
20011a84:	8cb6                	mv	s9,a3
20011a86:	89be                	mv	s3,a5
20011a88:	85c6                	mv	a1,a7
br_digest_size():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:1620
           & BR_HASHDESC_OUT_MASK;
20011a8a:	07f4f493          	andi	s1,s1,127
br_rsa_oaep_pad():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:60
	while (k > 0 && pk->n[k - 1] == 0) {
20011a8e:	c801                	beqz	s0,20011a9e <br_rsa_oaep_pad+0x50>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:60 (discriminator 1)
20011a90:	431c                	lw	a5,0(a4)
20011a92:	fff40693          	addi	a3,s0,-1
20011a96:	97b6                	add	a5,a5,a3
20011a98:	0007c783          	lbu	a5,0(a5)
20011a9c:	c3f9                	beqz	a5,20011b62 <br_rsa_oaep_pad+0x114>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:70
	 * An error is reported if:
	 *  - the modulus is too short;
	 *  - the source message length is too long;
	 *  - the destination buffer is too short.
	 */
	if (k < ((hlen << 1) + 2)
20011a9e:	00149a93          	slli	s5,s1,0x1
20011aa2:	002a8793          	addi	a5,s5,2
20011aa6:	0cf46063          	bltu	s0,a5,20011b66 <br_rsa_oaep_pad+0x118>
20011aaa:	5bf9                	li	s7,-2
20011aac:	415b8bb3          	sub	s7,s7,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:71
		|| src_len > (k - (hlen << 1) - 2)
20011ab0:	017407b3          	add	a5,s0,s7
20011ab4:	0ac7e963          	bltu	a5,a2,20011b66 <br_rsa_oaep_pad+0x118>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:72
		|| dst_max_len < k)
20011ab8:	0a886763          	bltu	a6,s0,20011b66 <br_rsa_oaep_pad+0x118>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:87
	/*
	 * Assemble: DB = lHash || PS || 0x01 || M
	 * We first place the source message M with memmove(), so that
	 * overlaps between source and destination buffers are supported.
	 */
	memmove(buf + k - src_len, src, src_len);
20011abc:	40c40db3          	sub	s11,s0,a2
20011ac0:	01b98d33          	add	s10,s3,s11
20011ac4:	856a                	mv	a0,s10
20011ac6:	408010ef          	jal	ra,20012ece <memmove>
hash_data():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:38
	dig->init(&hc.vtable);
20011aca:	00892783          	lw	a5,8(s2)
20011ace:	850a                	mv	a0,sp
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:37
	hc.vtable = dig;
20011ad0:	c04a                	sw	s2,0(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:38
	dig->init(&hc.vtable);
20011ad2:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:39
	dig->update(&hc.vtable, src, len);
20011ad4:	00c92783          	lw	a5,12(s2)
20011ad8:	8666                	mv	a2,s9
20011ada:	85e2                	mv	a1,s8
20011adc:	850a                	mv	a0,sp
20011ade:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:40
	dig->out(&hc.vtable, dst);
20011ae0:	01092783          	lw	a5,16(s2)
br_rsa_oaep_pad():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:88
	hash_data(dig, buf + 1 + hlen, label, label_len);
20011ae4:	00148a13          	addi	s4,s1,1
20011ae8:	9a4e                	add	s4,s4,s3
hash_data():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:40
	dig->out(&hc.vtable, dst);
20011aea:	85d2                	mv	a1,s4
20011aec:	850a                	mv	a0,sp
20011aee:	9782                	jalr	a5
br_rsa_oaep_pad():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:89
	memset(buf + 1 + (hlen << 1), 0, k - src_len - (hlen << 1) - 2);
20011af0:	0a85                	addi	s5,s5,1
20011af2:	017d8633          	add	a2,s11,s7
20011af6:	4581                	li	a1,0
20011af8:	01598533          	add	a0,s3,s5
20011afc:	41c010ef          	jal	ra,20012f18 <memset>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:90
	buf[k - src_len - 1] = 0x01;
20011b00:	4785                	li	a5,1
20011b02:	fefd0fa3          	sb	a5,-1(s10)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:95

	/*
	 * Make the random seed.
	 */
	(*rnd)->generate(rnd, buf + 1, hlen);
20011b06:	000b2783          	lw	a5,0(s6)
20011b0a:	00198b93          	addi	s7,s3,1
20011b0e:	8626                	mv	a2,s1
20011b10:	479c                	lw	a5,8(a5)
20011b12:	85de                	mv	a1,s7
20011b14:	855a                	mv	a0,s6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:100

	/*
	 * Mask DB with the mask generated from the seed.
	 */
	br_mgf1_xor(buf + 1 + hlen, k - hlen - 1, dig, buf + 1, hlen);
20011b16:	fff4ca93          	not	s5,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:95
	(*rnd)->generate(rnd, buf + 1, hlen);
20011b1a:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:100
	br_mgf1_xor(buf + 1 + hlen, k - hlen - 1, dig, buf + 1, hlen);
20011b1c:	9aa2                	add	s5,s5,s0
20011b1e:	8726                	mv	a4,s1
20011b20:	86de                	mv	a3,s7
20011b22:	864a                	mv	a2,s2
20011b24:	85d6                	mv	a1,s5
20011b26:	8552                	mv	a0,s4
20011b28:	3d3d                	jal	20011966 <br_mgf1_xor>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:105

	/*
	 * Mask the seed with the mask generated from the masked DB.
	 */
	br_mgf1_xor(buf + 1, hlen, dig, buf + 1 + hlen, k - hlen - 1);
20011b2a:	8756                	mv	a4,s5
20011b2c:	86d2                	mv	a3,s4
20011b2e:	864a                	mv	a2,s2
20011b30:	85a6                	mv	a1,s1
20011b32:	855e                	mv	a0,s7
20011b34:	3d0d                	jal	20011966 <br_mgf1_xor>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:110

	/*
	 * Padding result: EM = 0x00 || maskedSeed || maskedDB.
	 */
	buf[0] = 0x00;
20011b36:	00098023          	sb	zero,0(s3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:112
	return k;
}
20011b3a:	10c12083          	lw	ra,268(sp)
20011b3e:	8522                	mv	a0,s0
20011b40:	10812403          	lw	s0,264(sp)
20011b44:	10412483          	lw	s1,260(sp)
20011b48:	10012903          	lw	s2,256(sp)
20011b4c:	59fe                	lw	s3,252(sp)
20011b4e:	5a6e                	lw	s4,248(sp)
20011b50:	5ade                	lw	s5,244(sp)
20011b52:	5b4e                	lw	s6,240(sp)
20011b54:	5bbe                	lw	s7,236(sp)
20011b56:	5c2e                	lw	s8,232(sp)
20011b58:	5c9e                	lw	s9,228(sp)
20011b5a:	5d0e                	lw	s10,224(sp)
20011b5c:	4dfe                	lw	s11,220(sp)
20011b5e:	6151                	addi	sp,sp,272
20011b60:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:61
		k --;
20011b62:	8436                	mv	s0,a3
20011b64:	b72d                	j	20011a8e <br_rsa_oaep_pad+0x40>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_oaep_pad.c:74
		return 0;
20011b66:	4401                	li	s0,0
20011b68:	bfc9                	j	20011b3a <br_rsa_oaep_pad+0xec>

20011b6a <br_i15_bit_length>:
br_i15_bit_length():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:30
#include "inner.h"

/* see inner.h */
uint32_t
br_i15_bit_length(uint16_t *x, size_t xlen)
{
20011b6a:	1141                	addi	sp,sp,-16
20011b6c:	c422                	sw	s0,8(sp)
20011b6e:	86aa                	mv	a3,a0
20011b70:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:34
	uint32_t tw, twk;

	tw = 0;
	twk = 0;
20011b72:	4401                	li	s0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:33
	tw = 0;
20011b74:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:35
	while (xlen -- > 0) {
20011b76:	567d                	li	a2,-1
20011b78:	15fd                	addi	a1,a1,-1
20011b7a:	00c59963          	bne	a1,a2,20011b8c <br_i15_bit_length+0x22>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:43
		c = EQ(tw, 0);
		w = x[xlen];
		tw = MUX(c, w, tw);
		twk = MUX(c, (uint32_t)xlen, twk);
	}
	return (twk << 4) + BIT_LENGTH(tw);
20011b7e:	3645                	jal	2001171e <BIT_LENGTH>
20011b80:	0412                	slli	s0,s0,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:44
}
20011b82:	40b2                	lw	ra,12(sp)
20011b84:	9522                	add	a0,a0,s0
20011b86:	4422                	lw	s0,8(sp)
20011b88:	0141                	addi	sp,sp,16
20011b8a:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:39
		w = x[xlen];
20011b8c:	00159713          	slli	a4,a1,0x1
20011b90:	9736                	add	a4,a4,a3
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784
    return NOT((q | -q) >> 31);
20011b92:	40a007b3          	neg	a5,a0
br_i15_bit_length():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_bitlen.c:39
20011b96:	00075703          	lhu	a4,0(a4)
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784
20011b9a:	8fc9                	or	a5,a5,a0
20011b9c:	83fd                	srli	a5,a5,0x1f
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
20011b9e:	17fd                	addi	a5,a5,-1
20011ba0:	8f29                	xor	a4,a4,a0
20011ba2:	8f7d                	and	a4,a4,a5
20011ba4:	8d39                	xor	a0,a0,a4
20011ba6:	00b44733          	xor	a4,s0,a1
20011baa:	8ff9                	and	a5,a5,a4
20011bac:	8c3d                	xor	s0,s0,a5
20011bae:	b7e9                	j	20011b78 <br_i15_bit_length+0xe>

20011bb0 <br_i15_decode>:
br_i15_decode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:30
#include "inner.h"

/* see inner.h */
void
br_i15_decode(uint16_t *x, const void *src, size_t len)
{
20011bb0:	1141                	addi	sp,sp,-16
20011bb2:	c422                	sw	s0,8(sp)
20011bb4:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:47

		b = buf[len];
		acc |= (b << acc_len);
		acc_len += 8;
		if (acc_len >= 15) {
			x[v ++] = acc & 0x7FFF;
20011bb6:	6521                	lui	a0,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:30
{
20011bb8:	c606                	sw	ra,12(sp)
20011bba:	962e                	add	a2,a2,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:39
	acc_len = 0;
20011bbc:	4681                	li	a3,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:38
	acc = 0;
20011bbe:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:37
	v = 1;
20011bc0:	4785                	li	a5,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:46
		if (acc_len >= 15) {
20011bc2:	48b9                	li	a7,14
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:47
			x[v ++] = acc & 0x7FFF;
20011bc4:	157d                	addi	a0,a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:40
	while (len -- > 0) {
20011bc6:	02c59463          	bne	a1,a2,20011bee <br_i15_decode+0x3e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:52
			acc_len -= 15;
			acc >>= 15;
		}
	}
	if (acc_len != 0) {
20011bca:	c699                	beqz	a3,20011bd8 <br_i15_decode+0x28>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:53
		x[v ++] = acc;
20011bcc:	00179693          	slli	a3,a5,0x1
20011bd0:	96a2                	add	a3,a3,s0
20011bd2:	00e69023          	sh	a4,0(a3)
20011bd6:	0785                	addi	a5,a5,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:55
	}
	x[0] = br_i15_bit_length(x + 1, v - 1);
20011bd8:	00240513          	addi	a0,s0,2
20011bdc:	fff78593          	addi	a1,a5,-1
20011be0:	3769                	jal	20011b6a <br_i15_bit_length>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:56
}
20011be2:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:55
	x[0] = br_i15_bit_length(x + 1, v - 1);
20011be4:	00a41023          	sh	a0,0(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:56
}
20011be8:	4422                	lw	s0,8(sp)
20011bea:	0141                	addi	sp,sp,16
20011bec:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:43
		b = buf[len];
20011bee:	fff64803          	lbu	a6,-1(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:44
		acc |= (b << acc_len);
20011bf2:	00d81833          	sll	a6,a6,a3
20011bf6:	01076733          	or	a4,a4,a6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:45
		acc_len += 8;
20011bfa:	00868813          	addi	a6,a3,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:46
		if (acc_len >= 15) {
20011bfe:	0108dd63          	bge	a7,a6,20011c18 <br_i15_decode+0x68>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:47
			x[v ++] = acc & 0x7FFF;
20011c02:	00179813          	slli	a6,a5,0x1
20011c06:	9822                	add	a6,a6,s0
20011c08:	00a77333          	and	t1,a4,a0
20011c0c:	00681023          	sh	t1,0(a6)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:49
			acc >>= 15;
20011c10:	833d                	srli	a4,a4,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:48
			acc_len -= 15;
20011c12:	ff968813          	addi	a6,a3,-7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decode.c:47
			x[v ++] = acc & 0x7FFF;
20011c16:	0785                	addi	a5,a5,1
20011c18:	167d                	addi	a2,a2,-1
20011c1a:	86c2                	mv	a3,a6
20011c1c:	b76d                	j	20011bc6 <br_i15_decode+0x16>

20011c1e <br_i15_ninv15>:
br_i15_ninv15():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:33
uint16_t
br_i15_ninv15(uint16_t x)
{
	uint32_t y;

	y = 2 - x;
20011c1e:	4689                	li	a3,2
20011c20:	40a687b3          	sub	a5,a3,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:34
	y = MUL15(y, 2 - MUL15(x, y));
20011c24:	02f50733          	mul	a4,a0,a5
20011c28:	40e68733          	sub	a4,a3,a4
20011c2c:	02f707b3          	mul	a5,a4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:35
	y = MUL15(y, 2 - MUL15(x, y));
20011c30:	02f50733          	mul	a4,a0,a5
20011c34:	40e68733          	sub	a4,a3,a4
20011c38:	02f70733          	mul	a4,a4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:36
	y = MUL15(y, 2 - MUL15(x, y));
20011c3c:	02e507b3          	mul	a5,a0,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:37
	return MUX(x & 1, -y, 0) & 0x7FFF;
20011c40:	8905                	andi	a0,a0,1
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
20011c42:	40a00533          	neg	a0,a0
br_i15_ninv15():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:36
	y = MUL15(y, 2 - MUL15(x, y));
20011c46:	8f95                	sub	a5,a5,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:37
	return MUX(x & 1, -y, 0) & 0x7FFF;
20011c48:	02e787b3          	mul	a5,a5,a4
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
20011c4c:	8d7d                	and	a0,a0,a5
br_i15_ninv15():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:37
20011c4e:	0546                	slli	a0,a0,0x11
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_ninv15.c:38
}
20011c50:	8145                	srli	a0,a0,0x11
20011c52:	8082                	ret

20011c54 <br_i15_decode_mod>:
br_i15_decode_mod():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:30
#include "inner.h"

/* see inner.h */
uint32_t
br_i15_decode_mod(uint16_t *x, const void *src, size_t len, const uint16_t *m)
{
20011c54:	715d                	addi	sp,sp,-80
20011c56:	de4e                	sw	s3,60(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:60
	size_t mlen, tlen;
	int pass;
	uint32_t r;

	buf = src;
	mlen = (m[0] + 15) >> 4;
20011c58:	0006d983          	lhu	s3,0(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:30
{
20011c5c:	c0ca                	sw	s2,64(sp)
20011c5e:	dc52                	sw	s4,56(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:60
	mlen = (m[0] + 15) >> 4;
20011c60:	09bd                	addi	s3,s3,15
20011c62:	4049d993          	srai	s3,s3,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:30
{
20011c66:	da56                	sw	s5,52(sp)
20011c68:	d85a                	sw	s6,48(sp)
20011c6a:	c686                	sw	ra,76(sp)
20011c6c:	c4a2                	sw	s0,72(sp)
20011c6e:	c2a6                	sw	s1,68(sp)
20011c70:	d65e                	sw	s7,44(sp)
20011c72:	d462                	sw	s8,40(sp)
20011c74:	d266                	sw	s9,36(sp)
20011c76:	d06a                	sw	s10,32(sp)
20011c78:	ce6e                	sw	s11,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:61
	tlen = (mlen << 1);
20011c7a:	00199a93          	slli	s5,s3,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:30
{
20011c7e:	8b2a                	mv	s6,a0
20011c80:	872e                	mv	a4,a1
20011c82:	8932                	mv	s2,a2
20011c84:	8a36                	mv	s4,a3
20011c86:	00caf363          	bgeu	s5,a2,20011c8c <br_i15_decode_mod+0x38>
20011c8a:	8ab2                	mv	s5,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:88
			acc |= (b << acc_len);
			acc_len += 8;
			if (acc_len >= 15) {
				uint32_t xw;

				xw = acc & (uint32_t)0x7FFF;
20011c8c:	66a1                	lui	a3,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:65
	tlen += 4;
20011c8e:	0a91                	addi	s5,s5,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:66
	r = 0;
20011c90:	4401                	li	s0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:67
	for (pass = 0; pass < 2; pass ++) {
20011c92:	4c81                	li	s9,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:85
			if (acc_len >= 15) {
20011c94:	4839                	li	a6,14
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:88
				xw = acc & (uint32_t)0x7FFF;
20011c96:	16fd                	addi	a3,a3,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:90
				acc_len -= 15;
				acc = b >> (8 - acc_len);
20011c98:	48a1                	li	a7,8
20011c9a:	4605                	li	a2,1
20011c9c:	01270db3          	add	s11,a4,s2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:74
		acc_len = 0;
20011ca0:	4781                	li	a5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:73
		acc = 0;
20011ca2:	4481                	li	s1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:72
		v = 1;
20011ca4:	4c05                	li	s8,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:75
		for (u = 0; u < tlen; u ++) {
20011ca6:	4b81                	li	s7,0
20011ca8:	a0a9                	j	20011cf2 <br_i15_decode_mod+0x9e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:81
				b = 0;
20011caa:	4581                	li	a1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:78
			if (u < len) {
20011cac:	012bf463          	bgeu	s7,s2,20011cb4 <br_i15_decode_mod+0x60>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:79
				b = buf[len - 1 - u];
20011cb0:	fffdc583          	lbu	a1,-1(s11)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:83
			acc |= (b << acc_len);
20011cb4:	00f59533          	sll	a0,a1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:84
			acc_len += 8;
20011cb8:	00878d13          	addi	s10,a5,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:83
			acc |= (b << acc_len);
20011cbc:	8cc9                	or	s1,s1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:85
			if (acc_len >= 15) {
20011cbe:	03a85763          	bge	a6,s10,20011cec <br_i15_decode_mod+0x98>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:89
				acc_len -= 15;
20011cc2:	ff978d13          	addi	s10,a5,-7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:88
				xw = acc & (uint32_t)0x7FFF;
20011cc6:	00d4f333          	and	t1,s1,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:90
				acc = b >> (8 - acc_len);
20011cca:	41a884b3          	sub	s1,a7,s10
20011cce:	0095d4b3          	srl	s1,a1,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:91
				if (v <= mlen) {
20011cd2:	0789ee63          	bltu	s3,s8,20011d4e <br_i15_decode_mod+0xfa>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:93
					if (pass) {
						x[v] = r & xw;
20011cd6:	001c1793          	slli	a5,s8,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:92
					if (pass) {
20011cda:	020c8663          	beqz	s9,20011d06 <br_i15_decode_mod+0xb2>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:93
						x[v] = r & xw;
20011cde:	00fb05b3          	add	a1,s6,a5
20011ce2:	006477b3          	and	a5,s0,t1
20011ce6:	00f59023          	sh	a5,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:105
				} else {
					if (!pass) {
						r = MUX(EQ(xw, 0), r, 1);
					}
				}
				v ++;
20011cea:	0c05                	addi	s8,s8,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:75 (discriminator 2)
		for (u = 0; u < tlen; u ++) {
20011cec:	0b85                	addi	s7,s7,1
20011cee:	1dfd                	addi	s11,s11,-1
20011cf0:	87ea                	mv	a5,s10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:75 (discriminator 1)
20011cf2:	fb5bece3          	bltu	s7,s5,20011caa <br_i15_decode_mod+0x56>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:118 (discriminator 2)
		 *
		 * When we reach this point at the end of the second pass:
		 * r is either 0 or -1; we want to leave that value
		 * untouched. This is a subcase of the previous.
		 */
		r >>= 1;
20011cf6:	00145793          	srli	a5,s0,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:119 (discriminator 2)
		r |= (r << 1);
20011cfa:	9879                	andi	s0,s0,-2
20011cfc:	8c5d                	or	s0,s0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:67 (discriminator 2)
	for (pass = 0; pass < 2; pass ++) {
20011cfe:	06cc8663          	beq	s9,a2,20011d6a <br_i15_decode_mod+0x116>
20011d02:	4c85                	li	s9,1
20011d04:	bf61                	j	20011c9c <br_i15_decode_mod+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:97
						cc = (uint32_t)CMP(xw, m[v]);
20011d06:	97d2                	add	a5,a5,s4
20011d08:	0007d783          	lhu	a5,0(a5)
CMP():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:837
    return (int32_t)GT(x, y) | -(int32_t)GT(y, x);
20011d0c:	851a                	mv	a0,t1
20011d0e:	c63a                	sw	a4,12(sp)
20011d10:	85be                	mv	a1,a5
20011d12:	c43e                	sw	a5,8(sp)
20011d14:	c21a                	sw	t1,4(sp)
20011d16:	3ae5                	jal	2001170e <GT>
20011d18:	47a2                	lw	a5,8(sp)
20011d1a:	4312                	lw	t1,4(sp)
20011d1c:	c02a                	sw	a0,0(sp)
20011d1e:	853e                	mv	a0,a5
20011d20:	859a                	mv	a1,t1
20011d22:	32f5                	jal	2001170e <GT>
20011d24:	4e02                	lw	t3,0(sp)
20011d26:	40a007b3          	neg	a5,a0
20011d2a:	4732                	lw	a4,12(sp)
20011d2c:	01c7e533          	or	a0,a5,t3
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784
    return NOT((q | -q) >> 31);
20011d30:	40a007b3          	neg	a5,a0
20011d34:	8fc9                	or	a5,a5,a0
20011d36:	83fd                	srli	a5,a5,0x1f
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
20011d38:	17fd                	addi	a5,a5,-1
20011d3a:	8c29                	xor	s0,s0,a0
20011d3c:	8c7d                	and	s0,s0,a5
20011d3e:	67a1                	lui	a5,0x8
20011d40:	8c29                	xor	s0,s0,a0
20011d42:	4605                	li	a2,1
20011d44:	4839                	li	a6,14
20011d46:	fff78693          	addi	a3,a5,-1 # 7fff <__heap_size+0x77ff>
20011d4a:	48a1                	li	a7,8
20011d4c:	bf79                	j	20011cea <br_i15_decode_mod+0x96>
br_i15_decode_mod():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:101
					if (!pass) {
20011d4e:	f80c9ee3          	bnez	s9,20011cea <br_i15_decode_mod+0x96>
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784
    return NOT((q | -q) >> 31);
20011d52:	406007b3          	neg	a5,t1
20011d56:	0067e7b3          	or	a5,a5,t1
20011d5a:	83fd                	srli	a5,a5,0x1f
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
20011d5c:	17fd                	addi	a5,a5,-1
20011d5e:	00144413          	xori	s0,s0,1
20011d62:	8c7d                	and	s0,s0,a5
20011d64:	00144413          	xori	s0,s0,1
20011d68:	b749                	j	20011cea <br_i15_decode_mod+0x96>
br_i15_decode_mod():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:122
	}

	x[0] = m[0];
20011d6a:	000a5783          	lhu	a5,0(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:124
	return r & (uint32_t)1;
}
20011d6e:	40b6                	lw	ra,76(sp)
20011d70:	00147513          	andi	a0,s0,1
20011d74:	4426                	lw	s0,72(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:122
	x[0] = m[0];
20011d76:	00fb1023          	sh	a5,0(s6)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_decmod.c:124
}
20011d7a:	4496                	lw	s1,68(sp)
20011d7c:	4906                	lw	s2,64(sp)
20011d7e:	59f2                	lw	s3,60(sp)
20011d80:	5a62                	lw	s4,56(sp)
20011d82:	5ad2                	lw	s5,52(sp)
20011d84:	5b42                	lw	s6,48(sp)
20011d86:	5bb2                	lw	s7,44(sp)
20011d88:	5c22                	lw	s8,40(sp)
20011d8a:	5c92                	lw	s9,36(sp)
20011d8c:	5d02                	lw	s10,32(sp)
20011d8e:	4df2                	lw	s11,28(sp)
20011d90:	6161                	addi	sp,sp,80
20011d92:	8082                	ret

20011d94 <br_i15_encode>:
br_i15_encode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:36
	unsigned char *buf;
	size_t u, xlen;
	uint32_t acc;
	int acc_len;

	xlen = (x[0] + 15) >> 4;
20011d94:	00065703          	lhu	a4,0(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:30
{
20011d98:	882a                	mv	a6,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:36
	xlen = (x[0] + 15) >> 4;
20011d9a:	073d                	addi	a4,a4,15
20011d9c:	8711                	srai	a4,a4,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:37
	if (xlen == 0) {
20011d9e:	cb09                	beqz	a4,20011db0 <br_i15_encode+0x1c>
20011da0:	95aa                	add	a1,a1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:43
		memset(dst, 0, len);
		return;
	}
	u = 1;
	acc = 0;
	acc_len = 0;
20011da2:	4781                	li	a5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:42
	acc = 0;
20011da4:	4681                	li	a3,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:41
	u = 1;
20011da6:	4505                	li	a0,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:46
	buf = dst;
	while (len -- > 0) {
		if (acc_len < 8) {
20011da8:	431d                	li	t1,7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:45
	while (len -- > 0) {
20011daa:	00b81763          	bne	a6,a1,20011db8 <br_i15_encode+0x24>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:56
		}
		buf[len] = (unsigned char)acc;
		acc >>= 8;
		acc_len -= 8;
	}
}
20011dae:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:38
		memset(dst, 0, len);
20011db0:	862e                	mv	a2,a1
20011db2:	4581                	li	a1,0
20011db4:	1640106f          	j	20012f18 <memset>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:46
		if (acc_len < 8) {
20011db8:	00f34e63          	blt	t1,a5,20011dd4 <br_i15_encode+0x40>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:47
			if (u <= xlen) {
20011dbc:	00a76b63          	bltu	a4,a0,20011dd2 <br_i15_encode+0x3e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:48
				acc += (uint32_t)x[u ++] << acc_len;
20011dc0:	00151893          	slli	a7,a0,0x1
20011dc4:	98b2                	add	a7,a7,a2
20011dc6:	0008d883          	lhu	a7,0(a7)
20011dca:	0505                	addi	a0,a0,1
20011dcc:	00f898b3          	sll	a7,a7,a5
20011dd0:	96c6                	add	a3,a3,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:50
			acc_len += 15;
20011dd2:	07bd                	addi	a5,a5,15
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:52
		buf[len] = (unsigned char)acc;
20011dd4:	fed58fa3          	sb	a3,-1(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:54
		acc_len -= 8;
20011dd8:	17e1                	addi	a5,a5,-8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:53
		acc >>= 8;
20011dda:	82a1                	srli	a3,a3,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_encode.c:54
		acc_len -= 8;
20011ddc:	15fd                	addi	a1,a1,-1
20011dde:	b7f1                	j	20011daa <br_i15_encode+0x16>

20011de0 <br_i15_add>:
br_i15_add():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:35
{
	uint32_t cc;
	size_t u, m;

	cc = 0;
	m = (a[0] + 31) >> 4;
20011de0:	00055703          	lhu	a4,0(a0) # 8000 <__heap_size+0x7800>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:43

		aw = a[u];
		bw = b[u];
		naw = aw + bw + cc;
		cc = naw >> 15;
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
20011de4:	68a1                	lui	a7,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:30
{
20011de6:	882a                	mv	a6,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:35
	m = (a[0] + 31) >> 4;
20011de8:	077d                	addi	a4,a4,31
20011dea:	8711                	srai	a4,a4,0x4
20011dec:	0706                	slli	a4,a4,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:36
	for (u = 1; u < m; u ++) {
20011dee:	4681                	li	a3,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:34
	cc = 0;
20011df0:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:43
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
20011df2:	18fd                	addi	a7,a7,-1
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
20011df4:	40c00633          	neg	a2,a2
br_i15_add():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:36 (discriminator 1)
	for (u = 1; u < m; u ++) {
20011df8:	0689                	addi	a3,a3,2
20011dfa:	00e69363          	bne	a3,a4,20011e00 <br_i15_add+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:46
	}
	return cc;
}
20011dfe:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:39 (discriminator 3)
		aw = a[u];
20011e00:	00d80e33          	add	t3,a6,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:40 (discriminator 3)
		bw = b[u];
20011e04:	00d587b3          	add	a5,a1,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:39 (discriminator 3)
		aw = a[u];
20011e08:	000e5303          	lhu	t1,0(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:40 (discriminator 3)
		bw = b[u];
20011e0c:	0007d783          	lhu	a5,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:41 (discriminator 3)
		naw = aw + bw + cc;
20011e10:	979a                	add	a5,a5,t1
20011e12:	97aa                	add	a5,a5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:42 (discriminator 3)
		cc = naw >> 15;
20011e14:	00f7d513          	srli	a0,a5,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:43 (discriminator 3)
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
20011e18:	0117f7b3          	and	a5,a5,a7
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772 (discriminator 3)
20011e1c:	0067c7b3          	xor	a5,a5,t1
20011e20:	8ff1                	and	a5,a5,a2
20011e22:	0067c7b3          	xor	a5,a5,t1
br_i15_add():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:43 (discriminator 3)
20011e26:	00fe1023          	sh	a5,0(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_add.c:36 (discriminator 3)
	for (u = 1; u < m; u ++) {
20011e2a:	b7f9                	j	20011df8 <br_i15_add+0x18>

20011e2c <br_i15_sub>:
br_i15_sub():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:35
{
	uint32_t cc;
	size_t u, m;

	cc = 0;
	m = (a[0] + 31) >> 4;
20011e2c:	00055703          	lhu	a4,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:43

		aw = a[u];
		bw = b[u];
		naw = aw - bw - cc;
		cc = naw >> 31;
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
20011e30:	68a1                	lui	a7,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:30
{
20011e32:	882a                	mv	a6,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:35
	m = (a[0] + 31) >> 4;
20011e34:	077d                	addi	a4,a4,31
20011e36:	8711                	srai	a4,a4,0x4
20011e38:	0706                	slli	a4,a4,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:36
	for (u = 1; u < m; u ++) {
20011e3a:	4681                	li	a3,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:34
	cc = 0;
20011e3c:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:43
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
20011e3e:	18fd                	addi	a7,a7,-1
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
20011e40:	40c00633          	neg	a2,a2
br_i15_sub():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:36 (discriminator 1)
	for (u = 1; u < m; u ++) {
20011e44:	0689                	addi	a3,a3,2
20011e46:	00e69363          	bne	a3,a4,20011e4c <br_i15_sub+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:46
	}
	return cc;
}
20011e4a:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:39 (discriminator 3)
		aw = a[u];
20011e4c:	00d80e33          	add	t3,a6,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:40 (discriminator 3)
		bw = b[u];
20011e50:	00d587b3          	add	a5,a1,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:39 (discriminator 3)
		aw = a[u];
20011e54:	000e5303          	lhu	t1,0(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:40 (discriminator 3)
		bw = b[u];
20011e58:	0007d783          	lhu	a5,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:41 (discriminator 3)
		naw = aw - bw - cc;
20011e5c:	40f307b3          	sub	a5,t1,a5
20011e60:	8f89                	sub	a5,a5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:42 (discriminator 3)
		cc = naw >> 31;
20011e62:	01f7d513          	srli	a0,a5,0x1f
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:43 (discriminator 3)
		a[u] = MUX(ctl, naw & 0x7FFF, aw);
20011e66:	0117f7b3          	and	a5,a5,a7
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772 (discriminator 3)
20011e6a:	0067c7b3          	xor	a5,a5,t1
20011e6e:	8ff1                	and	a5,a5,a2
20011e70:	0067c7b3          	xor	a5,a5,t1
br_i15_sub():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:43 (discriminator 3)
20011e74:	00fe1023          	sh	a5,0(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_sub.c:36 (discriminator 3)
	for (u = 1; u < m; u ++) {
20011e78:	b7f1                	j	20011e44 <br_i15_sub+0x18>

20011e7a <br_i15_muladd_small>:
br_i15_muladd_small():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:56

/* see inner.h */
void
br_i15_muladd_small(uint16_t *x, uint16_t z, const uint16_t *m)
{
20011e7a:	711d                	addi	sp,sp,-96
20011e7c:	de5e                	sw	s7,60(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:69
	uint32_t cc, tb, over, under;

	/*
	 * Simple case: the modulus fits on one word.
	 */
	m_bitlen = m[0];
20011e7e:	00065b83          	lhu	s7,0(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:56
{
20011e82:	ce86                	sw	ra,92(sp)
20011e84:	cca2                	sw	s0,88(sp)
20011e86:	caa6                	sw	s1,84(sp)
20011e88:	c8ca                	sw	s2,80(sp)
20011e8a:	c6ce                	sw	s3,76(sp)
20011e8c:	c4d2                	sw	s4,72(sp)
20011e8e:	c2d6                	sw	s5,68(sp)
20011e90:	c0da                	sw	s6,64(sp)
20011e92:	dc62                	sw	s8,56(sp)
20011e94:	da66                	sw	s9,52(sp)
20011e96:	d86a                	sw	s10,48(sp)
20011e98:	d66e                	sw	s11,44(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:70
	if (m_bitlen == 0) {
20011e9a:	020b8563          	beqz	s7,20011ec4 <br_i15_muladd_small+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:73
		return;
	}
	if (m_bitlen <= 15) {
20011e9e:	4d3d                	li	s10,15
20011ea0:	842a                	mv	s0,a0
20011ea2:	8cae                	mv	s9,a1
20011ea4:	84b2                	mv	s1,a2
20011ea6:	037d6e63          	bltu	s10,s7,20011ee2 <br_i15_muladd_small+0x68>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:76
		uint32_t rem;

		divrem16(((uint32_t)x[1] << 15) | z, m[1], &rem);
20011eaa:	00255503          	lhu	a0,2(a0)
20011eae:	0024d583          	lhu	a1,2(s1)
20011eb2:	0870                	addi	a2,sp,28
20011eb4:	053e                	slli	a0,a0,0xf
20011eb6:	01956533          	or	a0,a0,s9
20011eba:	8ffff0ef          	jal	ra,200117b8 <divrem16>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:77
		x[1] = rem;
20011ebe:	47f2                	lw	a5,28(sp)
20011ec0:	00f41123          	sh	a5,2(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:173
	 */
	over = GT(cc, hi);
	under = ~over & (tb | LT(cc, hi));
	br_i15_add(x, m, over);
	br_i15_sub(x, m, under);
}
20011ec4:	40f6                	lw	ra,92(sp)
20011ec6:	4466                	lw	s0,88(sp)
20011ec8:	44d6                	lw	s1,84(sp)
20011eca:	4946                	lw	s2,80(sp)
20011ecc:	49b6                	lw	s3,76(sp)
20011ece:	4a26                	lw	s4,72(sp)
20011ed0:	4a96                	lw	s5,68(sp)
20011ed2:	4b06                	lw	s6,64(sp)
20011ed4:	5bf2                	lw	s7,60(sp)
20011ed6:	5c62                	lw	s8,56(sp)
20011ed8:	5cd2                	lw	s9,52(sp)
20011eda:	5d42                	lw	s10,48(sp)
20011edc:	5db2                	lw	s11,44(sp)
20011ede:	6125                	addi	sp,sp,96
20011ee0:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:80
	mlen = (m_bitlen + 15) >> 4;
20011ee2:	00fb8993          	addi	s3,s7,15
20011ee6:	0049d993          	srli	s3,s3,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:109
	hi = x[mlen];
20011eea:	00199a93          	slli	s5,s3,0x1
20011eee:	01550db3          	add	s11,a0,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:112
		memmove(x + 2, x + 1, (mlen - 1) * sizeof *x);
20011ef2:	fff98613          	addi	a2,s3,-1
20011ef6:	00fbfb93          	andi	s7,s7,15
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:109
	hi = x[mlen];
20011efa:	000dda03          	lhu	s4,0(s11)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:112
		memmove(x + 2, x + 1, (mlen - 1) * sizeof *x);
20011efe:	0511                	addi	a0,a0,4
20011f00:	00240913          	addi	s2,s0,2
20011f04:	0606                	slli	a2,a2,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:115
		b = m[mlen];
20011f06:	9aa6                	add	s5,s5,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:110
	if (mblr == 0) {
20011f08:	0e0b9b63          	bnez	s7,20011ffe <br_i15_muladd_small+0x184>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:112
		memmove(x + 2, x + 1, (mlen - 1) * sizeof *x);
20011f0c:	85ca                	mv	a1,s2
20011f0e:	7c1000ef          	jal	ra,20012ece <memmove>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:113
		x[1] = z;
20011f12:	01941123          	sh	s9,2(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:114
		a = (a0 << 15) + x[mlen];
20011f16:	000dd783          	lhu	a5,0(s11)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:115
		b = m[mlen];
20011f1a:	000ada83          	lhu	s5,0(s5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:114
		a = (a0 << 15) + x[mlen];
20011f1e:	00fa1513          	slli	a0,s4,0xf
20011f22:	953e                	add	a0,a0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:111
		a0 = x[mlen];
20011f24:	8b52                	mv	s6,s4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:124
	q = divrem16(a, b, NULL);
20011f26:	85d6                	mv	a1,s5
20011f28:	4601                	li	a2,0
20011f2a:	88fff0ef          	jal	ra,200117b8 <divrem16>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:134
	q = MUX(EQ(b, a0), 0x7FFF, q - 1 + ((q - 1) >> 31));
20011f2e:	157d                	addi	a0,a0,-1
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:783
    q = x ^ y;
20011f30:	015b4b33          	xor	s6,s6,s5
br_i15_muladd_small():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:134
20011f34:	01f55a93          	srli	s5,a0,0x1f
20011f38:	9556                	add	a0,a0,s5
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784
    return NOT((q | -q) >> 31);
20011f3a:	41600ab3          	neg	s5,s6
20011f3e:	016aeab3          	or	s5,s5,s6
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
20011f42:	6c21                	lui	s8,0x8
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784
    return NOT((q | -q) >> 31);
20011f44:	01fada93          	srli	s5,s5,0x1f
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
20011f48:	1c7d                	addi	s8,s8,-1
20011f4a:	1afd                	addi	s5,s5,-1
20011f4c:	018547b3          	xor	a5,a0,s8
20011f50:	00fafab3          	and	s5,s5,a5
20011f54:	00aacab3          	xor	s5,s5,a0
br_i15_muladd_small():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:146
	tb = 1;
20011f58:	4b85                	li	s7,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:145
	cc = 0;
20011f5a:	4b01                	li	s6,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:147
	for (u = 1; u <= mlen; u ++) {
20011f5c:	4c85                	li	s9,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:150 (discriminator 3)
		mw = m[u];
20011f5e:	001c9793          	slli	a5,s9,0x1
20011f62:	97a6                	add	a5,a5,s1
20011f64:	0007d583          	lhu	a1,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:147 (discriminator 3)
	for (u = 1; u <= mlen; u ++) {
20011f68:	0c85                	addi	s9,s9,1
20011f6a:	0909                	addi	s2,s2,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:151 (discriminator 3)
		zl = MUL15(mw, q) + cc;
20011f6c:	03558533          	mul	a0,a1,s5
20011f70:	9b2a                	add	s6,s6,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:154 (discriminator 3)
		xw = x[u];
20011f72:	ffe95503          	lhu	a0,-2(s2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:152 (discriminator 3)
		cc = zl >> 15;
20011f76:	00fb5793          	srli	a5,s6,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:153 (discriminator 3)
		zl &= 0x7FFF;
20011f7a:	018b7b33          	and	s6,s6,s8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:155 (discriminator 3)
		nxw = xw - zl;
20011f7e:	41650533          	sub	a0,a0,s6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:156 (discriminator 3)
		cc += nxw >> 31;
20011f82:	01f55b13          	srli	s6,a0,0x1f
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:157 (discriminator 3)
		nxw &= 0x7FFF;
20011f86:	01857533          	and	a0,a0,s8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:158 (discriminator 3)
		x[u] = nxw;
20011f8a:	fea91f23          	sh	a0,-2(s2)
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:783 (discriminator 3)
    q = x ^ y;
20011f8e:	00a5cd33          	xor	s10,a1,a0
br_i15_muladd_small():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:156 (discriminator 3)
		cc += nxw >> 31;
20011f92:	9b3e                	add	s6,s6,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:159 (discriminator 3)
		tb = MUX(EQ(nxw, mw), tb, GT(nxw, mw));
20011f94:	f7aff0ef          	jal	ra,2001170e <GT>
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784 (discriminator 3)
    return NOT((q | -q) >> 31);
20011f98:	41a007b3          	neg	a5,s10
20011f9c:	01a7e7b3          	or	a5,a5,s10
20011fa0:	83fd                	srli	a5,a5,0x1f
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772 (discriminator 3)
    return y ^ (-ctl & (x ^ y));
20011fa2:	01754bb3          	xor	s7,a0,s7
20011fa6:	17fd                	addi	a5,a5,-1
20011fa8:	0177f7b3          	and	a5,a5,s7
20011fac:	00a7cbb3          	xor	s7,a5,a0
br_i15_muladd_small():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:147 (discriminator 3)
	for (u = 1; u <= mlen; u ++) {
20011fb0:	fb99f7e3          	bgeu	s3,s9,20011f5e <br_i15_muladd_small+0xe4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:169
	over = GT(cc, hi);
20011fb4:	85d2                	mv	a1,s4
20011fb6:	855a                	mv	a0,s6
20011fb8:	f56ff0ef          	jal	ra,2001170e <GT>
20011fbc:	892a                	mv	s2,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:170
	under = ~over & (tb | LT(cc, hi));
20011fbe:	85da                	mv	a1,s6
20011fc0:	8552                	mv	a0,s4
20011fc2:	f4cff0ef          	jal	ra,2001170e <GT>
20011fc6:	fff94713          	not	a4,s2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:171
	br_i15_add(x, m, over);
20011fca:	864a                	mv	a2,s2
20011fcc:	85a6                	mv	a1,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:170
	under = ~over & (tb | LT(cc, hi));
20011fce:	01756bb3          	or	s7,a0,s7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:171
	br_i15_add(x, m, over);
20011fd2:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:170
	under = ~over & (tb | LT(cc, hi));
20011fd4:	01777bb3          	and	s7,a4,s7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:171
	br_i15_add(x, m, over);
20011fd8:	3521                	jal	20011de0 <br_i15_add>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:172
	br_i15_sub(x, m, under);
20011fda:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:173
}
20011fdc:	4466                	lw	s0,88(sp)
20011fde:	40f6                	lw	ra,92(sp)
20011fe0:	4946                	lw	s2,80(sp)
20011fe2:	49b6                	lw	s3,76(sp)
20011fe4:	4a26                	lw	s4,72(sp)
20011fe6:	4a96                	lw	s5,68(sp)
20011fe8:	4b06                	lw	s6,64(sp)
20011fea:	5c62                	lw	s8,56(sp)
20011fec:	5cd2                	lw	s9,52(sp)
20011fee:	5d42                	lw	s10,48(sp)
20011ff0:	5db2                	lw	s11,44(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:172
	br_i15_sub(x, m, under);
20011ff2:	865e                	mv	a2,s7
20011ff4:	85a6                	mv	a1,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:173
}
20011ff6:	5bf2                	lw	s7,60(sp)
20011ff8:	44d6                	lw	s1,84(sp)
20011ffa:	6125                	addi	sp,sp,96
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:172
	br_i15_sub(x, m, under);
20011ffc:	bd05                	j	20011e2c <br_i15_sub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:117
		a0 = (x[mlen] << (15 - mblr)) | (x[mlen - 1] >> mblr);
20011ffe:	00199c13          	slli	s8,s3,0x1
20012002:	1c79                	addi	s8,s8,-2
20012004:	01840733          	add	a4,s0,s8
20012008:	00075b03          	lhu	s6,0(a4)
2001200c:	417d0d33          	sub	s10,s10,s7
20012010:	01aa17b3          	sll	a5,s4,s10
20012014:	417b5b33          	sra	s6,s6,s7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:118
		memmove(x + 2, x + 1, (mlen - 1) * sizeof *x);
20012018:	85ca                	mv	a1,s2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:117
		a0 = (x[mlen] << (15 - mblr)) | (x[mlen - 1] >> mblr);
2001201a:	00fb6b33          	or	s6,s6,a5
2001201e:	c63a                	sw	a4,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:118
		memmove(x + 2, x + 1, (mlen - 1) * sizeof *x);
20012020:	6af000ef          	jal	ra,20012ece <memmove>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:121
			| (x[mlen - 1] >> mblr)) & 0x7FFF);
20012024:	4732                	lw	a4,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:119
		x[1] = z;
20012026:	01941123          	sh	s9,2(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:120
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
2001202a:	000dd783          	lhu	a5,0(s11)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:121
			| (x[mlen - 1] >> mblr)) & 0x7FFF);
2001202e:	00075503          	lhu	a0,0(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:122
		b = (m[mlen] << (15 - mblr)) | (m[mlen - 1] >> mblr);
20012032:	9c26                	add	s8,s8,s1
20012034:	000c5583          	lhu	a1,0(s8) # 8000 <__heap_size+0x7800>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:121
			| (x[mlen - 1] >> mblr)) & 0x7FFF);
20012038:	41755533          	sra	a0,a0,s7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:122
		b = (m[mlen] << (15 - mblr)) | (m[mlen - 1] >> mblr);
2001203c:	000ada83          	lhu	s5,0(s5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:120
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
20012040:	01a797b3          	sll	a5,a5,s10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:121
			| (x[mlen - 1] >> mblr)) & 0x7FFF);
20012044:	8fc9                	or	a5,a5,a0
20012046:	07c6                	slli	a5,a5,0x11
20012048:	83c5                	srli	a5,a5,0x11
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:120
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
2001204a:	00fb1513          	slli	a0,s6,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:122
		b = (m[mlen] << (15 - mblr)) | (m[mlen - 1] >> mblr);
2001204e:	4175dbb3          	sra	s7,a1,s7
20012052:	01aa9ab3          	sll	s5,s5,s10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:120
		a = (a0 << 15) | (((x[mlen] << (15 - mblr))
20012056:	8d5d                	or	a0,a0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_muladd.c:122
		b = (m[mlen] << (15 - mblr)) | (m[mlen - 1] >> mblr);
20012058:	015beab3          	or	s5,s7,s5
2001205c:	b5e9                	j	20011f26 <br_i15_muladd_small+0xac>

2001205e <br_i15_to_monty>:
br_i15_to_monty():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:30
#include "inner.h"

/* see inner.h */
void
br_i15_to_monty(uint16_t *x, const uint16_t *m)
{
2001205e:	1141                	addi	sp,sp,-16
20012060:	c422                	sw	s0,8(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:33
	unsigned k;

	for (k = (m[0] + 15) >> 4; k > 0; k --) {
20012062:	0005d403          	lhu	s0,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:30
{
20012066:	c226                	sw	s1,4(sp)
20012068:	c04a                	sw	s2,0(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:33
	for (k = (m[0] + 15) >> 4; k > 0; k --) {
2001206a:	043d                	addi	s0,s0,15
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:30
{
2001206c:	c606                	sw	ra,12(sp)
2001206e:	892a                	mv	s2,a0
20012070:	84ae                	mv	s1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:33
	for (k = (m[0] + 15) >> 4; k > 0; k --) {
20012072:	8411                	srai	s0,s0,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:33 (discriminator 1)
20012074:	e419                	bnez	s0,20012082 <br_i15_to_monty+0x24>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:36
		br_i15_muladd_small(x, 0, m);
	}
}
20012076:	40b2                	lw	ra,12(sp)
20012078:	4422                	lw	s0,8(sp)
2001207a:	4492                	lw	s1,4(sp)
2001207c:	4902                	lw	s2,0(sp)
2001207e:	0141                	addi	sp,sp,16
20012080:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:34 (discriminator 3)
		br_i15_muladd_small(x, 0, m);
20012082:	8626                	mv	a2,s1
20012084:	4581                	li	a1,0
20012086:	854a                	mv	a0,s2
20012088:	3bcd                	jal	20011e7a <br_i15_muladd_small>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_tmont.c:33 (discriminator 3)
	for (k = (m[0] + 15) >> 4; k > 0; k --) {
2001208a:	147d                	addi	s0,s0,-1
2001208c:	b7e5                	j	20012074 <br_i15_to_monty+0x16>

2001208e <br_i15_from_monty>:
br_i15_from_monty():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:33
void
br_i15_from_monty(uint16_t *x, const uint16_t *m, uint16_t m0i)
{
	size_t len, u, v;

	len = (m[0] + 15) >> 4;
2001208e:	0005d703          	lhu	a4,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:30
{
20012092:	1101                	addi	sp,sp,-32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:37
	for (u = 0; u < len; u ++) {
		uint32_t f, cc;

		f = MUL15(x[1], m0i) & 0x7FFF;
20012094:	68a1                	lui	a7,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:33
	len = (m[0] + 15) >> 4;
20012096:	073d                	addi	a4,a4,15
20012098:	8711                	srai	a4,a4,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:48
			cc = z >> 15;
			if (v != 0) {
				x[v] = z & 0x7FFF;
			}
		}
		x[len] = cc;
2001209a:	00171e13          	slli	t3,a4,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:30
{
2001209e:	cc22                	sw	s0,24(sp)
200120a0:	ce06                	sw	ra,28(sp)
200120a2:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:48
		x[len] = cc;
200120a4:	9e2a                	add	t3,t3,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:34
	for (u = 0; u < len; u ++) {
200120a6:	4301                	li	t1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:37
		f = MUL15(x[1], m0i) & 0x7FFF;
200120a8:	18fd                	addi	a7,a7,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:34 (discriminator 1)
	for (u = 0; u < len; u ++) {
200120aa:	00e31e63          	bne	t1,a4,200120c6 <br_i15_from_monty+0x38>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:58
	 * value in x[] is indeed greater than or equal to that of m[],
	 * which is why we must do two calls (first call computes the
	 * carry, second call performs the subtraction only if the carry
	 * is 0).
	 */
	br_i15_sub(x, m, NOT(br_i15_sub(x, m, 0)));
200120ae:	4601                	li	a2,0
200120b0:	8522                	mv	a0,s0
200120b2:	c62e                	sw	a1,12(sp)
200120b4:	3ba5                	jal	20011e2c <br_i15_sub>
200120b6:	00154613          	xori	a2,a0,1
200120ba:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:59
}
200120bc:	4462                	lw	s0,24(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:58
	br_i15_sub(x, m, NOT(br_i15_sub(x, m, 0)));
200120be:	45b2                	lw	a1,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:59
}
200120c0:	40f2                	lw	ra,28(sp)
200120c2:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:58
	br_i15_sub(x, m, NOT(br_i15_sub(x, m, 0)));
200120c4:	b3a5                	j	20011e2c <br_i15_sub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:37
		f = MUL15(x[1], m0i) & 0x7FFF;
200120c6:	00245503          	lhu	a0,2(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:38
		cc = 0;
200120ca:	4e81                	li	t4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:39
		for (v = 0; v < len; v ++) {
200120cc:	4681                	li	a3,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:37
		f = MUL15(x[1], m0i) & 0x7FFF;
200120ce:	02c50533          	mul	a0,a0,a2
200120d2:	01157533          	and	a0,a0,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:42
			z = (uint32_t)x[v + 1] + MUL15(f, m[v + 1]) + cc;
200120d6:	00168f13          	addi	t5,a3,1 # 8001 <__heap_size+0x7801>
200120da:	001f1813          	slli	a6,t5,0x1
200120de:	010587b3          	add	a5,a1,a6
200120e2:	0007d783          	lhu	a5,0(a5)
200120e6:	9822                	add	a6,a6,s0
200120e8:	00085f83          	lhu	t6,0(a6)
200120ec:	02a787b3          	mul	a5,a5,a0
200120f0:	97fe                	add	a5,a5,t6
200120f2:	97f6                	add	a5,a5,t4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:43
			cc = z >> 15;
200120f4:	00f7de93          	srli	t4,a5,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:44
			if (v != 0) {
200120f8:	ce81                	beqz	a3,20012110 <br_i15_from_monty+0x82>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:45
				x[v] = z & 0x7FFF;
200120fa:	0117f7b3          	and	a5,a5,a7
200120fe:	fef81f23          	sh	a5,-2(a6)
20012102:	86fa                	mv	a3,t5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:39 (discriminator 1)
		for (v = 0; v < len; v ++) {
20012104:	fce6e9e3          	bltu	a3,a4,200120d6 <br_i15_from_monty+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:48 (discriminator 2)
		x[len] = cc;
20012108:	01de1023          	sh	t4,0(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_fmont.c:34 (discriminator 2)
	for (u = 0; u < len; u ++) {
2001210c:	0305                	addi	t1,t1,1
2001210e:	bf71                	j	200120aa <br_i15_from_monty+0x1c>
20012110:	4685                	li	a3,1
20012112:	bfcd                	j	20012104 <br_i15_from_monty+0x76>

20012114 <br_i15_montymul>:
br_i15_montymul():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:31

/* see inner.h */
void
br_i15_montymul(uint16_t *d, const uint16_t *x, const uint16_t *y,
	const uint16_t *m, uint16_t m0i)
{
20012114:	7179                	addi	sp,sp,-48
20012116:	ca56                	sw	s5,20(sp)
20012118:	8aae                	mv	s5,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:35
	size_t len, len4, u, v;
	uint32_t dh;

	len = (m[0] + 15) >> 4;
2001211a:	0006d583          	lhu	a1,0(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:31
{
2001211e:	ce4e                	sw	s3,28(sp)
20012120:	d422                	sw	s0,40(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:35
	len = (m[0] + 15) >> 4;
20012122:	00f58993          	addi	s3,a1,15
20012126:	4049d993          	srai	s3,s3,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:31
{
2001212a:	842a                	mv	s0,a0
2001212c:	d226                	sw	s1,36(sp)
2001212e:	d04a                	sw	s2,32(sp)
20012130:	cc52                	sw	s4,24(sp)
20012132:	c85a                	sw	s6,16(sp)
20012134:	c65e                	sw	s7,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:36
	len4 = len & ~(size_t)3;
20012136:	ffc9fb13          	andi	s6,s3,-4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:31
{
2001213a:	8bba                	mv	s7,a4
2001213c:	d606                	sw	ra,44(sp)
2001213e:	8a32                	mv	s4,a2
20012140:	84b6                	mv	s1,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:37
	br_i15_zero(d, m[0]);
20012142:	f24ff0ef          	jal	ra,20011866 <br_i15_zero>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:170
			r = z >> 15;
			d[v + 0] = z & 0x7FFF;
		}

		zh = dh + r;
		d[len] = zh & 0x7FFF;
20012146:	00199593          	slli	a1,s3,0x1
2001214a:	001b1713          	slli	a4,s6,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:43
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
2001214e:	6321                	lui	t1,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:170
		d[len] = zh & 0x7FFF;
20012150:	95a2                	add	a1,a1,s0
20012152:	8fda                	mv	t6,s6
20012154:	9722                	add	a4,a4,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:38
	dh = 0;
20012156:	4901                	li	s2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:39
	for (u = 0; u < len; u ++) {
20012158:	4f01                	li	t5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:43
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
2001215a:	137d                	addi	t1,t1,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:39 (discriminator 1)
	for (u = 0; u < len; u ++) {
2001215c:	033f1f63          	bne	t5,s3,2001219a <br_i15_montymul+0x86>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:177
	}

	/*
	 * Restore the bit length (it was overwritten in the loop above).
	 */
	d[0] = m[0];
20012160:	0004d783          	lhu	a5,0(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:183

	/*
	 * d[] may be greater than m[], but it is still lower than twice
	 * the modulus.
	 */
	br_i15_sub(d, m, NEQ(dh, 0) | NOT(br_i15_sub(d, m, 0)));
20012164:	85a6                	mv	a1,s1
20012166:	4601                	li	a2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:177
	d[0] = m[0];
20012168:	00f41023          	sh	a5,0(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:183
	br_i15_sub(d, m, NEQ(dh, 0) | NOT(br_i15_sub(d, m, 0)));
2001216c:	8522                	mv	a0,s0
2001216e:	397d                	jal	20011e2c <br_i15_sub>
NEQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:796
    return (q | -q) >> 31;
20012170:	41200933          	neg	s2,s2
20012174:	01f95913          	srli	s2,s2,0x1f
NOT():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:763
    return ctl ^ 1;
20012178:	00154613          	xori	a2,a0,1
br_i15_montymul():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:183
2001217c:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:184
}
2001217e:	5422                	lw	s0,40(sp)
20012180:	50b2                	lw	ra,44(sp)
20012182:	49f2                	lw	s3,28(sp)
20012184:	4a62                	lw	s4,24(sp)
20012186:	4ad2                	lw	s5,20(sp)
20012188:	4b42                	lw	s6,16(sp)
2001218a:	4bb2                	lw	s7,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:183
	br_i15_sub(d, m, NEQ(dh, 0) | NOT(br_i15_sub(d, m, 0)));
2001218c:	00c96633          	or	a2,s2,a2
20012190:	85a6                	mv	a1,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:184
}
20012192:	5902                	lw	s2,32(sp)
20012194:	5492                	lw	s1,36(sp)
20012196:	6145                	addi	sp,sp,48
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:183
	br_i15_sub(d, m, NEQ(dh, 0) | NOT(br_i15_sub(d, m, 0)));
20012198:	b951                	j	20011e2c <br_i15_sub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:42
		xu = x[u + 1];
2001219a:	0f05                	addi	t5,t5,1
2001219c:	001f1793          	slli	a5,t5,0x1
200121a0:	97d6                	add	a5,a5,s5
200121a2:	0007d683          	lhu	a3,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:43
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
200121a6:	002a5783          	lhu	a5,2(s4)
200121aa:	00245603          	lhu	a2,2(s0)
200121ae:	8e22                	mv	t3,s0
200121b0:	02d787b3          	mul	a5,a5,a3
200121b4:	00248513          	addi	a0,s1,2
200121b8:	002a0e93          	addi	t4,s4,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:138
		r = 0;
200121bc:	4281                	li	t0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:43
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
200121be:	97b2                	add	a5,a5,a2
200121c0:	0067f7b3          	and	a5,a5,t1
200121c4:	037787b3          	mul	a5,a5,s7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:139
		for (v = 0; v < len4; v += 4) {
200121c8:	4601                	li	a2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:43
		f = MUL15((d[1] + MUL15(x[u + 1], y[1])) & 0x7FFF, m0i)
200121ca:	0067f7b3          	and	a5,a5,t1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:139 (discriminator 1)
		for (v = 0; v < len4; v += 4) {
200121ce:	0e21                	addi	t3,t3,8
200121d0:	01666f63          	bltu	a2,s6,200121ee <br_i15_montymul+0xda>
200121d4:	883a                	mv	a6,a4
200121d6:	857e                	mv	a0,t6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:160 (discriminator 1)
		for (; v < len; v ++) {
200121d8:	0809                	addi	a6,a6,2
200121da:	0b356a63          	bltu	a0,s3,2001228e <br_i15_montymul+0x17a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:169 (discriminator 2)
		zh = dh + r;
200121de:	9916                	add	s2,s2,t0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:170 (discriminator 2)
		d[len] = zh & 0x7FFF;
200121e0:	006977b3          	and	a5,s2,t1
200121e4:	00f59023          	sh	a5,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:171 (discriminator 2)
		dh = zh >> 15;
200121e8:	00f95913          	srli	s2,s2,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:39 (discriminator 2)
	for (u = 0; u < len; u ++) {
200121ec:	bf85                	j	2001215c <br_i15_montymul+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:142 (discriminator 3)
			z = d[v + 1] + MUL15(xu, y[v + 1])
200121ee:	ffae5803          	lhu	a6,-6(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:143 (discriminator 3)
				+ MUL15(f, m[v + 1]) + r;
200121f2:	00055883          	lhu	a7,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:154 (discriminator 3)
			z = d[v + 4] + MUL15(xu, y[v + 4])
200121f6:	0611                	addi	a2,a2,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:142 (discriminator 3)
			z = d[v + 1] + MUL15(xu, y[v + 1])
200121f8:	92c2                	add	t0,t0,a6
200121fa:	000ed803          	lhu	a6,0(t4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:143 (discriminator 3)
				+ MUL15(f, m[v + 1]) + r;
200121fe:	02f888b3          	mul	a7,a7,a5
20012202:	0521                	addi	a0,a0,8
20012204:	0ea1                	addi	t4,t4,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:142 (discriminator 3)
			z = d[v + 1] + MUL15(xu, y[v + 1])
20012206:	02d80833          	mul	a6,a6,a3
2001220a:	9896                	add	a7,a7,t0
2001220c:	98c2                	add	a7,a7,a6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:144 (discriminator 3)
			r = z >> 15;
2001220e:	00f8d293          	srli	t0,a7,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:145 (discriminator 3)
			d[v + 0] = z & 0x7FFF;
20012212:	0068f8b3          	and	a7,a7,t1
20012216:	ff1e1c23          	sh	a7,-8(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:147 (discriminator 3)
				+ MUL15(f, m[v + 2]) + r;
2001221a:	ffa55803          	lhu	a6,-6(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:146 (discriminator 3)
			z = d[v + 2] + MUL15(xu, y[v + 2])
2001221e:	ffaed883          	lhu	a7,-6(t4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:147 (discriminator 3)
				+ MUL15(f, m[v + 2]) + r;
20012222:	02f80833          	mul	a6,a6,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:146 (discriminator 3)
			z = d[v + 2] + MUL15(xu, y[v + 2])
20012226:	02d888b3          	mul	a7,a7,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:147 (discriminator 3)
				+ MUL15(f, m[v + 2]) + r;
2001222a:	9846                	add	a6,a6,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:146 (discriminator 3)
			z = d[v + 2] + MUL15(xu, y[v + 2])
2001222c:	ffce5883          	lhu	a7,-4(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:147 (discriminator 3)
				+ MUL15(f, m[v + 2]) + r;
20012230:	9846                	add	a6,a6,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:146 (discriminator 3)
			z = d[v + 2] + MUL15(xu, y[v + 2])
20012232:	9816                	add	a6,a6,t0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:148 (discriminator 3)
			r = z >> 15;
20012234:	00f85293          	srli	t0,a6,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:149 (discriminator 3)
			d[v + 1] = z & 0x7FFF;
20012238:	00687833          	and	a6,a6,t1
2001223c:	ff0e1d23          	sh	a6,-6(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:151 (discriminator 3)
				+ MUL15(f, m[v + 3]) + r;
20012240:	ffc55883          	lhu	a7,-4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:150 (discriminator 3)
			z = d[v + 3] + MUL15(xu, y[v + 3])
20012244:	ffced803          	lhu	a6,-4(t4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:151 (discriminator 3)
				+ MUL15(f, m[v + 3]) + r;
20012248:	02f888b3          	mul	a7,a7,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:150 (discriminator 3)
			z = d[v + 3] + MUL15(xu, y[v + 3])
2001224c:	02d80833          	mul	a6,a6,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:151 (discriminator 3)
				+ MUL15(f, m[v + 3]) + r;
20012250:	98c2                	add	a7,a7,a6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:150 (discriminator 3)
			z = d[v + 3] + MUL15(xu, y[v + 3])
20012252:	ffee5803          	lhu	a6,-2(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:151 (discriminator 3)
				+ MUL15(f, m[v + 3]) + r;
20012256:	98c2                	add	a7,a7,a6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:150 (discriminator 3)
			z = d[v + 3] + MUL15(xu, y[v + 3])
20012258:	9896                	add	a7,a7,t0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:152 (discriminator 3)
			r = z >> 15;
2001225a:	00f8d293          	srli	t0,a7,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:153 (discriminator 3)
			d[v + 2] = z & 0x7FFF;
2001225e:	0068f8b3          	and	a7,a7,t1
20012262:	ff1e1e23          	sh	a7,-4(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:155 (discriminator 3)
				+ MUL15(f, m[v + 4]) + r;
20012266:	ffe55803          	lhu	a6,-2(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:154 (discriminator 3)
			z = d[v + 4] + MUL15(xu, y[v + 4])
2001226a:	ffeed883          	lhu	a7,-2(t4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:155 (discriminator 3)
				+ MUL15(f, m[v + 4]) + r;
2001226e:	02f80833          	mul	a6,a6,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:154 (discriminator 3)
			z = d[v + 4] + MUL15(xu, y[v + 4])
20012272:	02d888b3          	mul	a7,a7,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:155 (discriminator 3)
				+ MUL15(f, m[v + 4]) + r;
20012276:	9846                	add	a6,a6,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:154 (discriminator 3)
			z = d[v + 4] + MUL15(xu, y[v + 4])
20012278:	000e5883          	lhu	a7,0(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:155 (discriminator 3)
				+ MUL15(f, m[v + 4]) + r;
2001227c:	9846                	add	a6,a6,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:154 (discriminator 3)
			z = d[v + 4] + MUL15(xu, y[v + 4])
2001227e:	9816                	add	a6,a6,t0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:156 (discriminator 3)
			r = z >> 15;
20012280:	00f85293          	srli	t0,a6,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:157 (discriminator 3)
			d[v + 3] = z & 0x7FFF;
20012284:	00687833          	and	a6,a6,t1
20012288:	ff0e1f23          	sh	a6,-2(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:139 (discriminator 3)
		for (v = 0; v < len4; v += 4) {
2001228c:	b789                	j	200121ce <br_i15_montymul+0xba>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:163 (discriminator 2)
			z = d[v + 1] + MUL15(xu, y[v + 1])
2001228e:	0505                	addi	a0,a0,1
20012290:	00085883          	lhu	a7,0(a6)
20012294:	00151e13          	slli	t3,a0,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:164 (discriminator 2)
				+ MUL15(f, m[v + 1]) + r;
20012298:	01c48633          	add	a2,s1,t3
2001229c:	00065603          	lhu	a2,0(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:163 (discriminator 2)
			z = d[v + 1] + MUL15(xu, y[v + 1])
200122a0:	9e52                	add	t3,t3,s4
200122a2:	92c6                	add	t0,t0,a7
200122a4:	000e5883          	lhu	a7,0(t3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:164 (discriminator 2)
				+ MUL15(f, m[v + 1]) + r;
200122a8:	02f60633          	mul	a2,a2,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:163 (discriminator 2)
			z = d[v + 1] + MUL15(xu, y[v + 1])
200122ac:	02d888b3          	mul	a7,a7,a3
200122b0:	9616                	add	a2,a2,t0
200122b2:	9646                	add	a2,a2,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:165 (discriminator 2)
			r = z >> 15;
200122b4:	00f65293          	srli	t0,a2,0xf
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:166 (discriminator 2)
			d[v + 0] = z & 0x7FFF;
200122b8:	00667633          	and	a2,a2,t1
200122bc:	fec81f23          	sh	a2,-2(a6)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_montmul.c:160 (discriminator 2)
		for (; v < len; v ++) {
200122c0:	bf21                	j	200121d8 <br_i15_montymul+0xc4>

200122c2 <br_ccopy>:
br_ccopy():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:36
	unsigned char *d;
	const unsigned char *s;

	d = dst;
	s = src;
	while (len -- > 0) {
200122c2:	96b2                	add	a3,a3,a2
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
    return y ^ (-ctl & (x ^ y));
200122c4:	40a00533          	neg	a0,a0
br_ccopy():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:36
200122c8:	00d61363          	bne	a2,a3,200122ce <br_ccopy+0xc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:44
		x = *s ++;
		y = *d;
		*d = MUX(ctl, x, y);
		d ++;
	}
}
200122cc:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:40
		y = *d;
200122ce:	0005c703          	lbu	a4,0(a1)
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
200122d2:	00064783          	lbu	a5,0(a2)
br_ccopy():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:39
		x = *s ++;
200122d6:	0605                	addi	a2,a2,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:42
		d ++;
200122d8:	0585                	addi	a1,a1,1
MUX():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:772
200122da:	8fb9                	xor	a5,a5,a4
200122dc:	8fe9                	and	a5,a5,a0
200122de:	8fb9                	xor	a5,a5,a4
br_ccopy():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:41
		*d = MUX(ctl, x, y);
200122e0:	fef58fa3          	sb	a5,-1(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/ccopy.c:42
		d ++;
200122e4:	b7d5                	j	200122c8 <br_ccopy+0x6>

200122e6 <br_i15_modpow_opt>:
br_i15_modpow_opt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:32
/* see inner.h */
uint32_t
br_i15_modpow_opt(uint16_t *x,
	const unsigned char *e, size_t elen,
	const uint16_t *m, uint16_t m0i, uint16_t *tmp, size_t twlen)
{
200122e6:	715d                	addi	sp,sp,-80
200122e8:	c0ca                	sw	s2,64(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:42
	int acc_len, win_len;

	/*
	 * Get modulus size.
	 */
	mwlen = (m[0] + 31) >> 4;
200122ea:	0006d903          	lhu	s2,0(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:32
{
200122ee:	dc52                	sw	s4,56(sp)
200122f0:	8a3e                	mv	s4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:42
	mwlen = (m[0] + 31) >> 4;
200122f2:	097d                	addi	s2,s2,31
200122f4:	40495913          	srai	s2,s2,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:44
	mlen = mwlen * sizeof m[0];
	mwlen += (mwlen & 1);
200122f8:	00190793          	addi	a5,s2,1
200122fc:	9bf9                	andi	a5,a5,-2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:32
{
200122fe:	da56                	sw	s5,52(sp)
20012300:	c686                	sw	ra,76(sp)
20012302:	c4a2                	sw	s0,72(sp)
20012304:	c2a6                	sw	s1,68(sp)
20012306:	de4e                	sw	s3,60(sp)
20012308:	d85a                	sw	s6,48(sp)
2001230a:	d65e                	sw	s7,44(sp)
2001230c:	d462                	sw	s8,40(sp)
2001230e:	d266                	sw	s9,36(sp)
20012310:	d06a                	sw	s10,32(sp)
20012312:	ce6e                	sw	s11,28(sp)
20012314:	c22e                	sw	a1,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:54
	 * Compute possible window size, with a maximum of 5 bits.
	 * When the window has size 1 bit, we use a specific code
	 * that requires only two temporaries. Otherwise, for a
	 * window of k bits, we need 2^k+1 temporaries.
	 */
	if (twlen < (mwlen << 1)) {
20012316:	00179a93          	slli	s5,a5,0x1
2001231a:	1b586b63          	bltu	a6,s5,200124d0 <br_i15_modpow_opt+0x1ea>
2001231e:	8bba                	mv	s7,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:58
		return 0;
	}
	for (win_len = 5; win_len > 1; win_len --) {
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
20012320:	02100713          	li	a4,33
20012324:	02e78733          	mul	a4,a5,a4
20012328:	842a                	mv	s0,a0
2001232a:	8c32                	mv	s8,a2
2001232c:	84b6                	mv	s1,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:57
	for (win_len = 5; win_len > 1; win_len --) {
2001232e:	4995                	li	s3,5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:58
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
20012330:	02e87563          	bgeu	a6,a4,2001235a <br_i15_modpow_opt+0x74>
20012334:	4745                	li	a4,17
20012336:	02e78733          	mul	a4,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:57
	for (win_len = 5; win_len > 1; win_len --) {
2001233a:	4991                	li	s3,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:58
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
2001233c:	00e87f63          	bgeu	a6,a4,2001235a <br_i15_modpow_opt+0x74>
20012340:	4725                	li	a4,9
20012342:	02e78733          	mul	a4,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:57
	for (win_len = 5; win_len > 1; win_len --) {
20012346:	498d                	li	s3,3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:58
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
20012348:	00e87963          	bgeu	a6,a4,2001235a <br_i15_modpow_opt+0x74>
2001234c:	4715                	li	a4,5
2001234e:	02e787b3          	mul	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:57
	for (win_len = 5; win_len > 1; win_len --) {
20012352:	4989                	li	s3,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:58
		if ((((uint32_t)1 << win_len) + 1) * mwlen <= twlen) {
20012354:	00f87363          	bgeu	a6,a5,2001235a <br_i15_modpow_opt+0x74>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:57
	for (win_len = 5; win_len > 1; win_len --) {
20012358:	4985                	li	s3,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:66
	}

	/*
	 * Everything is done in Montgomery representation.
	 */
	br_i15_to_monty(x, m);
2001235a:	85a6                	mv	a1,s1
2001235c:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:73
	/*
	 * Compute window contents. If the window has size one bit only,
	 * then t2 is set to x; otherwise, t2[0] is left untouched, and
	 * t2[k] is set to x^k (for k >= 1).
	 */
	if (win_len == 1) {
2001235e:	4d05                	li	s10,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:43
	mlen = mwlen * sizeof m[0];
20012360:	0906                	slli	s2,s2,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:46
	t2 = tmp + mwlen;
20012362:	015a0cb3          	add	s9,s4,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:66
	br_i15_to_monty(x, m);
20012366:	39e5                	jal	2001205e <br_i15_to_monty>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:73
	if (win_len == 1) {
20012368:	07a99363          	bne	s3,s10,200123ce <br_i15_modpow_opt+0xe8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:74
		memcpy(t2, x, mlen);
2001236c:	864a                	mv	a2,s2
2001236e:	85a2                	mv	a1,s0
20012370:	8566                	mv	a0,s9
20012372:	281000ef          	jal	ra,20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:89
	/*
	 * We need to set x to 1, in Montgomery representation. This can
	 * be done efficiently by setting the high word to 1, then doing
	 * one word-sized shift.
	 */
	br_i15_zero(x, m[0]);
20012376:	0004d583          	lhu	a1,0(s1)
2001237a:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:98
	/*
	 * We process bits from most to least significant. At each
	 * loop iteration, we have acc_len bits in acc.
	 */
	acc = 0;
	acc_len = 0;
2001237c:	4d81                	li	s11,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:89
	br_i15_zero(x, m[0]);
2001237e:	ce8ff0ef          	jal	ra,20011866 <br_i15_zero>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:90
	x[(m[0] + 15) >> 4] = 1;
20012382:	0004d783          	lhu	a5,0(s1)
20012386:	4705                	li	a4,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:91
	br_i15_muladd_small(x, 0, m);
20012388:	8626                	mv	a2,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:90
	x[(m[0] + 15) >> 4] = 1;
2001238a:	07bd                	addi	a5,a5,15
2001238c:	8791                	srai	a5,a5,0x4
2001238e:	0786                	slli	a5,a5,0x1
20012390:	97a2                	add	a5,a5,s0
20012392:	00e79023          	sh	a4,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:91
	br_i15_muladd_small(x, 0, m);
20012396:	4581                	li	a1,0
20012398:	8522                	mv	a0,s0
2001239a:	34c5                	jal	20011e7a <br_i15_muladd_small>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:97
	acc = 0;
2001239c:	4d01                	li	s10,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:99
	while (acc_len > 0 || elen > 0) {
2001239e:	05b04d63          	bgtz	s11,200123f8 <br_i15_modpow_opt+0x112>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:99 (discriminator 1)
200123a2:	060c1163          	bnez	s8,20012404 <br_i15_modpow_opt+0x11e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:158
	}

	/*
	 * Convert back from Montgomery representation, and exit.
	 */
	br_i15_from_monty(x, m, m0i);
200123a6:	8522                	mv	a0,s0
200123a8:	865e                	mv	a2,s7
200123aa:	85a6                	mv	a1,s1
200123ac:	31cd                	jal	2001208e <br_i15_from_monty>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:159
	return 1;
200123ae:	4505                	li	a0,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:160
}
200123b0:	40b6                	lw	ra,76(sp)
200123b2:	4426                	lw	s0,72(sp)
200123b4:	4496                	lw	s1,68(sp)
200123b6:	4906                	lw	s2,64(sp)
200123b8:	59f2                	lw	s3,60(sp)
200123ba:	5a62                	lw	s4,56(sp)
200123bc:	5ad2                	lw	s5,52(sp)
200123be:	5b42                	lw	s6,48(sp)
200123c0:	5bb2                	lw	s7,44(sp)
200123c2:	5c22                	lw	s8,40(sp)
200123c4:	5c92                	lw	s9,36(sp)
200123c6:	5d02                	lw	s10,32(sp)
200123c8:	4df2                	lw	s11,28(sp)
200123ca:	6161                	addi	sp,sp,80
200123cc:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:76
		memcpy(t2 + mwlen, x, mlen);
200123ce:	015c8b33          	add	s6,s9,s5
200123d2:	864a                	mv	a2,s2
200123d4:	85a2                	mv	a1,s0
200123d6:	855a                	mv	a0,s6
200123d8:	21b000ef          	jal	ra,20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:78
		for (u = 2; u < ((unsigned)1 << win_len); u ++) {
200123dc:	013d1d33          	sll	s10,s10,s3
200123e0:	4d89                	li	s11,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:79 (discriminator 3)
			br_i15_montymul(base + mwlen, base, x, m, m0i);
200123e2:	85da                	mv	a1,s6
200123e4:	9b56                	add	s6,s6,s5
200123e6:	875e                	mv	a4,s7
200123e8:	86a6                	mv	a3,s1
200123ea:	8622                	mv	a2,s0
200123ec:	855a                	mv	a0,s6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:78 (discriminator 3)
		for (u = 2; u < ((unsigned)1 << win_len); u ++) {
200123ee:	0d85                	addi	s11,s11,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:79 (discriminator 3)
			br_i15_montymul(base + mwlen, base, x, m, m0i);
200123f0:	3315                	jal	20012114 <br_i15_montymul>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:78 (discriminator 3)
		for (u = 2; u < ((unsigned)1 << win_len); u ++) {
200123f2:	ffbd18e3          	bne	s10,s11,200123e2 <br_i15_modpow_opt+0xfc>
200123f6:	b741                	j	20012376 <br_i15_modpow_opt+0x90>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:107
		if (acc_len < win_len) {
200123f8:	884e                	mv	a6,s3
200123fa:	033dd063          	bge	s11,s3,2001241a <br_i15_modpow_opt+0x134>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:108
			if (elen > 0) {
200123fe:	886e                	mv	a6,s11
20012400:	000c0d63          	beqz	s8,2001241a <br_i15_modpow_opt+0x134>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:109
				acc = (acc << 8) | *e ++;
20012404:	4792                	lw	a5,4(sp)
20012406:	0d22                	slli	s10,s10,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:110
				elen --;
20012408:	1c7d                	addi	s8,s8,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:109
				acc = (acc << 8) | *e ++;
2001240a:	0007c703          	lbu	a4,0(a5)
2001240e:	0785                	addi	a5,a5,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:111
				acc_len += 8;
20012410:	0da1                	addi	s11,s11,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:109
				acc = (acc << 8) | *e ++;
20012412:	01a76d33          	or	s10,a4,s10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:111
				acc_len += 8;
20012416:	884e                	mv	a6,s3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:109
				acc = (acc << 8) | *e ++;
20012418:	c23e                	sw	a5,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:116
		bits = (acc >> (acc_len - k)) & (((uint32_t)1 << k) - 1);
2001241a:	57fd                	li	a5,-1
2001241c:	410d8db3          	sub	s11,s11,a6
20012420:	01079b33          	sll	s6,a5,a6
20012424:	fffb4b13          	not	s6,s6
20012428:	01bd5533          	srl	a0,s10,s11
2001242c:	00ab7b33          	and	s6,s6,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:122
		for (i = 0; i < k; i ++) {
20012430:	4881                	li	a7,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:123 (discriminator 3)
			br_i15_montymul(t1, x, x, m, m0i);
20012432:	875e                	mv	a4,s7
20012434:	86a6                	mv	a3,s1
20012436:	8622                	mv	a2,s0
20012438:	85a2                	mv	a1,s0
2001243a:	8552                	mv	a0,s4
2001243c:	c646                	sw	a7,12(sp)
2001243e:	c442                	sw	a6,8(sp)
20012440:	39d1                	jal	20012114 <br_i15_montymul>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:124 (discriminator 3)
			memcpy(x, t1, mlen);
20012442:	864a                	mv	a2,s2
20012444:	85d2                	mv	a1,s4
20012446:	8522                	mv	a0,s0
20012448:	1ab000ef          	jal	ra,20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:122 (discriminator 3)
		for (i = 0; i < k; i ++) {
2001244c:	48b2                	lw	a7,12(sp)
2001244e:	4822                	lw	a6,8(sp)
20012450:	0885                	addi	a7,a7,1
20012452:	ff08c0e3          	blt	a7,a6,20012432 <br_i15_modpow_opt+0x14c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:133
		if (win_len > 1) {
20012456:	4785                	li	a5,1
20012458:	02f99263          	bne	s3,a5,2001247c <br_i15_modpow_opt+0x196>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:151
		br_i15_montymul(t1, x, t2, m, m0i);
2001245c:	86a6                	mv	a3,s1
2001245e:	8666                	mv	a2,s9
20012460:	85a2                	mv	a1,s0
20012462:	8552                	mv	a0,s4
20012464:	875e                	mv	a4,s7
20012466:	317d                	jal	20012114 <br_i15_montymul>
NEQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:796
    return (q | -q) >> 31;
20012468:	41600533          	neg	a0,s6
2001246c:	01656533          	or	a0,a0,s6
br_i15_modpow_opt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:152
		CCOPY(NEQ(bits, 0), x, t1, mlen);
20012470:	86ca                	mv	a3,s2
20012472:	8652                	mv	a2,s4
20012474:	85a2                	mv	a1,s0
20012476:	817d                	srli	a0,a0,0x1f
20012478:	35a9                	jal	200122c2 <br_ccopy>
2001247a:	b715                	j	2001239e <br_i15_modpow_opt+0xb8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:134
			br_i15_zero(t2, m[0]);
2001247c:	0004d583          	lhu	a1,0(s1)
20012480:	8566                	mv	a0,s9
20012482:	c442                	sw	a6,8(sp)
20012484:	be2ff0ef          	jal	ra,20011866 <br_i15_zero>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:136
			for (u = 1; u < ((uint32_t)1 << k); u ++) {
20012488:	4822                	lw	a6,8(sp)
2001248a:	4785                	li	a5,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:135
			base = t2 + mwlen;
2001248c:	015c8533          	add	a0,s9,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:136
			for (u = 1; u < ((uint32_t)1 << k); u ++) {
20012490:	01079833          	sll	a6,a5,a6
20012494:	4585                	li	a1,1
EQ():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:783
    q = x ^ y;
20012496:	00bb46b3          	xor	a3,s6,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:784
    return NOT((q | -q) >> 31);
2001249a:	40d00733          	neg	a4,a3
2001249e:	8f55                	or	a4,a4,a3
200124a0:	837d                	srli	a4,a4,0x1f
br_i15_modpow_opt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:139
				mask = -EQ(u, bits);
200124a2:	177d                	addi	a4,a4,-1
200124a4:	4689                	li	a3,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:141 (discriminator 3)
					t2[v] |= mask & base[v];
200124a6:	00d50633          	add	a2,a0,a3
200124aa:	00dc88b3          	add	a7,s9,a3
200124ae:	00065603          	lhu	a2,0(a2)
200124b2:	0008d303          	lhu	t1,0(a7) # 8000 <__heap_size+0x7800>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:140 (discriminator 3)
				for (v = 1; v < mwlen; v ++) {
200124b6:	0689                	addi	a3,a3,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:141 (discriminator 3)
					t2[v] |= mask & base[v];
200124b8:	8e79                	and	a2,a2,a4
200124ba:	00666633          	or	a2,a2,t1
200124be:	00c89023          	sh	a2,0(a7)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:140 (discriminator 3)
				for (v = 1; v < mwlen; v ++) {
200124c2:	feda92e3          	bne	s5,a3,200124a6 <br_i15_modpow_opt+0x1c0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:136 (discriminator 2)
			for (u = 1; u < ((uint32_t)1 << k); u ++) {
200124c6:	0585                	addi	a1,a1,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:143 (discriminator 2)
				base += mwlen;
200124c8:	9556                	add	a0,a0,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:136 (discriminator 2)
			for (u = 1; u < ((uint32_t)1 << k); u ++) {
200124ca:	fd05e6e3          	bltu	a1,a6,20012496 <br_i15_modpow_opt+0x1b0>
200124ce:	b779                	j	2001245c <br_i15_modpow_opt+0x176>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/i15_modpow2.c:55
		return 0;
200124d0:	4501                	li	a0,0
200124d2:	bdf9                	j	200123b0 <br_i15_modpow_opt+0xca>

200124d4 <br_rsa_i15_public>:
br_rsa_i15_public():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:37

/* see bearssl_rsa.h */
uint32_t
br_rsa_i15_public(unsigned char *x, size_t xlen,
	const br_rsa_public_key *pk)
{
200124d4:	7111                	addi	sp,sp,-256
200124d6:	dda2                	sw	s0,248(sp)
200124d8:	d5d2                	sw	s4,232(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:52
	/*
	 * Get the actual length of the modulus, and see if it fits within
	 * our stack buffer. We also check that the length of x[] is valid.
	 */
	n = pk->n;
	nlen = pk->nlen;
200124da:	4240                	lw	s0,4(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:37
{
200124dc:	8a2e                	mv	s4,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:51
	n = pk->n;
200124de:	420c                	lw	a1,0(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:37
{
200124e0:	d7ce                	sw	s3,236(sp)
200124e2:	d1da                	sw	s6,224(sp)
200124e4:	df86                	sw	ra,252(sp)
200124e6:	dba6                	sw	s1,244(sp)
200124e8:	d9ca                	sw	s2,240(sp)
200124ea:	d3d6                	sw	s5,228(sp)
200124ec:	cfde                	sw	s7,220(sp)
200124ee:	cde2                	sw	s8,216(sp)
200124f0:	8b2a                	mv	s6,a0
200124f2:	81010113          	addi	sp,sp,-2032
200124f6:	89b2                	mv	s3,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:53
	while (nlen > 0 && *n == 0) {
200124f8:	c045                	beqz	s0,20012598 <br_rsa_i15_public+0xc4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:53 (discriminator 1)
200124fa:	0005c703          	lbu	a4,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:55 (discriminator 1)
		n ++;
		nlen --;
200124fe:	fff40793          	addi	a5,s0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:53 (discriminator 1)
	while (nlen > 0 && *n == 0) {
20012502:	cb55                	beqz	a4,200125b6 <br_rsa_i15_public+0xe2>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:57
	}
	if (nlen == 0 || nlen > (BR_MAX_RSA_SIZE >> 3) || xlen != nlen) {
20012504:	1ff00713          	li	a4,511
20012508:	0af76a63          	bltu	a4,a5,200125bc <br_rsa_i15_public+0xe8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:57 (discriminator 1)
2001250c:	0b441863          	bne	s0,s4,200125bc <br_rsa_i15_public+0xe8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:60
		return 0;
	}
	z = (long)nlen << 3;
20012510:	00341793          	slli	a5,s0,0x3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:61
	fwlen = 1;
20012514:	4705                	li	a4,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:63
	while (z > 0) {
		z -= 15;
20012516:	17c5                	addi	a5,a5,-15
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:64
		fwlen ++;
20012518:	84ba                	mv	s1,a4
2001251a:	0705                	addi	a4,a4,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:62
	while (z > 0) {
2001251c:	fef04de3          	bgtz	a5,20012516 <br_rsa_i15_public+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:83
	 */
	m = tmp;
	if (((uintptr_t)m & 2) == 0) {
		m ++;
	}
	a = m + fwlen;
20012520:	6c05                	lui	s8,0x1
20012522:	0818                	addi	a4,sp,16
20012524:	8b0c0793          	addi	a5,s8,-1872 # 8b0 <__heap_size+0xb0>
20012528:	97ba                	add	a5,a5,a4
2001252a:	7bfd                	lui	s7,0xfffff
2001252c:	01778933          	add	s2,a5,s7
20012530:	75e90913          	addi	s2,s2,1886
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:89
	t = m + 2 * fwlen;

	/*
	 * Decode the modulus.
	 */
	br_i15_decode(m, n, nlen);
20012534:	8622                	mv	a2,s0
20012536:	854a                	mv	a0,s2
20012538:	e78ff0ef          	jal	ra,20011bb0 <br_i15_decode>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:90
	m0i = br_i15_ninv15(m[1]);
2001253c:	0818                	addi	a4,sp,16
2001253e:	8b0c0793          	addi	a5,s8,-1872
20012542:	97ba                	add	a5,a5,a4
20012544:	97de                	add	a5,a5,s7
20012546:	7607d503          	lhu	a0,1888(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:69
	fwlen += (fwlen & 1);
2001254a:	0489                	addi	s1,s1,2
2001254c:	98f9                	andi	s1,s1,-2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:83
	a = m + fwlen;
2001254e:	00149a93          	slli	s5,s1,0x1
20012552:	9aca                	add	s5,s5,s2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:90
	m0i = br_i15_ninv15(m[1]);
20012554:	c63e                	sw	a5,12(sp)
20012556:	ec8ff0ef          	jal	ra,20011c1e <br_i15_ninv15>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:96

	/*
	 * Note: if m[] is even, then m0i == 0. Otherwise, m0i must be
	 * an odd integer.
	 */
	r = m0i & 1;
2001255a:	00157413          	andi	s0,a0,1
2001255e:	c62a                	sw	a0,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:101

	/*
	 * Decode x[] into a[]; we also check that its value is proper.
	 */
	r &= br_i15_decode_mod(a, x, xlen, m);
20012560:	86ca                	mv	a3,s2
20012562:	8652                	mv	a2,s4
20012564:	85da                	mv	a1,s6
20012566:	8556                	mv	a0,s5
20012568:	eecff0ef          	jal	ra,20011c54 <br_i15_decode_mod>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:106

	/*
	 * Compute the modular exponentiation.
	 */
	br_i15_modpow_opt(a, pk->e, pk->elen, m, m0i, t, TLEN - 2 * fwlen);
2001256c:	00c9a603          	lw	a2,12(s3)
20012570:	0089a583          	lw	a1,8(s3)
20012574:	4732                	lw	a4,12(sp)
20012576:	22800813          	li	a6,552
2001257a:	40980833          	sub	a6,a6,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:84
	t = m + 2 * fwlen;
2001257e:	00249793          	slli	a5,s1,0x2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:101
	r &= br_i15_decode_mod(a, x, xlen, m);
20012582:	8c69                	and	s0,s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:106
	br_i15_modpow_opt(a, pk->e, pk->elen, m, m0i, t, TLEN - 2 * fwlen);
20012584:	0806                	slli	a6,a6,0x1
20012586:	97ca                	add	a5,a5,s2
20012588:	86ca                	mv	a3,s2
2001258a:	8556                	mv	a0,s5
2001258c:	3ba9                	jal	200122e6 <br_i15_modpow_opt>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:111

	/*
	 * Encode the result.
	 */
	br_i15_encode(x, xlen, a);
2001258e:	8656                	mv	a2,s5
20012590:	85d2                	mv	a1,s4
20012592:	855a                	mv	a0,s6
20012594:	801ff0ef          	jal	ra,20011d94 <br_i15_encode>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:113
	return r;
}
20012598:	7f010113          	addi	sp,sp,2032
2001259c:	50fe                	lw	ra,252(sp)
2001259e:	8522                	mv	a0,s0
200125a0:	54de                	lw	s1,244(sp)
200125a2:	546e                	lw	s0,248(sp)
200125a4:	594e                	lw	s2,240(sp)
200125a6:	59be                	lw	s3,236(sp)
200125a8:	5a2e                	lw	s4,232(sp)
200125aa:	5a9e                	lw	s5,228(sp)
200125ac:	5b0e                	lw	s6,224(sp)
200125ae:	4bfe                	lw	s7,220(sp)
200125b0:	4c6e                	lw	s8,216(sp)
200125b2:	6111                	addi	sp,sp,256
200125b4:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:54
		n ++;
200125b6:	0585                	addi	a1,a1,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:55
		nlen --;
200125b8:	843e                	mv	s0,a5
200125ba:	bf3d                	j	200124f8 <br_rsa_i15_public+0x24>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_pub.c:58
		return 0;
200125bc:	4401                	li	s0,0
200125be:	bfe9                	j	20012598 <br_rsa_i15_public+0xc4>

200125c0 <br_rsa_i15_oaep_encrypt>:
br_rsa_i15_oaep_encrypt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:35
	const br_prng_class **rnd, const br_hash_class *dig,
	const void *label, size_t label_len,
	const br_rsa_public_key *pk,
	void *dst, size_t dst_max_len,
	const void *src, size_t src_len)
{
200125c0:	1101                	addi	sp,sp,-32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:38
	size_t dlen;

	dlen = br_rsa_oaep_pad(rnd, dig, label, label_len,
200125c2:	5302                	lw	t1,32(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:35
{
200125c4:	cc22                	sw	s0,24(sp)
200125c6:	ca26                	sw	s1,20(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:38
	dlen = br_rsa_oaep_pad(rnd, dig, label, label_len,
200125c8:	c01a                	sw	t1,0(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:35
{
200125ca:	c84a                	sw	s2,16(sp)
200125cc:	ce06                	sw	ra,28(sp)
200125ce:	893a                	mv	s2,a4
200125d0:	84be                	mv	s1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:38
	dlen = br_rsa_oaep_pad(rnd, dig, label, label_len,
200125d2:	c7cff0ef          	jal	ra,20011a4e <br_rsa_oaep_pad>
200125d6:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:40
		pk, dst, dst_max_len, src, src_len);
	if (dlen == 0) {
200125d8:	c901                	beqz	a0,200125e8 <br_rsa_i15_oaep_encrypt+0x28>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:43
		return 0;
	}
	return dlen & -(size_t)br_rsa_i15_public(dst, dlen, pk);
200125da:	85aa                	mv	a1,a0
200125dc:	864a                	mv	a2,s2
200125de:	8526                	mv	a0,s1
200125e0:	3dd5                	jal	200124d4 <br_rsa_i15_public>
200125e2:	40a00533          	neg	a0,a0
200125e6:	8c69                	and	s0,s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/rsa_i15_oaep_encrypt.c:44
}
200125e8:	40f2                	lw	ra,28(sp)
200125ea:	8522                	mv	a0,s0
200125ec:	4462                	lw	s0,24(sp)
200125ee:	44d2                	lw	s1,20(sp)
200125f0:	4942                	lw	s2,16(sp)
200125f2:	6105                	addi	sp,sp,32
200125f4:	8082                	ret

200125f6 <br_range_enc32be>:
br_range_enc32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/enc32be.c:34
br_range_enc32be(void *dst, const uint32_t *v, size_t num)
{
	unsigned char *buf;

	buf = dst;
	while (num -- > 0) {
200125f6:	577d                	li	a4,-1
200125f8:	167d                	addi	a2,a2,-1
200125fa:	00e61363          	bne	a2,a4,20012600 <br_range_enc32be+0xa>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/enc32be.c:38
		br_enc32be(buf, *v ++);
		buf += 4;
	}
}
200125fe:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/enc32be.c:35
		br_enc32be(buf, *v ++);
20012600:	419c                	lw	a5,0(a1)
20012602:	0591                	addi	a1,a1,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/enc32be.c:36
		buf += 4;
20012604:	0511                	addi	a0,a0,4
br_enc32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:566
    buf[0] = (unsigned char)(x >> 24);
20012606:	0187d693          	srli	a3,a5,0x18
2001260a:	fed50e23          	sb	a3,-4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:567
    buf[1] = (unsigned char)(x >> 16);
2001260e:	0107d693          	srli	a3,a5,0x10
20012612:	fed50ea3          	sb	a3,-3(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
20012616:	0087d693          	srli	a3,a5,0x8
2001261a:	fed50f23          	sb	a3,-2(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:569
    buf[3] = (unsigned char)x;
2001261e:	fef50fa3          	sb	a5,-1(a0)
br_range_enc32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/enc32be.c:36
20012622:	bfd9                	j	200125f8 <br_range_enc32be+0x2>

20012624 <br_sha1_state>:
br_sha1_state():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:163
}

/* see bearssl.h */
uint64_t
br_sha1_state(const br_sha1_context *cc, void *dst)
{
20012624:	1141                	addi	sp,sp,-16
20012626:	c422                	sw	s0,8(sp)
20012628:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:164
	br_range_enc32be(dst, cc->val, 5);
2001262a:	4615                	li	a2,5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:163
{
2001262c:	852e                	mv	a0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:164
	br_range_enc32be(dst, cc->val, 5);
2001262e:	05040593          	addi	a1,s0,80
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:163
{
20012632:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:164
	br_range_enc32be(dst, cc->val, 5);
20012634:	37c9                	jal	200125f6 <br_range_enc32be>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:166
	return cc->count;
}
20012636:	4428                	lw	a0,72(s0)
20012638:	446c                	lw	a1,76(s0)
2001263a:	40b2                	lw	ra,12(sp)
2001263c:	4422                	lw	s0,8(sp)
2001263e:	0141                	addi	sp,sp,16
20012640:	8082                	ret

20012642 <br_range_dec32be>:
br_range_dec32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/dec32be.c:34
br_range_dec32be(uint32_t *v, size_t num, const void *src)
{
	const unsigned char *buf;

	buf = src;
	while (num -- > 0) {
20012642:	56fd                	li	a3,-1
20012644:	15fd                	addi	a1,a1,-1
20012646:	00d59363          	bne	a1,a3,2001264c <br_range_dec32be+0xa>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/dec32be.c:38
		*v ++ = br_dec32be(buf);
		buf += 4;
	}
}
2001264a:	8082                	ret
br_dec32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:598
    return ((uint32_t)buf[0] << 24)
2001264c:	00064783          	lbu	a5,0(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:599
           | ((uint32_t)buf[1] << 16)
20012650:	00164703          	lbu	a4,1(a2)
br_range_dec32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/dec32be.c:35
		*v ++ = br_dec32be(buf);
20012654:	0511                	addi	a0,a0,4
br_dec32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:598
    return ((uint32_t)buf[0] << 24)
20012656:	07e2                	slli	a5,a5,0x18
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:599
           | ((uint32_t)buf[1] << 16)
20012658:	0742                	slli	a4,a4,0x10
2001265a:	8fd9                	or	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:601
           | (uint32_t)buf[3];
2001265c:	00364703          	lbu	a4,3(a2)
br_range_dec32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/dec32be.c:36
		buf += 4;
20012660:	0611                	addi	a2,a2,4
br_dec32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:601
20012662:	8fd9                	or	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:600
           | ((uint32_t)buf[2] << 8)
20012664:	ffe64703          	lbu	a4,-2(a2)
20012668:	0722                	slli	a4,a4,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:601
           | (uint32_t)buf[3];
2001266a:	8fd9                	or	a5,a5,a4
br_range_dec32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/dec32be.c:35
		*v ++ = br_dec32be(buf);
2001266c:	fef52e23          	sw	a5,-4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/dec32be.c:36
		buf += 4;
20012670:	bfd1                	j	20012644 <br_range_dec32be+0x2>

20012672 <br_sha1_round>:
br_sha1_round():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:47
{
20012672:	710d                	addi	sp,sp,-352
20012674:	14812c23          	sw	s0,344(sp)
20012678:	14912a23          	sw	s1,340(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:55
	d = val[3];
2001267c:	45c0                	lw	s0,12(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:53
	b = val[1];
2001267e:	41c4                	lw	s1,4(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:47
{
20012680:	15212823          	sw	s2,336(sp)
20012684:	15312623          	sw	s3,332(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:52
	a = val[0];
20012688:	0005a903          	lw	s2,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:54
	c = val[2];
2001268c:	0085a983          	lw	s3,8(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:47
{
20012690:	15412423          	sw	s4,328(sp)
20012694:	15512223          	sw	s5,324(sp)
20012698:	862a                	mv	a2,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:56
	e = val[4];
2001269a:	0105aa83          	lw	s5,16(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:47
{
2001269e:	8a2e                	mv	s4,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:57
	br_range_dec32be(m, 16, buf);
200126a0:	850a                	mv	a0,sp
200126a2:	45c1                	li	a1,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:47
{
200126a4:	14112e23          	sw	ra,348(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:57
	br_range_dec32be(m, 16, buf);
200126a8:	3f69                	jal	20012642 <br_range_dec32be>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:58
	for (i = 16; i < 80; i ++) {
200126aa:	870a                	mv	a4,sp
200126ac:	020c                	addi	a1,sp,256
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:57
	br_range_dec32be(m, 16, buf);
200126ae:	868a                	mv	a3,sp
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:59 (discriminator 3)
		uint32_t x = m[i - 3] ^ m[i - 8] ^ m[i - 14] ^ m[i - 16];
200126b0:	5290                	lw	a2,32(a3)
200126b2:	5adc                	lw	a5,52(a3)
200126b4:	8fb1                	xor	a5,a5,a2
200126b6:	4690                	lw	a2,8(a3)
200126b8:	8fb1                	xor	a5,a5,a2
200126ba:	4290                	lw	a2,0(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:58 (discriminator 3)
	for (i = 16; i < 80; i ++) {
200126bc:	0691                	addi	a3,a3,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:59 (discriminator 3)
		uint32_t x = m[i - 3] ^ m[i - 8] ^ m[i - 14] ^ m[i - 16];
200126be:	8fb1                	xor	a5,a5,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:60 (discriminator 3)
		m[i] = ROTL(x, 1);
200126c0:	00179613          	slli	a2,a5,0x1
200126c4:	83fd                	srli	a5,a5,0x1f
200126c6:	8fd1                	or	a5,a5,a2
200126c8:	dedc                	sw	a5,60(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:58 (discriminator 3)
	for (i = 16; i < 80; i ++) {
200126ca:	fed593e3          	bne	a1,a3,200126b0 <br_sha1_round+0x3e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:64
		e += ROTL(a, 5) + F(b, c, d) + K1 + m[i + 0]; b = ROTL(b, 30);
200126ce:	5a8285b7          	lui	a1,0x5a828
200126d2:	0894                	addi	a3,sp,80
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:58
	for (i = 16; i < 80; i ++) {
200126d4:	860a                	mv	a2,sp
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:64
		e += ROTL(a, 5) + F(b, c, d) + K1 + m[i + 0]; b = ROTL(b, 30);
200126d6:	99958593          	addi	a1,a1,-1639 # 5a827999 <metal_segment_data_source_start+0x3a810711>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:64 (discriminator 3)
200126da:	01b95513          	srli	a0,s2,0x1b
200126de:	00591793          	slli	a5,s2,0x5
200126e2:	8fc9                	or	a5,a5,a0
200126e4:	4208                	lw	a0,0(a2)
200126e6:	97ae                	add	a5,a5,a1
200126e8:	00462803          	lw	a6,4(a2)
200126ec:	97aa                	add	a5,a5,a0
200126ee:	0089c533          	xor	a0,s3,s0
200126f2:	8d65                	and	a0,a0,s1
200126f4:	8d21                	xor	a0,a0,s0
200126f6:	97aa                	add	a5,a5,a0
200126f8:	0024d513          	srli	a0,s1,0x2
200126fc:	04fa                	slli	s1,s1,0x1e
200126fe:	8cc9                	or	s1,s1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:65 (discriminator 3)
		d += ROTL(e, 5) + F(a, b, c) + K1 + m[i + 1]; a = ROTL(a, 30);
20012700:	0134c533          	xor	a0,s1,s3
20012704:	01257533          	and	a0,a0,s2
20012708:	942e                	add	s0,s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:64 (discriminator 3)
		e += ROTL(a, 5) + F(b, c, d) + K1 + m[i + 0]; b = ROTL(b, 30);
2001270a:	97d6                	add	a5,a5,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:65 (discriminator 3)
		d += ROTL(e, 5) + F(a, b, c) + K1 + m[i + 1]; a = ROTL(a, 30);
2001270c:	9442                	add	s0,s0,a6
2001270e:	01354533          	xor	a0,a0,s3
20012712:	9522                	add	a0,a0,s0
20012714:	01b7d813          	srli	a6,a5,0x1b
20012718:	00579413          	slli	s0,a5,0x5
2001271c:	01046433          	or	s0,s0,a6
20012720:	942a                	add	s0,s0,a0
20012722:	00295513          	srli	a0,s2,0x2
20012726:	097a                	slli	s2,s2,0x1e
20012728:	00a96933          	or	s2,s2,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:66 (discriminator 3)
		c += ROTL(d, 5) + F(e, a, b) + K1 + m[i + 2]; e = ROTL(e, 30);
2001272c:	00862803          	lw	a6,8(a2)
20012730:	0124c533          	xor	a0,s1,s2
20012734:	8d7d                	and	a0,a0,a5
20012736:	99ae                	add	s3,s3,a1
20012738:	99c2                	add	s3,s3,a6
2001273a:	8d25                	xor	a0,a0,s1
2001273c:	954e                	add	a0,a0,s3
2001273e:	01b45813          	srli	a6,s0,0x1b
20012742:	00541993          	slli	s3,s0,0x5
20012746:	0109e9b3          	or	s3,s3,a6
2001274a:	99aa                	add	s3,s3,a0
2001274c:	01e79a93          	slli	s5,a5,0x1e
20012750:	0027d513          	srli	a0,a5,0x2
20012754:	00aaeab3          	or	s5,s5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:67 (discriminator 3)
		b += ROTL(c, 5) + F(d, e, a) + K1 + m[i + 3]; d = ROTL(d, 30);
20012758:	4648                	lw	a0,12(a2)
2001275a:	015947b3          	xor	a5,s2,s5
2001275e:	8fe1                	and	a5,a5,s0
20012760:	94ae                	add	s1,s1,a1
20012762:	0127c7b3          	xor	a5,a5,s2
20012766:	94aa                	add	s1,s1,a0
20012768:	94be                	add	s1,s1,a5
2001276a:	01b9d513          	srli	a0,s3,0x1b
2001276e:	00599793          	slli	a5,s3,0x5
20012772:	8fc9                	or	a5,a5,a0
20012774:	94be                	add	s1,s1,a5
20012776:	00245793          	srli	a5,s0,0x2
2001277a:	047a                	slli	s0,s0,0x1e
2001277c:	4a08                	lw	a0,16(a2)
2001277e:	8c5d                	or	s0,s0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:68 (discriminator 3)
		a += ROTL(b, 5) + F(c, d, e) + K1 + m[i + 4]; c = ROTL(c, 30);
20012780:	008ac7b3          	xor	a5,s5,s0
20012784:	0137f7b3          	and	a5,a5,s3
20012788:	992e                	add	s2,s2,a1
2001278a:	0157c7b3          	xor	a5,a5,s5
2001278e:	992a                	add	s2,s2,a0
20012790:	993e                	add	s2,s2,a5
20012792:	01b4d513          	srli	a0,s1,0x1b
20012796:	00549793          	slli	a5,s1,0x5
2001279a:	8fc9                	or	a5,a5,a0
2001279c:	993e                	add	s2,s2,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:63 (discriminator 3)
	for (i = 0; i < 20; i += 5) {
2001279e:	0651                	addi	a2,a2,20
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:68 (discriminator 3)
		a += ROTL(b, 5) + F(c, d, e) + K1 + m[i + 4]; c = ROTL(c, 30);
200127a0:	0029d793          	srli	a5,s3,0x2
200127a4:	09fa                	slli	s3,s3,0x1e
200127a6:	00f9e9b3          	or	s3,s3,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:63 (discriminator 3)
	for (i = 0; i < 20; i += 5) {
200127aa:	f2c698e3          	bne	a3,a2,200126da <br_sha1_round+0x68>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:71
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
200127ae:	6ed9f537          	lui	a0,0x6ed9f
200127b2:	858a                	mv	a1,sp
200127b4:	ba150513          	addi	a0,a0,-1119 # 6ed9eba1 <metal_segment_data_source_start+0x4ed87919>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:71 (discriminator 3)
200127b8:	01b95813          	srli	a6,s2,0x1b
200127bc:	00591613          	slli	a2,s2,0x5
200127c0:	0134c7b3          	xor	a5,s1,s3
200127c4:	01066633          	or	a2,a2,a6
200127c8:	8fa1                	xor	a5,a5,s0
200127ca:	962a                	add	a2,a2,a0
200127cc:	97b2                	add	a5,a5,a2
200127ce:	49b0                	lw	a2,80(a1)
200127d0:	942a                	add	s0,s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:70 (discriminator 3)
	for (i = 20; i < 40; i += 5) {
200127d2:	05d1                	addi	a1,a1,20
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:71 (discriminator 3)
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
200127d4:	97b2                	add	a5,a5,a2
200127d6:	0024d613          	srli	a2,s1,0x2
200127da:	04fa                	slli	s1,s1,0x1e
200127dc:	8cd1                	or	s1,s1,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:72 (discriminator 3)
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
200127de:	01394633          	xor	a2,s2,s3
200127e2:	8e25                	xor	a2,a2,s1
200127e4:	9622                	add	a2,a2,s0
200127e6:	41a0                	lw	s0,64(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:71 (discriminator 3)
		e += ROTL(a, 5) + G(b, c, d) + K2 + m[i + 0]; b = ROTL(b, 30);
200127e8:	97d6                	add	a5,a5,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:72 (discriminator 3)
		d += ROTL(e, 5) + G(a, b, c) + K2 + m[i + 1]; a = ROTL(a, 30);
200127ea:	01b7d813          	srli	a6,a5,0x1b
200127ee:	9622                	add	a2,a2,s0
200127f0:	00579413          	slli	s0,a5,0x5
200127f4:	01046433          	or	s0,s0,a6
200127f8:	9432                	add	s0,s0,a2
200127fa:	00295613          	srli	a2,s2,0x2
200127fe:	097a                	slli	s2,s2,0x1e
20012800:	00c96933          	or	s2,s2,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:73 (discriminator 3)
		c += ROTL(d, 5) + G(e, a, b) + K2 + m[i + 2]; e = ROTL(e, 30);
20012804:	41f0                	lw	a2,68(a1)
20012806:	99aa                	add	s3,s3,a0
20012808:	01b45813          	srli	a6,s0,0x1b
2001280c:	99b2                	add	s3,s3,a2
2001280e:	0124c633          	xor	a2,s1,s2
20012812:	8e3d                	xor	a2,a2,a5
20012814:	964e                	add	a2,a2,s3
20012816:	00541993          	slli	s3,s0,0x5
2001281a:	0109e9b3          	or	s3,s3,a6
2001281e:	99b2                	add	s3,s3,a2
20012820:	01e79a93          	slli	s5,a5,0x1e
20012824:	0027d613          	srli	a2,a5,0x2
20012828:	45bc                	lw	a5,72(a1)
2001282a:	00caeab3          	or	s5,s5,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:74 (discriminator 3)
		b += ROTL(c, 5) + G(d, e, a) + K2 + m[i + 3]; d = ROTL(d, 30);
2001282e:	94aa                	add	s1,s1,a0
20012830:	94be                	add	s1,s1,a5
20012832:	015947b3          	xor	a5,s2,s5
20012836:	8fa1                	xor	a5,a5,s0
20012838:	01b9d613          	srli	a2,s3,0x1b
2001283c:	94be                	add	s1,s1,a5
2001283e:	00599793          	slli	a5,s3,0x5
20012842:	8fd1                	or	a5,a5,a2
20012844:	94be                	add	s1,s1,a5
20012846:	00245793          	srli	a5,s0,0x2
2001284a:	047a                	slli	s0,s0,0x1e
2001284c:	8c5d                	or	s0,s0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:75 (discriminator 3)
		a += ROTL(b, 5) + G(c, d, e) + K2 + m[i + 4]; c = ROTL(c, 30);
2001284e:	45fc                	lw	a5,76(a1)
20012850:	992a                	add	s2,s2,a0
20012852:	01b4d613          	srli	a2,s1,0x1b
20012856:	993e                	add	s2,s2,a5
20012858:	008ac7b3          	xor	a5,s5,s0
2001285c:	0137c7b3          	xor	a5,a5,s3
20012860:	993e                	add	s2,s2,a5
20012862:	00549793          	slli	a5,s1,0x5
20012866:	8fd1                	or	a5,a5,a2
20012868:	993e                	add	s2,s2,a5
2001286a:	0029d793          	srli	a5,s3,0x2
2001286e:	09fa                	slli	s3,s3,0x1e
20012870:	00f9e9b3          	or	s3,s3,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:70 (discriminator 3)
	for (i = 20; i < 40; i += 5) {
20012874:	f4b692e3          	bne	a3,a1,200127b8 <br_sha1_round+0x146>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:78
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
20012878:	8f1bc5b7          	lui	a1,0x8f1bc
2001287c:	860a                	mv	a2,sp
2001287e:	cdc58593          	addi	a1,a1,-804 # 8f1bbcdc <metal_segment_heap_target_end+0xf1b9cec>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:78 (discriminator 3)
20012882:	0089e7b3          	or	a5,s3,s0
20012886:	0089f533          	and	a0,s3,s0
2001288a:	8fe5                	and	a5,a5,s1
2001288c:	0a062883          	lw	a7,160(a2)
20012890:	8fc9                	or	a5,a5,a0
20012892:	01b95813          	srli	a6,s2,0x1b
20012896:	00591513          	slli	a0,s2,0x5
2001289a:	01056533          	or	a0,a0,a6
2001289e:	952e                	add	a0,a0,a1
200128a0:	9546                	add	a0,a0,a7
200128a2:	97aa                	add	a5,a5,a0
200128a4:	0024d513          	srli	a0,s1,0x2
200128a8:	04fa                	slli	s1,s1,0x1e
200128aa:	8cc9                	or	s1,s1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:79 (discriminator 3)
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
200128ac:	0134e533          	or	a0,s1,s3
200128b0:	0134f8b3          	and	a7,s1,s3
200128b4:	01257533          	and	a0,a0,s2
200128b8:	01156533          	or	a0,a0,a7
200128bc:	0a462883          	lw	a7,164(a2)
200128c0:	942e                	add	s0,s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:78 (discriminator 3)
		e += ROTL(a, 5) + H(b, c, d) + K3 + m[i + 0]; b = ROTL(b, 30);
200128c2:	97d6                	add	a5,a5,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:79 (discriminator 3)
		d += ROTL(e, 5) + H(a, b, c) + K3 + m[i + 1]; a = ROTL(a, 30);
200128c4:	9446                	add	s0,s0,a7
200128c6:	9522                	add	a0,a0,s0
200128c8:	01b7d893          	srli	a7,a5,0x1b
200128cc:	00579413          	slli	s0,a5,0x5
200128d0:	01146433          	or	s0,s0,a7
200128d4:	942a                	add	s0,s0,a0
200128d6:	00295513          	srli	a0,s2,0x2
200128da:	097a                	slli	s2,s2,0x1e
200128dc:	00a96933          	or	s2,s2,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:80 (discriminator 3)
		c += ROTL(d, 5) + H(e, a, b) + K3 + m[i + 2]; e = ROTL(e, 30);
200128e0:	0124e533          	or	a0,s1,s2
200128e4:	0124f8b3          	and	a7,s1,s2
200128e8:	8d7d                	and	a0,a0,a5
200128ea:	01156533          	or	a0,a0,a7
200128ee:	0a862883          	lw	a7,168(a2)
200128f2:	99ae                	add	s3,s3,a1
200128f4:	01e79a93          	slli	s5,a5,0x1e
200128f8:	99c6                	add	s3,s3,a7
200128fa:	954e                	add	a0,a0,s3
200128fc:	01b45893          	srli	a7,s0,0x1b
20012900:	00541993          	slli	s3,s0,0x5
20012904:	0119e9b3          	or	s3,s3,a7
20012908:	99aa                	add	s3,s3,a0
2001290a:	0027d513          	srli	a0,a5,0x2
2001290e:	00aaeab3          	or	s5,s5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:81 (discriminator 3)
		b += ROTL(c, 5) + H(d, e, a) + K3 + m[i + 3]; d = ROTL(d, 30);
20012912:	015967b3          	or	a5,s2,s5
20012916:	01597533          	and	a0,s2,s5
2001291a:	8fe1                	and	a5,a5,s0
2001291c:	8fc9                	or	a5,a5,a0
2001291e:	0ac62503          	lw	a0,172(a2)
20012922:	94ae                	add	s1,s1,a1
20012924:	992e                	add	s2,s2,a1
20012926:	94aa                	add	s1,s1,a0
20012928:	94be                	add	s1,s1,a5
2001292a:	01b9d513          	srli	a0,s3,0x1b
2001292e:	00599793          	slli	a5,s3,0x5
20012932:	8fc9                	or	a5,a5,a0
20012934:	94be                	add	s1,s1,a5
20012936:	00245793          	srli	a5,s0,0x2
2001293a:	047a                	slli	s0,s0,0x1e
2001293c:	8c5d                	or	s0,s0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:82 (discriminator 3)
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
2001293e:	008ae7b3          	or	a5,s5,s0
20012942:	0137f7b3          	and	a5,a5,s3
20012946:	008af533          	and	a0,s5,s0
2001294a:	8fc9                	or	a5,a5,a0
2001294c:	0b062503          	lw	a0,176(a2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:77 (discriminator 3)
	for (i = 40; i < 60; i += 5) {
20012950:	0651                	addi	a2,a2,20
20012952:	992a                	add	s2,s2,a0
20012954:	993e                	add	s2,s2,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:82 (discriminator 3)
		a += ROTL(b, 5) + H(c, d, e) + K3 + m[i + 4]; c = ROTL(c, 30);
20012956:	01b4d513          	srli	a0,s1,0x1b
2001295a:	00549793          	slli	a5,s1,0x5
2001295e:	8fc9                	or	a5,a5,a0
20012960:	993e                	add	s2,s2,a5
20012962:	0029d793          	srli	a5,s3,0x2
20012966:	09fa                	slli	s3,s3,0x1e
20012968:	00f9e9b3          	or	s3,s3,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:77 (discriminator 3)
	for (i = 40; i < 60; i += 5) {
2001296c:	f0c69be3          	bne	a3,a2,20012882 <br_sha1_round+0x210>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:85
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
20012970:	ca62c5b7          	lui	a1,0xca62c
20012974:	1d658593          	addi	a1,a1,470 # ca62c1d6 <metal_segment_heap_target_end+0x4a62a1e6>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:85 (discriminator 3)
20012978:	01b95513          	srli	a0,s2,0x1b
2001297c:	00591613          	slli	a2,s2,0x5
20012980:	0134c7b3          	xor	a5,s1,s3
20012984:	8e49                	or	a2,a2,a0
20012986:	8fa1                	xor	a5,a5,s0
20012988:	08070513          	addi	a0,a4,128
2001298c:	962e                	add	a2,a2,a1
2001298e:	97b2                	add	a5,a5,a2
20012990:	5930                	lw	a2,112(a0)
20012992:	942e                	add	s0,s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:84 (discriminator 3)
	for (i = 60; i < 80; i += 5) {
20012994:	0751                	addi	a4,a4,20
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:85 (discriminator 3)
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
20012996:	97b2                	add	a5,a5,a2
20012998:	0024d613          	srli	a2,s1,0x2
2001299c:	04fa                	slli	s1,s1,0x1e
2001299e:	8cd1                	or	s1,s1,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:86 (discriminator 3)
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
200129a0:	01394633          	xor	a2,s2,s3
200129a4:	8e25                	xor	a2,a2,s1
200129a6:	9622                	add	a2,a2,s0
200129a8:	5960                	lw	s0,116(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:85 (discriminator 3)
		e += ROTL(a, 5) + I(b, c, d) + K4 + m[i + 0]; b = ROTL(b, 30);
200129aa:	97d6                	add	a5,a5,s5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:86 (discriminator 3)
		d += ROTL(e, 5) + I(a, b, c) + K4 + m[i + 1]; a = ROTL(a, 30);
200129ac:	01b7d813          	srli	a6,a5,0x1b
200129b0:	9622                	add	a2,a2,s0
200129b2:	00579413          	slli	s0,a5,0x5
200129b6:	01046433          	or	s0,s0,a6
200129ba:	9432                	add	s0,s0,a2
200129bc:	00295613          	srli	a2,s2,0x2
200129c0:	097a                	slli	s2,s2,0x1e
200129c2:	00c96933          	or	s2,s2,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:87 (discriminator 3)
		c += ROTL(d, 5) + I(e, a, b) + K4 + m[i + 2]; e = ROTL(e, 30);
200129c6:	5d30                	lw	a2,120(a0)
200129c8:	99ae                	add	s3,s3,a1
200129ca:	01b45813          	srli	a6,s0,0x1b
200129ce:	99b2                	add	s3,s3,a2
200129d0:	0124c633          	xor	a2,s1,s2
200129d4:	8e3d                	xor	a2,a2,a5
200129d6:	964e                	add	a2,a2,s3
200129d8:	00541993          	slli	s3,s0,0x5
200129dc:	0109e9b3          	or	s3,s3,a6
200129e0:	99b2                	add	s3,s3,a2
200129e2:	01e79a93          	slli	s5,a5,0x1e
200129e6:	0027d613          	srli	a2,a5,0x2
200129ea:	5d7c                	lw	a5,124(a0)
200129ec:	00caeab3          	or	s5,s5,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:88 (discriminator 3)
		b += ROTL(c, 5) + I(d, e, a) + K4 + m[i + 3]; d = ROTL(d, 30);
200129f0:	94ae                	add	s1,s1,a1
200129f2:	94be                	add	s1,s1,a5
200129f4:	015947b3          	xor	a5,s2,s5
200129f8:	8fa1                	xor	a5,a5,s0
200129fa:	01b9d613          	srli	a2,s3,0x1b
200129fe:	94be                	add	s1,s1,a5
20012a00:	00599793          	slli	a5,s3,0x5
20012a04:	8fd1                	or	a5,a5,a2
20012a06:	94be                	add	s1,s1,a5
20012a08:	00245793          	srli	a5,s0,0x2
20012a0c:	047a                	slli	s0,s0,0x1e
20012a0e:	8c5d                	or	s0,s0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:89 (discriminator 3)
		a += ROTL(b, 5) + I(c, d, e) + K4 + m[i + 4]; c = ROTL(c, 30);
20012a10:	0ec72783          	lw	a5,236(a4)
20012a14:	992e                	add	s2,s2,a1
20012a16:	01b4d613          	srli	a2,s1,0x1b
20012a1a:	993e                	add	s2,s2,a5
20012a1c:	008ac7b3          	xor	a5,s5,s0
20012a20:	0137c7b3          	xor	a5,a5,s3
20012a24:	993e                	add	s2,s2,a5
20012a26:	00549793          	slli	a5,s1,0x5
20012a2a:	8fd1                	or	a5,a5,a2
20012a2c:	993e                	add	s2,s2,a5
20012a2e:	0029d793          	srli	a5,s3,0x2
20012a32:	09fa                	slli	s3,s3,0x1e
20012a34:	00f9e9b3          	or	s3,s3,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:84 (discriminator 3)
	for (i = 60; i < 80; i += 5) {
20012a38:	f4e690e3          	bne	a3,a4,20012978 <br_sha1_round+0x306>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:92
	val[0] += a;
20012a3c:	000a2783          	lw	a5,0(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:97
}
20012a40:	15c12083          	lw	ra,348(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:92
	val[0] += a;
20012a44:	993e                	add	s2,s2,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:93
	val[1] += b;
20012a46:	004a2783          	lw	a5,4(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:92
	val[0] += a;
20012a4a:	012a2023          	sw	s2,0(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:97
}
20012a4e:	15012903          	lw	s2,336(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:93
	val[1] += b;
20012a52:	94be                	add	s1,s1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:94
	val[2] += c;
20012a54:	008a2783          	lw	a5,8(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:93
	val[1] += b;
20012a58:	009a2223          	sw	s1,4(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:97
}
20012a5c:	15412483          	lw	s1,340(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:94
	val[2] += c;
20012a60:	99be                	add	s3,s3,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:95
	val[3] += d;
20012a62:	00ca2783          	lw	a5,12(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:94
	val[2] += c;
20012a66:	013a2423          	sw	s3,8(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:97
}
20012a6a:	14c12983          	lw	s3,332(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:95
	val[3] += d;
20012a6e:	943e                	add	s0,s0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:96
	val[4] += e;
20012a70:	010a2783          	lw	a5,16(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:95
	val[3] += d;
20012a74:	008a2623          	sw	s0,12(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:97
}
20012a78:	15812403          	lw	s0,344(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:96
	val[4] += e;
20012a7c:	97d6                	add	a5,a5,s5
20012a7e:	00fa2823          	sw	a5,16(s4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:97
}
20012a82:	14412a83          	lw	s5,324(sp)
20012a86:	14812a03          	lw	s4,328(sp)
20012a8a:	6135                	addi	sp,sp,352
20012a8c:	8082                	ret

20012a8e <br_sha1_update>:
br_sha1_update():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:111
{
20012a8e:	7179                	addi	sp,sp,-48
20012a90:	d04a                	sw	s2,32(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:116
	ptr = (size_t)cc->count & 63;
20012a92:	04852903          	lw	s2,72(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:111
{
20012a96:	d422                	sw	s0,40(sp)
20012a98:	ce4e                	sw	s3,28(sp)
20012a9a:	cc52                	sw	s4,24(sp)
20012a9c:	ca56                	sw	s5,20(sp)
20012a9e:	c85a                	sw	s6,16(sp)
20012aa0:	c65e                	sw	s7,12(sp)
20012aa2:	d606                	sw	ra,44(sp)
20012aa4:	d226                	sw	s1,36(sp)
20012aa6:	842a                	mv	s0,a0
20012aa8:	8a2e                	mv	s4,a1
20012aaa:	89b2                	mv	s3,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:116
	ptr = (size_t)cc->count & 63;
20012aac:	03f97913          	andi	s2,s2,63
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:120
		clen = 64 - ptr;
20012ab0:	04000a93          	li	s5,64
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:124
		memcpy(cc->buf + ptr, buf, clen);
20012ab4:	00450b13          	addi	s6,a0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:130
			br_sha1_round(cc->buf, cc->val);
20012ab8:	05050b93          	addi	s7,a0,80
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:117
	while (len > 0) {
20012abc:	00099d63          	bnez	s3,20012ad6 <br_sha1_update+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:134
}
20012ac0:	50b2                	lw	ra,44(sp)
20012ac2:	5422                	lw	s0,40(sp)
20012ac4:	5492                	lw	s1,36(sp)
20012ac6:	5902                	lw	s2,32(sp)
20012ac8:	49f2                	lw	s3,28(sp)
20012aca:	4a62                	lw	s4,24(sp)
20012acc:	4ad2                	lw	s5,20(sp)
20012ace:	4b42                	lw	s6,16(sp)
20012ad0:	4bb2                	lw	s7,12(sp)
20012ad2:	6145                	addi	sp,sp,48
20012ad4:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:120
		clen = 64 - ptr;
20012ad6:	412a87b3          	sub	a5,s5,s2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:121
		if (clen > len) {
20012ada:	84ce                	mv	s1,s3
20012adc:	0137f363          	bgeu	a5,s3,20012ae2 <br_sha1_update+0x54>
20012ae0:	84be                	mv	s1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:124
		memcpy(cc->buf + ptr, buf, clen);
20012ae2:	8626                	mv	a2,s1
20012ae4:	85d2                	mv	a1,s4
20012ae6:	012b0533          	add	a0,s6,s2
20012aea:	2621                	jal	20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:128
		cc->count += (uint64_t)clen;
20012aec:	443c                	lw	a5,72(s0)
20012aee:	4478                	lw	a4,76(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:125
		ptr += clen;
20012af0:	9926                	add	s2,s2,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:126
		buf += clen;
20012af2:	9a26                	add	s4,s4,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:127
		len -= clen;
20012af4:	409989b3          	sub	s3,s3,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:128
		cc->count += (uint64_t)clen;
20012af8:	94be                	add	s1,s1,a5
20012afa:	00f4b7b3          	sltu	a5,s1,a5
20012afe:	97ba                	add	a5,a5,a4
20012b00:	c424                	sw	s1,72(s0)
20012b02:	c47c                	sw	a5,76(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:129
		if (ptr == 64) {
20012b04:	fb591ce3          	bne	s2,s5,20012abc <br_sha1_update+0x2e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:130
			br_sha1_round(cc->buf, cc->val);
20012b08:	85de                	mv	a1,s7
20012b0a:	855a                	mv	a0,s6
20012b0c:	369d                	jal	20012672 <br_sha1_round>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:131
			ptr = 0;
20012b0e:	4901                	li	s2,0
20012b10:	b775                	j	20012abc <br_sha1_update+0x2e>

20012b12 <br_sha1_out>:
br_sha1_out():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:139
{
20012b12:	7159                	addi	sp,sp,-112
20012b14:	d2a6                	sw	s1,100(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:144
	ptr = (size_t)cc->count & 63;
20012b16:	4524                	lw	s1,72(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:139
{
20012b18:	d4a2                	sw	s0,104(sp)
20012b1a:	d0ca                	sw	s2,96(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:144
	ptr = (size_t)cc->count & 63;
20012b1c:	03f4f493          	andi	s1,s1,63
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:145
	memcpy(buf, cc->buf, ptr);
20012b20:	8626                	mv	a2,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:139
{
20012b22:	842a                	mv	s0,a0
20012b24:	892e                	mv	s2,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:145
	memcpy(buf, cc->buf, ptr);
20012b26:	00450593          	addi	a1,a0,4
20012b2a:	1008                	addi	a0,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:139
{
20012b2c:	d686                	sw	ra,108(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:145
	memcpy(buf, cc->buf, ptr);
20012b2e:	24d1                	jal	20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:146
	memcpy(val, cc->val, sizeof val);
20012b30:	4651                	li	a2,20
20012b32:	05040593          	addi	a1,s0,80
20012b36:	0068                	addi	a0,sp,12
20012b38:	2c6d                	jal	20012df2 <memcpy>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:147
	buf[ptr ++] = 0x80;
20012b3a:	1098                	addi	a4,sp,96
20012b3c:	00148793          	addi	a5,s1,1
20012b40:	94ba                	add	s1,s1,a4
20012b42:	f8000713          	li	a4,-128
20012b46:	fce48023          	sb	a4,-64(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:148
	if (ptr > 56) {
20012b4a:	03800613          	li	a2,56
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:149
		memset(buf + ptr, 0, 64 - ptr);
20012b4e:	1018                	addi	a4,sp,32
20012b50:	00f70533          	add	a0,a4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:148
	if (ptr > 56) {
20012b54:	08f67163          	bgeu	a2,a5,20012bd6 <br_sha1_out+0xc4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:149
		memset(buf + ptr, 0, 64 - ptr);
20012b58:	04000613          	li	a2,64
20012b5c:	8e1d                	sub	a2,a2,a5
20012b5e:	4581                	li	a1,0
20012b60:	2e65                	jal	20012f18 <memset>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:150
		br_sha1_round(buf, val);
20012b62:	006c                	addi	a1,sp,12
20012b64:	1008                	addi	a0,sp,32
20012b66:	3631                	jal	20012672 <br_sha1_round>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:151
		memset(buf, 0, 56);
20012b68:	03800613          	li	a2,56
20012b6c:	4581                	li	a1,0
20012b6e:	1008                	addi	a0,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:153
		memset(buf + ptr, 0, 56 - ptr);
20012b70:	2665                	jal	20012f18 <memset>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:155
	br_enc64be(buf + 56, cc->count << 3);
20012b72:	4438                	lw	a4,72(s0)
20012b74:	447c                	lw	a5,76(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:156
	br_sha1_round(buf, val);
20012b76:	006c                	addi	a1,sp,12
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:155
	br_enc64be(buf + 56, cc->count << 3);
20012b78:	01d75693          	srli	a3,a4,0x1d
20012b7c:	078e                	slli	a5,a5,0x3
20012b7e:	8fd5                	or	a5,a5,a3
br_enc32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:566
    buf[0] = (unsigned char)(x >> 24);
20012b80:	0187d613          	srli	a2,a5,0x18
br_sha1_out():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:155
20012b84:	00371693          	slli	a3,a4,0x3
br_enc32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:566
20012b88:	04c10c23          	sb	a2,88(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:567
    buf[1] = (unsigned char)(x >> 16);
20012b8c:	0107d613          	srli	a2,a5,0x10
20012b90:	04c10ca3          	sb	a2,89(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:569
    buf[3] = (unsigned char)x;
20012b94:	04f10da3          	sb	a5,91(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
20012b98:	0087d613          	srli	a2,a5,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:566
    buf[0] = (unsigned char)(x >> 24);
20012b9c:	0186d793          	srli	a5,a3,0x18
20012ba0:	04f10e23          	sb	a5,92(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:567
    buf[1] = (unsigned char)(x >> 16);
20012ba4:	0106d793          	srli	a5,a3,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
20012ba8:	06c2                	slli	a3,a3,0x10
20012baa:	82c1                	srli	a3,a3,0x10
20012bac:	82a1                	srli	a3,a3,0x8
20012bae:	072e                	slli	a4,a4,0xb
20012bb0:	8f55                	or	a4,a4,a3
br_sha1_out():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:156
	br_sha1_round(buf, val);
20012bb2:	1008                	addi	a0,sp,32
br_enc32be():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
20012bb4:	04c10d23          	sb	a2,90(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:567
    buf[1] = (unsigned char)(x >> 16);
20012bb8:	04f10ea3          	sb	a5,93(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/inner.h:568
    buf[2] = (unsigned char)(x >> 8);
20012bbc:	04e11f23          	sh	a4,94(sp)
br_sha1_out():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:156
20012bc0:	3c4d                	jal	20012672 <br_sha1_round>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:157
	br_range_enc32be(dst, val, 5);
20012bc2:	006c                	addi	a1,sp,12
20012bc4:	854a                	mv	a0,s2
20012bc6:	4615                	li	a2,5
20012bc8:	343d                	jal	200125f6 <br_range_enc32be>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:158
}
20012bca:	50b6                	lw	ra,108(sp)
20012bcc:	5426                	lw	s0,104(sp)
20012bce:	5496                	lw	s1,100(sp)
20012bd0:	5906                	lw	s2,96(sp)
20012bd2:	6165                	addi	sp,sp,112
20012bd4:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:153
		memset(buf + ptr, 0, 56 - ptr);
20012bd6:	8e1d                	sub	a2,a2,a5
20012bd8:	4581                	li	a1,0
20012bda:	bf59                	j	20012b70 <br_sha1_out+0x5e>

20012bdc <br_sha1_set_state>:
br_sha1_set_state():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:171

/* see bearssl.h */
void
br_sha1_set_state(br_sha1_context *cc, const void *stb, uint64_t count)
{
20012bdc:	1141                	addi	sp,sp,-16
20012bde:	c422                	sw	s0,8(sp)
20012be0:	c04a                	sw	s2,0(sp)
20012be2:	842a                	mv	s0,a0
20012be4:	8932                	mv	s2,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:172
	br_range_dec32be(cc->val, 5, stb);
20012be6:	05050513          	addi	a0,a0,80
20012bea:	862e                	mv	a2,a1
20012bec:	4595                	li	a1,5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:171
{
20012bee:	c226                	sw	s1,4(sp)
20012bf0:	c606                	sw	ra,12(sp)
20012bf2:	84b6                	mv	s1,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:172
	br_range_dec32be(cc->val, 5, stb);
20012bf4:	34b9                	jal	20012642 <br_range_dec32be>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:174
	cc->count = count;
}
20012bf6:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:173
	cc->count = count;
20012bf8:	05242423          	sw	s2,72(s0)
20012bfc:	c464                	sw	s1,76(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/rsa/bearssl/sha1.c:174
}
20012bfe:	4422                	lw	s0,8(sp)
20012c00:	4492                	lw	s1,4(sp)
20012c02:	4902                	lw	s2,0(sp)
20012c04:	0141                	addi	sp,sp,16
20012c06:	8082                	ret

20012c08 <test_encrypt>:
test_encrypt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:284
{
20012c08:	82010113          	addi	sp,sp,-2016
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:314
    pk.nlen = hextobin(n, KAT_RSA_OAEP[u++]);
20012c0c:	200105b7          	lui	a1,0x20010
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:313
    pk.n = n;
20012c10:	5d010513          	addi	a0,sp,1488
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:314
    pk.nlen = hextobin(n, KAT_RSA_OAEP[u++]);
20012c14:	36858593          	addi	a1,a1,872 # 20010368 <metal_tty_init+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:284
{
20012c18:	7c112e23          	sw	ra,2012(sp)
20012c1c:	7c812c23          	sw	s0,2008(sp)
20012c20:	7c912a23          	sw	s1,2004(sp)
20012c24:	7d212823          	sw	s2,2000(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:313
    pk.n = n;
20012c28:	da2a                	sw	a0,52(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:314
    pk.nlen = hextobin(n, KAT_RSA_OAEP[u++]);
20012c2a:	bebfe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:316
    pk.elen = hextobin(e, KAT_RSA_OAEP[u++]);
20012c2e:	200105b7          	lui	a1,0x20010
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:314
    pk.nlen = hextobin(n, KAT_RSA_OAEP[u++]);
20012c32:	dc2a                	sw	a0,56(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:316
    pk.elen = hextobin(e, KAT_RSA_OAEP[u++]);
20012c34:	46c58593          	addi	a1,a1,1132 # 2001046c <metal_tty_init+0x14e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:315
    pk.e = e;
20012c38:	1068                	addi	a0,sp,44
20012c3a:	de2a                	sw	a0,60(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:316
    pk.elen = hextobin(e, KAT_RSA_OAEP[u++]);
20012c3c:	bd9fe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:322
    sk.plen = hextobin(p, KAT_RSA_OAEP[u++]);
20012c40:	200105b7          	lui	a1,0x20010
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:316
    pk.elen = hextobin(e, KAT_RSA_OAEP[u++]);
20012c44:	c0aa                	sw	a0,64(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:322
    sk.plen = hextobin(p, KAT_RSA_OAEP[u++]);
20012c46:	47058593          	addi	a1,a1,1136 # 20010470 <metal_tty_init+0x152>
20012c4a:	0988                	addi	a0,sp,208
20012c4c:	bc9fe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:324
    sk.qlen = hextobin(q, KAT_RSA_OAEP[u++]);
20012c50:	200105b7          	lui	a1,0x20010
20012c54:	4f458593          	addi	a1,a1,1268 # 200104f4 <metal_tty_init+0x1d6>
20012c58:	0b88                	addi	a0,sp,464
20012c5a:	bbbfe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:326
    sk.dplen = hextobin(dp, KAT_RSA_OAEP[u++]);
20012c5e:	200105b7          	lui	a1,0x20010
20012c62:	57858593          	addi	a1,a1,1400 # 20010578 <metal_tty_init+0x25a>
20012c66:	0d88                	addi	a0,sp,720
20012c68:	badfe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:328
    sk.dqlen = hextobin(dq, KAT_RSA_OAEP[u++]);
20012c6c:	200105b7          	lui	a1,0x20010
20012c70:	5fc58593          	addi	a1,a1,1532 # 200105fc <metal_tty_init+0x2de>
20012c74:	0f88                	addi	a0,sp,976
20012c76:	b9ffe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:330
    sk.iqlen = hextobin(iq, KAT_RSA_OAEP[u++]);
20012c7a:	200105b7          	lui	a1,0x20010
20012c7e:	68058593          	addi	a1,a1,1664 # 20010680 <metal_tty_init+0x362>
20012c82:	4d010513          	addi	a0,sp,1232
20012c86:	b8ffe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:335
    plain_len = hextobin(plain, KAT_RSA_OAEP[u++]);
20012c8a:	200105b7          	lui	a1,0x20010
20012c8e:	70458593          	addi	a1,a1,1796 # 20010704 <metal_tty_init+0x3e6>
20012c92:	f5018513          	addi	a0,gp,-176 # 800011f0 <plain>
20012c96:	b7ffe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:336
    seed_len = hextobin(seed, KAT_RSA_OAEP[u++]);
20012c9a:	200105b7          	lui	a1,0x20010
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:335
    plain_len = hextobin(plain, KAT_RSA_OAEP[u++]);
20012c9e:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:336
    seed_len = hextobin(seed, KAT_RSA_OAEP[u++]);
20012ca0:	72858593          	addi	a1,a1,1832 # 20010728 <metal_tty_init+0x40a>
20012ca4:	ed018513          	addi	a0,gp,-304 # 80001170 <seed>
20012ca8:	b6dfe0ef          	jal	ra,20011814 <hextobin>
20012cac:	ce2a                	sw	a0,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:337
    cipher_len = hextobin(cipher, KAT_RSA_OAEP[u++]);
20012cae:	200105b7          	lui	a1,0x20010
20012cb2:	75458593          	addi	a1,a1,1876 # 20010754 <metal_tty_init+0x436>
20012cb6:	cd018513          	addi	a0,gp,-816 # 80000f70 <cipher>
20012cba:	b5bfe0ef          	jal	ra,20011814 <hextobin>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:338
    rng_fake_init(&rng, NULL, seed, seed_len);
20012cbe:	46f2                	lw	a3,28(sp)
20012cc0:	ed018613          	addi	a2,gp,-304 # 80001170 <seed>
20012cc4:	00c8                	addi	a0,sp,68
20012cc6:	4581                	li	a1,0
20012cc8:	be9fe0ef          	jal	ra,200118b0 <rng_fake_init>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:340
    br_rsa_i15_oaep_encrypt(&rng.vtable, &br_sha1_vtable, NULL, 0, &pk, resultBuffer, sizeof resultBuffer, plain, plain_len);
20012ccc:	800017b7          	lui	a5,0x80001
20012cd0:	200115b7          	lui	a1,0x20011
20012cd4:	c022                	sw	s0,0(sp)
20012cd6:	f5018893          	addi	a7,gp,-176 # 800011f0 <plain>
20012cda:	1858                	addi	a4,sp,52
20012cdc:	00c8                	addi	a0,sp,68
20012cde:	40000813          	li	a6,1024
20012ce2:	b7078793          	addi	a5,a5,-1168 # 80000b70 <metal_segment_heap_target_end+0xffffeb80>
20012ce6:	4681                	li	a3,0
20012ce8:	4601                	li	a2,0
20012cea:	8dc58593          	addi	a1,a1,-1828 # 200108dc <br_sha1_vtable>
20012cee:	8d3ff0ef          	jal	ra,200125c0 <br_rsa_i15_oaep_encrypt>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/src/sifive-welcome.c:354
}
20012cf2:	7dc12083          	lw	ra,2012(sp)
20012cf6:	7d812403          	lw	s0,2008(sp)
20012cfa:	7d412483          	lw	s1,2004(sp)
20012cfe:	7d012903          	lw	s2,2000(sp)
20012d02:	7e010113          	addi	sp,sp,2016
20012d06:	8082                	ret

20012d08 <exit>:
exit():
20012d08:	1141                	addi	sp,sp,-16
20012d0a:	c422                	sw	s0,8(sp)
20012d0c:	c606                	sw	ra,12(sp)
20012d0e:	00004797          	auipc	a5,0x4
20012d12:	40078793          	addi	a5,a5,1024 # 2001710e <__call_exitprocs>
20012d16:	842a                	mv	s0,a0
20012d18:	c781                	beqz	a5,20012d20 <exit+0x18>
20012d1a:	4581                	li	a1,0
20012d1c:	3f2040ef          	jal	ra,2001710e <__call_exitprocs>
20012d20:	fffff517          	auipc	a0,0xfffff
20012d24:	93052503          	lw	a0,-1744(a0) # 20011650 <_global_impure_ptr>
20012d28:	551c                	lw	a5,40(a0)
20012d2a:	c391                	beqz	a5,20012d2e <exit+0x26>
20012d2c:	9782                	jalr	a5
20012d2e:	8522                	mv	a0,s0
20012d30:	1fc040ef          	jal	ra,20016f2c <_exit>

20012d34 <_fputs_r>:
_fputs_r():
20012d34:	1101                	addi	sp,sp,-32
20012d36:	cc22                	sw	s0,24(sp)
20012d38:	ca26                	sw	s1,20(sp)
20012d3a:	c84a                	sw	s2,16(sp)
20012d3c:	ce06                	sw	ra,28(sp)
20012d3e:	c64e                	sw	s3,12(sp)
20012d40:	c452                	sw	s4,8(sp)
20012d42:	84aa                	mv	s1,a0
20012d44:	892e                	mv	s2,a1
20012d46:	8432                	mv	s0,a2
20012d48:	c509                	beqz	a0,20012d52 <_fputs_r+0x1e>
20012d4a:	4d1c                	lw	a5,24(a0)
20012d4c:	e399                	bnez	a5,20012d52 <_fputs_r+0x1e>
20012d4e:	7c4000ef          	jal	ra,20013512 <__sinit>
20012d52:	ffffe797          	auipc	a5,0xffffe
20012d56:	bd678793          	addi	a5,a5,-1066 # 20010928 <__sf_fake_stdin>
20012d5a:	02f41063          	bne	s0,a5,20012d7a <_fputs_r+0x46>
20012d5e:	40c0                	lw	s0,4(s1)
20012d60:	00c45783          	lhu	a5,12(s0)
20012d64:	8ba1                	andi	a5,a5,8
20012d66:	cb95                	beqz	a5,20012d9a <_fputs_r+0x66>
20012d68:	481c                	lw	a5,16(s0)
20012d6a:	cb85                	beqz	a5,20012d9a <_fputs_r+0x66>
20012d6c:	59fd                	li	s3,-1
20012d6e:	4a29                	li	s4,10
20012d70:	00094583          	lbu	a1,0(s2)
20012d74:	e1a1                	bnez	a1,20012db4 <_fputs_r+0x80>
20012d76:	4501                	li	a0,0
20012d78:	a035                	j	20012da4 <_fputs_r+0x70>
20012d7a:	ffffe797          	auipc	a5,0xffffe
20012d7e:	bce78793          	addi	a5,a5,-1074 # 20010948 <__sf_fake_stdout>
20012d82:	00f41463          	bne	s0,a5,20012d8a <_fputs_r+0x56>
20012d86:	4480                	lw	s0,8(s1)
20012d88:	bfe1                	j	20012d60 <_fputs_r+0x2c>
20012d8a:	ffffe797          	auipc	a5,0xffffe
20012d8e:	b7e78793          	addi	a5,a5,-1154 # 20010908 <__sf_fake_stderr>
20012d92:	fcf417e3          	bne	s0,a5,20012d60 <_fputs_r+0x2c>
20012d96:	44c0                	lw	s0,12(s1)
20012d98:	b7e1                	j	20012d60 <_fputs_r+0x2c>
20012d9a:	85a2                	mv	a1,s0
20012d9c:	8526                	mv	a0,s1
20012d9e:	2119                	jal	200131a4 <__swsetup_r>
20012da0:	d571                	beqz	a0,20012d6c <_fputs_r+0x38>
20012da2:	557d                	li	a0,-1
20012da4:	40f2                	lw	ra,28(sp)
20012da6:	4462                	lw	s0,24(sp)
20012da8:	44d2                	lw	s1,20(sp)
20012daa:	4942                	lw	s2,16(sp)
20012dac:	49b2                	lw	s3,12(sp)
20012dae:	4a22                	lw	s4,8(sp)
20012db0:	6105                	addi	sp,sp,32
20012db2:	8082                	ret
20012db4:	441c                	lw	a5,8(s0)
20012db6:	0905                	addi	s2,s2,1
20012db8:	17fd                	addi	a5,a5,-1
20012dba:	c41c                	sw	a5,8(s0)
20012dbc:	0007d763          	bgez	a5,20012dca <_fputs_r+0x96>
20012dc0:	4c18                	lw	a4,24(s0)
20012dc2:	00e7cb63          	blt	a5,a4,20012dd8 <_fputs_r+0xa4>
20012dc6:	01458963          	beq	a1,s4,20012dd8 <_fputs_r+0xa4>
20012dca:	401c                	lw	a5,0(s0)
20012dcc:	00178713          	addi	a4,a5,1
20012dd0:	c018                	sw	a4,0(s0)
20012dd2:	00b78023          	sb	a1,0(a5)
20012dd6:	bf69                	j	20012d70 <_fputs_r+0x3c>
20012dd8:	8622                	mv	a2,s0
20012dda:	8526                	mv	a0,s1
20012ddc:	2621                	jal	200130e4 <__swbuf_r>
20012dde:	f93519e3          	bne	a0,s3,20012d70 <_fputs_r+0x3c>
20012de2:	b7c1                	j	20012da2 <_fputs_r+0x6e>

20012de4 <fputs>:
fputs():
20012de4:	862e                	mv	a2,a1
20012de6:	85aa                	mv	a1,a0
20012de8:	5ffee517          	auipc	a0,0x5ffee
20012dec:	cb852503          	lw	a0,-840(a0) # 80000aa0 <_impure_ptr>
20012df0:	b791                	j	20012d34 <_fputs_r>

20012df2 <memcpy>:
memcpy():
20012df2:	00a5c7b3          	xor	a5,a1,a0
20012df6:	8b8d                	andi	a5,a5,3
20012df8:	00c506b3          	add	a3,a0,a2
20012dfc:	e781                	bnez	a5,20012e04 <memcpy+0x12>
20012dfe:	478d                	li	a5,3
20012e00:	00c7ee63          	bltu	a5,a2,20012e1c <memcpy+0x2a>
20012e04:	87aa                	mv	a5,a0
20012e06:	06d57163          	bgeu	a0,a3,20012e68 <memcpy+0x76>
20012e0a:	0005c703          	lbu	a4,0(a1)
20012e0e:	0785                	addi	a5,a5,1
20012e10:	0585                	addi	a1,a1,1
20012e12:	fee78fa3          	sb	a4,-1(a5)
20012e16:	fed7eae3          	bltu	a5,a3,20012e0a <memcpy+0x18>
20012e1a:	8082                	ret
20012e1c:	00357713          	andi	a4,a0,3
20012e20:	87aa                	mv	a5,a0
20012e22:	cb11                	beqz	a4,20012e36 <memcpy+0x44>
20012e24:	0005c703          	lbu	a4,0(a1)
20012e28:	0785                	addi	a5,a5,1
20012e2a:	0585                	addi	a1,a1,1
20012e2c:	fee78fa3          	sb	a4,-1(a5)
20012e30:	0037f713          	andi	a4,a5,3
20012e34:	b7fd                	j	20012e22 <memcpy+0x30>
20012e36:	ffc6f713          	andi	a4,a3,-4
20012e3a:	40f70833          	sub	a6,a4,a5
20012e3e:	02000613          	li	a2,32
20012e42:	03064463          	blt	a2,a6,20012e6a <memcpy+0x78>
20012e46:	882e                	mv	a6,a1
20012e48:	863e                	mv	a2,a5
20012e4a:	06e66b63          	bltu	a2,a4,20012ec0 <memcpy+0xce>
20012e4e:	ffd78813          	addi	a6,a5,-3
20012e52:	4601                	li	a2,0
20012e54:	01076663          	bltu	a4,a6,20012e60 <memcpy+0x6e>
20012e58:	070d                	addi	a4,a4,3
20012e5a:	8f1d                	sub	a4,a4,a5
20012e5c:	ffc77613          	andi	a2,a4,-4
20012e60:	97b2                	add	a5,a5,a2
20012e62:	95b2                	add	a1,a1,a2
20012e64:	fad7e3e3          	bltu	a5,a3,20012e0a <memcpy+0x18>
20012e68:	8082                	ret
20012e6a:	0005a383          	lw	t2,0(a1)
20012e6e:	0045a283          	lw	t0,4(a1)
20012e72:	0085af83          	lw	t6,8(a1)
20012e76:	00c5af03          	lw	t5,12(a1)
20012e7a:	0105ae83          	lw	t4,16(a1)
20012e7e:	0145ae03          	lw	t3,20(a1)
20012e82:	0185a303          	lw	t1,24(a1)
20012e86:	01c5a883          	lw	a7,28(a1)
20012e8a:	0077a023          	sw	t2,0(a5)
20012e8e:	0057a223          	sw	t0,4(a5)
20012e92:	0205a803          	lw	a6,32(a1)
20012e96:	01f7a423          	sw	t6,8(a5)
20012e9a:	01e7a623          	sw	t5,12(a5)
20012e9e:	01d7a823          	sw	t4,16(a5)
20012ea2:	01c7aa23          	sw	t3,20(a5)
20012ea6:	0067ac23          	sw	t1,24(a5)
20012eaa:	0117ae23          	sw	a7,28(a5)
20012eae:	02478793          	addi	a5,a5,36
20012eb2:	02458593          	addi	a1,a1,36
20012eb6:	ff07ae23          	sw	a6,-4(a5)
20012eba:	40f70833          	sub	a6,a4,a5
20012ebe:	b751                	j	20012e42 <memcpy+0x50>
20012ec0:	00082883          	lw	a7,0(a6)
20012ec4:	0611                	addi	a2,a2,4
20012ec6:	0811                	addi	a6,a6,4
20012ec8:	ff162e23          	sw	a7,-4(a2)
20012ecc:	bfbd                	j	20012e4a <memcpy+0x58>

20012ece <memmove>:
memmove():
20012ece:	04a5f363          	bgeu	a1,a0,20012f14 <memmove+0x46>
20012ed2:	00c586b3          	add	a3,a1,a2
20012ed6:	02d57f63          	bgeu	a0,a3,20012f14 <memmove+0x46>
20012eda:	fff64593          	not	a1,a2
20012ede:	4781                	li	a5,0
20012ee0:	17fd                	addi	a5,a5,-1
20012ee2:	00f59363          	bne	a1,a5,20012ee8 <memmove+0x1a>
20012ee6:	8082                	ret
20012ee8:	00f68733          	add	a4,a3,a5
20012eec:	00074803          	lbu	a6,0(a4)
20012ef0:	00f60733          	add	a4,a2,a5
20012ef4:	972a                	add	a4,a4,a0
20012ef6:	01070023          	sb	a6,0(a4)
20012efa:	b7dd                	j	20012ee0 <memmove+0x12>
20012efc:	00f58733          	add	a4,a1,a5
20012f00:	00074683          	lbu	a3,0(a4)
20012f04:	00f50733          	add	a4,a0,a5
20012f08:	0785                	addi	a5,a5,1
20012f0a:	00d70023          	sb	a3,0(a4)
20012f0e:	fef617e3          	bne	a2,a5,20012efc <memmove+0x2e>
20012f12:	8082                	ret
20012f14:	4781                	li	a5,0
20012f16:	bfe5                	j	20012f0e <memmove+0x40>

20012f18 <memset>:
memset():
20012f18:	433d                	li	t1,15
20012f1a:	872a                	mv	a4,a0
20012f1c:	02c37363          	bgeu	t1,a2,20012f42 <memset+0x2a>
20012f20:	00f77793          	andi	a5,a4,15
20012f24:	efbd                	bnez	a5,20012fa2 <memset+0x8a>
20012f26:	e5ad                	bnez	a1,20012f90 <memset+0x78>
20012f28:	ff067693          	andi	a3,a2,-16
20012f2c:	8a3d                	andi	a2,a2,15
20012f2e:	96ba                	add	a3,a3,a4
20012f30:	c30c                	sw	a1,0(a4)
20012f32:	c34c                	sw	a1,4(a4)
20012f34:	c70c                	sw	a1,8(a4)
20012f36:	c74c                	sw	a1,12(a4)
20012f38:	0741                	addi	a4,a4,16
20012f3a:	fed76be3          	bltu	a4,a3,20012f30 <memset+0x18>
20012f3e:	e211                	bnez	a2,20012f42 <memset+0x2a>
20012f40:	8082                	ret
20012f42:	40c306b3          	sub	a3,t1,a2
20012f46:	068a                	slli	a3,a3,0x2
20012f48:	00000297          	auipc	t0,0x0
20012f4c:	9696                	add	a3,a3,t0
20012f4e:	00a68067          	jr	10(a3)
20012f52:	00b70723          	sb	a1,14(a4)
20012f56:	00b706a3          	sb	a1,13(a4)
20012f5a:	00b70623          	sb	a1,12(a4)
20012f5e:	00b705a3          	sb	a1,11(a4)
20012f62:	00b70523          	sb	a1,10(a4)
20012f66:	00b704a3          	sb	a1,9(a4)
20012f6a:	00b70423          	sb	a1,8(a4)
20012f6e:	00b703a3          	sb	a1,7(a4)
20012f72:	00b70323          	sb	a1,6(a4)
20012f76:	00b702a3          	sb	a1,5(a4)
20012f7a:	00b70223          	sb	a1,4(a4)
20012f7e:	00b701a3          	sb	a1,3(a4)
20012f82:	00b70123          	sb	a1,2(a4)
20012f86:	00b700a3          	sb	a1,1(a4)
20012f8a:	00b70023          	sb	a1,0(a4)
20012f8e:	8082                	ret
20012f90:	0ff5f593          	zext.b	a1,a1
20012f94:	00859693          	slli	a3,a1,0x8
20012f98:	8dd5                	or	a1,a1,a3
20012f9a:	01059693          	slli	a3,a1,0x10
20012f9e:	8dd5                	or	a1,a1,a3
20012fa0:	b761                	j	20012f28 <memset+0x10>
20012fa2:	00279693          	slli	a3,a5,0x2
20012fa6:	00000297          	auipc	t0,0x0
20012faa:	9696                	add	a3,a3,t0
20012fac:	8286                	mv	t0,ra
20012fae:	fa8680e7          	jalr	-88(a3)
20012fb2:	8096                	mv	ra,t0
20012fb4:	17c1                	addi	a5,a5,-16
20012fb6:	8f1d                	sub	a4,a4,a5
20012fb8:	963e                	add	a2,a2,a5
20012fba:	f8c374e3          	bgeu	t1,a2,20012f42 <memset+0x2a>
20012fbe:	b7a5                	j	20012f26 <memset+0xe>

20012fc0 <iprintf>:
printf():
20012fc0:	715d                	addi	sp,sp,-80
20012fc2:	d422                	sw	s0,40(sp)
20012fc4:	d606                	sw	ra,44(sp)
20012fc6:	842a                	mv	s0,a0
20012fc8:	da2e                	sw	a1,52(sp)
20012fca:	dc32                	sw	a2,56(sp)
20012fcc:	de36                	sw	a3,60(sp)
20012fce:	c0ba                	sw	a4,64(sp)
20012fd0:	c2be                	sw	a5,68(sp)
20012fd2:	c4c2                	sw	a6,72(sp)
20012fd4:	c6c6                	sw	a7,76(sp)
20012fd6:	5ffee517          	auipc	a0,0x5ffee
20012fda:	aca52503          	lw	a0,-1334(a0) # 80000aa0 <_impure_ptr>
20012fde:	c511                	beqz	a0,20012fea <iprintf+0x2a>
20012fe0:	4d1c                	lw	a5,24(a0)
20012fe2:	e781                	bnez	a5,20012fea <iprintf+0x2a>
20012fe4:	c62a                	sw	a0,12(sp)
20012fe6:	2335                	jal	20013512 <__sinit>
20012fe8:	4532                	lw	a0,12(sp)
20012fea:	450c                	lw	a1,8(a0)
20012fec:	1854                	addi	a3,sp,52
20012fee:	8622                	mv	a2,s0
20012ff0:	ce36                	sw	a3,28(sp)
20012ff2:	17d000ef          	jal	ra,2001396e <_vfiprintf_r>
20012ff6:	50b2                	lw	ra,44(sp)
20012ff8:	5422                	lw	s0,40(sp)
20012ffa:	6161                	addi	sp,sp,80
20012ffc:	8082                	ret

20012ffe <_puts_r>:
_puts_r():
20012ffe:	1101                	addi	sp,sp,-32
20013000:	ca26                	sw	s1,20(sp)
20013002:	c84a                	sw	s2,16(sp)
20013004:	ce06                	sw	ra,28(sp)
20013006:	cc22                	sw	s0,24(sp)
20013008:	c64e                	sw	s3,12(sp)
2001300a:	c452                	sw	s4,8(sp)
2001300c:	84aa                	mv	s1,a0
2001300e:	892e                	mv	s2,a1
20013010:	c501                	beqz	a0,20013018 <_puts_r+0x1a>
20013012:	4d1c                	lw	a5,24(a0)
20013014:	e391                	bnez	a5,20013018 <_puts_r+0x1a>
20013016:	29f5                	jal	20013512 <__sinit>
20013018:	4c9c                	lw	a5,24(s1)
2001301a:	4480                	lw	s0,8(s1)
2001301c:	e399                	bnez	a5,20013022 <_puts_r+0x24>
2001301e:	8526                	mv	a0,s1
20013020:	29cd                	jal	20013512 <__sinit>
20013022:	ffffe797          	auipc	a5,0xffffe
20013026:	90678793          	addi	a5,a5,-1786 # 20010928 <__sf_fake_stdin>
2001302a:	02f41c63          	bne	s0,a5,20013062 <_puts_r+0x64>
2001302e:	40c0                	lw	s0,4(s1)
20013030:	00c45783          	lhu	a5,12(s0)
20013034:	8ba1                	andi	a5,a5,8
20013036:	c7b1                	beqz	a5,20013082 <_puts_r+0x84>
20013038:	481c                	lw	a5,16(s0)
2001303a:	c7a1                	beqz	a5,20013082 <_puts_r+0x84>
2001303c:	59fd                	li	s3,-1
2001303e:	4a29                	li	s4,10
20013040:	441c                	lw	a5,8(s0)
20013042:	00094583          	lbu	a1,0(s2)
20013046:	17fd                	addi	a5,a5,-1
20013048:	e9b1                	bnez	a1,2001309c <_puts_r+0x9e>
2001304a:	c41c                	sw	a5,8(s0)
2001304c:	0607de63          	bgez	a5,200130c8 <_puts_r+0xca>
20013050:	8622                	mv	a2,s0
20013052:	45a9                	li	a1,10
20013054:	8526                	mv	a0,s1
20013056:	2079                	jal	200130e4 <__swbuf_r>
20013058:	57fd                	li	a5,-1
2001305a:	02f50863          	beq	a0,a5,2001308a <_puts_r+0x8c>
2001305e:	4529                	li	a0,10
20013060:	a035                	j	2001308c <_puts_r+0x8e>
20013062:	ffffe797          	auipc	a5,0xffffe
20013066:	8e678793          	addi	a5,a5,-1818 # 20010948 <__sf_fake_stdout>
2001306a:	00f41463          	bne	s0,a5,20013072 <_puts_r+0x74>
2001306e:	4480                	lw	s0,8(s1)
20013070:	b7c1                	j	20013030 <_puts_r+0x32>
20013072:	ffffe797          	auipc	a5,0xffffe
20013076:	89678793          	addi	a5,a5,-1898 # 20010908 <__sf_fake_stderr>
2001307a:	faf41be3          	bne	s0,a5,20013030 <_puts_r+0x32>
2001307e:	44c0                	lw	s0,12(s1)
20013080:	bf45                	j	20013030 <_puts_r+0x32>
20013082:	85a2                	mv	a1,s0
20013084:	8526                	mv	a0,s1
20013086:	2a39                	jal	200131a4 <__swsetup_r>
20013088:	d955                	beqz	a0,2001303c <_puts_r+0x3e>
2001308a:	557d                	li	a0,-1
2001308c:	40f2                	lw	ra,28(sp)
2001308e:	4462                	lw	s0,24(sp)
20013090:	44d2                	lw	s1,20(sp)
20013092:	4942                	lw	s2,16(sp)
20013094:	49b2                	lw	s3,12(sp)
20013096:	4a22                	lw	s4,8(sp)
20013098:	6105                	addi	sp,sp,32
2001309a:	8082                	ret
2001309c:	c41c                	sw	a5,8(s0)
2001309e:	0905                	addi	s2,s2,1
200130a0:	0007d763          	bgez	a5,200130ae <_puts_r+0xb0>
200130a4:	4c18                	lw	a4,24(s0)
200130a6:	00e7cb63          	blt	a5,a4,200130bc <_puts_r+0xbe>
200130aa:	01458963          	beq	a1,s4,200130bc <_puts_r+0xbe>
200130ae:	401c                	lw	a5,0(s0)
200130b0:	00178713          	addi	a4,a5,1
200130b4:	c018                	sw	a4,0(s0)
200130b6:	00b78023          	sb	a1,0(a5)
200130ba:	b759                	j	20013040 <_puts_r+0x42>
200130bc:	8622                	mv	a2,s0
200130be:	8526                	mv	a0,s1
200130c0:	2015                	jal	200130e4 <__swbuf_r>
200130c2:	f7351fe3          	bne	a0,s3,20013040 <_puts_r+0x42>
200130c6:	b7d1                	j	2001308a <_puts_r+0x8c>
200130c8:	401c                	lw	a5,0(s0)
200130ca:	00178713          	addi	a4,a5,1
200130ce:	c018                	sw	a4,0(s0)
200130d0:	4729                	li	a4,10
200130d2:	00e78023          	sb	a4,0(a5)
200130d6:	b761                	j	2001305e <_puts_r+0x60>

200130d8 <puts>:
puts():
200130d8:	85aa                	mv	a1,a0
200130da:	5ffee517          	auipc	a0,0x5ffee
200130de:	9c652503          	lw	a0,-1594(a0) # 80000aa0 <_impure_ptr>
200130e2:	bf31                	j	20012ffe <_puts_r>

200130e4 <__swbuf_r>:
__swbuf_r():
200130e4:	1101                	addi	sp,sp,-32
200130e6:	cc22                	sw	s0,24(sp)
200130e8:	ca26                	sw	s1,20(sp)
200130ea:	c84a                	sw	s2,16(sp)
200130ec:	ce06                	sw	ra,28(sp)
200130ee:	c64e                	sw	s3,12(sp)
200130f0:	84aa                	mv	s1,a0
200130f2:	892e                	mv	s2,a1
200130f4:	8432                	mv	s0,a2
200130f6:	c501                	beqz	a0,200130fe <__swbuf_r+0x1a>
200130f8:	4d1c                	lw	a5,24(a0)
200130fa:	e391                	bnez	a5,200130fe <__swbuf_r+0x1a>
200130fc:	2919                	jal	20013512 <__sinit>
200130fe:	ffffe797          	auipc	a5,0xffffe
20013102:	82a78793          	addi	a5,a5,-2006 # 20010928 <__sf_fake_stdin>
20013106:	06f41963          	bne	s0,a5,20013178 <__swbuf_r+0x94>
2001310a:	40c0                	lw	s0,4(s1)
2001310c:	4c1c                	lw	a5,24(s0)
2001310e:	c41c                	sw	a5,8(s0)
20013110:	00c45783          	lhu	a5,12(s0)
20013114:	8ba1                	andi	a5,a5,8
20013116:	c3c9                	beqz	a5,20013198 <__swbuf_r+0xb4>
20013118:	481c                	lw	a5,16(s0)
2001311a:	cfbd                	beqz	a5,20013198 <__swbuf_r+0xb4>
2001311c:	481c                	lw	a5,16(s0)
2001311e:	4008                	lw	a0,0(s0)
20013120:	0ff97993          	zext.b	s3,s2
20013124:	0ff97913          	zext.b	s2,s2
20013128:	8d1d                	sub	a0,a0,a5
2001312a:	485c                	lw	a5,20(s0)
2001312c:	00f54663          	blt	a0,a5,20013138 <__swbuf_r+0x54>
20013130:	85a2                	mv	a1,s0
20013132:	8526                	mv	a0,s1
20013134:	24c1                	jal	200133f4 <_fflush_r>
20013136:	e52d                	bnez	a0,200131a0 <__swbuf_r+0xbc>
20013138:	441c                	lw	a5,8(s0)
2001313a:	0505                	addi	a0,a0,1
2001313c:	17fd                	addi	a5,a5,-1
2001313e:	c41c                	sw	a5,8(s0)
20013140:	401c                	lw	a5,0(s0)
20013142:	00178713          	addi	a4,a5,1
20013146:	c018                	sw	a4,0(s0)
20013148:	01378023          	sb	s3,0(a5)
2001314c:	485c                	lw	a5,20(s0)
2001314e:	00a78963          	beq	a5,a0,20013160 <__swbuf_r+0x7c>
20013152:	00c45783          	lhu	a5,12(s0)
20013156:	8b85                	andi	a5,a5,1
20013158:	cb81                	beqz	a5,20013168 <__swbuf_r+0x84>
2001315a:	47a9                	li	a5,10
2001315c:	00f91663          	bne	s2,a5,20013168 <__swbuf_r+0x84>
20013160:	85a2                	mv	a1,s0
20013162:	8526                	mv	a0,s1
20013164:	2c41                	jal	200133f4 <_fflush_r>
20013166:	ed0d                	bnez	a0,200131a0 <__swbuf_r+0xbc>
20013168:	40f2                	lw	ra,28(sp)
2001316a:	4462                	lw	s0,24(sp)
2001316c:	44d2                	lw	s1,20(sp)
2001316e:	49b2                	lw	s3,12(sp)
20013170:	854a                	mv	a0,s2
20013172:	4942                	lw	s2,16(sp)
20013174:	6105                	addi	sp,sp,32
20013176:	8082                	ret
20013178:	ffffd797          	auipc	a5,0xffffd
2001317c:	7d078793          	addi	a5,a5,2000 # 20010948 <__sf_fake_stdout>
20013180:	00f41463          	bne	s0,a5,20013188 <__swbuf_r+0xa4>
20013184:	4480                	lw	s0,8(s1)
20013186:	b759                	j	2001310c <__swbuf_r+0x28>
20013188:	ffffd797          	auipc	a5,0xffffd
2001318c:	78078793          	addi	a5,a5,1920 # 20010908 <__sf_fake_stderr>
20013190:	f6f41ee3          	bne	s0,a5,2001310c <__swbuf_r+0x28>
20013194:	44c0                	lw	s0,12(s1)
20013196:	bf9d                	j	2001310c <__swbuf_r+0x28>
20013198:	85a2                	mv	a1,s0
2001319a:	8526                	mv	a0,s1
2001319c:	2021                	jal	200131a4 <__swsetup_r>
2001319e:	dd3d                	beqz	a0,2001311c <__swbuf_r+0x38>
200131a0:	597d                	li	s2,-1
200131a2:	b7d9                	j	20013168 <__swbuf_r+0x84>

200131a4 <__swsetup_r>:
__swsetup_r():
200131a4:	1141                	addi	sp,sp,-16
200131a6:	c422                	sw	s0,8(sp)
200131a8:	c226                	sw	s1,4(sp)
200131aa:	c04a                	sw	s2,0(sp)
200131ac:	c606                	sw	ra,12(sp)
200131ae:	5ffee497          	auipc	s1,0x5ffee
200131b2:	8f24a483          	lw	s1,-1806(s1) # 80000aa0 <_impure_ptr>
200131b6:	892a                	mv	s2,a0
200131b8:	842e                	mv	s0,a1
200131ba:	c489                	beqz	s1,200131c4 <__swsetup_r+0x20>
200131bc:	4c9c                	lw	a5,24(s1)
200131be:	e399                	bnez	a5,200131c4 <__swsetup_r+0x20>
200131c0:	8526                	mv	a0,s1
200131c2:	2e81                	jal	20013512 <__sinit>
200131c4:	ffffd797          	auipc	a5,0xffffd
200131c8:	76478793          	addi	a5,a5,1892 # 20010928 <__sf_fake_stdin>
200131cc:	02f41763          	bne	s0,a5,200131fa <__swsetup_r+0x56>
200131d0:	40c0                	lw	s0,4(s1)
200131d2:	00c41783          	lh	a5,12(s0)
200131d6:	01079713          	slli	a4,a5,0x10
200131da:	0087f693          	andi	a3,a5,8
200131de:	8341                	srli	a4,a4,0x10
200131e0:	eaad                	bnez	a3,20013252 <__swsetup_r+0xae>
200131e2:	01077693          	andi	a3,a4,16
200131e6:	ea95                	bnez	a3,2001321a <__swsetup_r+0x76>
200131e8:	4725                	li	a4,9
200131ea:	00e92023          	sw	a4,0(s2)
200131ee:	0407e793          	ori	a5,a5,64
200131f2:	00f41623          	sh	a5,12(s0)
200131f6:	557d                	li	a0,-1
200131f8:	a871                	j	20013294 <__swsetup_r+0xf0>
200131fa:	ffffd797          	auipc	a5,0xffffd
200131fe:	74e78793          	addi	a5,a5,1870 # 20010948 <__sf_fake_stdout>
20013202:	00f41463          	bne	s0,a5,2001320a <__swsetup_r+0x66>
20013206:	4480                	lw	s0,8(s1)
20013208:	b7e9                	j	200131d2 <__swsetup_r+0x2e>
2001320a:	ffffd797          	auipc	a5,0xffffd
2001320e:	6fe78793          	addi	a5,a5,1790 # 20010908 <__sf_fake_stderr>
20013212:	fcf410e3          	bne	s0,a5,200131d2 <__swsetup_r+0x2e>
20013216:	44c0                	lw	s0,12(s1)
20013218:	bf6d                	j	200131d2 <__swsetup_r+0x2e>
2001321a:	8b11                	andi	a4,a4,4
2001321c:	c70d                	beqz	a4,20013246 <__swsetup_r+0xa2>
2001321e:	584c                	lw	a1,52(s0)
20013220:	c989                	beqz	a1,20013232 <__swsetup_r+0x8e>
20013222:	04440793          	addi	a5,s0,68
20013226:	00f58463          	beq	a1,a5,2001322e <__swsetup_r+0x8a>
2001322a:	854a                	mv	a0,s2
2001322c:	2b89                	jal	2001377e <_free_r>
2001322e:	02042a23          	sw	zero,52(s0)
20013232:	00c45783          	lhu	a5,12(s0)
20013236:	00042223          	sw	zero,4(s0)
2001323a:	fdb7f793          	andi	a5,a5,-37
2001323e:	00f41623          	sh	a5,12(s0)
20013242:	481c                	lw	a5,16(s0)
20013244:	c01c                	sw	a5,0(s0)
20013246:	00c45783          	lhu	a5,12(s0)
2001324a:	0087e793          	ori	a5,a5,8
2001324e:	00f41623          	sh	a5,12(s0)
20013252:	481c                	lw	a5,16(s0)
20013254:	ef81                	bnez	a5,2001326c <__swsetup_r+0xc8>
20013256:	00c45783          	lhu	a5,12(s0)
2001325a:	20000713          	li	a4,512
2001325e:	2807f793          	andi	a5,a5,640
20013262:	00e78563          	beq	a5,a4,2001326c <__swsetup_r+0xc8>
20013266:	85a2                	mv	a1,s0
20013268:	854a                	mv	a0,s2
2001326a:	299d                	jal	200136e0 <__smakebuf_r>
2001326c:	00c41783          	lh	a5,12(s0)
20013270:	01079713          	slli	a4,a5,0x10
20013274:	0017f693          	andi	a3,a5,1
20013278:	8341                	srli	a4,a4,0x10
2001327a:	c29d                	beqz	a3,200132a0 <__swsetup_r+0xfc>
2001327c:	4854                	lw	a3,20(s0)
2001327e:	00042423          	sw	zero,8(s0)
20013282:	40d006b3          	neg	a3,a3
20013286:	cc14                	sw	a3,24(s0)
20013288:	4814                	lw	a3,16(s0)
2001328a:	4501                	li	a0,0
2001328c:	e681                	bnez	a3,20013294 <__swsetup_r+0xf0>
2001328e:	08077713          	andi	a4,a4,128
20013292:	ff31                	bnez	a4,200131ee <__swsetup_r+0x4a>
20013294:	40b2                	lw	ra,12(sp)
20013296:	4422                	lw	s0,8(sp)
20013298:	4492                	lw	s1,4(sp)
2001329a:	4902                	lw	s2,0(sp)
2001329c:	0141                	addi	sp,sp,16
2001329e:	8082                	ret
200132a0:	00277693          	andi	a3,a4,2
200132a4:	4601                	li	a2,0
200132a6:	e291                	bnez	a3,200132aa <__swsetup_r+0x106>
200132a8:	4850                	lw	a2,20(s0)
200132aa:	c410                	sw	a2,8(s0)
200132ac:	bff1                	j	20013288 <__swsetup_r+0xe4>

200132ae <__sflush_r>:
__sflush_r():
200132ae:	00c5d783          	lhu	a5,12(a1)
200132b2:	1101                	addi	sp,sp,-32
200132b4:	cc22                	sw	s0,24(sp)
200132b6:	ca26                	sw	s1,20(sp)
200132b8:	ce06                	sw	ra,28(sp)
200132ba:	c84a                	sw	s2,16(sp)
200132bc:	c64e                	sw	s3,12(sp)
200132be:	0087f713          	andi	a4,a5,8
200132c2:	84aa                	mv	s1,a0
200132c4:	842e                	mv	s0,a1
200132c6:	e375                	bnez	a4,200133aa <__sflush_r+0xfc>
200132c8:	41d8                	lw	a4,4(a1)
200132ca:	00e04763          	bgtz	a4,200132d8 <__sflush_r+0x2a>
200132ce:	41b8                	lw	a4,64(a1)
200132d0:	00e04463          	bgtz	a4,200132d8 <__sflush_r+0x2a>
200132d4:	4501                	li	a0,0
200132d6:	a875                	j	20013392 <__sflush_r+0xe4>
200132d8:	5458                	lw	a4,44(s0)
200132da:	df6d                	beqz	a4,200132d4 <__sflush_r+0x26>
200132dc:	6685                	lui	a3,0x1
200132de:	0004a903          	lw	s2,0(s1)
200132e2:	8ff5                	and	a5,a5,a3
200132e4:	0004a023          	sw	zero,0(s1)
200132e8:	cfa5                	beqz	a5,20013360 <__sflush_r+0xb2>
200132ea:	4868                	lw	a0,84(s0)
200132ec:	00c45783          	lhu	a5,12(s0)
200132f0:	8b91                	andi	a5,a5,4
200132f2:	c799                	beqz	a5,20013300 <__sflush_r+0x52>
200132f4:	405c                	lw	a5,4(s0)
200132f6:	8d1d                	sub	a0,a0,a5
200132f8:	585c                	lw	a5,52(s0)
200132fa:	c399                	beqz	a5,20013300 <__sflush_r+0x52>
200132fc:	403c                	lw	a5,64(s0)
200132fe:	8d1d                	sub	a0,a0,a5
20013300:	545c                	lw	a5,44(s0)
20013302:	500c                	lw	a1,32(s0)
20013304:	862a                	mv	a2,a0
20013306:	4681                	li	a3,0
20013308:	8526                	mv	a0,s1
2001330a:	9782                	jalr	a5
2001330c:	57fd                	li	a5,-1
2001330e:	00c45703          	lhu	a4,12(s0)
20013312:	00f51d63          	bne	a0,a5,2001332c <__sflush_r+0x7e>
20013316:	4094                	lw	a3,0(s1)
20013318:	47f5                	li	a5,29
2001331a:	08d7e363          	bltu	a5,a3,200133a0 <__sflush_r+0xf2>
2001331e:	204007b7          	lui	a5,0x20400
20013322:	0785                	addi	a5,a5,1
20013324:	00d7d7b3          	srl	a5,a5,a3
20013328:	8b85                	andi	a5,a5,1
2001332a:	cbbd                	beqz	a5,200133a0 <__sflush_r+0xf2>
2001332c:	481c                	lw	a5,16(s0)
2001332e:	00042223          	sw	zero,4(s0)
20013332:	c01c                	sw	a5,0(s0)
20013334:	6785                	lui	a5,0x1
20013336:	8f7d                	and	a4,a4,a5
20013338:	c719                	beqz	a4,20013346 <__sflush_r+0x98>
2001333a:	57fd                	li	a5,-1
2001333c:	00f51463          	bne	a0,a5,20013344 <__sflush_r+0x96>
20013340:	409c                	lw	a5,0(s1)
20013342:	e391                	bnez	a5,20013346 <__sflush_r+0x98>
20013344:	c868                	sw	a0,84(s0)
20013346:	584c                	lw	a1,52(s0)
20013348:	0124a023          	sw	s2,0(s1)
2001334c:	d5c1                	beqz	a1,200132d4 <__sflush_r+0x26>
2001334e:	04440793          	addi	a5,s0,68
20013352:	00f58463          	beq	a1,a5,2001335a <__sflush_r+0xac>
20013356:	8526                	mv	a0,s1
20013358:	211d                	jal	2001377e <_free_r>
2001335a:	02042a23          	sw	zero,52(s0)
2001335e:	bf9d                	j	200132d4 <__sflush_r+0x26>
20013360:	500c                	lw	a1,32(s0)
20013362:	4685                	li	a3,1
20013364:	4601                	li	a2,0
20013366:	8526                	mv	a0,s1
20013368:	9702                	jalr	a4
2001336a:	57fd                	li	a5,-1
2001336c:	f8f510e3          	bne	a0,a5,200132ec <__sflush_r+0x3e>
20013370:	409c                	lw	a5,0(s1)
20013372:	dfad                	beqz	a5,200132ec <__sflush_r+0x3e>
20013374:	4775                	li	a4,29
20013376:	00e78563          	beq	a5,a4,20013380 <__sflush_r+0xd2>
2001337a:	4759                	li	a4,22
2001337c:	00e79563          	bne	a5,a4,20013386 <__sflush_r+0xd8>
20013380:	0124a023          	sw	s2,0(s1)
20013384:	bf81                	j	200132d4 <__sflush_r+0x26>
20013386:	00c45783          	lhu	a5,12(s0)
2001338a:	0407e793          	ori	a5,a5,64
2001338e:	00f41623          	sh	a5,12(s0)
20013392:	40f2                	lw	ra,28(sp)
20013394:	4462                	lw	s0,24(sp)
20013396:	44d2                	lw	s1,20(sp)
20013398:	4942                	lw	s2,16(sp)
2001339a:	49b2                	lw	s3,12(sp)
2001339c:	6105                	addi	sp,sp,32
2001339e:	8082                	ret
200133a0:	04076713          	ori	a4,a4,64
200133a4:	00e41623          	sh	a4,12(s0)
200133a8:	b7ed                	j	20013392 <__sflush_r+0xe4>
200133aa:	0105a983          	lw	s3,16(a1)
200133ae:	f20983e3          	beqz	s3,200132d4 <__sflush_r+0x26>
200133b2:	0005a903          	lw	s2,0(a1)
200133b6:	8b8d                	andi	a5,a5,3
200133b8:	0135a023          	sw	s3,0(a1)
200133bc:	41390933          	sub	s2,s2,s3
200133c0:	4701                	li	a4,0
200133c2:	e391                	bnez	a5,200133c6 <__sflush_r+0x118>
200133c4:	49d8                	lw	a4,20(a1)
200133c6:	c418                	sw	a4,8(s0)
200133c8:	f12056e3          	blez	s2,200132d4 <__sflush_r+0x26>
200133cc:	541c                	lw	a5,40(s0)
200133ce:	500c                	lw	a1,32(s0)
200133d0:	86ca                	mv	a3,s2
200133d2:	864e                	mv	a2,s3
200133d4:	8526                	mv	a0,s1
200133d6:	9782                	jalr	a5
200133d8:	00a04a63          	bgtz	a0,200133ec <__sflush_r+0x13e>
200133dc:	00c45783          	lhu	a5,12(s0)
200133e0:	557d                	li	a0,-1
200133e2:	0407e793          	ori	a5,a5,64
200133e6:	00f41623          	sh	a5,12(s0)
200133ea:	b765                	j	20013392 <__sflush_r+0xe4>
200133ec:	99aa                	add	s3,s3,a0
200133ee:	40a90933          	sub	s2,s2,a0
200133f2:	bfd9                	j	200133c8 <__sflush_r+0x11a>

200133f4 <_fflush_r>:
_fflush_r():
200133f4:	499c                	lw	a5,16(a1)
200133f6:	cfb9                	beqz	a5,20013454 <_fflush_r+0x60>
200133f8:	1101                	addi	sp,sp,-32
200133fa:	cc22                	sw	s0,24(sp)
200133fc:	ce06                	sw	ra,28(sp)
200133fe:	842a                	mv	s0,a0
20013400:	c511                	beqz	a0,2001340c <_fflush_r+0x18>
20013402:	4d1c                	lw	a5,24(a0)
20013404:	e781                	bnez	a5,2001340c <_fflush_r+0x18>
20013406:	c62e                	sw	a1,12(sp)
20013408:	2229                	jal	20013512 <__sinit>
2001340a:	45b2                	lw	a1,12(sp)
2001340c:	ffffd797          	auipc	a5,0xffffd
20013410:	51c78793          	addi	a5,a5,1308 # 20010928 <__sf_fake_stdin>
20013414:	00f59b63          	bne	a1,a5,2001342a <_fflush_r+0x36>
20013418:	404c                	lw	a1,4(s0)
2001341a:	00c59783          	lh	a5,12(a1)
2001341e:	c795                	beqz	a5,2001344a <_fflush_r+0x56>
20013420:	8522                	mv	a0,s0
20013422:	4462                	lw	s0,24(sp)
20013424:	40f2                	lw	ra,28(sp)
20013426:	6105                	addi	sp,sp,32
20013428:	b559                	j	200132ae <__sflush_r>
2001342a:	ffffd797          	auipc	a5,0xffffd
2001342e:	51e78793          	addi	a5,a5,1310 # 20010948 <__sf_fake_stdout>
20013432:	00f59463          	bne	a1,a5,2001343a <_fflush_r+0x46>
20013436:	440c                	lw	a1,8(s0)
20013438:	b7cd                	j	2001341a <_fflush_r+0x26>
2001343a:	ffffd797          	auipc	a5,0xffffd
2001343e:	4ce78793          	addi	a5,a5,1230 # 20010908 <__sf_fake_stderr>
20013442:	fcf59ce3          	bne	a1,a5,2001341a <_fflush_r+0x26>
20013446:	444c                	lw	a1,12(s0)
20013448:	bfc9                	j	2001341a <_fflush_r+0x26>
2001344a:	40f2                	lw	ra,28(sp)
2001344c:	4462                	lw	s0,24(sp)
2001344e:	4501                	li	a0,0
20013450:	6105                	addi	sp,sp,32
20013452:	8082                	ret
20013454:	4501                	li	a0,0
20013456:	8082                	ret

20013458 <std>:
std():
20013458:	1141                	addi	sp,sp,-16
2001345a:	c422                	sw	s0,8(sp)
2001345c:	c606                	sw	ra,12(sp)
2001345e:	842a                	mv	s0,a0
20013460:	00b51623          	sh	a1,12(a0)
20013464:	00c51723          	sh	a2,14(a0)
20013468:	00052023          	sw	zero,0(a0)
2001346c:	00052223          	sw	zero,4(a0)
20013470:	00052423          	sw	zero,8(a0)
20013474:	06052223          	sw	zero,100(a0)
20013478:	00052823          	sw	zero,16(a0)
2001347c:	00052a23          	sw	zero,20(a0)
20013480:	00052c23          	sw	zero,24(a0)
20013484:	4621                	li	a2,8
20013486:	4581                	li	a1,0
20013488:	05c50513          	addi	a0,a0,92
2001348c:	a8dff0ef          	jal	ra,20012f18 <memset>
20013490:	00001797          	auipc	a5,0x1
20013494:	b2078793          	addi	a5,a5,-1248 # 20013fb0 <__sread>
20013498:	d05c                	sw	a5,36(s0)
2001349a:	00001797          	auipc	a5,0x1
2001349e:	b4678793          	addi	a5,a5,-1210 # 20013fe0 <__swrite>
200134a2:	d41c                	sw	a5,40(s0)
200134a4:	00001797          	auipc	a5,0x1
200134a8:	b8a78793          	addi	a5,a5,-1142 # 2001402e <__sseek>
200134ac:	d45c                	sw	a5,44(s0)
200134ae:	00001797          	auipc	a5,0x1
200134b2:	bb678793          	addi	a5,a5,-1098 # 20014064 <__sclose>
200134b6:	40b2                	lw	ra,12(sp)
200134b8:	d000                	sw	s0,32(s0)
200134ba:	d81c                	sw	a5,48(s0)
200134bc:	4422                	lw	s0,8(sp)
200134be:	0141                	addi	sp,sp,16
200134c0:	8082                	ret

200134c2 <_cleanup_r>:
_cleanup_r():
200134c2:	00000597          	auipc	a1,0x0
200134c6:	f3258593          	addi	a1,a1,-206 # 200133f4 <_fflush_r>
200134ca:	aa81                	j	2001361a <_fwalk_reent>

200134cc <__sfmoreglue>:
__sfmoreglue():
200134cc:	1141                	addi	sp,sp,-16
200134ce:	c226                	sw	s1,4(sp)
200134d0:	06800613          	li	a2,104
200134d4:	fff58493          	addi	s1,a1,-1
200134d8:	02c484b3          	mul	s1,s1,a2
200134dc:	c04a                	sw	s2,0(sp)
200134de:	892e                	mv	s2,a1
200134e0:	c422                	sw	s0,8(sp)
200134e2:	c606                	sw	ra,12(sp)
200134e4:	07448593          	addi	a1,s1,116
200134e8:	2e35                	jal	20013824 <_malloc_r>
200134ea:	842a                	mv	s0,a0
200134ec:	cd01                	beqz	a0,20013504 <__sfmoreglue+0x38>
200134ee:	00052023          	sw	zero,0(a0)
200134f2:	01252223          	sw	s2,4(a0)
200134f6:	0531                	addi	a0,a0,12
200134f8:	c408                	sw	a0,8(s0)
200134fa:	06848613          	addi	a2,s1,104
200134fe:	4581                	li	a1,0
20013500:	a19ff0ef          	jal	ra,20012f18 <memset>
20013504:	40b2                	lw	ra,12(sp)
20013506:	8522                	mv	a0,s0
20013508:	4422                	lw	s0,8(sp)
2001350a:	4492                	lw	s1,4(sp)
2001350c:	4902                	lw	s2,0(sp)
2001350e:	0141                	addi	sp,sp,16
20013510:	8082                	ret

20013512 <__sinit>:
__sinit():
20013512:	4d1c                	lw	a5,24(a0)
20013514:	e3bd                	bnez	a5,2001357a <__sinit+0x68>
20013516:	1141                	addi	sp,sp,-16
20013518:	c422                	sw	s0,8(sp)
2001351a:	c606                	sw	ra,12(sp)
2001351c:	00000797          	auipc	a5,0x0
20013520:	fa678793          	addi	a5,a5,-90 # 200134c2 <_cleanup_r>
20013524:	d51c                	sw	a5,40(a0)
20013526:	04052423          	sw	zero,72(a0)
2001352a:	04052623          	sw	zero,76(a0)
2001352e:	04052823          	sw	zero,80(a0)
20013532:	ffffe797          	auipc	a5,0xffffe
20013536:	11e7a783          	lw	a5,286(a5) # 20011650 <_global_impure_ptr>
2001353a:	842a                	mv	s0,a0
2001353c:	00f51463          	bne	a0,a5,20013544 <__sinit+0x32>
20013540:	4785                	li	a5,1
20013542:	cd1c                	sw	a5,24(a0)
20013544:	8522                	mv	a0,s0
20013546:	281d                	jal	2001357c <__sfp>
20013548:	c048                	sw	a0,4(s0)
2001354a:	8522                	mv	a0,s0
2001354c:	2805                	jal	2001357c <__sfp>
2001354e:	c408                	sw	a0,8(s0)
20013550:	8522                	mv	a0,s0
20013552:	202d                	jal	2001357c <__sfp>
20013554:	c448                	sw	a0,12(s0)
20013556:	4048                	lw	a0,4(s0)
20013558:	4601                	li	a2,0
2001355a:	4591                	li	a1,4
2001355c:	3df5                	jal	20013458 <std>
2001355e:	4408                	lw	a0,8(s0)
20013560:	4605                	li	a2,1
20013562:	45a5                	li	a1,9
20013564:	3dd5                	jal	20013458 <std>
20013566:	4448                	lw	a0,12(s0)
20013568:	4609                	li	a2,2
2001356a:	45c9                	li	a1,18
2001356c:	35f5                	jal	20013458 <std>
2001356e:	4785                	li	a5,1
20013570:	40b2                	lw	ra,12(sp)
20013572:	cc1c                	sw	a5,24(s0)
20013574:	4422                	lw	s0,8(sp)
20013576:	0141                	addi	sp,sp,16
20013578:	8082                	ret
2001357a:	8082                	ret

2001357c <__sfp>:
__sfp():
2001357c:	1141                	addi	sp,sp,-16
2001357e:	c226                	sw	s1,4(sp)
20013580:	ffffe497          	auipc	s1,0xffffe
20013584:	0d04a483          	lw	s1,208(s1) # 20011650 <_global_impure_ptr>
20013588:	4c9c                	lw	a5,24(s1)
2001358a:	c04a                	sw	s2,0(sp)
2001358c:	c606                	sw	ra,12(sp)
2001358e:	c422                	sw	s0,8(sp)
20013590:	892a                	mv	s2,a0
20013592:	e399                	bnez	a5,20013598 <__sfp+0x1c>
20013594:	8526                	mv	a0,s1
20013596:	3fb5                	jal	20013512 <__sinit>
20013598:	04848493          	addi	s1,s1,72
2001359c:	4480                	lw	s0,8(s1)
2001359e:	40dc                	lw	a5,4(s1)
200135a0:	17fd                	addi	a5,a5,-1
200135a2:	0007d663          	bgez	a5,200135ae <__sfp+0x32>
200135a6:	409c                	lw	a5,0(s1)
200135a8:	cfb9                	beqz	a5,20013606 <__sfp+0x8a>
200135aa:	4084                	lw	s1,0(s1)
200135ac:	bfc5                	j	2001359c <__sfp+0x20>
200135ae:	00c41703          	lh	a4,12(s0)
200135b2:	e739                	bnez	a4,20013600 <__sfp+0x84>
200135b4:	77c1                	lui	a5,0xffff0
200135b6:	0785                	addi	a5,a5,1
200135b8:	06042223          	sw	zero,100(s0)
200135bc:	00042023          	sw	zero,0(s0)
200135c0:	00042223          	sw	zero,4(s0)
200135c4:	00042423          	sw	zero,8(s0)
200135c8:	c45c                	sw	a5,12(s0)
200135ca:	00042823          	sw	zero,16(s0)
200135ce:	00042a23          	sw	zero,20(s0)
200135d2:	00042c23          	sw	zero,24(s0)
200135d6:	4621                	li	a2,8
200135d8:	4581                	li	a1,0
200135da:	05c40513          	addi	a0,s0,92
200135de:	93bff0ef          	jal	ra,20012f18 <memset>
200135e2:	02042a23          	sw	zero,52(s0)
200135e6:	02042c23          	sw	zero,56(s0)
200135ea:	04042423          	sw	zero,72(s0)
200135ee:	04042623          	sw	zero,76(s0)
200135f2:	40b2                	lw	ra,12(sp)
200135f4:	8522                	mv	a0,s0
200135f6:	4422                	lw	s0,8(sp)
200135f8:	4492                	lw	s1,4(sp)
200135fa:	4902                	lw	s2,0(sp)
200135fc:	0141                	addi	sp,sp,16
200135fe:	8082                	ret
20013600:	06840413          	addi	s0,s0,104
20013604:	bf71                	j	200135a0 <__sfp+0x24>
20013606:	4591                	li	a1,4
20013608:	854a                	mv	a0,s2
2001360a:	35c9                	jal	200134cc <__sfmoreglue>
2001360c:	c088                	sw	a0,0(s1)
2001360e:	842a                	mv	s0,a0
20013610:	fd49                	bnez	a0,200135aa <__sfp+0x2e>
20013612:	47b1                	li	a5,12
20013614:	00f92023          	sw	a5,0(s2)
20013618:	bfe9                	j	200135f2 <__sfp+0x76>

2001361a <_fwalk_reent>:
_fwalk_reent():
2001361a:	7179                	addi	sp,sp,-48
2001361c:	d422                	sw	s0,40(sp)
2001361e:	d04a                	sw	s2,32(sp)
20013620:	ce4e                	sw	s3,28(sp)
20013622:	cc52                	sw	s4,24(sp)
20013624:	c85a                	sw	s6,16(sp)
20013626:	c65e                	sw	s7,12(sp)
20013628:	d606                	sw	ra,44(sp)
2001362a:	d226                	sw	s1,36(sp)
2001362c:	ca56                	sw	s5,20(sp)
2001362e:	892a                	mv	s2,a0
20013630:	8a2e                	mv	s4,a1
20013632:	04850413          	addi	s0,a0,72
20013636:	4981                	li	s3,0
20013638:	4b05                	li	s6,1
2001363a:	5bfd                	li	s7,-1
2001363c:	4404                	lw	s1,8(s0)
2001363e:	00442a83          	lw	s5,4(s0)
20013642:	1afd                	addi	s5,s5,-1
20013644:	020ad063          	bgez	s5,20013664 <_fwalk_reent+0x4a>
20013648:	4000                	lw	s0,0(s0)
2001364a:	f86d                	bnez	s0,2001363c <_fwalk_reent+0x22>
2001364c:	50b2                	lw	ra,44(sp)
2001364e:	5422                	lw	s0,40(sp)
20013650:	5492                	lw	s1,36(sp)
20013652:	5902                	lw	s2,32(sp)
20013654:	4a62                	lw	s4,24(sp)
20013656:	4ad2                	lw	s5,20(sp)
20013658:	4b42                	lw	s6,16(sp)
2001365a:	4bb2                	lw	s7,12(sp)
2001365c:	854e                	mv	a0,s3
2001365e:	49f2                	lw	s3,28(sp)
20013660:	6145                	addi	sp,sp,48
20013662:	8082                	ret
20013664:	00c4d783          	lhu	a5,12(s1)
20013668:	00fb7b63          	bgeu	s6,a5,2001367e <_fwalk_reent+0x64>
2001366c:	00e49783          	lh	a5,14(s1)
20013670:	01778763          	beq	a5,s7,2001367e <_fwalk_reent+0x64>
20013674:	85a6                	mv	a1,s1
20013676:	854a                	mv	a0,s2
20013678:	9a02                	jalr	s4
2001367a:	00a9e9b3          	or	s3,s3,a0
2001367e:	06848493          	addi	s1,s1,104
20013682:	b7c1                	j	20013642 <_fwalk_reent+0x28>

20013684 <__swhatbuf_r>:
__swhatbuf_r():
20013684:	7159                	addi	sp,sp,-112
20013686:	d0ca                	sw	s2,96(sp)
20013688:	892e                	mv	s2,a1
2001368a:	00e59583          	lh	a1,14(a1)
2001368e:	d4a2                	sw	s0,104(sp)
20013690:	d2a6                	sw	s1,100(sp)
20013692:	d686                	sw	ra,108(sp)
20013694:	8432                	mv	s0,a2
20013696:	84b6                	mv	s1,a3
20013698:	0005dc63          	bgez	a1,200136b0 <__swhatbuf_r+0x2c>
2001369c:	00c91783          	lh	a5,12(s2)
200136a0:	0004a023          	sw	zero,0(s1)
200136a4:	0807f793          	andi	a5,a5,128
200136a8:	e395                	bnez	a5,200136cc <__swhatbuf_r+0x48>
200136aa:	40000793          	li	a5,1024
200136ae:	a00d                	j	200136d0 <__swhatbuf_r+0x4c>
200136b0:	0030                	addi	a2,sp,8
200136b2:	21d000ef          	jal	ra,200140ce <_fstat_r>
200136b6:	fe0543e3          	bltz	a0,2001369c <__swhatbuf_r+0x18>
200136ba:	4732                	lw	a4,12(sp)
200136bc:	67bd                	lui	a5,0xf
200136be:	8ff9                	and	a5,a5,a4
200136c0:	7779                	lui	a4,0xffffe
200136c2:	97ba                	add	a5,a5,a4
200136c4:	0017b793          	seqz	a5,a5
200136c8:	c09c                	sw	a5,0(s1)
200136ca:	b7c5                	j	200136aa <__swhatbuf_r+0x26>
200136cc:	04000793          	li	a5,64
200136d0:	50b6                	lw	ra,108(sp)
200136d2:	c01c                	sw	a5,0(s0)
200136d4:	5426                	lw	s0,104(sp)
200136d6:	5496                	lw	s1,100(sp)
200136d8:	5906                	lw	s2,96(sp)
200136da:	4501                	li	a0,0
200136dc:	6165                	addi	sp,sp,112
200136de:	8082                	ret

200136e0 <__smakebuf_r>:
__smakebuf_r():
200136e0:	00c5d783          	lhu	a5,12(a1)
200136e4:	1101                	addi	sp,sp,-32
200136e6:	cc22                	sw	s0,24(sp)
200136e8:	ce06                	sw	ra,28(sp)
200136ea:	ca26                	sw	s1,20(sp)
200136ec:	c84a                	sw	s2,16(sp)
200136ee:	8b89                	andi	a5,a5,2
200136f0:	842e                	mv	s0,a1
200136f2:	cf89                	beqz	a5,2001370c <__smakebuf_r+0x2c>
200136f4:	04740793          	addi	a5,s0,71
200136f8:	c01c                	sw	a5,0(s0)
200136fa:	c81c                	sw	a5,16(s0)
200136fc:	4785                	li	a5,1
200136fe:	c85c                	sw	a5,20(s0)
20013700:	40f2                	lw	ra,28(sp)
20013702:	4462                	lw	s0,24(sp)
20013704:	44d2                	lw	s1,20(sp)
20013706:	4942                	lw	s2,16(sp)
20013708:	6105                	addi	sp,sp,32
2001370a:	8082                	ret
2001370c:	0074                	addi	a3,sp,12
2001370e:	0030                	addi	a2,sp,8
20013710:	892a                	mv	s2,a0
20013712:	3f8d                	jal	20013684 <__swhatbuf_r>
20013714:	45a2                	lw	a1,8(sp)
20013716:	84aa                	mv	s1,a0
20013718:	854a                	mv	a0,s2
2001371a:	2229                	jal	20013824 <_malloc_r>
2001371c:	ed01                	bnez	a0,20013734 <__smakebuf_r+0x54>
2001371e:	00c41783          	lh	a5,12(s0)
20013722:	2007f713          	andi	a4,a5,512
20013726:	ff69                	bnez	a4,20013700 <__smakebuf_r+0x20>
20013728:	9bf1                	andi	a5,a5,-4
2001372a:	0027e793          	ori	a5,a5,2
2001372e:	00f41623          	sh	a5,12(s0)
20013732:	b7c9                	j	200136f4 <__smakebuf_r+0x14>
20013734:	00000797          	auipc	a5,0x0
20013738:	d8e78793          	addi	a5,a5,-626 # 200134c2 <_cleanup_r>
2001373c:	02f92423          	sw	a5,40(s2)
20013740:	00c45783          	lhu	a5,12(s0)
20013744:	c008                	sw	a0,0(s0)
20013746:	c808                	sw	a0,16(s0)
20013748:	0807e793          	ori	a5,a5,128
2001374c:	00f41623          	sh	a5,12(s0)
20013750:	47a2                	lw	a5,8(sp)
20013752:	c85c                	sw	a5,20(s0)
20013754:	47b2                	lw	a5,12(sp)
20013756:	cf91                	beqz	a5,20013772 <__smakebuf_r+0x92>
20013758:	00e41583          	lh	a1,14(s0)
2001375c:	854a                	mv	a0,s2
2001375e:	1a3000ef          	jal	ra,20014100 <_isatty_r>
20013762:	c901                	beqz	a0,20013772 <__smakebuf_r+0x92>
20013764:	00c45783          	lhu	a5,12(s0)
20013768:	9bf1                	andi	a5,a5,-4
2001376a:	0017e793          	ori	a5,a5,1
2001376e:	00f41623          	sh	a5,12(s0)
20013772:	00c45503          	lhu	a0,12(s0)
20013776:	8cc9                	or	s1,s1,a0
20013778:	00941623          	sh	s1,12(s0)
2001377c:	b751                	j	20013700 <__smakebuf_r+0x20>

2001377e <_free_r>:
_free_r():
2001377e:	c1d5                	beqz	a1,20013822 <_free_r+0xa4>
20013780:	ffc5a783          	lw	a5,-4(a1)
20013784:	1101                	addi	sp,sp,-32
20013786:	cc22                	sw	s0,24(sp)
20013788:	ce06                	sw	ra,28(sp)
2001378a:	ffc58413          	addi	s0,a1,-4
2001378e:	0007d363          	bgez	a5,20013794 <_free_r+0x16>
20013792:	943e                	add	s0,s0,a5
20013794:	c62a                	sw	a0,12(sp)
20013796:	1e9000ef          	jal	ra,2001417e <__malloc_lock>
2001379a:	5ffed717          	auipc	a4,0x5ffed
2001379e:	32e70713          	addi	a4,a4,814 # 80000ac8 <__malloc_free_list>
200137a2:	431c                	lw	a5,0(a4)
200137a4:	4532                	lw	a0,12(sp)
200137a6:	eb89                	bnez	a5,200137b8 <_free_r+0x3a>
200137a8:	00042223          	sw	zero,4(s0)
200137ac:	c300                	sw	s0,0(a4)
200137ae:	4462                	lw	s0,24(sp)
200137b0:	40f2                	lw	ra,28(sp)
200137b2:	6105                	addi	sp,sp,32
200137b4:	1cd0006f          	j	20014180 <__malloc_unlock>
200137b8:	00f47d63          	bgeu	s0,a5,200137d2 <_free_r+0x54>
200137bc:	4010                	lw	a2,0(s0)
200137be:	00c406b3          	add	a3,s0,a2
200137c2:	00d79663          	bne	a5,a3,200137ce <_free_r+0x50>
200137c6:	4394                	lw	a3,0(a5)
200137c8:	43dc                	lw	a5,4(a5)
200137ca:	96b2                	add	a3,a3,a2
200137cc:	c014                	sw	a3,0(s0)
200137ce:	c05c                	sw	a5,4(s0)
200137d0:	bff1                	j	200137ac <_free_r+0x2e>
200137d2:	873e                	mv	a4,a5
200137d4:	43dc                	lw	a5,4(a5)
200137d6:	c399                	beqz	a5,200137dc <_free_r+0x5e>
200137d8:	fef47de3          	bgeu	s0,a5,200137d2 <_free_r+0x54>
200137dc:	4314                	lw	a3,0(a4)
200137de:	00d70633          	add	a2,a4,a3
200137e2:	00861f63          	bne	a2,s0,20013800 <_free_r+0x82>
200137e6:	4010                	lw	a2,0(s0)
200137e8:	96b2                	add	a3,a3,a2
200137ea:	c314                	sw	a3,0(a4)
200137ec:	00d70633          	add	a2,a4,a3
200137f0:	fac79fe3          	bne	a5,a2,200137ae <_free_r+0x30>
200137f4:	4390                	lw	a2,0(a5)
200137f6:	43dc                	lw	a5,4(a5)
200137f8:	96b2                	add	a3,a3,a2
200137fa:	c314                	sw	a3,0(a4)
200137fc:	c35c                	sw	a5,4(a4)
200137fe:	bf45                	j	200137ae <_free_r+0x30>
20013800:	00c47563          	bgeu	s0,a2,2001380a <_free_r+0x8c>
20013804:	47b1                	li	a5,12
20013806:	c11c                	sw	a5,0(a0)
20013808:	b75d                	j	200137ae <_free_r+0x30>
2001380a:	4010                	lw	a2,0(s0)
2001380c:	00c406b3          	add	a3,s0,a2
20013810:	00d79663          	bne	a5,a3,2001381c <_free_r+0x9e>
20013814:	4394                	lw	a3,0(a5)
20013816:	43dc                	lw	a5,4(a5)
20013818:	96b2                	add	a3,a3,a2
2001381a:	c014                	sw	a3,0(s0)
2001381c:	c05c                	sw	a5,4(s0)
2001381e:	c340                	sw	s0,4(a4)
20013820:	b779                	j	200137ae <_free_r+0x30>
20013822:	8082                	ret

20013824 <_malloc_r>:
_malloc_r():
20013824:	1101                	addi	sp,sp,-32
20013826:	ca26                	sw	s1,20(sp)
20013828:	00358493          	addi	s1,a1,3
2001382c:	98f1                	andi	s1,s1,-4
2001382e:	c84a                	sw	s2,16(sp)
20013830:	ce06                	sw	ra,28(sp)
20013832:	cc22                	sw	s0,24(sp)
20013834:	c64e                	sw	s3,12(sp)
20013836:	04a1                	addi	s1,s1,8
20013838:	47b1                	li	a5,12
2001383a:	892a                	mv	s2,a0
2001383c:	04f4f663          	bgeu	s1,a5,20013888 <_malloc_r+0x64>
20013840:	44b1                	li	s1,12
20013842:	04b4e563          	bltu	s1,a1,2001388c <_malloc_r+0x68>
20013846:	854a                	mv	a0,s2
20013848:	137000ef          	jal	ra,2001417e <__malloc_lock>
2001384c:	5ffed697          	auipc	a3,0x5ffed
20013850:	27c68693          	addi	a3,a3,636 # 80000ac8 <__malloc_free_list>
20013854:	4298                	lw	a4,0(a3)
20013856:	843a                	mv	s0,a4
20013858:	e429                	bnez	s0,200138a2 <_malloc_r+0x7e>
2001385a:	5ffed417          	auipc	s0,0x5ffed
2001385e:	27240413          	addi	s0,s0,626 # 80000acc <__malloc_sbrk_start>
20013862:	401c                	lw	a5,0(s0)
20013864:	e789                	bnez	a5,2001386e <_malloc_r+0x4a>
20013866:	4581                	li	a1,0
20013868:	854a                	mv	a0,s2
2001386a:	2f19                	jal	20013f80 <_sbrk_r>
2001386c:	c008                	sw	a0,0(s0)
2001386e:	85a6                	mv	a1,s1
20013870:	854a                	mv	a0,s2
20013872:	2739                	jal	20013f80 <_sbrk_r>
20013874:	59fd                	li	s3,-1
20013876:	07351a63          	bne	a0,s3,200138ea <_malloc_r+0xc6>
2001387a:	47b1                	li	a5,12
2001387c:	00f92023          	sw	a5,0(s2)
20013880:	854a                	mv	a0,s2
20013882:	0ff000ef          	jal	ra,20014180 <__malloc_unlock>
20013886:	a031                	j	20013892 <_malloc_r+0x6e>
20013888:	fa04dde3          	bgez	s1,20013842 <_malloc_r+0x1e>
2001388c:	47b1                	li	a5,12
2001388e:	00f92023          	sw	a5,0(s2)
20013892:	4501                	li	a0,0
20013894:	40f2                	lw	ra,28(sp)
20013896:	4462                	lw	s0,24(sp)
20013898:	44d2                	lw	s1,20(sp)
2001389a:	4942                	lw	s2,16(sp)
2001389c:	49b2                	lw	s3,12(sp)
2001389e:	6105                	addi	sp,sp,32
200138a0:	8082                	ret
200138a2:	401c                	lw	a5,0(s0)
200138a4:	8f85                	sub	a5,a5,s1
200138a6:	0207cf63          	bltz	a5,200138e4 <_malloc_r+0xc0>
200138aa:	462d                	li	a2,11
200138ac:	00f67663          	bgeu	a2,a5,200138b8 <_malloc_r+0x94>
200138b0:	c01c                	sw	a5,0(s0)
200138b2:	943e                	add	s0,s0,a5
200138b4:	c004                	sw	s1,0(s0)
200138b6:	a029                	j	200138c0 <_malloc_r+0x9c>
200138b8:	405c                	lw	a5,4(s0)
200138ba:	02871363          	bne	a4,s0,200138e0 <_malloc_r+0xbc>
200138be:	c29c                	sw	a5,0(a3)
200138c0:	854a                	mv	a0,s2
200138c2:	0bf000ef          	jal	ra,20014180 <__malloc_unlock>
200138c6:	00b40513          	addi	a0,s0,11
200138ca:	00440793          	addi	a5,s0,4
200138ce:	9961                	andi	a0,a0,-8
200138d0:	40f50733          	sub	a4,a0,a5
200138d4:	fcf500e3          	beq	a0,a5,20013894 <_malloc_r+0x70>
200138d8:	943a                	add	s0,s0,a4
200138da:	8f89                	sub	a5,a5,a0
200138dc:	c01c                	sw	a5,0(s0)
200138de:	bf5d                	j	20013894 <_malloc_r+0x70>
200138e0:	c35c                	sw	a5,4(a4)
200138e2:	bff9                	j	200138c0 <_malloc_r+0x9c>
200138e4:	8722                	mv	a4,s0
200138e6:	4040                	lw	s0,4(s0)
200138e8:	bf85                	j	20013858 <_malloc_r+0x34>
200138ea:	00350413          	addi	s0,a0,3
200138ee:	9871                	andi	s0,s0,-4
200138f0:	fc8502e3          	beq	a0,s0,200138b4 <_malloc_r+0x90>
200138f4:	40a405b3          	sub	a1,s0,a0
200138f8:	854a                	mv	a0,s2
200138fa:	2559                	jal	20013f80 <_sbrk_r>
200138fc:	fb351ce3          	bne	a0,s3,200138b4 <_malloc_r+0x90>
20013900:	bfad                	j	2001387a <_malloc_r+0x56>

20013902 <__sfputc_r>:
__sfputc_r():
20013902:	461c                	lw	a5,8(a2)
20013904:	17fd                	addi	a5,a5,-1
20013906:	c61c                	sw	a5,8(a2)
20013908:	0007da63          	bgez	a5,2001391c <__sfputc_r+0x1a>
2001390c:	4e18                	lw	a4,24(a2)
2001390e:	00e7c563          	blt	a5,a4,20013918 <__sfputc_r+0x16>
20013912:	47a9                	li	a5,10
20013914:	00f59463          	bne	a1,a5,2001391c <__sfputc_r+0x1a>
20013918:	fccff06f          	j	200130e4 <__swbuf_r>
2001391c:	421c                	lw	a5,0(a2)
2001391e:	852e                	mv	a0,a1
20013920:	00178713          	addi	a4,a5,1
20013924:	c218                	sw	a4,0(a2)
20013926:	00b78023          	sb	a1,0(a5)
2001392a:	8082                	ret

2001392c <__sfputs_r>:
__sfputs_r():
2001392c:	1101                	addi	sp,sp,-32
2001392e:	cc22                	sw	s0,24(sp)
20013930:	ca26                	sw	s1,20(sp)
20013932:	c84a                	sw	s2,16(sp)
20013934:	c64e                	sw	s3,12(sp)
20013936:	c452                	sw	s4,8(sp)
20013938:	ce06                	sw	ra,28(sp)
2001393a:	892a                	mv	s2,a0
2001393c:	89ae                	mv	s3,a1
2001393e:	8432                	mv	s0,a2
20013940:	00d604b3          	add	s1,a2,a3
20013944:	5a7d                	li	s4,-1
20013946:	00941463          	bne	s0,s1,2001394e <__sfputs_r+0x22>
2001394a:	4501                	li	a0,0
2001394c:	a809                	j	2001395e <__sfputs_r+0x32>
2001394e:	00044583          	lbu	a1,0(s0)
20013952:	864e                	mv	a2,s3
20013954:	854a                	mv	a0,s2
20013956:	3775                	jal	20013902 <__sfputc_r>
20013958:	0405                	addi	s0,s0,1
2001395a:	ff4516e3          	bne	a0,s4,20013946 <__sfputs_r+0x1a>
2001395e:	40f2                	lw	ra,28(sp)
20013960:	4462                	lw	s0,24(sp)
20013962:	44d2                	lw	s1,20(sp)
20013964:	4942                	lw	s2,16(sp)
20013966:	49b2                	lw	s3,12(sp)
20013968:	4a22                	lw	s4,8(sp)
2001396a:	6105                	addi	sp,sp,32
2001396c:	8082                	ret

2001396e <_vfiprintf_r>:
_vfiprintf_r():
2001396e:	7135                	addi	sp,sp,-160
20013970:	cd22                	sw	s0,152(sp)
20013972:	cb26                	sw	s1,148(sp)
20013974:	c94a                	sw	s2,144(sp)
20013976:	c74e                	sw	s3,140(sp)
20013978:	cf06                	sw	ra,156(sp)
2001397a:	c552                	sw	s4,136(sp)
2001397c:	c356                	sw	s5,132(sp)
2001397e:	c15a                	sw	s6,128(sp)
20013980:	dede                	sw	s7,124(sp)
20013982:	dce2                	sw	s8,120(sp)
20013984:	dae6                	sw	s9,116(sp)
20013986:	89aa                	mv	s3,a0
20013988:	84ae                	mv	s1,a1
2001398a:	8932                	mv	s2,a2
2001398c:	8436                	mv	s0,a3
2001398e:	c501                	beqz	a0,20013996 <_vfiprintf_r+0x28>
20013990:	4d1c                	lw	a5,24(a0)
20013992:	e391                	bnez	a5,20013996 <_vfiprintf_r+0x28>
20013994:	3ebd                	jal	20013512 <__sinit>
20013996:	ffffd797          	auipc	a5,0xffffd
2001399a:	f9278793          	addi	a5,a5,-110 # 20010928 <__sf_fake_stdin>
2001399e:	0cf49c63          	bne	s1,a5,20013a76 <_vfiprintf_r+0x108>
200139a2:	0049a483          	lw	s1,4(s3)
200139a6:	00c4d783          	lhu	a5,12(s1)
200139aa:	8ba1                	andi	a5,a5,8
200139ac:	c7fd                	beqz	a5,20013a9a <_vfiprintf_r+0x12c>
200139ae:	489c                	lw	a5,16(s1)
200139b0:	c7ed                	beqz	a5,20013a9a <_vfiprintf_r+0x12c>
200139b2:	02000793          	li	a5,32
200139b6:	02f104a3          	sb	a5,41(sp)
200139ba:	03000793          	li	a5,48
200139be:	d202                	sw	zero,36(sp)
200139c0:	02f10523          	sb	a5,42(sp)
200139c4:	c622                	sw	s0,12(sp)
200139c6:	02500b93          	li	s7,37
200139ca:	ffffda97          	auipc	s5,0xffffd
200139ce:	f9ea8a93          	addi	s5,s5,-98 # 20010968 <__sf_fake_stdout+0x20>
200139d2:	4c05                	li	s8,1
200139d4:	4b29                	li	s6,10
200139d6:	844a                	mv	s0,s2
200139d8:	00044783          	lbu	a5,0(s0)
200139dc:	c399                	beqz	a5,200139e2 <_vfiprintf_r+0x74>
200139de:	0f779163          	bne	a5,s7,20013ac0 <_vfiprintf_r+0x152>
200139e2:	41240cb3          	sub	s9,s0,s2
200139e6:	01240d63          	beq	s0,s2,20013a00 <_vfiprintf_r+0x92>
200139ea:	86e6                	mv	a3,s9
200139ec:	864a                	mv	a2,s2
200139ee:	85a6                	mv	a1,s1
200139f0:	854e                	mv	a0,s3
200139f2:	3f2d                	jal	2001392c <__sfputs_r>
200139f4:	57fd                	li	a5,-1
200139f6:	1ef50563          	beq	a0,a5,20013be0 <_vfiprintf_r+0x272>
200139fa:	5792                	lw	a5,36(sp)
200139fc:	97e6                	add	a5,a5,s9
200139fe:	d23e                	sw	a5,36(sp)
20013a00:	00044783          	lbu	a5,0(s0)
20013a04:	1c078e63          	beqz	a5,20013be0 <_vfiprintf_r+0x272>
20013a08:	57fd                	li	a5,-1
20013a0a:	00140913          	addi	s2,s0,1
20013a0e:	c802                	sw	zero,16(sp)
20013a10:	ce02                	sw	zero,28(sp)
20013a12:	ca3e                	sw	a5,20(sp)
20013a14:	cc02                	sw	zero,24(sp)
20013a16:	040109a3          	sb	zero,83(sp)
20013a1a:	d482                	sw	zero,104(sp)
20013a1c:	00094583          	lbu	a1,0(s2)
20013a20:	4615                	li	a2,5
20013a22:	8556                	mv	a0,s5
20013a24:	740000ef          	jal	ra,20014164 <memchr>
20013a28:	47c2                	lw	a5,16(sp)
20013a2a:	00190413          	addi	s0,s2,1
20013a2e:	e959                	bnez	a0,20013ac4 <_vfiprintf_r+0x156>
20013a30:	0107f713          	andi	a4,a5,16
20013a34:	c709                	beqz	a4,20013a3e <_vfiprintf_r+0xd0>
20013a36:	02000713          	li	a4,32
20013a3a:	04e109a3          	sb	a4,83(sp)
20013a3e:	0087f713          	andi	a4,a5,8
20013a42:	c709                	beqz	a4,20013a4c <_vfiprintf_r+0xde>
20013a44:	02b00713          	li	a4,43
20013a48:	04e109a3          	sb	a4,83(sp)
20013a4c:	00094683          	lbu	a3,0(s2)
20013a50:	02a00713          	li	a4,42
20013a54:	08e68063          	beq	a3,a4,20013ad4 <_vfiprintf_r+0x166>
20013a58:	47f2                	lw	a5,28(sp)
20013a5a:	844a                	mv	s0,s2
20013a5c:	4681                	li	a3,0
20013a5e:	4625                	li	a2,9
20013a60:	00044703          	lbu	a4,0(s0)
20013a64:	00140593          	addi	a1,s0,1
20013a68:	fd070713          	addi	a4,a4,-48
20013a6c:	0ae67963          	bgeu	a2,a4,20013b1e <_vfiprintf_r+0x1b0>
20013a70:	cab5                	beqz	a3,20013ae4 <_vfiprintf_r+0x176>
20013a72:	ce3e                	sw	a5,28(sp)
20013a74:	a885                	j	20013ae4 <_vfiprintf_r+0x176>
20013a76:	ffffd797          	auipc	a5,0xffffd
20013a7a:	ed278793          	addi	a5,a5,-302 # 20010948 <__sf_fake_stdout>
20013a7e:	00f49563          	bne	s1,a5,20013a88 <_vfiprintf_r+0x11a>
20013a82:	0089a483          	lw	s1,8(s3)
20013a86:	b705                	j	200139a6 <_vfiprintf_r+0x38>
20013a88:	ffffd797          	auipc	a5,0xffffd
20013a8c:	e8078793          	addi	a5,a5,-384 # 20010908 <__sf_fake_stderr>
20013a90:	f0f49be3          	bne	s1,a5,200139a6 <_vfiprintf_r+0x38>
20013a94:	00c9a483          	lw	s1,12(s3)
20013a98:	b739                	j	200139a6 <_vfiprintf_r+0x38>
20013a9a:	85a6                	mv	a1,s1
20013a9c:	854e                	mv	a0,s3
20013a9e:	f06ff0ef          	jal	ra,200131a4 <__swsetup_r>
20013aa2:	d901                	beqz	a0,200139b2 <_vfiprintf_r+0x44>
20013aa4:	557d                	li	a0,-1
20013aa6:	40fa                	lw	ra,156(sp)
20013aa8:	446a                	lw	s0,152(sp)
20013aaa:	44da                	lw	s1,148(sp)
20013aac:	494a                	lw	s2,144(sp)
20013aae:	49ba                	lw	s3,140(sp)
20013ab0:	4a2a                	lw	s4,136(sp)
20013ab2:	4a9a                	lw	s5,132(sp)
20013ab4:	4b0a                	lw	s6,128(sp)
20013ab6:	5bf6                	lw	s7,124(sp)
20013ab8:	5c66                	lw	s8,120(sp)
20013aba:	5cd6                	lw	s9,116(sp)
20013abc:	610d                	addi	sp,sp,160
20013abe:	8082                	ret
20013ac0:	0405                	addi	s0,s0,1
20013ac2:	bf19                	j	200139d8 <_vfiprintf_r+0x6a>
20013ac4:	41550533          	sub	a0,a0,s5
20013ac8:	00ac1533          	sll	a0,s8,a0
20013acc:	8fc9                	or	a5,a5,a0
20013ace:	c83e                	sw	a5,16(sp)
20013ad0:	8922                	mv	s2,s0
20013ad2:	b7a9                	j	20013a1c <_vfiprintf_r+0xae>
20013ad4:	4732                	lw	a4,12(sp)
20013ad6:	00470693          	addi	a3,a4,4
20013ada:	4318                	lw	a4,0(a4)
20013adc:	c636                	sw	a3,12(sp)
20013ade:	02074963          	bltz	a4,20013b10 <_vfiprintf_r+0x1a2>
20013ae2:	ce3a                	sw	a4,28(sp)
20013ae4:	00044703          	lbu	a4,0(s0)
20013ae8:	02e00793          	li	a5,46
20013aec:	04f71f63          	bne	a4,a5,20013b4a <_vfiprintf_r+0x1dc>
20013af0:	00144703          	lbu	a4,1(s0)
20013af4:	02a00793          	li	a5,42
20013af8:	02f71b63          	bne	a4,a5,20013b2e <_vfiprintf_r+0x1c0>
20013afc:	47b2                	lw	a5,12(sp)
20013afe:	0409                	addi	s0,s0,2
20013b00:	00478713          	addi	a4,a5,4
20013b04:	439c                	lw	a5,0(a5)
20013b06:	c63a                	sw	a4,12(sp)
20013b08:	0207c163          	bltz	a5,20013b2a <_vfiprintf_r+0x1bc>
20013b0c:	ca3e                	sw	a5,20(sp)
20013b0e:	a835                	j	20013b4a <_vfiprintf_r+0x1dc>
20013b10:	40e00733          	neg	a4,a4
20013b14:	0027e793          	ori	a5,a5,2
20013b18:	ce3a                	sw	a4,28(sp)
20013b1a:	c83e                	sw	a5,16(sp)
20013b1c:	b7e1                	j	20013ae4 <_vfiprintf_r+0x176>
20013b1e:	036787b3          	mul	a5,a5,s6
20013b22:	842e                	mv	s0,a1
20013b24:	4685                	li	a3,1
20013b26:	97ba                	add	a5,a5,a4
20013b28:	bf25                	j	20013a60 <_vfiprintf_r+0xf2>
20013b2a:	57fd                	li	a5,-1
20013b2c:	b7c5                	j	20013b0c <_vfiprintf_r+0x19e>
20013b2e:	0405                	addi	s0,s0,1
20013b30:	ca02                	sw	zero,20(sp)
20013b32:	4681                	li	a3,0
20013b34:	4781                	li	a5,0
20013b36:	4625                	li	a2,9
20013b38:	00044703          	lbu	a4,0(s0)
20013b3c:	00140593          	addi	a1,s0,1
20013b40:	fd070713          	addi	a4,a4,-48
20013b44:	06e67463          	bgeu	a2,a4,20013bac <_vfiprintf_r+0x23e>
20013b48:	f2f1                	bnez	a3,20013b0c <_vfiprintf_r+0x19e>
20013b4a:	00044583          	lbu	a1,0(s0)
20013b4e:	460d                	li	a2,3
20013b50:	ffffd517          	auipc	a0,0xffffd
20013b54:	e2050513          	addi	a0,a0,-480 # 20010970 <__sf_fake_stdout+0x28>
20013b58:	2531                	jal	20014164 <memchr>
20013b5a:	cd11                	beqz	a0,20013b76 <_vfiprintf_r+0x208>
20013b5c:	ffffd797          	auipc	a5,0xffffd
20013b60:	e1478793          	addi	a5,a5,-492 # 20010970 <__sf_fake_stdout+0x28>
20013b64:	8d1d                	sub	a0,a0,a5
20013b66:	04000793          	li	a5,64
20013b6a:	00a797b3          	sll	a5,a5,a0
20013b6e:	4542                	lw	a0,16(sp)
20013b70:	0405                	addi	s0,s0,1
20013b72:	8d5d                	or	a0,a0,a5
20013b74:	c82a                	sw	a0,16(sp)
20013b76:	00044583          	lbu	a1,0(s0)
20013b7a:	4619                	li	a2,6
20013b7c:	ffffd517          	auipc	a0,0xffffd
20013b80:	df850513          	addi	a0,a0,-520 # 20010974 <__sf_fake_stdout+0x2c>
20013b84:	00140913          	addi	s2,s0,1
20013b88:	02b10423          	sb	a1,40(sp)
20013b8c:	2be1                	jal	20014164 <memchr>
20013b8e:	c12d                	beqz	a0,20013bf0 <_vfiprintf_r+0x282>
20013b90:	00000793          	li	a5,0
20013b94:	e795                	bnez	a5,20013bc0 <_vfiprintf_r+0x252>
20013b96:	4742                	lw	a4,16(sp)
20013b98:	47b2                	lw	a5,12(sp)
20013b9a:	10077713          	andi	a4,a4,256
20013b9e:	cf09                	beqz	a4,20013bb8 <_vfiprintf_r+0x24a>
20013ba0:	0791                	addi	a5,a5,4
20013ba2:	c63e                	sw	a5,12(sp)
20013ba4:	5792                	lw	a5,36(sp)
20013ba6:	97d2                	add	a5,a5,s4
20013ba8:	d23e                	sw	a5,36(sp)
20013baa:	b535                	j	200139d6 <_vfiprintf_r+0x68>
20013bac:	036787b3          	mul	a5,a5,s6
20013bb0:	842e                	mv	s0,a1
20013bb2:	4685                	li	a3,1
20013bb4:	97ba                	add	a5,a5,a4
20013bb6:	b749                	j	20013b38 <_vfiprintf_r+0x1ca>
20013bb8:	079d                	addi	a5,a5,7
20013bba:	9be1                	andi	a5,a5,-8
20013bbc:	07a1                	addi	a5,a5,8
20013bbe:	b7d5                	j	20013ba2 <_vfiprintf_r+0x234>
20013bc0:	0078                	addi	a4,sp,12
20013bc2:	00000697          	auipc	a3,0x0
20013bc6:	d6a68693          	addi	a3,a3,-662 # 2001392c <__sfputs_r>
20013bca:	8626                	mv	a2,s1
20013bcc:	080c                	addi	a1,sp,16
20013bce:	854e                	mv	a0,s3
20013bd0:	00000097          	auipc	ra,0x0
20013bd4:	000000e7          	jalr	zero # 0 <__metal_boot_hart>
20013bd8:	57fd                	li	a5,-1
20013bda:	8a2a                	mv	s4,a0
20013bdc:	fcf514e3          	bne	a0,a5,20013ba4 <_vfiprintf_r+0x236>
20013be0:	00c4d783          	lhu	a5,12(s1)
20013be4:	0407f793          	andi	a5,a5,64
20013be8:	ea079ee3          	bnez	a5,20013aa4 <_vfiprintf_r+0x136>
20013bec:	5512                	lw	a0,36(sp)
20013bee:	bd65                	j	20013aa6 <_vfiprintf_r+0x138>
20013bf0:	0078                	addi	a4,sp,12
20013bf2:	00000697          	auipc	a3,0x0
20013bf6:	d3a68693          	addi	a3,a3,-710 # 2001392c <__sfputs_r>
20013bfa:	8626                	mv	a2,s1
20013bfc:	080c                	addi	a1,sp,16
20013bfe:	854e                	mv	a0,s3
20013c00:	2a01                	jal	20013d10 <_printf_i>
20013c02:	bfd9                	j	20013bd8 <_vfiprintf_r+0x26a>

20013c04 <_printf_common>:
_printf_common():
20013c04:	7179                	addi	sp,sp,-48
20013c06:	cc52                	sw	s4,24(sp)
20013c08:	499c                	lw	a5,16(a1)
20013c0a:	8a3a                	mv	s4,a4
20013c0c:	4598                	lw	a4,8(a1)
20013c0e:	d422                	sw	s0,40(sp)
20013c10:	d226                	sw	s1,36(sp)
20013c12:	ce4e                	sw	s3,28(sp)
20013c14:	ca56                	sw	s5,20(sp)
20013c16:	d606                	sw	ra,44(sp)
20013c18:	d04a                	sw	s2,32(sp)
20013c1a:	c85a                	sw	s6,16(sp)
20013c1c:	c65e                	sw	s7,12(sp)
20013c1e:	89aa                	mv	s3,a0
20013c20:	842e                	mv	s0,a1
20013c22:	84b2                	mv	s1,a2
20013c24:	8ab6                	mv	s5,a3
20013c26:	00e7d363          	bge	a5,a4,20013c2c <_printf_common+0x28>
20013c2a:	87ba                	mv	a5,a4
20013c2c:	c09c                	sw	a5,0(s1)
20013c2e:	04344703          	lbu	a4,67(s0)
20013c32:	c319                	beqz	a4,20013c38 <_printf_common+0x34>
20013c34:	0785                	addi	a5,a5,1
20013c36:	c09c                	sw	a5,0(s1)
20013c38:	401c                	lw	a5,0(s0)
20013c3a:	0207f793          	andi	a5,a5,32
20013c3e:	c781                	beqz	a5,20013c46 <_printf_common+0x42>
20013c40:	409c                	lw	a5,0(s1)
20013c42:	0789                	addi	a5,a5,2
20013c44:	c09c                	sw	a5,0(s1)
20013c46:	00042903          	lw	s2,0(s0)
20013c4a:	00697913          	andi	s2,s2,6
20013c4e:	00091a63          	bnez	s2,20013c62 <_printf_common+0x5e>
20013c52:	01940b13          	addi	s6,s0,25
20013c56:	5bfd                	li	s7,-1
20013c58:	445c                	lw	a5,12(s0)
20013c5a:	4098                	lw	a4,0(s1)
20013c5c:	8f99                	sub	a5,a5,a4
20013c5e:	04f94c63          	blt	s2,a5,20013cb6 <_printf_common+0xb2>
20013c62:	04344783          	lbu	a5,67(s0)
20013c66:	00f036b3          	snez	a3,a5
20013c6a:	401c                	lw	a5,0(s0)
20013c6c:	0207f793          	andi	a5,a5,32
20013c70:	eba5                	bnez	a5,20013ce0 <_printf_common+0xdc>
20013c72:	04340613          	addi	a2,s0,67
20013c76:	85d6                	mv	a1,s5
20013c78:	854e                	mv	a0,s3
20013c7a:	9a02                	jalr	s4
20013c7c:	57fd                	li	a5,-1
20013c7e:	04f50363          	beq	a0,a5,20013cc4 <_printf_common+0xc0>
20013c82:	401c                	lw	a5,0(s0)
20013c84:	4611                	li	a2,4
20013c86:	4098                	lw	a4,0(s1)
20013c88:	8b99                	andi	a5,a5,6
20013c8a:	4454                	lw	a3,12(s0)
20013c8c:	4481                	li	s1,0
20013c8e:	00c79763          	bne	a5,a2,20013c9c <_printf_common+0x98>
20013c92:	40e684b3          	sub	s1,a3,a4
20013c96:	0004d363          	bgez	s1,20013c9c <_printf_common+0x98>
20013c9a:	4481                	li	s1,0
20013c9c:	441c                	lw	a5,8(s0)
20013c9e:	4818                	lw	a4,16(s0)
20013ca0:	00f75463          	bge	a4,a5,20013ca8 <_printf_common+0xa4>
20013ca4:	8f99                	sub	a5,a5,a4
20013ca6:	94be                	add	s1,s1,a5
20013ca8:	4901                	li	s2,0
20013caa:	0469                	addi	s0,s0,26
20013cac:	5b7d                	li	s6,-1
20013cae:	05249863          	bne	s1,s2,20013cfe <_printf_common+0xfa>
20013cb2:	4501                	li	a0,0
20013cb4:	a809                	j	20013cc6 <_printf_common+0xc2>
20013cb6:	4685                	li	a3,1
20013cb8:	865a                	mv	a2,s6
20013cba:	85d6                	mv	a1,s5
20013cbc:	854e                	mv	a0,s3
20013cbe:	9a02                	jalr	s4
20013cc0:	01751e63          	bne	a0,s7,20013cdc <_printf_common+0xd8>
20013cc4:	557d                	li	a0,-1
20013cc6:	50b2                	lw	ra,44(sp)
20013cc8:	5422                	lw	s0,40(sp)
20013cca:	5492                	lw	s1,36(sp)
20013ccc:	5902                	lw	s2,32(sp)
20013cce:	49f2                	lw	s3,28(sp)
20013cd0:	4a62                	lw	s4,24(sp)
20013cd2:	4ad2                	lw	s5,20(sp)
20013cd4:	4b42                	lw	s6,16(sp)
20013cd6:	4bb2                	lw	s7,12(sp)
20013cd8:	6145                	addi	sp,sp,48
20013cda:	8082                	ret
20013cdc:	0905                	addi	s2,s2,1
20013cde:	bfad                	j	20013c58 <_printf_common+0x54>
20013ce0:	00d40733          	add	a4,s0,a3
20013ce4:	03000613          	li	a2,48
20013ce8:	04c701a3          	sb	a2,67(a4)
20013cec:	04544703          	lbu	a4,69(s0)
20013cf0:	00168793          	addi	a5,a3,1
20013cf4:	97a2                	add	a5,a5,s0
20013cf6:	0689                	addi	a3,a3,2
20013cf8:	04e781a3          	sb	a4,67(a5)
20013cfc:	bf9d                	j	20013c72 <_printf_common+0x6e>
20013cfe:	4685                	li	a3,1
20013d00:	8622                	mv	a2,s0
20013d02:	85d6                	mv	a1,s5
20013d04:	854e                	mv	a0,s3
20013d06:	9a02                	jalr	s4
20013d08:	fb650ee3          	beq	a0,s6,20013cc4 <_printf_common+0xc0>
20013d0c:	0905                	addi	s2,s2,1
20013d0e:	b745                	j	20013cae <_printf_common+0xaa>

20013d10 <_printf_i>:
_printf_i():
20013d10:	7179                	addi	sp,sp,-48
20013d12:	d422                	sw	s0,40(sp)
20013d14:	d226                	sw	s1,36(sp)
20013d16:	d04a                	sw	s2,32(sp)
20013d18:	ce4e                	sw	s3,28(sp)
20013d1a:	d606                	sw	ra,44(sp)
20013d1c:	cc52                	sw	s4,24(sp)
20013d1e:	ca56                	sw	s5,20(sp)
20013d20:	c85a                	sw	s6,16(sp)
20013d22:	0185c803          	lbu	a6,24(a1)
20013d26:	07800793          	li	a5,120
20013d2a:	84aa                	mv	s1,a0
20013d2c:	842e                	mv	s0,a1
20013d2e:	8932                	mv	s2,a2
20013d30:	89b6                	mv	s3,a3
20013d32:	0107ee63          	bltu	a5,a6,20013d4e <_printf_i+0x3e>
20013d36:	06200793          	li	a5,98
20013d3a:	04358693          	addi	a3,a1,67
20013d3e:	0107ed63          	bltu	a5,a6,20013d58 <_printf_i+0x48>
20013d42:	1c080563          	beqz	a6,20013f0c <_printf_i+0x1fc>
20013d46:	05800793          	li	a5,88
20013d4a:	12f80a63          	beq	a6,a5,20013e7e <_printf_i+0x16e>
20013d4e:	04240a93          	addi	s5,s0,66
20013d52:	05040123          	sb	a6,66(s0)
20013d56:	a815                	j	20013d8a <_printf_i+0x7a>
20013d58:	f9d80793          	addi	a5,a6,-99
20013d5c:	0ff7f793          	zext.b	a5,a5
20013d60:	4655                	li	a2,21
20013d62:	fef666e3          	bltu	a2,a5,20013d4e <_printf_i+0x3e>
20013d66:	ffffd617          	auipc	a2,0xffffd
20013d6a:	c3e60613          	addi	a2,a2,-962 # 200109a4 <__sf_fake_stdout+0x5c>
20013d6e:	078a                	slli	a5,a5,0x2
20013d70:	97b2                	add	a5,a5,a2
20013d72:	439c                	lw	a5,0(a5)
20013d74:	97b2                	add	a5,a5,a2
20013d76:	8782                	jr	a5
20013d78:	431c                	lw	a5,0(a4)
20013d7a:	04258a93          	addi	s5,a1,66
20013d7e:	00478693          	addi	a3,a5,4
20013d82:	439c                	lw	a5,0(a5)
20013d84:	c314                	sw	a3,0(a4)
20013d86:	04f58123          	sb	a5,66(a1)
20013d8a:	4785                	li	a5,1
20013d8c:	a25d                	j	20013f32 <_printf_i+0x222>
20013d8e:	419c                	lw	a5,0(a1)
20013d90:	4308                	lw	a0,0(a4)
20013d92:	0807f613          	andi	a2,a5,128
20013d96:	00450593          	addi	a1,a0,4
20013d9a:	c20d                	beqz	a2,20013dbc <_printf_i+0xac>
20013d9c:	411c                	lw	a5,0(a0)
20013d9e:	c30c                	sw	a1,0(a4)
20013da0:	0007d863          	bgez	a5,20013db0 <_printf_i+0xa0>
20013da4:	02d00713          	li	a4,45
20013da8:	40f007b3          	neg	a5,a5
20013dac:	04e401a3          	sb	a4,67(s0)
20013db0:	ffffd617          	auipc	a2,0xffffd
20013db4:	bcc60613          	addi	a2,a2,-1076 # 2001097c <__sf_fake_stdout+0x34>
20013db8:	4829                	li	a6,10
20013dba:	a0a1                	j	20013e02 <_printf_i+0xf2>
20013dbc:	0407f613          	andi	a2,a5,64
20013dc0:	411c                	lw	a5,0(a0)
20013dc2:	c30c                	sw	a1,0(a4)
20013dc4:	de71                	beqz	a2,20013da0 <_printf_i+0x90>
20013dc6:	07c2                	slli	a5,a5,0x10
20013dc8:	87c1                	srai	a5,a5,0x10
20013dca:	bfd9                	j	20013da0 <_printf_i+0x90>
20013dcc:	4190                	lw	a2,0(a1)
20013dce:	431c                	lw	a5,0(a4)
20013dd0:	08067513          	andi	a0,a2,128
20013dd4:	00478593          	addi	a1,a5,4
20013dd8:	c501                	beqz	a0,20013de0 <_printf_i+0xd0>
20013dda:	c30c                	sw	a1,0(a4)
20013ddc:	439c                	lw	a5,0(a5)
20013dde:	a039                	j	20013dec <_printf_i+0xdc>
20013de0:	04067613          	andi	a2,a2,64
20013de4:	c30c                	sw	a1,0(a4)
20013de6:	da7d                	beqz	a2,20013ddc <_printf_i+0xcc>
20013de8:	0007d783          	lhu	a5,0(a5)
20013dec:	06f00713          	li	a4,111
20013df0:	ffffd617          	auipc	a2,0xffffd
20013df4:	b8c60613          	addi	a2,a2,-1140 # 2001097c <__sf_fake_stdout+0x34>
20013df8:	0ee80463          	beq	a6,a4,20013ee0 <_printf_i+0x1d0>
20013dfc:	4829                	li	a6,10
20013dfe:	040401a3          	sb	zero,67(s0)
20013e02:	4058                	lw	a4,4(s0)
20013e04:	c418                	sw	a4,8(s0)
20013e06:	00074563          	bltz	a4,20013e10 <_printf_i+0x100>
20013e0a:	400c                	lw	a1,0(s0)
20013e0c:	99ed                	andi	a1,a1,-5
20013e0e:	c00c                	sw	a1,0(s0)
20013e10:	e399                	bnez	a5,20013e16 <_printf_i+0x106>
20013e12:	8ab6                	mv	s5,a3
20013e14:	cf19                	beqz	a4,20013e32 <_printf_i+0x122>
20013e16:	8ab6                	mv	s5,a3
20013e18:	0307f733          	remu	a4,a5,a6
20013e1c:	1afd                	addi	s5,s5,-1
20013e1e:	9732                	add	a4,a4,a2
20013e20:	00074703          	lbu	a4,0(a4)
20013e24:	00ea8023          	sb	a4,0(s5)
20013e28:	873e                	mv	a4,a5
20013e2a:	0307d7b3          	divu	a5,a5,a6
20013e2e:	ff0775e3          	bgeu	a4,a6,20013e18 <_printf_i+0x108>
20013e32:	47a1                	li	a5,8
20013e34:	00f81e63          	bne	a6,a5,20013e50 <_printf_i+0x140>
20013e38:	401c                	lw	a5,0(s0)
20013e3a:	8b85                	andi	a5,a5,1
20013e3c:	cb91                	beqz	a5,20013e50 <_printf_i+0x140>
20013e3e:	4058                	lw	a4,4(s0)
20013e40:	481c                	lw	a5,16(s0)
20013e42:	00e7c763          	blt	a5,a4,20013e50 <_printf_i+0x140>
20013e46:	03000793          	li	a5,48
20013e4a:	fefa8fa3          	sb	a5,-1(s5)
20013e4e:	1afd                	addi	s5,s5,-1
20013e50:	415686b3          	sub	a3,a3,s5
20013e54:	c814                	sw	a3,16(s0)
20013e56:	874e                	mv	a4,s3
20013e58:	86ca                	mv	a3,s2
20013e5a:	0070                	addi	a2,sp,12
20013e5c:	85a2                	mv	a1,s0
20013e5e:	8526                	mv	a0,s1
20013e60:	3355                	jal	20013c04 <_printf_common>
20013e62:	5a7d                	li	s4,-1
20013e64:	0d451b63          	bne	a0,s4,20013f3a <_printf_i+0x22a>
20013e68:	557d                	li	a0,-1
20013e6a:	50b2                	lw	ra,44(sp)
20013e6c:	5422                	lw	s0,40(sp)
20013e6e:	5492                	lw	s1,36(sp)
20013e70:	5902                	lw	s2,32(sp)
20013e72:	49f2                	lw	s3,28(sp)
20013e74:	4a62                	lw	s4,24(sp)
20013e76:	4ad2                	lw	s5,20(sp)
20013e78:	4b42                	lw	s6,16(sp)
20013e7a:	6145                	addi	sp,sp,48
20013e7c:	8082                	ret
20013e7e:	050582a3          	sb	a6,69(a1)
20013e82:	ffffd617          	auipc	a2,0xffffd
20013e86:	afa60613          	addi	a2,a2,-1286 # 2001097c <__sf_fake_stdout+0x34>
20013e8a:	400c                	lw	a1,0(s0)
20013e8c:	4308                	lw	a0,0(a4)
20013e8e:	0805f813          	andi	a6,a1,128
20013e92:	411c                	lw	a5,0(a0)
20013e94:	0511                	addi	a0,a0,4
20013e96:	02080d63          	beqz	a6,20013ed0 <_printf_i+0x1c0>
20013e9a:	c308                	sw	a0,0(a4)
20013e9c:	0015f713          	andi	a4,a1,1
20013ea0:	c701                	beqz	a4,20013ea8 <_printf_i+0x198>
20013ea2:	0205e593          	ori	a1,a1,32
20013ea6:	c00c                	sw	a1,0(s0)
20013ea8:	4841                	li	a6,16
20013eaa:	fbb1                	bnez	a5,20013dfe <_printf_i+0xee>
20013eac:	4018                	lw	a4,0(s0)
20013eae:	fdf77713          	andi	a4,a4,-33
20013eb2:	c018                	sw	a4,0(s0)
20013eb4:	b7a9                	j	20013dfe <_printf_i+0xee>
20013eb6:	419c                	lw	a5,0(a1)
20013eb8:	0207e793          	ori	a5,a5,32
20013ebc:	c19c                	sw	a5,0(a1)
20013ebe:	07800793          	li	a5,120
20013ec2:	04f402a3          	sb	a5,69(s0)
20013ec6:	ffffd617          	auipc	a2,0xffffd
20013eca:	aca60613          	addi	a2,a2,-1334 # 20010990 <__sf_fake_stdout+0x48>
20013ece:	bf75                	j	20013e8a <_printf_i+0x17a>
20013ed0:	0405f813          	andi	a6,a1,64
20013ed4:	c308                	sw	a0,0(a4)
20013ed6:	fc0803e3          	beqz	a6,20013e9c <_printf_i+0x18c>
20013eda:	07c2                	slli	a5,a5,0x10
20013edc:	83c1                	srli	a5,a5,0x10
20013ede:	bf7d                	j	20013e9c <_printf_i+0x18c>
20013ee0:	4821                	li	a6,8
20013ee2:	bf31                	j	20013dfe <_printf_i+0xee>
20013ee4:	4190                	lw	a2,0(a1)
20013ee6:	431c                	lw	a5,0(a4)
20013ee8:	49cc                	lw	a1,20(a1)
20013eea:	08067813          	andi	a6,a2,128
20013eee:	00478513          	addi	a0,a5,4
20013ef2:	00080663          	beqz	a6,20013efe <_printf_i+0x1ee>
20013ef6:	c308                	sw	a0,0(a4)
20013ef8:	439c                	lw	a5,0(a5)
20013efa:	c38c                	sw	a1,0(a5)
20013efc:	a801                	j	20013f0c <_printf_i+0x1fc>
20013efe:	c308                	sw	a0,0(a4)
20013f00:	04067613          	andi	a2,a2,64
20013f04:	439c                	lw	a5,0(a5)
20013f06:	da75                	beqz	a2,20013efa <_printf_i+0x1ea>
20013f08:	00b79023          	sh	a1,0(a5)
20013f0c:	00042823          	sw	zero,16(s0)
20013f10:	8ab6                	mv	s5,a3
20013f12:	b791                	j	20013e56 <_printf_i+0x146>
20013f14:	431c                	lw	a5,0(a4)
20013f16:	41d0                	lw	a2,4(a1)
20013f18:	4581                	li	a1,0
20013f1a:	00478693          	addi	a3,a5,4
20013f1e:	c314                	sw	a3,0(a4)
20013f20:	0007aa83          	lw	s5,0(a5)
20013f24:	8556                	mv	a0,s5
20013f26:	2c3d                	jal	20014164 <memchr>
20013f28:	c501                	beqz	a0,20013f30 <_printf_i+0x220>
20013f2a:	41550533          	sub	a0,a0,s5
20013f2e:	c048                	sw	a0,4(s0)
20013f30:	405c                	lw	a5,4(s0)
20013f32:	c81c                	sw	a5,16(s0)
20013f34:	040401a3          	sb	zero,67(s0)
20013f38:	bf39                	j	20013e56 <_printf_i+0x146>
20013f3a:	4814                	lw	a3,16(s0)
20013f3c:	8656                	mv	a2,s5
20013f3e:	85ca                	mv	a1,s2
20013f40:	8526                	mv	a0,s1
20013f42:	9982                	jalr	s3
20013f44:	f34502e3          	beq	a0,s4,20013e68 <_printf_i+0x158>
20013f48:	401c                	lw	a5,0(s0)
20013f4a:	8b89                	andi	a5,a5,2
20013f4c:	e78d                	bnez	a5,20013f76 <_printf_i+0x266>
20013f4e:	47b2                	lw	a5,12(sp)
20013f50:	4448                	lw	a0,12(s0)
20013f52:	f0f55ce3          	bge	a0,a5,20013e6a <_printf_i+0x15a>
20013f56:	853e                	mv	a0,a5
20013f58:	bf09                	j	20013e6a <_printf_i+0x15a>
20013f5a:	4685                	li	a3,1
20013f5c:	8656                	mv	a2,s5
20013f5e:	85ca                	mv	a1,s2
20013f60:	8526                	mv	a0,s1
20013f62:	9982                	jalr	s3
20013f64:	f16502e3          	beq	a0,s6,20013e68 <_printf_i+0x158>
20013f68:	0a05                	addi	s4,s4,1
20013f6a:	445c                	lw	a5,12(s0)
20013f6c:	4732                	lw	a4,12(sp)
20013f6e:	8f99                	sub	a5,a5,a4
20013f70:	fefa45e3          	blt	s4,a5,20013f5a <_printf_i+0x24a>
20013f74:	bfe9                	j	20013f4e <_printf_i+0x23e>
20013f76:	4a01                	li	s4,0
20013f78:	01940a93          	addi	s5,s0,25
20013f7c:	5b7d                	li	s6,-1
20013f7e:	b7f5                	j	20013f6a <_printf_i+0x25a>

20013f80 <_sbrk_r>:
_sbrk_r():
20013f80:	1141                	addi	sp,sp,-16
20013f82:	c422                	sw	s0,8(sp)
20013f84:	842a                	mv	s0,a0
20013f86:	852e                	mv	a0,a1
20013f88:	5ffed797          	auipc	a5,0x5ffed
20013f8c:	b407a423          	sw	zero,-1208(a5) # 80000ad0 <errno>
20013f90:	c606                	sw	ra,12(sp)
20013f92:	7e5020ef          	jal	ra,20016f76 <_sbrk>
20013f96:	57fd                	li	a5,-1
20013f98:	00f51863          	bne	a0,a5,20013fa8 <_sbrk_r+0x28>
20013f9c:	5ffed797          	auipc	a5,0x5ffed
20013fa0:	b347a783          	lw	a5,-1228(a5) # 80000ad0 <errno>
20013fa4:	c391                	beqz	a5,20013fa8 <_sbrk_r+0x28>
20013fa6:	c01c                	sw	a5,0(s0)
20013fa8:	40b2                	lw	ra,12(sp)
20013faa:	4422                	lw	s0,8(sp)
20013fac:	0141                	addi	sp,sp,16
20013fae:	8082                	ret

20013fb0 <__sread>:
__sread():
20013fb0:	1141                	addi	sp,sp,-16
20013fb2:	c422                	sw	s0,8(sp)
20013fb4:	842e                	mv	s0,a1
20013fb6:	00e59583          	lh	a1,14(a1)
20013fba:	c606                	sw	ra,12(sp)
20013fbc:	22d9                	jal	20014182 <_read_r>
20013fbe:	00054963          	bltz	a0,20013fd0 <__sread+0x20>
20013fc2:	487c                	lw	a5,84(s0)
20013fc4:	97aa                	add	a5,a5,a0
20013fc6:	c87c                	sw	a5,84(s0)
20013fc8:	40b2                	lw	ra,12(sp)
20013fca:	4422                	lw	s0,8(sp)
20013fcc:	0141                	addi	sp,sp,16
20013fce:	8082                	ret
20013fd0:	00c45783          	lhu	a5,12(s0)
20013fd4:	777d                	lui	a4,0xfffff
20013fd6:	177d                	addi	a4,a4,-1
20013fd8:	8ff9                	and	a5,a5,a4
20013fda:	00f41623          	sh	a5,12(s0)
20013fde:	b7ed                	j	20013fc8 <__sread+0x18>

20013fe0 <__swrite>:
__swrite():
20013fe0:	00c5d783          	lhu	a5,12(a1)
20013fe4:	1101                	addi	sp,sp,-32
20013fe6:	cc22                	sw	s0,24(sp)
20013fe8:	ca26                	sw	s1,20(sp)
20013fea:	c84a                	sw	s2,16(sp)
20013fec:	c64e                	sw	s3,12(sp)
20013fee:	ce06                	sw	ra,28(sp)
20013ff0:	1007f793          	andi	a5,a5,256
20013ff4:	84aa                	mv	s1,a0
20013ff6:	842e                	mv	s0,a1
20013ff8:	8932                	mv	s2,a2
20013ffa:	89b6                	mv	s3,a3
20013ffc:	c791                	beqz	a5,20014008 <__swrite+0x28>
20013ffe:	00e59583          	lh	a1,14(a1)
20014002:	4689                	li	a3,2
20014004:	4601                	li	a2,0
20014006:	222d                	jal	20014130 <_lseek_r>
20014008:	00c45783          	lhu	a5,12(s0)
2001400c:	777d                	lui	a4,0xfffff
2001400e:	177d                	addi	a4,a4,-1
20014010:	8ff9                	and	a5,a5,a4
20014012:	00e41583          	lh	a1,14(s0)
20014016:	00f41623          	sh	a5,12(s0)
2001401a:	4462                	lw	s0,24(sp)
2001401c:	40f2                	lw	ra,28(sp)
2001401e:	86ce                	mv	a3,s3
20014020:	864a                	mv	a2,s2
20014022:	49b2                	lw	s3,12(sp)
20014024:	4942                	lw	s2,16(sp)
20014026:	8526                	mv	a0,s1
20014028:	44d2                	lw	s1,20(sp)
2001402a:	6105                	addi	sp,sp,32
2001402c:	a83d                	j	2001406a <_write_r>

2001402e <__sseek>:
__sseek():
2001402e:	1141                	addi	sp,sp,-16
20014030:	c422                	sw	s0,8(sp)
20014032:	842e                	mv	s0,a1
20014034:	00e59583          	lh	a1,14(a1)
20014038:	c606                	sw	ra,12(sp)
2001403a:	28dd                	jal	20014130 <_lseek_r>
2001403c:	57fd                	li	a5,-1
2001403e:	00c45703          	lhu	a4,12(s0)
20014042:	00f51b63          	bne	a0,a5,20014058 <__sseek+0x2a>
20014046:	77fd                	lui	a5,0xfffff
20014048:	17fd                	addi	a5,a5,-1
2001404a:	8ff9                	and	a5,a5,a4
2001404c:	00f41623          	sh	a5,12(s0)
20014050:	40b2                	lw	ra,12(sp)
20014052:	4422                	lw	s0,8(sp)
20014054:	0141                	addi	sp,sp,16
20014056:	8082                	ret
20014058:	6785                	lui	a5,0x1
2001405a:	8fd9                	or	a5,a5,a4
2001405c:	00f41623          	sh	a5,12(s0)
20014060:	c868                	sw	a0,84(s0)
20014062:	b7fd                	j	20014050 <__sseek+0x22>

20014064 <__sclose>:
__sclose():
20014064:	00e59583          	lh	a1,14(a1)
20014068:	a81d                	j	2001409e <_close_r>

2001406a <_write_r>:
_write_r():
2001406a:	1141                	addi	sp,sp,-16
2001406c:	c422                	sw	s0,8(sp)
2001406e:	842a                	mv	s0,a0
20014070:	852e                	mv	a0,a1
20014072:	85b2                	mv	a1,a2
20014074:	8636                	mv	a2,a3
20014076:	5ffed797          	auipc	a5,0x5ffed
2001407a:	a407ad23          	sw	zero,-1446(a5) # 80000ad0 <errno>
2001407e:	c606                	sw	ra,12(sp)
20014080:	731020ef          	jal	ra,20016fb0 <_write>
20014084:	57fd                	li	a5,-1
20014086:	00f51863          	bne	a0,a5,20014096 <_write_r+0x2c>
2001408a:	5ffed797          	auipc	a5,0x5ffed
2001408e:	a467a783          	lw	a5,-1466(a5) # 80000ad0 <errno>
20014092:	c391                	beqz	a5,20014096 <_write_r+0x2c>
20014094:	c01c                	sw	a5,0(s0)
20014096:	40b2                	lw	ra,12(sp)
20014098:	4422                	lw	s0,8(sp)
2001409a:	0141                	addi	sp,sp,16
2001409c:	8082                	ret

2001409e <_close_r>:
_close_r():
2001409e:	1141                	addi	sp,sp,-16
200140a0:	c422                	sw	s0,8(sp)
200140a2:	842a                	mv	s0,a0
200140a4:	852e                	mv	a0,a1
200140a6:	5ffed797          	auipc	a5,0x5ffed
200140aa:	a207a523          	sw	zero,-1494(a5) # 80000ad0 <errno>
200140ae:	c606                	sw	ra,12(sp)
200140b0:	669020ef          	jal	ra,20016f18 <_close>
200140b4:	57fd                	li	a5,-1
200140b6:	00f51863          	bne	a0,a5,200140c6 <_close_r+0x28>
200140ba:	5ffed797          	auipc	a5,0x5ffed
200140be:	a167a783          	lw	a5,-1514(a5) # 80000ad0 <errno>
200140c2:	c391                	beqz	a5,200140c6 <_close_r+0x28>
200140c4:	c01c                	sw	a5,0(s0)
200140c6:	40b2                	lw	ra,12(sp)
200140c8:	4422                	lw	s0,8(sp)
200140ca:	0141                	addi	sp,sp,16
200140cc:	8082                	ret

200140ce <_fstat_r>:
_fstat_r():
200140ce:	1141                	addi	sp,sp,-16
200140d0:	c422                	sw	s0,8(sp)
200140d2:	842a                	mv	s0,a0
200140d4:	852e                	mv	a0,a1
200140d6:	85b2                	mv	a1,a2
200140d8:	5ffed797          	auipc	a5,0x5ffed
200140dc:	9e07ac23          	sw	zero,-1544(a5) # 80000ad0 <errno>
200140e0:	c606                	sw	ra,12(sp)
200140e2:	651020ef          	jal	ra,20016f32 <_fstat>
200140e6:	57fd                	li	a5,-1
200140e8:	00f51863          	bne	a0,a5,200140f8 <_fstat_r+0x2a>
200140ec:	5ffed797          	auipc	a5,0x5ffed
200140f0:	9e47a783          	lw	a5,-1564(a5) # 80000ad0 <errno>
200140f4:	c391                	beqz	a5,200140f8 <_fstat_r+0x2a>
200140f6:	c01c                	sw	a5,0(s0)
200140f8:	40b2                	lw	ra,12(sp)
200140fa:	4422                	lw	s0,8(sp)
200140fc:	0141                	addi	sp,sp,16
200140fe:	8082                	ret

20014100 <_isatty_r>:
_isatty_r():
20014100:	1141                	addi	sp,sp,-16
20014102:	c422                	sw	s0,8(sp)
20014104:	842a                	mv	s0,a0
20014106:	852e                	mv	a0,a1
20014108:	5ffed797          	auipc	a5,0x5ffed
2001410c:	9c07a423          	sw	zero,-1592(a5) # 80000ad0 <errno>
20014110:	c606                	sw	ra,12(sp)
20014112:	635020ef          	jal	ra,20016f46 <_isatty>
20014116:	57fd                	li	a5,-1
20014118:	00f51863          	bne	a0,a5,20014128 <_isatty_r+0x28>
2001411c:	5ffed797          	auipc	a5,0x5ffed
20014120:	9b47a783          	lw	a5,-1612(a5) # 80000ad0 <errno>
20014124:	c391                	beqz	a5,20014128 <_isatty_r+0x28>
20014126:	c01c                	sw	a5,0(s0)
20014128:	40b2                	lw	ra,12(sp)
2001412a:	4422                	lw	s0,8(sp)
2001412c:	0141                	addi	sp,sp,16
2001412e:	8082                	ret

20014130 <_lseek_r>:
_lseek_r():
20014130:	1141                	addi	sp,sp,-16
20014132:	c422                	sw	s0,8(sp)
20014134:	842a                	mv	s0,a0
20014136:	852e                	mv	a0,a1
20014138:	85b2                	mv	a1,a2
2001413a:	8636                	mv	a2,a3
2001413c:	5ffed797          	auipc	a5,0x5ffed
20014140:	9807aa23          	sw	zero,-1644(a5) # 80000ad0 <errno>
20014144:	c606                	sw	ra,12(sp)
20014146:	609020ef          	jal	ra,20016f4e <_lseek>
2001414a:	57fd                	li	a5,-1
2001414c:	00f51863          	bne	a0,a5,2001415c <_lseek_r+0x2c>
20014150:	5ffed797          	auipc	a5,0x5ffed
20014154:	9807a783          	lw	a5,-1664(a5) # 80000ad0 <errno>
20014158:	c391                	beqz	a5,2001415c <_lseek_r+0x2c>
2001415a:	c01c                	sw	a5,0(s0)
2001415c:	40b2                	lw	ra,12(sp)
2001415e:	4422                	lw	s0,8(sp)
20014160:	0141                	addi	sp,sp,16
20014162:	8082                	ret

20014164 <memchr>:
memchr():
20014164:	0ff5f593          	zext.b	a1,a1
20014168:	962a                	add	a2,a2,a0
2001416a:	00c51463          	bne	a0,a2,20014172 <memchr+0xe>
2001416e:	4501                	li	a0,0
20014170:	8082                	ret
20014172:	00054783          	lbu	a5,0(a0)
20014176:	feb78de3          	beq	a5,a1,20014170 <memchr+0xc>
2001417a:	0505                	addi	a0,a0,1
2001417c:	b7fd                	j	2001416a <memchr+0x6>

2001417e <__malloc_lock>:
__malloc_lock():
2001417e:	8082                	ret

20014180 <__malloc_unlock>:
__malloc_unlock():
20014180:	8082                	ret

20014182 <_read_r>:
_read_r():
20014182:	1141                	addi	sp,sp,-16
20014184:	c422                	sw	s0,8(sp)
20014186:	842a                	mv	s0,a0
20014188:	852e                	mv	a0,a1
2001418a:	85b2                	mv	a1,a2
2001418c:	8636                	mv	a2,a3
2001418e:	5ffed797          	auipc	a5,0x5ffed
20014192:	9407a123          	sw	zero,-1726(a5) # 80000ad0 <errno>
20014196:	c606                	sw	ra,12(sp)
20014198:	5cb020ef          	jal	ra,20016f62 <_read>
2001419c:	57fd                	li	a5,-1
2001419e:	00f51863          	bne	a0,a5,200141ae <_read_r+0x2c>
200141a2:	5ffed797          	auipc	a5,0x5ffed
200141a6:	92e7a783          	lw	a5,-1746(a5) # 80000ad0 <errno>
200141aa:	c391                	beqz	a5,200141ae <_read_r+0x2c>
200141ac:	c01c                	sw	a5,0(s0)
200141ae:	40b2                	lw	ra,12(sp)
200141b0:	4422                	lw	s0,8(sp)
200141b2:	0141                	addi	sp,sp,16
200141b4:	8082                	ret

200141b6 <__divdf3>:
__divdf3():
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:36
200141b6:	7179                	addi	sp,sp,-48
200141b8:	d04a                	sw	s2,32(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44
200141ba:	0145d913          	srli	s2,a1,0x14
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:36
200141be:	d226                	sw	s1,36(sp)
200141c0:	ce4e                	sw	s3,28(sp)
200141c2:	cc52                	sw	s4,24(sp)
200141c4:	c85a                	sw	s6,16(sp)
200141c6:	c462                	sw	s8,8(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44
200141c8:	00c59493          	slli	s1,a1,0xc
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:36
200141cc:	d606                	sw	ra,44(sp)
200141ce:	d422                	sw	s0,40(sp)
200141d0:	ca56                	sw	s5,20(sp)
200141d2:	c65e                	sw	s7,12(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44
200141d4:	7ff97913          	andi	s2,s2,2047
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:36
200141d8:	8a2a                	mv	s4,a0
200141da:	8b32                	mv	s6,a2
200141dc:	8c36                	mv	s8,a3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44
200141de:	80b1                	srli	s1,s1,0xc
200141e0:	01f5d993          	srli	s3,a1,0x1f
200141e4:	08090463          	beqz	s2,2001426c <__divdf3+0xb6>
200141e8:	7ff00793          	li	a5,2047
200141ec:	0cf90a63          	beq	s2,a5,200142c0 <__divdf3+0x10a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 1)
200141f0:	01d55a93          	srli	s5,a0,0x1d
200141f4:	048e                	slli	s1,s1,0x3
200141f6:	009ae4b3          	or	s1,s5,s1
200141fa:	00800ab7          	lui	s5,0x800
200141fe:	0154eab3          	or	s5,s1,s5
20014202:	00351413          	slli	s0,a0,0x3
20014206:	c0190913          	addi	s2,s2,-1023
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 41)
2001420a:	4b81                	li	s7,0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 8)
2001420c:	00cc1513          	slli	a0,s8,0xc
20014210:	00c55493          	srli	s1,a0,0xc
20014214:	014c5513          	srli	a0,s8,0x14
20014218:	7ff57593          	andi	a1,a0,2047
2001421c:	01fc5c13          	srli	s8,s8,0x1f
20014220:	c1f9                	beqz	a1,200142e6 <__divdf3+0x130>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45
20014222:	7ff00793          	li	a5,2047
20014226:	10f58b63          	beq	a1,a5,2001433c <__divdf3+0x186>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 1)
2001422a:	00349513          	slli	a0,s1,0x3
2001422e:	01db5793          	srli	a5,s6,0x1d
20014232:	8d5d                	or	a0,a0,a5
20014234:	008004b7          	lui	s1,0x800
20014238:	8cc9                	or	s1,s1,a0
2001423a:	003b1f93          	slli	t6,s6,0x3
2001423e:	c0158513          	addi	a0,a1,-1023
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 41)
20014242:	4781                	li	a5,0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 8)
20014244:	002b9713          	slli	a4,s7,0x2
20014248:	8f5d                	or	a4,a4,a5
2001424a:	177d                	addi	a4,a4,-1
2001424c:	4639                	li	a2,14
2001424e:	0189c6b3          	xor	a3,s3,s8
20014252:	40a905b3          	sub	a1,s2,a0
20014256:	10e66563          	bltu	a2,a4,20014360 <__divdf3+0x1aa>
2001425a:	ffffc617          	auipc	a2,0xffffc
2001425e:	7a260613          	addi	a2,a2,1954 # 200109fc <__sf_fake_stdout+0xb4>
20014262:	070a                	slli	a4,a4,0x2
20014264:	9732                	add	a4,a4,a2
20014266:	4318                	lw	a4,0(a4)
20014268:	9732                	add	a4,a4,a2
2001426a:	8702                	jr	a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 2)
2001426c:	00a4eab3          	or	s5,s1,a0
20014270:	060a8263          	beqz	s5,200142d4 <__divdf3+0x11e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 13)
20014274:	c89d                	beqz	s1,200142aa <__divdf3+0xf4>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 17)
20014276:	8526                	mv	a0,s1
20014278:	255000ef          	jal	ra,20014ccc <__clzsi2>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 31)
2001427c:	ff550793          	addi	a5,a0,-11
20014280:	4771                	li	a4,28
20014282:	02f74963          	blt	a4,a5,200142b4 <__divdf3+0xfe>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 32)
20014286:	4af5                	li	s5,29
20014288:	ff850413          	addi	s0,a0,-8
2001428c:	40fa8ab3          	sub	s5,s5,a5
20014290:	008494b3          	sll	s1,s1,s0
20014294:	015a5ab3          	srl	s5,s4,s5
20014298:	009aeab3          	or	s5,s5,s1
2001429c:	008a1433          	sll	s0,s4,s0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 41)
200142a0:	c0d00593          	li	a1,-1011
200142a4:	40a58933          	sub	s2,a1,a0
200142a8:	b78d                	j	2001420a <__divdf3+0x54>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 24)
200142aa:	223000ef          	jal	ra,20014ccc <__clzsi2>
200142ae:	02050513          	addi	a0,a0,32
200142b2:	b7e9                	j	2001427c <__divdf3+0xc6>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 33)
200142b4:	fd850493          	addi	s1,a0,-40
200142b8:	009a1ab3          	sll	s5,s4,s1
200142bc:	4401                	li	s0,0
200142be:	b7cd                	j	200142a0 <__divdf3+0xea>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 3)
200142c0:	00a4eab3          	or	s5,s1,a0
200142c4:	000a8c63          	beqz	s5,200142dc <__divdf3+0x126>
200142c8:	842a                	mv	s0,a0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44
200142ca:	8aa6                	mv	s5,s1
200142cc:	7ff00913          	li	s2,2047
200142d0:	4b8d                	li	s7,3
200142d2:	bf2d                	j	2001420c <__divdf3+0x56>
200142d4:	4401                	li	s0,0
200142d6:	4901                	li	s2,0
200142d8:	4b85                	li	s7,1
200142da:	bf0d                	j	2001420c <__divdf3+0x56>
200142dc:	4401                	li	s0,0
200142de:	7ff00913          	li	s2,2047
200142e2:	4b89                	li	s7,2
200142e4:	b725                	j	2001420c <__divdf3+0x56>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 2)
200142e6:	0164efb3          	or	t6,s1,s6
200142ea:	060f8263          	beqz	t6,2001434e <__divdf3+0x198>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 13)
200142ee:	c89d                	beqz	s1,20014324 <__divdf3+0x16e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 17)
200142f0:	8526                	mv	a0,s1
200142f2:	1db000ef          	jal	ra,20014ccc <__clzsi2>
200142f6:	85aa                	mv	a1,a0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 31)
200142f8:	ff558793          	addi	a5,a1,-11
200142fc:	4771                	li	a4,28
200142fe:	02f74963          	blt	a4,a5,20014330 <__divdf3+0x17a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 32)
20014302:	46f5                	li	a3,29
20014304:	ff858f93          	addi	t6,a1,-8
20014308:	8e9d                	sub	a3,a3,a5
2001430a:	01f49533          	sll	a0,s1,t6
2001430e:	00db56b3          	srl	a3,s6,a3
20014312:	00a6e4b3          	or	s1,a3,a0
20014316:	01fb1fb3          	sll	t6,s6,t6
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 41)
2001431a:	c0d00693          	li	a3,-1011
2001431e:	40b68533          	sub	a0,a3,a1
20014322:	b705                	j	20014242 <__divdf3+0x8c>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 24)
20014324:	855a                	mv	a0,s6
20014326:	1a7000ef          	jal	ra,20014ccc <__clzsi2>
2001432a:	02050593          	addi	a1,a0,32
2001432e:	b7e9                	j	200142f8 <__divdf3+0x142>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 33)
20014330:	fd858513          	addi	a0,a1,-40
20014334:	00ab14b3          	sll	s1,s6,a0
20014338:	4f81                	li	t6,0
2001433a:	b7c5                	j	2001431a <__divdf3+0x164>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 3)
2001433c:	0164efb3          	or	t6,s1,s6
20014340:	000f8b63          	beqz	t6,20014356 <__divdf3+0x1a0>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45
20014344:	8fda                	mv	t6,s6
20014346:	7ff00513          	li	a0,2047
2001434a:	478d                	li	a5,3
2001434c:	bde5                	j	20014244 <__divdf3+0x8e>
2001434e:	4481                	li	s1,0
20014350:	4501                	li	a0,0
20014352:	4785                	li	a5,1
20014354:	bdc5                	j	20014244 <__divdf3+0x8e>
20014356:	4481                	li	s1,0
20014358:	7ff00513          	li	a0,2047
2001435c:	4789                	li	a5,2
2001435e:	b5dd                	j	20014244 <__divdf3+0x8e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 2)
20014360:	0154e663          	bltu	s1,s5,2001436c <__divdf3+0x1b6>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 11)
20014364:	2a9a9663          	bne	s5,s1,20014610 <__divdf3+0x45a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 12)
20014368:	2bf46463          	bltu	s0,t6,20014610 <__divdf3+0x45a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 14)
2001436c:	01fa9613          	slli	a2,s5,0x1f
20014370:	00145713          	srli	a4,s0,0x1
20014374:	01f41793          	slli	a5,s0,0x1f
20014378:	001ada93          	srli	s5,s5,0x1
2001437c:	00e66433          	or	s0,a2,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 19)
20014380:	00849513          	slli	a0,s1,0x8
20014384:	018fd893          	srli	a7,t6,0x18
20014388:	00a8e8b3          	or	a7,a7,a0
2001438c:	8141                	srli	a0,a0,0x10
2001438e:	02aade33          	divu	t3,s5,a0
20014392:	01089e93          	slli	t4,a7,0x10
20014396:	010ede93          	srli	t4,t4,0x10
2001439a:	01045713          	srli	a4,s0,0x10
2001439e:	008f9313          	slli	t1,t6,0x8
200143a2:	02aafab3          	remu	s5,s5,a0
200143a6:	8672                	mv	a2,t3
200143a8:	03ce8833          	mul	a6,t4,t3
200143ac:	0ac2                	slli	s5,s5,0x10
200143ae:	01576733          	or	a4,a4,s5
200143b2:	01077c63          	bgeu	a4,a6,200143ca <__divdf3+0x214>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 22)
200143b6:	9746                	add	a4,a4,a7
200143b8:	fffe0613          	addi	a2,t3,-1
200143bc:	01176763          	bltu	a4,a7,200143ca <__divdf3+0x214>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 24)
200143c0:	01077563          	bgeu	a4,a6,200143ca <__divdf3+0x214>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 26)
200143c4:	ffee0613          	addi	a2,t3,-2
200143c8:	9746                	add	a4,a4,a7
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 28)
200143ca:	41070733          	sub	a4,a4,a6
200143ce:	02a75e33          	divu	t3,a4,a0
200143d2:	0442                	slli	s0,s0,0x10
200143d4:	8041                	srli	s0,s0,0x10
200143d6:	02a77733          	remu	a4,a4,a0
200143da:	82f2                	mv	t0,t3
200143dc:	03ce8833          	mul	a6,t4,t3
200143e0:	0742                	slli	a4,a4,0x10
200143e2:	8f41                	or	a4,a4,s0
200143e4:	01077c63          	bgeu	a4,a6,200143fc <__divdf3+0x246>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 29)
200143e8:	9746                	add	a4,a4,a7
200143ea:	fffe0293          	addi	t0,t3,-1
200143ee:	01176763          	bltu	a4,a7,200143fc <__divdf3+0x246>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 31)
200143f2:	01077563          	bgeu	a4,a6,200143fc <__divdf3+0x246>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 33)
200143f6:	ffee0293          	addi	t0,t3,-2
200143fa:	9746                	add	a4,a4,a7
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 35)
200143fc:	41070433          	sub	s0,a4,a6
20014400:	0642                	slli	a2,a2,0x10
20014402:	6841                	lui	a6,0x10
20014404:	005662b3          	or	t0,a2,t0
20014408:	fff80e13          	addi	t3,a6,-1 # ffff <__heap_size+0xf7ff>
2001440c:	0102d613          	srli	a2,t0,0x10
20014410:	01c2f733          	and	a4,t0,t3
20014414:	01035f13          	srli	t5,t1,0x10
20014418:	01c37e33          	and	t3,t1,t3
2001441c:	02ee03b3          	mul	t2,t3,a4
20014420:	03c604b3          	mul	s1,a2,t3
20014424:	02ef0733          	mul	a4,t5,a4
20014428:	03e60fb3          	mul	t6,a2,t5
2001442c:	00970633          	add	a2,a4,s1
20014430:	0103d713          	srli	a4,t2,0x10
20014434:	9732                	add	a4,a4,a2
20014436:	00977363          	bgeu	a4,s1,2001443c <__divdf3+0x286>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 36)
2001443a:	9fc2                	add	t6,t6,a6
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 38)
2001443c:	01075613          	srli	a2,a4,0x10
20014440:	967e                	add	a2,a2,t6
20014442:	6fc1                	lui	t6,0x10
20014444:	1ffd                	addi	t6,t6,-1
20014446:	01f77833          	and	a6,a4,t6
2001444a:	0842                	slli	a6,a6,0x10
2001444c:	01f3f3b3          	and	t2,t2,t6
20014450:	981e                	add	a6,a6,t2
20014452:	00c46763          	bltu	s0,a2,20014460 <__divdf3+0x2aa>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 40)
20014456:	8496                	mv	s1,t0
20014458:	02c41e63          	bne	s0,a2,20014494 <__divdf3+0x2de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 41)
2001445c:	0307fc63          	bgeu	a5,a6,20014494 <__divdf3+0x2de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 43)
20014460:	979a                	add	a5,a5,t1
20014462:	0067b733          	sltu	a4,a5,t1
20014466:	9746                	add	a4,a4,a7
20014468:	943a                	add	s0,s0,a4
2001446a:	fff28493          	addi	s1,t0,-1 # 20012fa5 <memset+0x8d>
2001446e:	0088e663          	bltu	a7,s0,2001447a <__divdf3+0x2c4>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 46)
20014472:	02889163          	bne	a7,s0,20014494 <__divdf3+0x2de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 47)
20014476:	0067ef63          	bltu	a5,t1,20014494 <__divdf3+0x2de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 49)
2001447a:	00c46663          	bltu	s0,a2,20014486 <__divdf3+0x2d0>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 52)
2001447e:	00861b63          	bne	a2,s0,20014494 <__divdf3+0x2de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 53)
20014482:	0107f963          	bgeu	a5,a6,20014494 <__divdf3+0x2de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 55)
20014486:	979a                	add	a5,a5,t1
20014488:	0067b733          	sltu	a4,a5,t1
2001448c:	9746                	add	a4,a4,a7
2001448e:	ffe28493          	addi	s1,t0,-2
20014492:	943a                	add	s0,s0,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 57)
20014494:	41078833          	sub	a6,a5,a6
20014498:	8c11                	sub	s0,s0,a2
2001449a:	0107b7b3          	sltu	a5,a5,a6
2001449e:	8c1d                	sub	s0,s0,a5
200144a0:	5ffd                	li	t6,-1
200144a2:	0e888763          	beq	a7,s0,20014590 <__divdf3+0x3da>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 59)
200144a6:	02a45fb3          	divu	t6,s0,a0
200144aa:	01085713          	srli	a4,a6,0x10
200144ae:	02a47433          	remu	s0,s0,a0
200144b2:	867e                	mv	a2,t6
200144b4:	03fe87b3          	mul	a5,t4,t6
200144b8:	0442                	slli	s0,s0,0x10
200144ba:	8c59                	or	s0,s0,a4
200144bc:	00f47c63          	bgeu	s0,a5,200144d4 <__divdf3+0x31e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 61)
200144c0:	9446                	add	s0,s0,a7
200144c2:	ffff8613          	addi	a2,t6,-1 # ffff <__heap_size+0xf7ff>
200144c6:	01146763          	bltu	s0,a7,200144d4 <__divdf3+0x31e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 63)
200144ca:	00f47563          	bgeu	s0,a5,200144d4 <__divdf3+0x31e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 65)
200144ce:	ffef8613          	addi	a2,t6,-2
200144d2:	9446                	add	s0,s0,a7
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 67)
200144d4:	8c1d                	sub	s0,s0,a5
200144d6:	02a45733          	divu	a4,s0,a0
200144da:	0842                	slli	a6,a6,0x10
200144dc:	01085813          	srli	a6,a6,0x10
200144e0:	02a47433          	remu	s0,s0,a0
200144e4:	87ba                	mv	a5,a4
200144e6:	02ee8eb3          	mul	t4,t4,a4
200144ea:	0442                	slli	s0,s0,0x10
200144ec:	00886433          	or	s0,a6,s0
200144f0:	01d47c63          	bgeu	s0,t4,20014508 <__divdf3+0x352>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 68)
200144f4:	9446                	add	s0,s0,a7
200144f6:	fff70793          	addi	a5,a4,-1 # ffffefff <metal_segment_heap_target_end+0x7fffd00f>
200144fa:	01146763          	bltu	s0,a7,20014508 <__divdf3+0x352>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 70)
200144fe:	01d47563          	bgeu	s0,t4,20014508 <__divdf3+0x352>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 72)
20014502:	ffe70793          	addi	a5,a4,-2
20014506:	9446                	add	s0,s0,a7
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 74)
20014508:	0642                	slli	a2,a2,0x10
2001450a:	8e5d                	or	a2,a2,a5
2001450c:	01061793          	slli	a5,a2,0x10
20014510:	83c1                	srli	a5,a5,0x10
20014512:	01065713          	srli	a4,a2,0x10
20014516:	02ef0833          	mul	a6,t5,a4
2001451a:	41d40433          	sub	s0,s0,t4
2001451e:	02ff0f33          	mul	t5,t5,a5
20014522:	03c78eb3          	mul	t4,a5,t3
20014526:	03c70e33          	mul	t3,a4,t3
2001452a:	010ed793          	srli	a5,t4,0x10
2001452e:	9f72                	add	t5,t5,t3
20014530:	97fa                	add	a5,a5,t5
20014532:	01c7f463          	bgeu	a5,t3,2001453a <__divdf3+0x384>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 75)
20014536:	6741                	lui	a4,0x10
20014538:	983a                	add	a6,a6,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 77)
2001453a:	0107d713          	srli	a4,a5,0x10
2001453e:	9742                	add	a4,a4,a6
20014540:	6841                	lui	a6,0x10
20014542:	187d                	addi	a6,a6,-1
20014544:	0107f533          	and	a0,a5,a6
20014548:	0542                	slli	a0,a0,0x10
2001454a:	010efeb3          	and	t4,t4,a6
2001454e:	9576                	add	a0,a0,t4
20014550:	00e46663          	bltu	s0,a4,2001455c <__divdf3+0x3a6>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 79)
20014554:	18e41f63          	bne	s0,a4,200146f2 <__divdf3+0x53c>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 80)
20014558:	8fb2                	mv	t6,a2
2001455a:	c91d                	beqz	a0,20014590 <__divdf3+0x3da>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 82)
2001455c:	9446                	add	s0,s0,a7
2001455e:	fff60f93          	addi	t6,a2,-1
20014562:	03146163          	bltu	s0,a7,20014584 <__divdf3+0x3ce>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 88)
20014566:	00e46663          	bltu	s0,a4,20014572 <__divdf3+0x3bc>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 91)
2001456a:	18e41363          	bne	s0,a4,200146f0 <__divdf3+0x53a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 92)
2001456e:	00a37d63          	bgeu	t1,a0,20014588 <__divdf3+0x3d2>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 94)
20014572:	00131793          	slli	a5,t1,0x1
20014576:	0067b333          	sltu	t1,a5,t1
2001457a:	989a                	add	a7,a7,t1
2001457c:	ffe60f93          	addi	t6,a2,-2
20014580:	9446                	add	s0,s0,a7
20014582:	833e                	mv	t1,a5
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 96)
20014584:	00e41463          	bne	s0,a4,2001458c <__divdf3+0x3d6>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 98)
20014588:	00650463          	beq	a0,t1,20014590 <__divdf3+0x3da>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 99)
2001458c:	001fef93          	ori	t6,t6,1
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 2)
20014590:	3ff58793          	addi	a5,a1,1023
20014594:	0af05b63          	blez	a5,2001464a <__divdf3+0x494>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 6)
20014598:	007ff713          	andi	a4,t6,7
2001459c:	cf01                	beqz	a4,200145b4 <__divdf3+0x3fe>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 8)
2001459e:	00fff713          	andi	a4,t6,15
200145a2:	4611                	li	a2,4
200145a4:	00c70863          	beq	a4,a2,200145b4 <__divdf3+0x3fe>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 10)
200145a8:	004f8613          	addi	a2,t6,4
200145ac:	01f63fb3          	sltu	t6,a2,t6
200145b0:	94fe                	add	s1,s1,t6
200145b2:	8fb2                	mv	t6,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 9)
200145b4:	01000737          	lui	a4,0x1000
200145b8:	8f65                	and	a4,a4,s1
200145ba:	c719                	beqz	a4,200145c8 <__divdf3+0x412>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 24)
200145bc:	ff0007b7          	lui	a5,0xff000
200145c0:	17fd                	addi	a5,a5,-1
200145c2:	8cfd                	and	s1,s1,a5
200145c4:	40058793          	addi	a5,a1,1024
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 26)
200145c8:	7fe00713          	li	a4,2046
200145cc:	06f74263          	blt	a4,a5,20014630 <__divdf3+0x47a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47
200145d0:	003fdf93          	srli	t6,t6,0x3
200145d4:	01d49713          	slli	a4,s1,0x1d
200145d8:	01f76733          	or	a4,a4,t6
200145dc:	0034d513          	srli	a0,s1,0x3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 119)
200145e0:	07d2                	slli	a5,a5,0x14
200145e2:	7ff00637          	lui	a2,0x7ff00
200145e6:	0532                	slli	a0,a0,0xc
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:51 (discriminator 119)
200145e8:	50b2                	lw	ra,44(sp)
200145ea:	5422                	lw	s0,40(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 119)
200145ec:	8ff1                	and	a5,a5,a2
200145ee:	8131                	srli	a0,a0,0xc
200145f0:	8d5d                	or	a0,a0,a5
200145f2:	06fe                	slli	a3,a3,0x1f
200145f4:	00d567b3          	or	a5,a0,a3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:51 (discriminator 119)
200145f8:	5492                	lw	s1,36(sp)
200145fa:	5902                	lw	s2,32(sp)
200145fc:	49f2                	lw	s3,28(sp)
200145fe:	4a62                	lw	s4,24(sp)
20014600:	4ad2                	lw	s5,20(sp)
20014602:	4b42                	lw	s6,16(sp)
20014604:	4bb2                	lw	s7,12(sp)
20014606:	4c22                	lw	s8,8(sp)
20014608:	853a                	mv	a0,a4
2001460a:	85be                	mv	a1,a5
2001460c:	6145                	addi	sp,sp,48
2001460e:	8082                	ret
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 15)
20014610:	15fd                	addi	a1,a1,-1
20014612:	4781                	li	a5,0
20014614:	b3b5                	j	20014380 <__divdf3+0x1ca>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:44 (discriminator 8)
20014616:	86ce                	mv	a3,s3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 8)
20014618:	84d6                	mv	s1,s5
2001461a:	8fa2                	mv	t6,s0
2001461c:	87de                	mv	a5,s7
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 108)
2001461e:	470d                	li	a4,3
20014620:	0ae78a63          	beq	a5,a4,200146d4 <__divdf3+0x51e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47
20014624:	4705                	li	a4,1
20014626:	0ae78e63          	beq	a5,a4,200146e2 <__divdf3+0x52c>
2001462a:	4709                	li	a4,2
2001462c:	f6e792e3          	bne	a5,a4,20014590 <__divdf3+0x3da>
20014630:	4501                	li	a0,0
20014632:	4701                	li	a4,0
20014634:	7ff00793          	li	a5,2047
20014638:	b765                	j	200145e0 <__divdf3+0x42a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:45 (discriminator 5)
2001463a:	86e2                	mv	a3,s8
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46 (discriminator 5)
2001463c:	b7cd                	j	2001461e <__divdf3+0x468>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46
2001463e:	000804b7          	lui	s1,0x80
20014642:	4f81                	li	t6,0
20014644:	4681                	li	a3,0
20014646:	478d                	li	a5,3
20014648:	bfd9                	j	2001461e <__divdf3+0x468>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 59)
2001464a:	4505                	li	a0,1
2001464c:	8d1d                	sub	a0,a0,a5
2001464e:	03800713          	li	a4,56
20014652:	08a74863          	blt	a4,a0,200146e2 <__divdf3+0x52c>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 60)
20014656:	477d                	li	a4,31
20014658:	04a74963          	blt	a4,a0,200146aa <__divdf3+0x4f4>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 62)
2001465c:	41e58593          	addi	a1,a1,1054
20014660:	00b497b3          	sll	a5,s1,a1
20014664:	00afd733          	srl	a4,t6,a0
20014668:	00bf95b3          	sll	a1,t6,a1
2001466c:	8fd9                	or	a5,a5,a4
2001466e:	00b035b3          	snez	a1,a1
20014672:	8fcd                	or	a5,a5,a1
20014674:	00a4d533          	srl	a0,s1,a0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 75)
20014678:	0077f713          	andi	a4,a5,7
2001467c:	cf01                	beqz	a4,20014694 <__divdf3+0x4de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 76)
2001467e:	00f7f713          	andi	a4,a5,15
20014682:	4611                	li	a2,4
20014684:	00c70863          	beq	a4,a2,20014694 <__divdf3+0x4de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 78)
20014688:	00478713          	addi	a4,a5,4 # ff000004 <metal_segment_heap_target_end+0x7effe014>
2001468c:	00f737b3          	sltu	a5,a4,a5
20014690:	953e                	add	a0,a0,a5
20014692:	87ba                	mv	a5,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 77)
20014694:	00800737          	lui	a4,0x800
20014698:	8f69                	and	a4,a4,a0
2001469a:	e739                	bnez	a4,200146e8 <__divdf3+0x532>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 93)
2001469c:	01d51713          	slli	a4,a0,0x1d
200146a0:	838d                	srli	a5,a5,0x3
200146a2:	8f5d                	or	a4,a4,a5
200146a4:	810d                	srli	a0,a0,0x3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47
200146a6:	4781                	li	a5,0
200146a8:	bf25                	j	200145e0 <__divdf3+0x42a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 63)
200146aa:	5705                	li	a4,-31
200146ac:	40f707b3          	sub	a5,a4,a5
200146b0:	02000613          	li	a2,32
200146b4:	00f4d7b3          	srl	a5,s1,a5
200146b8:	4701                	li	a4,0
200146ba:	00c50663          	beq	a0,a2,200146c6 <__divdf3+0x510>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 71)
200146be:	43e58713          	addi	a4,a1,1086
200146c2:	00e49733          	sll	a4,s1,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47 (discriminator 74)
200146c6:	01f76733          	or	a4,a4,t6
200146ca:	00e03733          	snez	a4,a4
200146ce:	8fd9                	or	a5,a5,a4
200146d0:	4501                	li	a0,0
200146d2:	b75d                	j	20014678 <__divdf3+0x4c2>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:47
200146d4:	00080537          	lui	a0,0x80
200146d8:	4701                	li	a4,0
200146da:	7ff00793          	li	a5,2047
200146de:	4681                	li	a3,0
200146e0:	b701                	j	200145e0 <__divdf3+0x42a>
200146e2:	4501                	li	a0,0
200146e4:	4701                	li	a4,0
200146e6:	b7c1                	j	200146a6 <__divdf3+0x4f0>
200146e8:	4501                	li	a0,0
200146ea:	4701                	li	a4,0
200146ec:	4785                	li	a5,1
200146ee:	bdcd                	j	200145e0 <__divdf3+0x42a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/divdf3.c:46
200146f0:	867e                	mv	a2,t6
200146f2:	8fb2                	mv	t6,a2
200146f4:	bd61                	j	2001458c <__divdf3+0x3d6>

200146f6 <__muldf3>:
__muldf3():
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:36
200146f6:	7179                	addi	sp,sp,-48
200146f8:	ce4e                	sw	s3,28(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44
200146fa:	0145d993          	srli	s3,a1,0x14
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:36
200146fe:	d422                	sw	s0,40(sp)
20014700:	d226                	sw	s1,36(sp)
20014702:	cc52                	sw	s4,24(sp)
20014704:	ca56                	sw	s5,20(sp)
20014706:	c65e                	sw	s7,12(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44
20014708:	00c59493          	slli	s1,a1,0xc
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:36
2001470c:	d606                	sw	ra,44(sp)
2001470e:	d04a                	sw	s2,32(sp)
20014710:	c85a                	sw	s6,16(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44
20014712:	7ff9f993          	andi	s3,s3,2047
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:36
20014716:	842a                	mv	s0,a0
20014718:	8bb2                	mv	s7,a2
2001471a:	8ab6                	mv	s5,a3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44
2001471c:	80b1                	srli	s1,s1,0xc
2001471e:	01f5da13          	srli	s4,a1,0x1f
20014722:	08098163          	beqz	s3,200147a4 <__muldf3+0xae>
20014726:	7ff00793          	li	a5,2047
2001472a:	0cf98363          	beq	s3,a5,200147f0 <__muldf3+0xfa>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 1)
2001472e:	01d55793          	srli	a5,a0,0x1d
20014732:	048e                	slli	s1,s1,0x3
20014734:	8cdd                	or	s1,s1,a5
20014736:	008007b7          	lui	a5,0x800
2001473a:	8cdd                	or	s1,s1,a5
2001473c:	00351913          	slli	s2,a0,0x3
20014740:	c0198993          	addi	s3,s3,-1023
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 41)
20014744:	4b01                	li	s6,0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 8)
20014746:	014ad513          	srli	a0,s5,0x14
2001474a:	00ca9413          	slli	s0,s5,0xc
2001474e:	7ff57513          	andi	a0,a0,2047
20014752:	8031                	srli	s0,s0,0xc
20014754:	01fada93          	srli	s5,s5,0x1f
20014758:	cd55                	beqz	a0,20014814 <__muldf3+0x11e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45
2001475a:	7ff00793          	li	a5,2047
2001475e:	10f50163          	beq	a0,a5,20014860 <__muldf3+0x16a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 1)
20014762:	01dbd793          	srli	a5,s7,0x1d
20014766:	040e                	slli	s0,s0,0x3
20014768:	8c5d                	or	s0,s0,a5
2001476a:	008007b7          	lui	a5,0x800
2001476e:	8c5d                	or	s0,s0,a5
20014770:	c0150513          	addi	a0,a0,-1023 # 7fc01 <__heap_size+0x7f401>
20014774:	003b9793          	slli	a5,s7,0x3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 41)
20014778:	4701                	li	a4,0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 8)
2001477a:	002b1693          	slli	a3,s6,0x2
2001477e:	8ed9                	or	a3,a3,a4
20014780:	954e                	add	a0,a0,s3
20014782:	16fd                	addi	a3,a3,-1
20014784:	4839                	li	a6,14
20014786:	015a4633          	xor	a2,s4,s5
2001478a:	00150593          	addi	a1,a0,1
2001478e:	0ed86a63          	bltu	a6,a3,20014882 <__muldf3+0x18c>
20014792:	ffffc517          	auipc	a0,0xffffc
20014796:	2a650513          	addi	a0,a0,678 # 20010a38 <__sf_fake_stdout+0xf0>
2001479a:	068a                	slli	a3,a3,0x2
2001479c:	96aa                	add	a3,a3,a0
2001479e:	4294                	lw	a3,0(a3)
200147a0:	96aa                	add	a3,a3,a0
200147a2:	8682                	jr	a3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 2)
200147a4:	00a4e933          	or	s2,s1,a0
200147a8:	04090d63          	beqz	s2,20014802 <__muldf3+0x10c>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 13)
200147ac:	c885                	beqz	s1,200147dc <__muldf3+0xe6>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 17)
200147ae:	8526                	mv	a0,s1
200147b0:	2b31                	jal	20014ccc <__clzsi2>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 31)
200147b2:	ff550713          	addi	a4,a0,-11
200147b6:	47f1                	li	a5,28
200147b8:	02e7c663          	blt	a5,a4,200147e4 <__muldf3+0xee>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 32)
200147bc:	47f5                	li	a5,29
200147be:	ff850913          	addi	s2,a0,-8
200147c2:	8f99                	sub	a5,a5,a4
200147c4:	012494b3          	sll	s1,s1,s2
200147c8:	00f457b3          	srl	a5,s0,a5
200147cc:	8cdd                	or	s1,s1,a5
200147ce:	01241933          	sll	s2,s0,s2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 41)
200147d2:	c0d00993          	li	s3,-1011
200147d6:	40a989b3          	sub	s3,s3,a0
200147da:	b7ad                	j	20014744 <__muldf3+0x4e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 24)
200147dc:	29c5                	jal	20014ccc <__clzsi2>
200147de:	02050513          	addi	a0,a0,32
200147e2:	bfc1                	j	200147b2 <__muldf3+0xbc>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 33)
200147e4:	fd850493          	addi	s1,a0,-40
200147e8:	009414b3          	sll	s1,s0,s1
200147ec:	4901                	li	s2,0
200147ee:	b7d5                	j	200147d2 <__muldf3+0xdc>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 3)
200147f0:	00a4e933          	or	s2,s1,a0
200147f4:	00090b63          	beqz	s2,2001480a <__muldf3+0x114>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44
200147f8:	892a                	mv	s2,a0
200147fa:	7ff00993          	li	s3,2047
200147fe:	4b0d                	li	s6,3
20014800:	b799                	j	20014746 <__muldf3+0x50>
20014802:	4481                	li	s1,0
20014804:	4981                	li	s3,0
20014806:	4b05                	li	s6,1
20014808:	bf3d                	j	20014746 <__muldf3+0x50>
2001480a:	4481                	li	s1,0
2001480c:	7ff00993          	li	s3,2047
20014810:	4b09                	li	s6,2
20014812:	bf15                	j	20014746 <__muldf3+0x50>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 2)
20014814:	017467b3          	or	a5,s0,s7
20014818:	cfa1                	beqz	a5,20014870 <__muldf3+0x17a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 13)
2001481a:	c805                	beqz	s0,2001484a <__muldf3+0x154>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 17)
2001481c:	8522                	mv	a0,s0
2001481e:	217d                	jal	20014ccc <__clzsi2>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 31)
20014820:	ff550693          	addi	a3,a0,-11
20014824:	47f1                	li	a5,28
20014826:	02d7c763          	blt	a5,a3,20014854 <__muldf3+0x15e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 32)
2001482a:	4775                	li	a4,29
2001482c:	ff850793          	addi	a5,a0,-8
20014830:	8f15                	sub	a4,a4,a3
20014832:	00f41433          	sll	s0,s0,a5
20014836:	00ebd733          	srl	a4,s7,a4
2001483a:	8c59                	or	s0,s0,a4
2001483c:	00fb97b3          	sll	a5,s7,a5
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 41)
20014840:	c0d00713          	li	a4,-1011
20014844:	40a70533          	sub	a0,a4,a0
20014848:	bf05                	j	20014778 <__muldf3+0x82>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 24)
2001484a:	855e                	mv	a0,s7
2001484c:	2141                	jal	20014ccc <__clzsi2>
2001484e:	02050513          	addi	a0,a0,32
20014852:	b7f9                	j	20014820 <__muldf3+0x12a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 33)
20014854:	fd850413          	addi	s0,a0,-40
20014858:	008b9433          	sll	s0,s7,s0
2001485c:	4781                	li	a5,0
2001485e:	b7cd                	j	20014840 <__muldf3+0x14a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 3)
20014860:	017467b3          	or	a5,s0,s7
20014864:	cb91                	beqz	a5,20014878 <__muldf3+0x182>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45
20014866:	87de                	mv	a5,s7
20014868:	7ff00513          	li	a0,2047
2001486c:	470d                	li	a4,3
2001486e:	b731                	j	2001477a <__muldf3+0x84>
20014870:	4401                	li	s0,0
20014872:	4501                	li	a0,0
20014874:	4705                	li	a4,1
20014876:	b711                	j	2001477a <__muldf3+0x84>
20014878:	4401                	li	s0,0
2001487a:	7ff00513          	li	a0,2047
2001487e:	4709                	li	a4,2
20014880:	bded                	j	2001477a <__muldf3+0x84>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 2)
20014882:	6f41                	lui	t5,0x10
20014884:	ffff0e93          	addi	t4,t5,-1 # ffff <__heap_size+0xf7ff>
20014888:	01095713          	srli	a4,s2,0x10
2001488c:	0107d893          	srli	a7,a5,0x10
20014890:	01d97933          	and	s2,s2,t4
20014894:	01d7f7b3          	and	a5,a5,t4
20014898:	03288833          	mul	a6,a7,s2
2001489c:	02f906b3          	mul	a3,s2,a5
200148a0:	02f70fb3          	mul	t6,a4,a5
200148a4:	01f80333          	add	t1,a6,t6
200148a8:	0106d813          	srli	a6,a3,0x10
200148ac:	981a                	add	a6,a6,t1
200148ae:	03170e33          	mul	t3,a4,a7
200148b2:	01f87363          	bgeu	a6,t6,200148b8 <__muldf3+0x1c2>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 9)
200148b6:	9e7a                	add	t3,t3,t5
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 11)
200148b8:	01085393          	srli	t2,a6,0x10
200148bc:	01d87833          	and	a6,a6,t4
200148c0:	01d6f6b3          	and	a3,a3,t4
200148c4:	01045f13          	srli	t5,s0,0x10
200148c8:	01d472b3          	and	t0,s0,t4
200148cc:	0842                	slli	a6,a6,0x10
200148ce:	9836                	add	a6,a6,a3
200148d0:	02570eb3          	mul	t4,a4,t0
200148d4:	025906b3          	mul	a3,s2,t0
200148d8:	032f0933          	mul	s2,t5,s2
200148dc:	01d90333          	add	t1,s2,t4
200148e0:	0106d913          	srli	s2,a3,0x10
200148e4:	991a                	add	s2,s2,t1
200148e6:	03e70733          	mul	a4,a4,t5
200148ea:	01d97463          	bgeu	s2,t4,200148f2 <__muldf3+0x1fc>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 12)
200148ee:	6341                	lui	t1,0x10
200148f0:	971a                	add	a4,a4,t1
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 14)
200148f2:	01095e93          	srli	t4,s2,0x10
200148f6:	69c1                	lui	s3,0x10
200148f8:	9eba                	add	t4,t4,a4
200148fa:	fff98713          	addi	a4,s3,-1 # ffff <__heap_size+0xf7ff>
200148fe:	00e97933          	and	s2,s2,a4
20014902:	8ef9                	and	a3,a3,a4
20014904:	0104d413          	srli	s0,s1,0x10
20014908:	0942                	slli	s2,s2,0x10
2001490a:	8cf9                	and	s1,s1,a4
2001490c:	02978733          	mul	a4,a5,s1
20014910:	9936                	add	s2,s2,a3
20014912:	93ca                	add	t2,t2,s2
20014914:	02f40333          	mul	t1,s0,a5
20014918:	029886b3          	mul	a3,a7,s1
2001491c:	028887b3          	mul	a5,a7,s0
20014920:	006688b3          	add	a7,a3,t1
20014924:	01075693          	srli	a3,a4,0x10
20014928:	96c6                	add	a3,a3,a7
2001492a:	0066f363          	bgeu	a3,t1,20014930 <__muldf3+0x23a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 15)
2001492e:	97ce                	add	a5,a5,s3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 17)
20014930:	0106d893          	srli	a7,a3,0x10
20014934:	69c1                	lui	s3,0x10
20014936:	00f88fb3          	add	t6,a7,a5
2001493a:	fff98793          	addi	a5,s3,-1 # ffff <__heap_size+0xf7ff>
2001493e:	029288b3          	mul	a7,t0,s1
20014942:	8efd                	and	a3,a3,a5
20014944:	8f7d                	and	a4,a4,a5
20014946:	06c2                	slli	a3,a3,0x10
20014948:	96ba                	add	a3,a3,a4
2001494a:	025407b3          	mul	a5,s0,t0
2001494e:	029f04b3          	mul	s1,t5,s1
20014952:	028f0333          	mul	t1,t5,s0
20014956:	94be                	add	s1,s1,a5
20014958:	0108d413          	srli	s0,a7,0x10
2001495c:	94a2                	add	s1,s1,s0
2001495e:	00f4f363          	bgeu	s1,a5,20014964 <__muldf3+0x26e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 18)
20014962:	934e                	add	t1,t1,s3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 20)
20014964:	67c1                	lui	a5,0x10
20014966:	17fd                	addi	a5,a5,-1
20014968:	00f4f733          	and	a4,s1,a5
2001496c:	00f8f8b3          	and	a7,a7,a5
20014970:	0742                	slli	a4,a4,0x10
20014972:	9e1e                	add	t3,t3,t2
20014974:	9746                	add	a4,a4,a7
20014976:	012e3933          	sltu	s2,t3,s2
2001497a:	9776                	add	a4,a4,t4
2001497c:	01270433          	add	s0,a4,s2
20014980:	9e36                	add	t3,t3,a3
20014982:	00de36b3          	sltu	a3,t3,a3
20014986:	01f408b3          	add	a7,s0,t6
2001498a:	00d88f33          	add	t5,a7,a3
2001498e:	01d73733          	sltu	a4,a4,t4
20014992:	01243433          	sltu	s0,s0,s2
20014996:	8c59                	or	s0,s0,a4
20014998:	80c1                	srli	s1,s1,0x10
2001499a:	01f8b8b3          	sltu	a7,a7,t6
2001499e:	00df36b3          	sltu	a3,t5,a3
200149a2:	9426                	add	s0,s0,s1
200149a4:	00d8e6b3          	or	a3,a7,a3
200149a8:	9436                	add	s0,s0,a3
200149aa:	941a                	add	s0,s0,t1
200149ac:	017f5793          	srli	a5,t5,0x17
200149b0:	0426                	slli	s0,s0,0x9
200149b2:	8c5d                	or	s0,s0,a5
200149b4:	009e1793          	slli	a5,t3,0x9
200149b8:	0107e7b3          	or	a5,a5,a6
200149bc:	00f037b3          	snez	a5,a5
200149c0:	017e5e13          	srli	t3,t3,0x17
200149c4:	009f1713          	slli	a4,t5,0x9
200149c8:	01c7e7b3          	or	a5,a5,t3
200149cc:	8fd9                	or	a5,a5,a4
200149ce:	01000737          	lui	a4,0x1000
200149d2:	8f61                	and	a4,a4,s0
200149d4:	cb4d                	beqz	a4,20014a86 <__muldf3+0x390>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 38)
200149d6:	0017d713          	srli	a4,a5,0x1
200149da:	8b85                	andi	a5,a5,1
200149dc:	8fd9                	or	a5,a5,a4
200149de:	01f41713          	slli	a4,s0,0x1f
200149e2:	8fd9                	or	a5,a5,a4
200149e4:	8005                	srli	s0,s0,0x1
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 2)
200149e6:	3ff58693          	addi	a3,a1,1023
200149ea:	0ad05063          	blez	a3,20014a8a <__muldf3+0x394>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 6)
200149ee:	0077f713          	andi	a4,a5,7
200149f2:	cf01                	beqz	a4,20014a0a <__muldf3+0x314>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 8)
200149f4:	00f7f713          	andi	a4,a5,15
200149f8:	4511                	li	a0,4
200149fa:	00a70863          	beq	a4,a0,20014a0a <__muldf3+0x314>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 10)
200149fe:	00478713          	addi	a4,a5,4 # 10004 <__heap_size+0xf804>
20014a02:	00f737b3          	sltu	a5,a4,a5
20014a06:	943e                	add	s0,s0,a5
20014a08:	87ba                	mv	a5,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 9)
20014a0a:	01000737          	lui	a4,0x1000
20014a0e:	8f61                	and	a4,a4,s0
20014a10:	c719                	beqz	a4,20014a1e <__muldf3+0x328>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 24)
20014a12:	ff000737          	lui	a4,0xff000
20014a16:	177d                	addi	a4,a4,-1
20014a18:	8c79                	and	s0,s0,a4
20014a1a:	40058693          	addi	a3,a1,1024
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 26)
20014a1e:	7fe00713          	li	a4,2046
20014a22:	0ed74e63          	blt	a4,a3,20014b1e <__muldf3+0x428>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47
20014a26:	0037d713          	srli	a4,a5,0x3
20014a2a:	01d41793          	slli	a5,s0,0x1d
20014a2e:	8fd9                	or	a5,a5,a4
20014a30:	800d                	srli	s0,s0,0x3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 119)
20014a32:	01469713          	slli	a4,a3,0x14
20014a36:	0432                	slli	s0,s0,0xc
20014a38:	7ff006b7          	lui	a3,0x7ff00
20014a3c:	8f75                	and	a4,a4,a3
20014a3e:	8031                	srli	s0,s0,0xc
20014a40:	8c59                	or	s0,s0,a4
20014a42:	067e                	slli	a2,a2,0x1f
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:51 (discriminator 119)
20014a44:	50b2                	lw	ra,44(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 119)
20014a46:	00c46733          	or	a4,s0,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:51 (discriminator 119)
20014a4a:	5422                	lw	s0,40(sp)
20014a4c:	5492                	lw	s1,36(sp)
20014a4e:	5902                	lw	s2,32(sp)
20014a50:	49f2                	lw	s3,28(sp)
20014a52:	4a62                	lw	s4,24(sp)
20014a54:	4ad2                	lw	s5,20(sp)
20014a56:	4b42                	lw	s6,16(sp)
20014a58:	4bb2                	lw	s7,12(sp)
20014a5a:	853e                	mv	a0,a5
20014a5c:	85ba                	mv	a1,a4
20014a5e:	6145                	addi	sp,sp,48
20014a60:	8082                	ret
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:44 (discriminator 7)
20014a62:	8652                	mv	a2,s4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 7)
20014a64:	8426                	mv	s0,s1
20014a66:	87ca                	mv	a5,s2
20014a68:	875a                	mv	a4,s6
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 47)
20014a6a:	4689                	li	a3,2
20014a6c:	0ad70963          	beq	a4,a3,20014b1e <__muldf3+0x428>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47
20014a70:	468d                	li	a3,3
20014a72:	08d70f63          	beq	a4,a3,20014b10 <__muldf3+0x41a>
20014a76:	4685                	li	a3,1
20014a78:	f6d717e3          	bne	a4,a3,200149e6 <__muldf3+0x2f0>
20014a7c:	4401                	li	s0,0
20014a7e:	4781                	li	a5,0
20014a80:	a09d                	j	20014ae6 <__muldf3+0x3f0>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:45 (discriminator 4)
20014a82:	8656                	mv	a2,s5
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46 (discriminator 4)
20014a84:	b7dd                	j	20014a6a <__muldf3+0x374>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:46
20014a86:	85aa                	mv	a1,a0
20014a88:	bfb9                	j	200149e6 <__muldf3+0x2f0>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 59)
20014a8a:	4505                	li	a0,1
20014a8c:	8d15                	sub	a0,a0,a3
20014a8e:	03800713          	li	a4,56
20014a92:	fea745e3          	blt	a4,a0,20014a7c <__muldf3+0x386>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 60)
20014a96:	477d                	li	a4,31
20014a98:	04a74963          	blt	a4,a0,20014aea <__muldf3+0x3f4>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 62)
20014a9c:	41e58593          	addi	a1,a1,1054
20014aa0:	00b41733          	sll	a4,s0,a1
20014aa4:	00a7d6b3          	srl	a3,a5,a0
20014aa8:	00b797b3          	sll	a5,a5,a1
20014aac:	8f55                	or	a4,a4,a3
20014aae:	00f037b3          	snez	a5,a5
20014ab2:	8fd9                	or	a5,a5,a4
20014ab4:	00a45433          	srl	s0,s0,a0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 75)
20014ab8:	0077f713          	andi	a4,a5,7
20014abc:	cf01                	beqz	a4,20014ad4 <__muldf3+0x3de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 76)
20014abe:	00f7f713          	andi	a4,a5,15
20014ac2:	4691                	li	a3,4
20014ac4:	00d70863          	beq	a4,a3,20014ad4 <__muldf3+0x3de>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 78)
20014ac8:	00478713          	addi	a4,a5,4
20014acc:	00f737b3          	sltu	a5,a4,a5
20014ad0:	943e                	add	s0,s0,a5
20014ad2:	87ba                	mv	a5,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 77)
20014ad4:	00800737          	lui	a4,0x800
20014ad8:	8f61                	and	a4,a4,s0
20014ada:	e739                	bnez	a4,20014b28 <__muldf3+0x432>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 93)
20014adc:	01d41713          	slli	a4,s0,0x1d
20014ae0:	838d                	srli	a5,a5,0x3
20014ae2:	8fd9                	or	a5,a5,a4
20014ae4:	800d                	srli	s0,s0,0x3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47
20014ae6:	4681                	li	a3,0
20014ae8:	b7a9                	j	20014a32 <__muldf3+0x33c>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 63)
20014aea:	5705                	li	a4,-31
20014aec:	8f15                	sub	a4,a4,a3
20014aee:	02000813          	li	a6,32
20014af2:	00e45733          	srl	a4,s0,a4
20014af6:	4681                	li	a3,0
20014af8:	01050663          	beq	a0,a6,20014b04 <__muldf3+0x40e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 71)
20014afc:	43e58593          	addi	a1,a1,1086
20014b00:	00b416b3          	sll	a3,s0,a1
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47 (discriminator 74)
20014b04:	8fd5                	or	a5,a5,a3
20014b06:	00f037b3          	snez	a5,a5
20014b0a:	8fd9                	or	a5,a5,a4
20014b0c:	4401                	li	s0,0
20014b0e:	b76d                	j	20014ab8 <__muldf3+0x3c2>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/muldf3.c:47
20014b10:	00080437          	lui	s0,0x80
20014b14:	4781                	li	a5,0
20014b16:	7ff00693          	li	a3,2047
20014b1a:	4601                	li	a2,0
20014b1c:	bf19                	j	20014a32 <__muldf3+0x33c>
20014b1e:	4401                	li	s0,0
20014b20:	4781                	li	a5,0
20014b22:	7ff00693          	li	a3,2047
20014b26:	b731                	j	20014a32 <__muldf3+0x33c>
20014b28:	4401                	li	s0,0
20014b2a:	4781                	li	a5,0
20014b2c:	4685                	li	a3,1
20014b2e:	b711                	j	20014a32 <__muldf3+0x33c>

20014b30 <__floatundidf>:
__floatundidf():
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:36
20014b30:	1101                	addi	sp,sp,-32
20014b32:	ce06                	sw	ra,28(sp)
20014b34:	cc22                	sw	s0,24(sp)
20014b36:	ca26                	sw	s1,20(sp)
20014b38:	c84a                	sw	s2,16(sp)
20014b3a:	c64e                	sw	s3,12(sp)
20014b3c:	c452                	sw	s4,8(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42
20014b3e:	00b567b3          	or	a5,a0,a1
20014b42:	12078763          	beqz	a5,20014c70 <__floatundidf+0x140>
20014b46:	842a                	mv	s0,a0
20014b48:	892e                	mv	s2,a1
20014b4a:	84ae                	mv	s1,a1
20014b4c:	c1ad                	beqz	a1,20014bae <__floatundidf+0x7e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 8)
20014b4e:	852e                	mv	a0,a1
20014b50:	2ab5                	jal	20014ccc <__clzsi2>
20014b52:	89aa                	mv	s3,a0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 22)
20014b54:	43e00a13          	li	s4,1086
20014b58:	413a0a33          	sub	s4,s4,s3
20014b5c:	43300793          	li	a5,1075
20014b60:	0747c163          	blt	a5,s4,20014bc2 <__floatundidf+0x92>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 38)
20014b64:	472d                	li	a4,11
20014b66:	87a2                	mv	a5,s0
20014b68:	03375363          	bge	a4,s3,20014b8e <__floatundidf+0x5e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 40)
20014b6c:	02a00713          	li	a4,42
20014b70:	05374363          	blt	a4,s3,20014bb6 <__floatundidf+0x86>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 46)
20014b74:	02b00493          	li	s1,43
20014b78:	ff598713          	addi	a4,s3,-11
20014b7c:	413484b3          	sub	s1,s1,s3
20014b80:	009454b3          	srl	s1,s0,s1
20014b84:	00e915b3          	sll	a1,s2,a4
20014b88:	8ccd                	or	s1,s1,a1
20014b8a:	00e417b3          	sll	a5,s0,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:47 (discriminator 155)
20014b8e:	40f2                	lw	ra,28(sp)
20014b90:	4462                	lw	s0,24(sp)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:43 (discriminator 155)
20014b92:	00c49593          	slli	a1,s1,0xc
20014b96:	0a52                	slli	s4,s4,0x14
20014b98:	81b1                	srli	a1,a1,0xc
20014b9a:	00ba6733          	or	a4,s4,a1
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:47 (discriminator 155)
20014b9e:	44d2                	lw	s1,20(sp)
20014ba0:	4942                	lw	s2,16(sp)
20014ba2:	49b2                	lw	s3,12(sp)
20014ba4:	4a22                	lw	s4,8(sp)
20014ba6:	853e                	mv	a0,a5
20014ba8:	85ba                	mv	a1,a4
20014baa:	6105                	addi	sp,sp,32
20014bac:	8082                	ret
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 15)
20014bae:	2a39                	jal	20014ccc <__clzsi2>
20014bb0:	02050993          	addi	s3,a0,32
20014bb4:	b745                	j	20014b54 <__floatundidf+0x24>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 42)
20014bb6:	fd598593          	addi	a1,s3,-43
20014bba:	00b414b3          	sll	s1,s0,a1
20014bbe:	4781                	li	a5,0
20014bc0:	b7f9                	j	20014b8e <__floatundidf+0x5e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 39)
20014bc2:	43600793          	li	a5,1078
20014bc6:	0347d363          	bge	a5,s4,20014bec <__floatundidf+0xbc>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 49)
20014bca:	03898613          	addi	a2,s3,56
20014bce:	8522                	mv	a0,s0
20014bd0:	85ca                	mv	a1,s2
20014bd2:	28c1                	jal	20014ca2 <__ashldi3>
20014bd4:	8d4d                	or	a0,a0,a1
20014bd6:	4621                	li	a2,8
20014bd8:	00a034b3          	snez	s1,a0
20014bdc:	85ca                	mv	a1,s2
20014bde:	8522                	mv	a0,s0
20014be0:	41360633          	sub	a2,a2,s3
20014be4:	2851                	jal	20014c78 <__lshrdi3>
20014be6:	00a4e433          	or	s0,s1,a0
20014bea:	892e                	mv	s2,a1
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 51)
20014bec:	4721                	li	a4,8
20014bee:	87a2                	mv	a5,s0
20014bf0:	85ca                	mv	a1,s2
20014bf2:	03375463          	bge	a4,s3,20014c1a <__floatundidf+0xea>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 52)
20014bf6:	02700713          	li	a4,39
20014bfa:	07374563          	blt	a4,s3,20014c64 <__floatundidf+0x134>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 59)
20014bfe:	ff898713          	addi	a4,s3,-8
20014c02:	00e915b3          	sll	a1,s2,a4
20014c06:	02800913          	li	s2,40
20014c0a:	41390933          	sub	s2,s2,s3
20014c0e:	01245933          	srl	s2,s0,s2
20014c12:	00b965b3          	or	a1,s2,a1
20014c16:	00e417b3          	sll	a5,s0,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 63)
20014c1a:	ff800737          	lui	a4,0xff800
20014c1e:	177d                	addi	a4,a4,-1
20014c20:	8df9                	and	a1,a1,a4
20014c22:	0077f713          	andi	a4,a5,7
20014c26:	cf01                	beqz	a4,20014c3e <__floatundidf+0x10e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 104)
20014c28:	00f7f713          	andi	a4,a5,15
20014c2c:	4691                	li	a3,4
20014c2e:	00d70863          	beq	a4,a3,20014c3e <__floatundidf+0x10e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 108)
20014c32:	00478713          	addi	a4,a5,4
20014c36:	00f737b3          	sltu	a5,a4,a5
20014c3a:	95be                	add	a1,a1,a5
20014c3c:	87ba                	mv	a5,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 111)
20014c3e:	00800737          	lui	a4,0x800
20014c42:	8f6d                	and	a4,a4,a1
20014c44:	cb09                	beqz	a4,20014c56 <__floatundidf+0x126>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 127)
20014c46:	ff800737          	lui	a4,0xff800
20014c4a:	177d                	addi	a4,a4,-1
20014c4c:	43f00a13          	li	s4,1087
20014c50:	8df9                	and	a1,a1,a4
20014c52:	413a0a33          	sub	s4,s4,s3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 143)
20014c56:	838d                	srli	a5,a5,0x3
20014c58:	01d59513          	slli	a0,a1,0x1d
20014c5c:	8fc9                	or	a5,a5,a0
20014c5e:	0035d493          	srli	s1,a1,0x3
20014c62:	b735                	j	20014b8e <__floatundidf+0x5e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42 (discriminator 55)
20014c64:	fd898593          	addi	a1,s3,-40
20014c68:	00b415b3          	sll	a1,s0,a1
20014c6c:	4781                	li	a5,0
20014c6e:	b775                	j	20014c1a <__floatundidf+0xea>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/soft-fp/floatundidf.c:42
20014c70:	4481                	li	s1,0
20014c72:	4781                	li	a5,0
20014c74:	4a01                	li	s4,0
20014c76:	bf21                	j	20014b8e <__floatundidf+0x5e>

20014c78 <__lshrdi3>:
__lshrdi3():
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:406
20014c78:	ce01                	beqz	a2,20014c90 <__lshrdi3+0x18>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:410
20014c7a:	02000793          	li	a5,32
20014c7e:	8f91                	sub	a5,a5,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:413
20014c80:	00f04963          	bgtz	a5,20014c92 <__lshrdi3+0x1a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:416
20014c84:	fe060513          	addi	a0,a2,-32 # 7fefffe0 <metal_segment_data_source_start+0x5fee8d58>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:415
20014c88:	4701                	li	a4,0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:416
20014c8a:	00a5d533          	srl	a0,a1,a0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:426
20014c8e:	85ba                	mv	a1,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:427
20014c90:	8082                	ret
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:422
20014c92:	00c5d733          	srl	a4,a1,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:423
20014c96:	00c55533          	srl	a0,a0,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:420
20014c9a:	00f595b3          	sll	a1,a1,a5
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:423
20014c9e:	8d4d                	or	a0,a0,a1
20014ca0:	b7fd                	j	20014c8e <__lshrdi3+0x16>

20014ca2 <__ashldi3>:
__ashldi3():
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:434
20014ca2:	ce01                	beqz	a2,20014cba <__ashldi3+0x18>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:438
20014ca4:	02000793          	li	a5,32
20014ca8:	8f91                	sub	a5,a5,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:441
20014caa:	00f04963          	bgtz	a5,20014cbc <__ashldi3+0x1a>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:444
20014cae:	fe060593          	addi	a1,a2,-32
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:443
20014cb2:	4701                	li	a4,0
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:444
20014cb4:	00b515b3          	sll	a1,a0,a1
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:454
20014cb8:	853a                	mv	a0,a4
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:455
20014cba:	8082                	ret
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:450
20014cbc:	00c51733          	sll	a4,a0,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:451
20014cc0:	00c595b3          	sll	a1,a1,a2
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:448
20014cc4:	00f55533          	srl	a0,a0,a5
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:451
20014cc8:	8dc9                	or	a1,a1,a0
20014cca:	b7fd                	j	20014cb8 <__ashldi3+0x16>

20014ccc <__clzsi2>:
__clzsi2():
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
20014ccc:	67c1                	lui	a5,0x10
20014cce:	02f57663          	bgeu	a0,a5,20014cfa <__clzsi2+0x2e>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 3)
20014cd2:	0ff00793          	li	a5,255
20014cd6:	00a7b7b3          	sltu	a5,a5,a0
20014cda:	078e                	slli	a5,a5,0x3
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 14)
20014cdc:	02000713          	li	a4,32
20014ce0:	8f1d                	sub	a4,a4,a5
20014ce2:	00f55533          	srl	a0,a0,a5
20014ce6:	ffffc797          	auipc	a5,0xffffc
20014cea:	d8e78793          	addi	a5,a5,-626 # 20010a74 <__clz_tab>
20014cee:	953e                	add	a0,a0,a5
20014cf0:	00054503          	lbu	a0,0(a0)
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:713 (discriminator 14)
20014cf4:	40a70533          	sub	a0,a4,a0
20014cf8:	8082                	ret
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710 (discriminator 4)
20014cfa:	01000737          	lui	a4,0x1000
20014cfe:	47c1                	li	a5,16
20014d00:	fce56ee3          	bltu	a0,a4,20014cdc <__clzsi2+0x10>
/scratch/jenkins/workspace/tpp-freedom-tools/tpp01--build-binary-packages--parameterized/obj/x86_64-apple-darwin/build/riscv64-unknown-elf-gcc/build-gcc-stage2/riscv64-unknown-elf/rv32imac/ilp32/libgcc/../../../../../riscv-gcc/libgcc/libgcc2.c:710
20014d04:	47e1                	li	a5,24
20014d06:	bfd9                	j	20014cdc <__clzsi2+0x10>

20014d08 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_sifive_clint0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:234


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014d08:	800017b7          	lui	a5,0x80001
20014d0c:	aa478793          	addi	a5,a5,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:235
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20014d10:	02000737          	lui	a4,0x2000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:234
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014d14:	00a78363          	beq	a5,a0,20014d1a <__metal_driver_riscv_clint0_mtimecmp_set+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:238
	}
	else {
		return 0;
20014d18:	4701                	li	a4,0
__metal_driver_riscv_clint0_mtimecmp_set():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:45
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20014d1a:	058e                	slli	a1,a1,0x3
20014d1c:	95ba                	add	a1,a1,a4
20014d1e:	6711                	lui	a4,0x4
20014d20:	00470793          	addi	a5,a4,4 # 4004 <__heap_size+0x3804>
20014d24:	97ae                	add	a5,a5,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:47
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = 0xFFFFFFFF;
20014d26:	557d                	li	a0,-1
20014d28:	c388                	sw	a0,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20014d2a:	95ba                	add	a1,a1,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:49
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
20014d2c:	c190                	sw	a2,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:53
        (__metal_io_u32)time;
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = (__metal_io_u32)(time >> 32);
20014d2e:	c394                	sw	a3,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:55
    return 0;
}
20014d30:	4501                	li	a0,0
20014d32:	8082                	ret

20014d34 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:67
    struct metal_cpu *cpu = metal_cpu_get(hartid);

    return metal_cpu_interrupt_controller(cpu);
}

void __metal_driver_riscv_clint0_init(struct metal_interrupt *controller) {
20014d34:	1101                	addi	sp,sp,-32
__metal_driver_sifive_clint0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014d36:	800017b7          	lui	a5,0x80001
__metal_driver_riscv_clint0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:67
20014d3a:	cc22                	sw	s0,24(sp)
20014d3c:	c84a                	sw	s2,16(sp)
20014d3e:	ce06                	sw	ra,28(sp)
20014d40:	ca26                	sw	s1,20(sp)
20014d42:	c64e                	sw	s3,12(sp)
__metal_driver_sifive_clint0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
20014d44:	aa478793          	addi	a5,a5,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
__metal_driver_riscv_clint0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:67
20014d48:	842a                	mv	s0,a0
__metal_driver_sifive_clint0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:258
		return METAL_MAX_CLINT_INTERRUPTS;
	}
	else {
		return 0;
20014d4a:	4901                	li	s2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014d4c:	00f51363          	bne	a0,a5,20014d52 <__metal_driver_riscv_clint0_init+0x1e>
20014d50:	4909                	li	s2,2
__metal_driver_riscv_clint0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:73
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
    struct __metal_driver_riscv_clint0 *clint =
        (struct __metal_driver_riscv_clint0 *)(controller);

    if (!clint->init_done) {
20014d52:	4044                	lw	s1,4(s0)
20014d54:	e499                	bnez	s1,20014d62 <__metal_driver_riscv_clint0_init+0x2e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:81
        for (int i = 0; i < num_interrupts; i++) {
            struct metal_interrupt *intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20014d56:	800009b7          	lui	s3,0x80000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 1)
        for (int i = 0; i < num_interrupts; i++) {
20014d5a:	01249b63          	bne	s1,s2,20014d70 <__metal_driver_riscv_clint0_init+0x3c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:83
        }
        clint->init_done = 1;
20014d5e:	4785                	li	a5,1
20014d60:	c05c                	sw	a5,4(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:85
    }
}
20014d62:	40f2                	lw	ra,28(sp)
20014d64:	4462                	lw	s0,24(sp)
20014d66:	44d2                	lw	s1,20(sp)
20014d68:	4942                	lw	s2,16(sp)
20014d6a:	49b2                	lw	s3,12(sp)
20014d6c:	6105                	addi	sp,sp,32
20014d6e:	8082                	ret
__metal_driver_sifive_clint0_interrupt_lines():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:278
}

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
	if (idx == 0) {
		return 3;
20014d70:	458d                	li	a1,3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:277
	if (idx == 0) {
20014d72:	c091                	beqz	s1,20014d76 <__metal_driver_riscv_clint0_init+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:281
	}
	else if (idx == 1) {
		return 7;
20014d74:	459d                	li	a1,7
__metal_driver_riscv_clint0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:81
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20014d76:	0b89a783          	lw	a5,184(s3) # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20014d7a:	86a2                	mv	a3,s0
20014d7c:	4601                	li	a2,0
20014d7e:	4fdc                	lw	a5,28(a5)
20014d80:	0b898513          	addi	a0,s3,184
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:76
        for (int i = 0; i < num_interrupts; i++) {
20014d84:	0485                	addi	s1,s1,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:81
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20014d86:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:76
        for (int i = 0; i < num_interrupts; i++) {
20014d88:	bfc9                	j	20014d5a <__metal_driver_riscv_clint0_init+0x26>

20014d8a <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:123
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t isr, void *priv) {
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
    return rc;
}
20014d8a:	557d                	li	a0,-1
20014d8c:	8082                	ret

20014d8e <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:127

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode(
    struct metal_interrupt *controller) {
    return __metal_controller_interrupt_vector_mode();
20014d8e:	7910006f          	j	20015d1e <__metal_controller_interrupt_vector_mode>

20014d92 <_get_cpu_intc>:
_get_cpu_intc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:57
static struct metal_interrupt *_get_cpu_intc() {
20014d92:	1141                	addi	sp,sp,-16
20014d94:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:59
    __asm__ volatile("csrr %[hartid], mhartid"
20014d96:	f1402573          	csrr	a0,mhartid
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:62
    struct metal_cpu *cpu = metal_cpu_get(hartid);
20014d9a:	010020ef          	jal	ra,20016daa <metal_cpu_get>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:65
}
20014d9e:	40b2                	lw	ra,12(sp)
20014da0:	0141                	addi	sp,sp,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:64
    return metal_cpu_interrupt_controller(cpu);
20014da2:	0020206f          	j	20016da4 <metal_cpu_interrupt_controller>

20014da6 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:89
                                         void *priv) {
20014da6:	1101                	addi	sp,sp,-32
20014da8:	c62e                	sw	a1,12(sp)
20014daa:	c432                	sw	a2,8(sp)
20014dac:	c236                	sw	a3,4(sp)
20014dae:	ce06                	sw	ra,28(sp)
20014db0:	cc22                	sw	s0,24(sp)
20014db2:	ca26                	sw	s1,20(sp)
20014db4:	84aa                	mv	s1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:91
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
20014db6:	769000ef          	jal	ra,20015d1e <__metal_controller_interrupt_vector_mode>
20014dba:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:93
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
20014dbc:	3fd9                	jal	20014d92 <_get_cpu_intc>
__metal_driver_sifive_clint0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014dbe:	800017b7          	lui	a5,0x80001
20014dc2:	aa478793          	addi	a5,a5,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
20014dc6:	4692                	lw	a3,4(sp)
20014dc8:	4622                	lw	a2,8(sp)
20014dca:	45b2                	lw	a1,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:258
		return 0;
20014dcc:	4801                	li	a6,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014dce:	00f49363          	bne	s1,a5,20014dd4 <__metal_driver_riscv_clint0_register+0x2e>
20014dd2:	4809                	li	a6,2
__metal_driver_riscv_clint0_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:97
    if ((mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE)) {
20014dd4:	4785                	li	a5,1
20014dd6:	0087e963          	bltu	a5,s0,20014de8 <__metal_driver_riscv_clint0_register+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
20014dda:	80000737          	lui	a4,0x80000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:101
    for (int i = 0; i < num_interrupts; i++) {
20014dde:	4781                	li	a5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
20014de0:	0b870713          	addi	a4,a4,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 1)
    for (int i = 0; i < num_interrupts; i++) {
20014de4:	01079863          	bne	a5,a6,20014df4 <__metal_driver_riscv_clint0_register+0x4e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:115
}
20014de8:	40f2                	lw	ra,28(sp)
20014dea:	4462                	lw	s0,24(sp)
20014dec:	44d2                	lw	s1,20(sp)
20014dee:	557d                	li	a0,-1
20014df0:	6105                	addi	sp,sp,32
20014df2:	8082                	ret
__metal_driver_sifive_clint0_interrupt_lines():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:278
		return 3;
20014df4:	488d                	li	a7,3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:277
	if (idx == 0) {
20014df6:	c391                	beqz	a5,20014dfa <__metal_driver_riscv_clint0_register+0x54>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:281
		return 7;
20014df8:	489d                	li	a7,7
__metal_driver_riscv_clint0_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
20014dfa:	00e51463          	bne	a0,a4,20014e02 <__metal_driver_riscv_clint0_register+0x5c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:104 (discriminator 1)
20014dfe:	01158463          	beq	a1,a7,20014e06 <__metal_driver_riscv_clint0_register+0x60>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 2)
    for (int i = 0; i < num_interrupts; i++) {
20014e02:	0785                	addi	a5,a5,1
20014e04:	b7c5                	j	20014de4 <__metal_driver_riscv_clint0_register+0x3e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20014e06:	411c                	lw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:115
}
20014e08:	4462                	lw	s0,24(sp)
20014e0a:	40f2                	lw	ra,28(sp)
20014e0c:	44d2                	lw	s1,20(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20014e0e:	4fdc                	lw	a5,28(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:115
}
20014e10:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20014e12:	8782                	jr	a5

20014e14 <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:131
}

int __metal_driver_riscv_clint0_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
20014e14:	1101                	addi	sp,sp,-32
20014e16:	ce06                	sw	ra,28(sp)
20014e18:	c62e                	sw	a1,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:133
    int rc = -1;
    struct metal_interrupt *intc = _get_cpu_intc();
20014e1a:	3fa5                	jal	20014d92 <_get_cpu_intc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:135

    if (intc) {
20014e1c:	c911                	beqz	a0,20014e30 <__metal_driver_riscv_clint0_set_vector_mode+0x1c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:138
        /* Valid vector modes are VECTOR and DIRECT, anything else is invalid
         * (-1) */
        switch (mode) {
20014e1e:	45b2                	lw	a1,12(sp)
20014e20:	4705                	li	a4,1
20014e22:	00b76763          	bltu	a4,a1,20014e30 <__metal_driver_riscv_clint0_set_vector_mode+0x1c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:141
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20014e26:	411c                	lw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:148
        default:
            break;
        }
    }
    return rc;
}
20014e28:	40f2                	lw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:141
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20014e2a:	43dc                	lw	a5,4(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:148
}
20014e2c:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:141
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
20014e2e:	8782                	jr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:148
}
20014e30:	40f2                	lw	ra,28(sp)
20014e32:	557d                	li	a0,-1
20014e34:	6105                	addi	sp,sp,32
20014e36:	8082                	ret

20014e38 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:151

int __metal_driver_riscv_clint0_enable(struct metal_interrupt *controller,
                                       int id) {
20014e38:	1101                	addi	sp,sp,-32
20014e3a:	ce06                	sw	ra,28(sp)
20014e3c:	cc22                	sw	s0,24(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:154
    int rc = -1;

    if (id) {
20014e3e:	c62e                	sw	a1,12(sp)
20014e40:	c19d                	beqz	a1,20014e66 <__metal_driver_riscv_clint0_enable+0x2e>
20014e42:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:156
        struct metal_interrupt *intc = NULL;
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20014e44:	37b9                	jal	20014d92 <_get_cpu_intc>
__metal_driver_sifive_clint0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014e46:	800017b7          	lui	a5,0x80001
20014e4a:	aa478793          	addi	a5,a5,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
20014e4e:	45b2                	lw	a1,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:255
		return METAL_MAX_CLINT_INTERRUPTS;
20014e50:	4689                	li	a3,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014e52:	00f40363          	beq	s0,a5,20014e58 <__metal_driver_riscv_clint0_enable+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:258
		return 0;
20014e56:	4681                	li	a3,0
__metal_driver_riscv_clint0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:165
        for (int i = 0; i < num_interrupts; i++) {
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
            if (cpu_intc == intc && id == line) {
20014e58:	80000737          	lui	a4,0x80000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:160
        for (int i = 0; i < num_interrupts; i++) {
20014e5c:	4781                	li	a5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:165
            if (cpu_intc == intc && id == line) {
20014e5e:	0b870713          	addi	a4,a4,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 1)
        for (int i = 0; i < num_interrupts; i++) {
20014e62:	00d79763          	bne	a5,a3,20014e70 <__metal_driver_riscv_clint0_enable+0x38>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:178
            rc = intc->vtable->interrupt_enable(intc, id);
        }
    }

    return rc;
}
20014e66:	40f2                	lw	ra,28(sp)
20014e68:	4462                	lw	s0,24(sp)
20014e6a:	557d                	li	a0,-1
20014e6c:	6105                	addi	sp,sp,32
20014e6e:	8082                	ret
__metal_driver_sifive_clint0_interrupt_lines():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:278
		return 3;
20014e70:	460d                	li	a2,3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:277
	if (idx == 0) {
20014e72:	c391                	beqz	a5,20014e76 <__metal_driver_riscv_clint0_enable+0x3e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:281
		return 7;
20014e74:	461d                	li	a2,7
__metal_driver_riscv_clint0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:165
            if (cpu_intc == intc && id == line) {
20014e76:	00e51463          	bne	a0,a4,20014e7e <__metal_driver_riscv_clint0_enable+0x46>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:165 (discriminator 1)
20014e7a:	00c58463          	beq	a1,a2,20014e82 <__metal_driver_riscv_clint0_enable+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
20014e7e:	0785                	addi	a5,a5,1
20014e80:	b7cd                	j	20014e62 <__metal_driver_riscv_clint0_enable+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
20014e82:	411c                	lw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:178
}
20014e84:	4462                	lw	s0,24(sp)
20014e86:	40f2                	lw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
20014e88:	53dc                	lw	a5,36(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:178
}
20014e8a:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
20014e8c:	8782                	jr	a5

20014e8e <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:181

int __metal_driver_riscv_clint0_disable(struct metal_interrupt *controller,
                                        int id) {
20014e8e:	1101                	addi	sp,sp,-32
20014e90:	ce06                	sw	ra,28(sp)
20014e92:	cc22                	sw	s0,24(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:184
    int rc = -1;

    if (id) {
20014e94:	c62e                	sw	a1,12(sp)
20014e96:	c19d                	beqz	a1,20014ebc <__metal_driver_riscv_clint0_disable+0x2e>
20014e98:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:186
        struct metal_interrupt *intc = NULL;
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20014e9a:	3de5                	jal	20014d92 <_get_cpu_intc>
__metal_driver_sifive_clint0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014e9c:	800017b7          	lui	a5,0x80001
20014ea0:	aa478793          	addi	a5,a5,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
20014ea4:	45b2                	lw	a1,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:255
		return METAL_MAX_CLINT_INTERRUPTS;
20014ea6:	4689                	li	a3,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:254
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014ea8:	00f40363          	beq	s0,a5,20014eae <__metal_driver_riscv_clint0_disable+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:258
		return 0;
20014eac:	4681                	li	a3,0
__metal_driver_riscv_clint0_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:195
        for (int i = 0; i < num_interrupts; i++) {
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
            if (cpu_intc == intc && id == line) {
20014eae:	80000737          	lui	a4,0x80000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:190
        for (int i = 0; i < num_interrupts; i++) {
20014eb2:	4781                	li	a5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:195
            if (cpu_intc == intc && id == line) {
20014eb4:	0b870713          	addi	a4,a4,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 1)
        for (int i = 0; i < num_interrupts; i++) {
20014eb8:	00d79763          	bne	a5,a3,20014ec6 <__metal_driver_riscv_clint0_disable+0x38>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:208
            rc = intc->vtable->interrupt_disable(intc, id);
        }
    }

    return rc;
}
20014ebc:	40f2                	lw	ra,28(sp)
20014ebe:	4462                	lw	s0,24(sp)
20014ec0:	557d                	li	a0,-1
20014ec2:	6105                	addi	sp,sp,32
20014ec4:	8082                	ret
__metal_driver_sifive_clint0_interrupt_lines():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:278
		return 3;
20014ec6:	460d                	li	a2,3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:277
	if (idx == 0) {
20014ec8:	c391                	beqz	a5,20014ecc <__metal_driver_riscv_clint0_disable+0x3e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:281
		return 7;
20014eca:	461d                	li	a2,7
__metal_driver_riscv_clint0_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:195
            if (cpu_intc == intc && id == line) {
20014ecc:	00e51463          	bne	a0,a4,20014ed4 <__metal_driver_riscv_clint0_disable+0x46>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:195 (discriminator 1)
20014ed0:	00c58463          	beq	a1,a2,20014ed8 <__metal_driver_riscv_clint0_disable+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
20014ed4:	0785                	addi	a5,a5,1
20014ed6:	b7cd                	j	20014eb8 <__metal_driver_riscv_clint0_disable+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
20014ed8:	411c                	lw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:208
}
20014eda:	4462                	lw	s0,24(sp)
20014edc:	40f2                	lw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
20014ede:	579c                	lw	a5,40(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:208
}
20014ee0:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
20014ee2:	8782                	jr	a5

20014ee4 <__metal_clint0_mtime_get>:
__metal_driver_sifive_clint0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:234
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014ee4:	80001737          	lui	a4,0x80001
20014ee8:	aa470713          	addi	a4,a4,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:235
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20014eec:	020007b7          	lui	a5,0x2000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:234
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014ef0:	00a70363          	beq	a4,a0,20014ef6 <__metal_clint0_mtime_get+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:238
		return 0;
20014ef4:	4781                	li	a5,0
__metal_clint0_mtime_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:21
        hi = __METAL_ACCESS_ONCE(
20014ef6:	66b1                	lui	a3,0xc
20014ef8:	ffc68713          	addi	a4,a3,-4 # bffc <__heap_size+0xb7fc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:23
        lo = __METAL_ACCESS_ONCE(
20014efc:	16e1                	addi	a3,a3,-8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:21
        hi = __METAL_ACCESS_ONCE(
20014efe:	973e                	add	a4,a4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:23
        lo = __METAL_ACCESS_ONCE(
20014f00:	97b6                	add	a5,a5,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)
        hi = __METAL_ACCESS_ONCE(
20014f02:	4314                	lw	a3,0(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:23 (discriminator 1)
        lo = __METAL_ACCESS_ONCE(
20014f04:	4388                	lw	a0,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:25 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20014f06:	430c                	lw	a1,0(a4)
20014f08:	fed59de3          	bne	a1,a3,20014f02 <__metal_clint0_mtime_get+0x1e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:30
}
20014f0c:	8082                	ret

20014f0e <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:211

int __metal_driver_riscv_clint0_command_request(
    struct metal_interrupt *controller, int command, void *data) {
20014f0e:	1141                	addi	sp,sp,-16
__metal_driver_sifive_clint0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:234
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014f10:	800017b7          	lui	a5,0x80001
__metal_driver_riscv_clint0_command_request():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:211
20014f14:	c422                	sw	s0,8(sp)
20014f16:	c606                	sw	ra,12(sp)
__metal_driver_sifive_clint0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:234
20014f18:	aa478793          	addi	a5,a5,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
__metal_driver_riscv_clint0_command_request():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:211
20014f1c:	8432                	mv	s0,a2
__metal_driver_sifive_clint0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:238
		return 0;
20014f1e:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:234
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20014f20:	00f51463          	bne	a0,a5,20014f28 <__metal_driver_riscv_clint0_command_request+0x1a>
20014f24:	02000737          	lui	a4,0x2000
__metal_driver_riscv_clint0_command_request():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:219
    struct __metal_driver_riscv_clint0 *clint =
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(controller);

    switch (command) {
20014f28:	478d                	li	a5,3
20014f2a:	04f58963          	beq	a1,a5,20014f7c <__metal_driver_riscv_clint0_command_request+0x6e>
20014f2e:	00b7ce63          	blt	a5,a1,20014f4a <__metal_driver_riscv_clint0_command_request+0x3c>
20014f32:	4785                	li	a5,1
20014f34:	02f58563          	beq	a1,a5,20014f5e <__metal_driver_riscv_clint0_command_request+0x50>
20014f38:	4789                	li	a5,2
20014f3a:	02f58963          	beq	a1,a5,20014f6c <__metal_driver_riscv_clint0_command_request+0x5e>
20014f3e:	57fd                	li	a5,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:267
    default:
        break;
    }

    return rc;
}
20014f40:	40b2                	lw	ra,12(sp)
20014f42:	4422                	lw	s0,8(sp)
20014f44:	853e                	mv	a0,a5
20014f46:	0141                	addi	sp,sp,16
20014f48:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:219
    switch (command) {
20014f4a:	4791                	li	a5,4
20014f4c:	fef599e3          	bne	a1,a5,20014f3e <__metal_driver_riscv_clint0_command_request+0x30>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:255
        rc = 0;
20014f50:	4781                	li	a5,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:256
        if (data) {
20014f52:	d47d                	beqz	s0,20014f40 <__metal_driver_riscv_clint0_command_request+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:258
            rc = __METAL_ACCESS_ONCE(
20014f54:	401c                	lw	a5,0(s0)
20014f56:	078a                	slli	a5,a5,0x2
20014f58:	97ba                	add	a5,a5,a4
20014f5a:	439c                	lw	a5,0(a5)
20014f5c:	b7d5                	j	20014f40 <__metal_driver_riscv_clint0_command_request+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:213
    int rc = -1;
20014f5e:	57fd                	li	a5,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:221
        if (data) {
20014f60:	d065                	beqz	s0,20014f40 <__metal_driver_riscv_clint0_command_request+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:222
            *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20014f62:	3749                	jal	20014ee4 <__metal_clint0_mtime_get>
20014f64:	c008                	sw	a0,0(s0)
20014f66:	c04c                	sw	a1,4(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:251
            rc = 0;
20014f68:	4781                	li	a5,0
20014f6a:	bfd9                	j	20014f40 <__metal_driver_riscv_clint0_command_request+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:213
    int rc = -1;
20014f6c:	57fd                	li	a5,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:227
        if (data) {
20014f6e:	d869                	beqz	s0,20014f40 <__metal_driver_riscv_clint0_command_request+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:229
            __METAL_ACCESS_ONCE((
20014f70:	401c                	lw	a5,0(s0)
20014f72:	078a                	slli	a5,a5,0x2
20014f74:	97ba                	add	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:230
                __metal_io_u32 *)(control_base + (hartid * 4))) = METAL_DISABLE;
20014f76:	0007a023          	sw	zero,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:231
            rc = 0;
20014f7a:	b7fd                	j	20014f68 <__metal_driver_riscv_clint0_command_request+0x5a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:213
    int rc = -1;
20014f7c:	57fd                	li	a5,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:235
        if (data) {
20014f7e:	d069                	beqz	s0,20014f40 <__metal_driver_riscv_clint0_command_request+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:237
            __METAL_ACCESS_ONCE(
20014f80:	401c                	lw	a5,0(s0)
20014f82:	078a                	slli	a5,a5,0x2
20014f84:	97ba                	add	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:238
                (__metal_io_u32 *)(control_base + (hartid * 4))) = METAL_ENABLE;
20014f86:	4705                	li	a4,1
20014f88:	c398                	sw	a4,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:248
            __METAL_IO_FENCE(o, i);
20014f8a:	0480000f          	fence	o,i
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:249
            rc = __METAL_ACCESS_ONCE(
20014f8e:	439c                	lw	a5,0(a5)
20014f90:	bfe1                	j	20014f68 <__metal_driver_riscv_clint0_command_request+0x5a>

20014f92 <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:270

int __metal_driver_riscv_clint0_clear_interrupt(
    struct metal_interrupt *controller, int id) {
20014f92:	1101                	addi	sp,sp,-32
20014f94:	ce06                	sw	ra,28(sp)
20014f96:	cc22                	sw	s0,24(sp)
20014f98:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:271
    int hartid = metal_cpu_get_current_hartid();
20014f9a:	61d010ef          	jal	ra,20016db6 <metal_cpu_get_current_hartid>
20014f9e:	c62a                	sw	a0,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:272
    return __metal_driver_riscv_clint0_command_request(
20014fa0:	0070                	addi	a2,sp,12
20014fa2:	8522                	mv	a0,s0
20014fa4:	4589                	li	a1,2
20014fa6:	37a5                	jal	20014f0e <__metal_driver_riscv_clint0_command_request>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:274
        controller, METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20014fa8:	40f2                	lw	ra,28(sp)
20014faa:	4462                	lw	s0,24(sp)
20014fac:	6105                	addi	sp,sp,32
20014fae:	8082                	ret

20014fb0 <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:277

int __metal_driver_riscv_clint0_set_interrupt(
    struct metal_interrupt *controller, int id) {
20014fb0:	1101                	addi	sp,sp,-32
20014fb2:	ce06                	sw	ra,28(sp)
20014fb4:	cc22                	sw	s0,24(sp)
20014fb6:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:278
    int hartid = metal_cpu_get_current_hartid();
20014fb8:	5ff010ef          	jal	ra,20016db6 <metal_cpu_get_current_hartid>
20014fbc:	c62a                	sw	a0,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:279
    return __metal_driver_riscv_clint0_command_request(
20014fbe:	0070                	addi	a2,sp,12
20014fc0:	8522                	mv	a0,s0
20014fc2:	458d                	li	a1,3
20014fc4:	37a9                	jal	20014f0e <__metal_driver_riscv_clint0_command_request>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_clint0.c:281
        controller, METAL_SOFTWARE_IPI_SET, &hartid);
}
20014fc6:	40f2                	lw	ra,28(sp)
20014fc8:	4462                	lw	s0,24(sp)
20014fca:	6105                	addi	sp,sp,32
20014fcc:	8082                	ret

20014fce <__metal_default_sw_handler>:
__metal_default_sw_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:132
void __attribute__((weak, interrupt))
metal_software_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
}

void __metal_default_sw_handler(int id, void *priv) {
20014fce:	85aa                	mv	a1,a0
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20014fd0:	f14027f3          	csrr	a5,mhartid
__metal_default_sw_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:135
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20014fd4:	00279713          	slli	a4,a5,0x2
20014fd8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
20014fdc:	97ba                	add	a5,a5,a4
20014fde:	4388                	lw	a0,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:137

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
20014fe0:	342027f3          	csrr	a5,mcause
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:138
    if (cpu) {
20014fe4:	c515                	beqz	a0,20015010 <__metal_default_sw_handler+0x42>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
	}
}

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20014fe6:	80001737          	lui	a4,0x80001
__metal_default_sw_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:141
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE](
20014fea:	3ff7f793          	andi	a5,a5,1023
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20014fee:	aac70713          	addi	a4,a4,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20014ff2:	0e878793          	addi	a5,a5,232
20014ff6:	00e51a63          	bne	a0,a4,2001500a <__metal_default_sw_handler+0x3c>
__metal_default_sw_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:141
20014ffa:	80000737          	lui	a4,0x80000
20014ffe:	078a                	slli	a5,a5,0x2
20015000:	0b870713          	addi	a4,a4,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015004:	97ba                	add	a5,a5,a4
20015006:	439c                	lw	a5,0(a5)
20015008:	8782                	jr	a5
2001500a:	078a                	slli	a5,a5,0x2
2001500c:	439c                	lw	a5,0(a5)
2001500e:	9002                	ebreak
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:144
            (struct metal_cpu *)cpu, id);
    }
}
20015010:	8082                	ret

20015012 <__metal_default_beu_handler>:
__metal_default_beu_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:152
void __attribute__((weak, interrupt))
metal_timer_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
}

void __metal_default_beu_handler(int id, void *priv) {}
20015012:	8082                	ret
	...

20015080 <__metal_exception_handler>:
__metal_exception_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:169
metal_external_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_EXT);
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler(void) {
20015080:	7139                	addi	sp,sp,-64
20015082:	de06                	sw	ra,60(sp)
20015084:	dc16                	sw	t0,56(sp)
20015086:	da1a                	sw	t1,52(sp)
20015088:	d81e                	sw	t2,48(sp)
2001508a:	d62a                	sw	a0,44(sp)
2001508c:	d42e                	sw	a1,40(sp)
2001508e:	d232                	sw	a2,36(sp)
20015090:	d036                	sw	a3,32(sp)
20015092:	ce3a                	sw	a4,28(sp)
20015094:	cc3e                	sw	a5,24(sp)
20015096:	ca42                	sw	a6,20(sp)
20015098:	c846                	sw	a7,16(sp)
2001509a:	c672                	sw	t3,12(sp)
2001509c:	c476                	sw	t4,8(sp)
2001509e:	c27a                	sw	t5,4(sp)
200150a0:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200150a2:	f14027f3          	csrr	a5,mhartid
__metal_exception_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:174
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
200150a6:	00279713          	slli	a4,a5,0x2
200150aa:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200150ae:	97ba                	add	a5,a5,a4
200150b0:	4394                	lw	a3,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:176

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
200150b2:	34202673          	csrr	a2,mcause
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:177
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
200150b6:	341027f3          	csrr	a5,mepc
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:178
    __asm__ volatile("csrr %0, mtval" : "=r"(mtval));
200150ba:	343027f3          	csrr	a5,mtval
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:179
    __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
200150be:	30502773          	csrr	a4,mtvec
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:181

    if (cpu) {
200150c2:	c69d                	beqz	a3,200150f0 <__metal_exception_handler+0x70>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200150c4:	800017b7          	lui	a5,0x80001
200150c8:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200150cc:	04f68563          	beq	a3,a5,20015116 <__metal_exception_handler+0x96>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:317
		return &__metal_dt_cpu_0_interrupt_controller.controller;
	}
	else {
		return NULL;
200150d0:	4781                	li	a5,0
__metal_exception_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:184
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
        id = mcause & METAL_MCAUSE_CAUSE;
200150d2:	3ff67513          	andi	a0,a2,1023
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:185
        if (mcause & METAL_MCAUSE_INTR) {
200150d6:	06065d63          	bgez	a2,20015150 <__metal_exception_handler+0xd0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:186
            if (id == METAL_INTERRUPT_ID_BEU) {
200150da:	08000693          	li	a3,128
200150de:	04d51163          	bne	a0,a3,20015120 <__metal_exception_handler+0xa0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:188
                priv = intc->metal_int_beu.exint_data;
                intc->metal_int_beu.handler(id, priv);
200150e2:	3907a703          	lw	a4,912(a5)
200150e6:	3987a583          	lw	a1,920(a5)
200150ea:	08000513          	li	a0,128
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:204
                metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
                priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
                mtvt_handler = (metal_interrupt_handler_t) * (uintptr_t *)mtvt;
                mtvt_handler(id, priv);
200150ee:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:211
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
        }
    }
}
200150f0:	50f2                	lw	ra,60(sp)
200150f2:	52e2                	lw	t0,56(sp)
200150f4:	5352                	lw	t1,52(sp)
200150f6:	53c2                	lw	t2,48(sp)
200150f8:	5532                	lw	a0,44(sp)
200150fa:	55a2                	lw	a1,40(sp)
200150fc:	5612                	lw	a2,36(sp)
200150fe:	5682                	lw	a3,32(sp)
20015100:	4772                	lw	a4,28(sp)
20015102:	47e2                	lw	a5,24(sp)
20015104:	4852                	lw	a6,20(sp)
20015106:	48c2                	lw	a7,16(sp)
20015108:	4e32                	lw	t3,12(sp)
2001510a:	4ea2                	lw	t4,8(sp)
2001510c:	4f12                	lw	t5,4(sp)
2001510e:	4f82                	lw	t6,0(sp)
20015110:	6121                	addi	sp,sp,64
20015112:	30200073          	mret
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:314
		return &__metal_dt_cpu_0_interrupt_controller.controller;
20015116:	800007b7          	lui	a5,0x80000
2001511a:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
2001511e:	bf55                	j	200150d2 <__metal_exception_handler+0x52>
__metal_exception_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:191
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20015120:	46ad                	li	a3,11
20015122:	00a6d563          	bge	a3,a0,2001512c <__metal_exception_handler+0xac>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:192 (discriminator 1)
                ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20015126:	03f77713          	andi	a4,a4,63
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:191 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
2001512a:	eb11                	bnez	a4,2001513e <__metal_exception_handler+0xbe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:193
                priv = intc->metal_int_table[id].exint_data;
2001512c:	4761                	li	a4,24
2001512e:	02e50733          	mul	a4,a0,a4
20015132:	97ba                	add	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:194
                intc->metal_int_table[id].handler(id, priv);
20015134:	0907a703          	lw	a4,144(a5)
20015138:	0987a583          	lw	a1,152(a5)
2001513c:	bf4d                	j	200150ee <__metal_exception_handler+0x6e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:197
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
2001513e:	4689                	li	a3,2
20015140:	fad718e3          	bne	a4,a3,200150f0 <__metal_exception_handler+0x70>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:201
                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
20015144:	30702773          	csrr	a4,mtvt
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:204
                mtvt_handler(id, priv);
20015148:	4318                	lw	a4,0(a4)
2001514a:	0dc7a583          	lw	a1,220(a5)
2001514e:	b745                	j	200150ee <__metal_exception_handler+0x6e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:208
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20015150:	0e850713          	addi	a4,a0,232
20015154:	070a                	slli	a4,a4,0x2
20015156:	97ba                	add	a5,a5,a4
20015158:	439c                	lw	a5,0(a5)
2001515a:	85aa                	mv	a1,a0
2001515c:	8536                	mv	a0,a3
2001515e:	9782                	jalr	a5
20015160:	bf41                	j	200150f0 <__metal_exception_handler+0x70>
	...

2001517e <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:616
int __metal_driver_riscv_cpu_controller_command_request(
    struct metal_interrupt *controller, int cmd, void *data) {
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic
     */
    return 0;
}
2001517e:	4501                	li	a0,0
20015180:	8082                	ret

20015182 <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:627 (discriminator 1)

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    do {
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi));
20015182:	b80025f3          	csrr	a1,mcycleh
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:628 (discriminator 1)
        __asm__ volatile("csrr %0, mcycle" : "=r"(lo));
20015186:	b0002573          	csrr	a0,mcycle
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:629 (discriminator 1)
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi1));
2001518a:	b80027f3          	csrr	a5,mcycleh
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:632 (discriminator 1)
        /* hi != hi1 means mcycle overflow during we get value,
         * so we must retry. */
    } while (hi != hi1);
2001518e:	fef59ae3          	bne	a1,a5,20015182 <__metal_driver_cpu_mcycle_get>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:640
#else
    __asm__ volatile("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
}
20015192:	8082                	ret

20015194 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:644

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu) {
    int timebase;
    if (!cpu) {
20015194:	c105                	beqz	a0,200151b4 <__metal_driver_cpu_timebase_get+0x20>
__metal_driver_cpu_timebase():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:303
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20015196:	800017b7          	lui	a5,0x80001
2001519a:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
2001519e:	00f50663          	beq	a0,a5,200151aa <__metal_driver_cpu_timebase_get+0x16>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:307
		return 0;
200151a2:	4501                	li	a0,0
__metal_driver_cpu_timebase_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:649
        return 0;
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
    return timebase;
200151a4:	41f55593          	srai	a1,a0,0x1f
200151a8:	8082                	ret
__metal_driver_cpu_timebase():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:304
		return 16000000;
200151aa:	00f42537          	lui	a0,0xf42
200151ae:	40050513          	addi	a0,a0,1024 # f42400 <__heap_size+0xf41c00>
200151b2:	bfcd                	j	200151a4 <__metal_driver_cpu_timebase_get+0x10>
__metal_driver_cpu_timebase_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:645
        return 0;
200151b4:	4501                	li	a0,0
200151b6:	4581                	li	a1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:650
}
200151b8:	8082                	ret

200151ba <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:652

unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
200151ba:	1101                	addi	sp,sp,-32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:653
    unsigned long long time = 0;
200151bc:	4781                	li	a5,0
200151be:	4801                	li	a6,0
200151c0:	c43e                	sw	a5,8(sp)
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
200151c2:	800017b7          	lui	a5,0x80001
__metal_driver_cpu_mtime_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:652
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
200151c6:	ce06                	sw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:653
    unsigned long long time = 0;
200151c8:	c642                	sw	a6,12(sp)
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200151ca:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200151ce:	00a79c63          	bne	a5,a0,200151e6 <__metal_driver_cpu_mtime_get+0x2c>
__metal_driver_cpu_mtime_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:660
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);

    if (intc) {
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
200151d2:	800007b7          	lui	a5,0x80000
200151d6:	1f47a503          	lw	a0,500(a5) # 800001f4 <metal_segment_heap_target_end+0xffffe204>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:661
        if (tmr_intc) {
200151da:	c511                	beqz	a0,200151e6 <__metal_driver_cpu_mtime_get+0x2c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:662
            tmr_intc->vtable->command_request(tmr_intc, METAL_TIMER_MTIME_GET,
200151dc:	411c                	lw	a5,0(a0)
200151de:	0030                	addi	a2,sp,8
200151e0:	4585                	li	a1,1
200151e2:	47fc                	lw	a5,76(a5)
200151e4:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:667
                                              &time);
        }
    }
    return time;
}
200151e6:	40f2                	lw	ra,28(sp)
200151e8:	4522                	lw	a0,8(sp)
200151ea:	45b2                	lw	a1,12(sp)
200151ec:	6105                	addi	sp,sp,32
200151ee:	8082                	ret

200151f0 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:690
}

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu) {
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
200151f0:	80001537          	lui	a0,0x80001
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:699
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
200151f4:	aa450513          	addi	a0,a0,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
200151f8:	8082                	ret

200151fa <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:703

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu) {
    return METAL_INTERRUPT_ID_TMR;
}
200151fa:	451d                	li	a0,7
200151fc:	8082                	ret

200151fe <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:721
#endif
}

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu) {
    return METAL_INTERRUPT_ID_SW;
}
200151fe:	450d                	li	a0,3
20015200:	8082                	ret

20015202 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:723

int __metal_driver_cpu_set_sw_ipi(struct metal_cpu *cpu, int hartid) {
20015202:	1101                	addi	sp,sp,-32
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015204:	800017b7          	lui	a5,0x80001
__metal_driver_cpu_set_sw_ipi():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:723
20015208:	ce06                	sw	ra,28(sp)
2001520a:	c62e                	sw	a1,12(sp)
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
2001520c:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015210:	02a79163          	bne	a5,a0,20015232 <__metal_driver_cpu_set_sw_ipi+0x30>
__metal_driver_cpu_set_sw_ipi():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:731
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);

    if (intc) {
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20015214:	800007b7          	lui	a5,0x80000
20015218:	1947a783          	lw	a5,404(a5) # 80000194 <metal_segment_heap_target_end+0xffffe1a4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:724
    int rc = -1;
2001521c:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:732
        if (sw_intc) {
2001521e:	c799                	beqz	a5,2001522c <__metal_driver_cpu_set_sw_ipi+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:733
            rc = sw_intc->vtable->command_request(
20015220:	4398                	lw	a4,0(a5)
20015222:	0070                	addi	a2,sp,12
20015224:	458d                	li	a1,3
20015226:	4778                	lw	a4,76(a4)
20015228:	853e                	mv	a0,a5
2001522a:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:738
                sw_intc, METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
}
2001522c:	40f2                	lw	ra,28(sp)
2001522e:	6105                	addi	sp,sp,32
20015230:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:724
    int rc = -1;
20015232:	557d                	li	a0,-1
20015234:	bfe5                	j	2001522c <__metal_driver_cpu_set_sw_ipi+0x2a>

20015236 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:740

int __metal_driver_cpu_clear_sw_ipi(struct metal_cpu *cpu, int hartid) {
20015236:	1101                	addi	sp,sp,-32
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015238:	800017b7          	lui	a5,0x80001
__metal_driver_cpu_clear_sw_ipi():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:740
2001523c:	ce06                	sw	ra,28(sp)
2001523e:	c62e                	sw	a1,12(sp)
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015240:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015244:	02a79163          	bne	a5,a0,20015266 <__metal_driver_cpu_clear_sw_ipi+0x30>
__metal_driver_cpu_clear_sw_ipi():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:748
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);

    if (intc) {
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20015248:	800007b7          	lui	a5,0x80000
2001524c:	1947a783          	lw	a5,404(a5) # 80000194 <metal_segment_heap_target_end+0xffffe1a4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:741
    int rc = -1;
20015250:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:749
        if (sw_intc) {
20015252:	c799                	beqz	a5,20015260 <__metal_driver_cpu_clear_sw_ipi+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:750
            rc = sw_intc->vtable->command_request(
20015254:	4398                	lw	a4,0(a5)
20015256:	0070                	addi	a2,sp,12
20015258:	4589                	li	a1,2
2001525a:	4778                	lw	a4,76(a4)
2001525c:	853e                	mv	a0,a5
2001525e:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:755
                sw_intc, METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
}
20015260:	40f2                	lw	ra,28(sp)
20015262:	6105                	addi	sp,sp,32
20015264:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:741
    int rc = -1;
20015266:	557d                	li	a0,-1
20015268:	bfe5                	j	20015260 <__metal_driver_cpu_clear_sw_ipi+0x2a>

2001526a <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:757

int __metal_driver_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
2001526a:	1101                	addi	sp,sp,-32
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
2001526c:	800017b7          	lui	a5,0x80001
__metal_driver_cpu_get_msip():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:757
20015270:	ce06                	sw	ra,28(sp)
20015272:	c62e                	sw	a1,12(sp)
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015274:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015278:	02a79163          	bne	a5,a0,2001529a <__metal_driver_cpu_get_msip+0x30>
__metal_driver_cpu_get_msip():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:765
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);

    if (intc) {
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
2001527c:	800007b7          	lui	a5,0x80000
20015280:	1947a783          	lw	a5,404(a5) # 80000194 <metal_segment_heap_target_end+0xffffe1a4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:758
    int rc = 0;
20015284:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:766
        if (sw_intc) {
20015286:	c799                	beqz	a5,20015294 <__metal_driver_cpu_get_msip+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:767
            rc = sw_intc->vtable->command_request(
20015288:	4398                	lw	a4,0(a5)
2001528a:	0070                	addi	a2,sp,12
2001528c:	4591                	li	a1,4
2001528e:	4778                	lw	a4,76(a4)
20015290:	853e                	mv	a0,a5
20015292:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:772
                sw_intc, METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
}
20015294:	40f2                	lw	ra,28(sp)
20015296:	6105                	addi	sp,sp,32
20015298:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:758
    int rc = 0;
2001529a:	4501                	li	a0,0
2001529c:	bfe5                	j	20015294 <__metal_driver_cpu_get_msip+0x2a>

2001529e <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
2001529e:	800017b7          	lui	a5,0x80001
200152a2:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200152a6:	00a78463          	beq	a5,a0,200152ae <__metal_driver_cpu_controller_interrupt+0x10>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:317
		return NULL;
200152aa:	4501                	li	a0,0
200152ac:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:314
		return &__metal_dt_cpu_0_interrupt_controller.controller;
200152ae:	80000537          	lui	a0,0x80000
200152b2:	0b850513          	addi	a0,a0,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
__metal_driver_cpu_controller_interrupt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:777

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu) {
    return __metal_driver_cpu_interrupt_controller(cpu);
}
200152b6:	8082                	ret

200152b8 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:820
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short *)epc & METAL_INSN_LENGTH_MASK) ==
            METAL_INSN_NOT_COMPRESSED)
               ? 4
               : 2;
200152b8:	0005d783          	lhu	a5,0(a1)
200152bc:	470d                	li	a4,3
200152be:	4511                	li	a0,4
200152c0:	8b8d                	andi	a5,a5,3
200152c2:	00e78363          	beq	a5,a4,200152c8 <__metal_driver_cpu_get_instruction_length+0x10>
200152c6:	4509                	li	a0,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:821
}
200152c8:	8082                	ret

200152ca <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:825

uintptr_t __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu) {
    uintptr_t mepc;
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
200152ca:	34102573          	csrr	a0,mepc
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:827
    return mepc;
}
200152ce:	8082                	ret

200152d0 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:830

int __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc) {
    __asm__ volatile("csrw mepc, %0" ::"r"(mepc));
200152d0:	34159073          	csrw	mepc,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:832
    return 0;
}
200152d4:	4501                	li	a0,0
200152d6:	8082                	ret

200152d8 <__metal_driver_cpu_get_buserror>:
__metal_driver_cpu_get_buserror():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:836

struct metal_buserror *__metal_driver_cpu_get_buserror(struct metal_cpu *cpu) {
    return __metal_driver_cpu_buserror(cpu);
}
200152d8:	4501                	li	a0,0
200152da:	8082                	ret

200152dc <__metal_default_exception_handler>:
__metal_default_exception_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:113
void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
200152dc:	1141                	addi	sp,sp,-16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:114
    metal_shutdown(100);
200152de:	06400513          	li	a0,100
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:113
void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
200152e2:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:114
    metal_shutdown(100);
200152e4:	2d9010ef          	jal	ra,20016dbc <metal_shutdown>

200152e8 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:117
void __metal_default_interrupt_handler(int id, void *priv) {
200152e8:	1141                	addi	sp,sp,-16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:118
    metal_shutdown(200);
200152ea:	0c800513          	li	a0,200
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:117
void __metal_default_interrupt_handler(int id, void *priv) {
200152ee:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:118
    metal_shutdown(200);
200152f0:	2cd010ef          	jal	ra,20016dbc <metal_shutdown>

200152f4 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
200152f4:	800017b7          	lui	a5,0x80001
200152f8:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
__metal_driver_cpu_mtimecmp_set():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:670
                                    unsigned long long time) {
200152fc:	86b2                	mv	a3,a2
200152fe:	862e                	mv	a2,a1
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015300:	00a79b63          	bne	a5,a0,20015316 <__metal_driver_cpu_mtimecmp_set+0x22>
__metal_driver_cpu_mtimecmp_set():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:678
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20015304:	800007b7          	lui	a5,0x80000
20015308:	1f47a503          	lw	a0,500(a5) # 800001f4 <metal_segment_heap_target_end+0xffffe204>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:679
        if (tmr_intc) {
2001530c:	c509                	beqz	a0,20015316 <__metal_driver_cpu_mtimecmp_set+0x22>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:680
            rc = tmr_intc->vtable->mtimecmp_set(
2001530e:	411c                	lw	a5,0(a0)
20015310:	4581                	li	a1,0
20015312:	4bbc                	lw	a5,80(a5)
20015314:	8782                	jr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:685
}
20015316:	557d                	li	a0,-1
20015318:	8082                	ret

2001531a <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:457
    if (!intc->init_done) {
2001531a:	415c                	lw	a5,4(a0)
2001531c:	efa9                	bnez	a5,20015376 <__metal_driver_riscv_cpu_controller_interrupt_init+0x5c>
2001531e:	09050793          	addi	a5,a0,144
20015322:	39050713          	addi	a4,a0,912
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:460
            intc->metal_int_table[i].handler = NULL;
20015326:	0007a023          	sw	zero,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:461
            intc->metal_int_table[i].sub_int = NULL;
2001532a:	0007a223          	sw	zero,4(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:462
            intc->metal_int_table[i].exint_data = NULL;
2001532e:	0007a423          	sw	zero,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:459
        for (int i = 0; i < METAL_MAX_MI; i++) {
20015332:	07e1                	addi	a5,a5,24
20015334:	fee799e3          	bne	a5,a4,20015326 <__metal_driver_riscv_cpu_controller_interrupt_init+0xc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:466
            intc->metal_exception_table[i] = __metal_default_exception_handler;
20015338:	20015737          	lui	a4,0x20015
2001533c:	3a050793          	addi	a5,a0,928
20015340:	3d050693          	addi	a3,a0,976
20015344:	2dc70713          	addi	a4,a4,732 # 200152dc <__metal_default_exception_handler>
20015348:	c398                	sw	a4,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:465
        for (int i = 0; i < METAL_MAX_ME; i++) {
2001534a:	0791                	addi	a5,a5,4
2001534c:	fef69ee3          	bne	a3,a5,20015348 <__metal_driver_riscv_cpu_controller_interrupt_init+0x2e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:475
        __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
20015350:	30502773          	csrr	a4,mtvec
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:476
        if (mtvec == (uintptr_t)&early_trap_vector) {
20015354:	200107b7          	lui	a5,0x20010
20015358:	13478793          	addi	a5,a5,308 # 20010134 <early_trap_vector>
2001535c:	00f71b63          	bne	a4,a5,20015372 <__metal_driver_riscv_cpu_controller_interrupt_init+0x58>
__metal_controller_interrupt_vector():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:320
    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
20015360:	305027f3          	csrr	a5,mtvec
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:341
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20015364:	200157b7          	lui	a5,0x20015
20015368:	08078793          	addi	a5,a5,128 # 20015080 <__metal_exception_handler>
2001536c:	9bf1                	andi	a5,a5,-4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:340
        __asm__ volatile(
2001536e:	30579073          	csrw	mtvec,a5
__metal_driver_riscv_cpu_controller_interrupt_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:481
        intc->init_done = 1;
20015372:	4785                	li	a5,1
20015374:	c15c                	sw	a5,4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:483
}
20015376:	8082                	ret

20015378 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
20015378:	80001537          	lui	a0,0x80001
2001537c:	aa450513          	addi	a0,a0,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
20015380:	8082                	ret

20015382 <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:598
    if (mode == METAL_DIRECT_MODE) {
20015382:	ed81                	bnez	a1,2001539a <__metal_driver_riscv_cpu_controller_set_vector_mode+0x18>
__metal_controller_interrupt_vector():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:320
    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
20015384:	305027f3          	csrr	a5,mtvec
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:341
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20015388:	200157b7          	lui	a5,0x20015
2001538c:	08078793          	addi	a5,a5,128 # 20015080 <__metal_exception_handler>
20015390:	9bf1                	andi	a5,a5,-4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:336
        __asm__ volatile(
20015392:	30579073          	csrw	mtvec,a5
__metal_driver_riscv_cpu_controller_set_vector_mode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:606
        return 0;
20015396:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:609
}
20015398:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:603
    if (mode == METAL_VECTOR_MODE) {
2001539a:	4785                	li	a5,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:608
    return -1;
2001539c:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:603
    if (mode == METAL_VECTOR_MODE) {
2001539e:	fef59de3          	bne	a1,a5,20015398 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x16>
__metal_controller_interrupt_vector():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:320
    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
200153a2:	305027f3          	csrr	a5,mtvec
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:337
            "csrw mtvec, %0" ::"r"(trap_entry | METAL_MTVEC_VECTORED));
200153a6:	200177b7          	lui	a5,0x20017
200153aa:	e0078793          	addi	a5,a5,-512 # 20016e00 <__metal_vector_table>
200153ae:	0017e793          	ori	a5,a5,1
200153b2:	b7c5                	j	20015392 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x10>

200153b4 <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:26
    if (hartid < __METAL_DT_MAX_HARTS) {
200153b4:	00a04863          	bgtz	a0,200153c4 <__metal_driver_cpu_get+0x10>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:27
        return &(__metal_cpu_table[hartid]->cpu);
200153b8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200153bc:	050a                	slli	a0,a0,0x2
200153be:	953e                	add	a0,a0,a5
200153c0:	4108                	lw	a0,0(a0)
200153c2:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:29
    return (struct metal_cpu *)NULL;
200153c4:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:30
}
200153c6:	8082                	ret

200153c8 <__metal_default_timer_handler>:
__metal_default_timer_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:154
void __metal_default_timer_handler(int id, void *priv) {
200153c8:	1141                	addi	sp,sp,-16
200153ca:	c606                	sw	ra,12(sp)
200153cc:	c422                	sw	s0,8(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200153ce:	f1402573          	csrr	a0,mhartid
__metal_default_timer_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:155
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
200153d2:	37cd                	jal	200153b4 <__metal_driver_cpu_get>
200153d4:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:156
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
200153d6:	33d5                	jal	200151ba <__metal_driver_cpu_mtime_get>
200153d8:	87ae                	mv	a5,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:159
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
200153da:	00a50593          	addi	a1,a0,10
200153de:	00a5b633          	sltu	a2,a1,a0
200153e2:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:160
}
200153e4:	4422                	lw	s0,8(sp)
200153e6:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:159
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
200153e8:	963e                	add	a2,a2,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:160
}
200153ea:	0141                	addi	sp,sp,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:159
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
200153ec:	b721                	j	200152f4 <__metal_driver_cpu_mtimecmp_set>

200153ee <__metal_myhart_id>:
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200153ee:	f1402573          	csrr	a0,mhartid
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:36
}
200153f2:	8082                	ret

200153f4 <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:122
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
200153f4:	7139                	addi	sp,sp,-64
200153f6:	d62a                	sw	a0,44(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:123
    metal_shutdown(300);
200153f8:	12c00513          	li	a0,300
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:122
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
200153fc:	de06                	sw	ra,60(sp)
200153fe:	dc16                	sw	t0,56(sp)
20015400:	da1a                	sw	t1,52(sp)
20015402:	d81e                	sw	t2,48(sp)
20015404:	d42e                	sw	a1,40(sp)
20015406:	d232                	sw	a2,36(sp)
20015408:	d036                	sw	a3,32(sp)
2001540a:	ce3a                	sw	a4,28(sp)
2001540c:	cc3e                	sw	a5,24(sp)
2001540e:	ca42                	sw	a6,20(sp)
20015410:	c846                	sw	a7,16(sp)
20015412:	c672                	sw	t3,12(sp)
20015414:	c476                	sw	t4,8(sp)
20015416:	c27a                	sw	t5,4(sp)
20015418:	c07e                	sw	t6,0(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:123
    metal_shutdown(300);
2001541a:	1a3010ef          	jal	ra,20016dbc <metal_shutdown>

2001541e <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:128
metal_software_interrupt_vector_handler(void) {
2001541e:	7139                	addi	sp,sp,-64
20015420:	de06                	sw	ra,60(sp)
20015422:	dc16                	sw	t0,56(sp)
20015424:	da1a                	sw	t1,52(sp)
20015426:	d81e                	sw	t2,48(sp)
20015428:	d62a                	sw	a0,44(sp)
2001542a:	d42e                	sw	a1,40(sp)
2001542c:	d232                	sw	a2,36(sp)
2001542e:	d036                	sw	a3,32(sp)
20015430:	ce3a                	sw	a4,28(sp)
20015432:	cc3e                	sw	a5,24(sp)
20015434:	ca42                	sw	a6,20(sp)
20015436:	c846                	sw	a7,16(sp)
20015438:	c672                	sw	t3,12(sp)
2001543a:	c476                	sw	t4,8(sp)
2001543c:	c27a                	sw	t5,4(sp)
2001543e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015440:	f14027f3          	csrr	a5,mhartid
metal_software_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:129
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
20015444:	00279713          	slli	a4,a5,0x2
20015448:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
2001544c:	97ba                	add	a5,a5,a4
2001544e:	4398                	lw	a4,0(a5)
20015450:	c30d                	beqz	a4,20015472 <metal_software_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015452:	800017b7          	lui	a5,0x80001
20015456:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
2001545a:	02f71f63          	bne	a4,a5,20015498 <metal_software_interrupt_vector_handler+0x7a>
metal_software_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:129
2001545e:	800007b7          	lui	a5,0x80000
20015462:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015466:	0d87a703          	lw	a4,216(a5)
2001546a:	0e07a583          	lw	a1,224(a5)
2001546e:	450d                	li	a0,3
20015470:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:130
}
20015472:	50f2                	lw	ra,60(sp)
20015474:	52e2                	lw	t0,56(sp)
20015476:	5352                	lw	t1,52(sp)
20015478:	53c2                	lw	t2,48(sp)
2001547a:	5532                	lw	a0,44(sp)
2001547c:	55a2                	lw	a1,40(sp)
2001547e:	5612                	lw	a2,36(sp)
20015480:	5682                	lw	a3,32(sp)
20015482:	4772                	lw	a4,28(sp)
20015484:	47e2                	lw	a5,24(sp)
20015486:	4852                	lw	a6,20(sp)
20015488:	48c2                	lw	a7,16(sp)
2001548a:	4e32                	lw	t3,12(sp)
2001548c:	4ea2                	lw	t4,8(sp)
2001548e:	4f12                	lw	t5,4(sp)
20015490:	4f82                	lw	t6,0(sp)
20015492:	6121                	addi	sp,sp,64
20015494:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:129
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
20015498:	0e002783          	lw	a5,224(zero) # e0 <__metal_chicken_bit+0xdf>
2001549c:	9002                	ebreak

2001549e <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:148
metal_timer_interrupt_vector_handler(void) {
2001549e:	7139                	addi	sp,sp,-64
200154a0:	de06                	sw	ra,60(sp)
200154a2:	dc16                	sw	t0,56(sp)
200154a4:	da1a                	sw	t1,52(sp)
200154a6:	d81e                	sw	t2,48(sp)
200154a8:	d62a                	sw	a0,44(sp)
200154aa:	d42e                	sw	a1,40(sp)
200154ac:	d232                	sw	a2,36(sp)
200154ae:	d036                	sw	a3,32(sp)
200154b0:	ce3a                	sw	a4,28(sp)
200154b2:	cc3e                	sw	a5,24(sp)
200154b4:	ca42                	sw	a6,20(sp)
200154b6:	c846                	sw	a7,16(sp)
200154b8:	c672                	sw	t3,12(sp)
200154ba:	c476                	sw	t4,8(sp)
200154bc:	c27a                	sw	t5,4(sp)
200154be:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200154c0:	f14027f3          	csrr	a5,mhartid
metal_timer_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:149
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
200154c4:	00279713          	slli	a4,a5,0x2
200154c8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200154cc:	97ba                	add	a5,a5,a4
200154ce:	4398                	lw	a4,0(a5)
200154d0:	c30d                	beqz	a4,200154f2 <metal_timer_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200154d2:	800017b7          	lui	a5,0x80001
200154d6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200154da:	02f71f63          	bne	a4,a5,20015518 <metal_timer_interrupt_vector_handler+0x7a>
metal_timer_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:149
200154de:	800007b7          	lui	a5,0x80000
200154e2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
200154e6:	1387a703          	lw	a4,312(a5)
200154ea:	1407a583          	lw	a1,320(a5)
200154ee:	451d                	li	a0,7
200154f0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:150
}
200154f2:	50f2                	lw	ra,60(sp)
200154f4:	52e2                	lw	t0,56(sp)
200154f6:	5352                	lw	t1,52(sp)
200154f8:	53c2                	lw	t2,48(sp)
200154fa:	5532                	lw	a0,44(sp)
200154fc:	55a2                	lw	a1,40(sp)
200154fe:	5612                	lw	a2,36(sp)
20015500:	5682                	lw	a3,32(sp)
20015502:	4772                	lw	a4,28(sp)
20015504:	47e2                	lw	a5,24(sp)
20015506:	4852                	lw	a6,20(sp)
20015508:	48c2                	lw	a7,16(sp)
2001550a:	4e32                	lw	t3,12(sp)
2001550c:	4ea2                	lw	t4,8(sp)
2001550e:	4f12                	lw	t5,4(sp)
20015510:	4f82                	lw	t6,0(sp)
20015512:	6121                	addi	sp,sp,64
20015514:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:149
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
20015518:	14002783          	lw	a5,320(zero) # 140 <__metal_chicken_bit+0x13f>
2001551c:	9002                	ebreak

2001551e <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:214
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler(void) {
2001551e:	7139                	addi	sp,sp,-64
20015520:	de06                	sw	ra,60(sp)
20015522:	dc16                	sw	t0,56(sp)
20015524:	da1a                	sw	t1,52(sp)
20015526:	d81e                	sw	t2,48(sp)
20015528:	d62a                	sw	a0,44(sp)
2001552a:	d42e                	sw	a1,40(sp)
2001552c:	d232                	sw	a2,36(sp)
2001552e:	d036                	sw	a3,32(sp)
20015530:	ce3a                	sw	a4,28(sp)
20015532:	cc3e                	sw	a5,24(sp)
20015534:	ca42                	sw	a6,20(sp)
20015536:	c846                	sw	a7,16(sp)
20015538:	c672                	sw	t3,12(sp)
2001553a:	c476                	sw	t4,8(sp)
2001553c:	c27a                	sw	t5,4(sp)
2001553e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015540:	f14027f3          	csrr	a5,mhartid
metal_lc0_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:215
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
20015544:	00279713          	slli	a4,a5,0x2
20015548:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
2001554c:	97ba                	add	a5,a5,a4
2001554e:	4398                	lw	a4,0(a5)
20015550:	c30d                	beqz	a4,20015572 <metal_lc0_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015552:	800017b7          	lui	a5,0x80001
20015556:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
2001555a:	02f71f63          	bne	a4,a5,20015598 <metal_lc0_interrupt_vector_handler+0x7a>
metal_lc0_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:215
2001555e:	800007b7          	lui	a5,0x80000
20015562:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015566:	2107a703          	lw	a4,528(a5)
2001556a:	2187a583          	lw	a1,536(a5)
2001556e:	4541                	li	a0,16
20015570:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:216
}
20015572:	50f2                	lw	ra,60(sp)
20015574:	52e2                	lw	t0,56(sp)
20015576:	5352                	lw	t1,52(sp)
20015578:	53c2                	lw	t2,48(sp)
2001557a:	5532                	lw	a0,44(sp)
2001557c:	55a2                	lw	a1,40(sp)
2001557e:	5612                	lw	a2,36(sp)
20015580:	5682                	lw	a3,32(sp)
20015582:	4772                	lw	a4,28(sp)
20015584:	47e2                	lw	a5,24(sp)
20015586:	4852                	lw	a6,20(sp)
20015588:	48c2                	lw	a7,16(sp)
2001558a:	4e32                	lw	t3,12(sp)
2001558c:	4ea2                	lw	t4,8(sp)
2001558e:	4f12                	lw	t5,4(sp)
20015590:	4f82                	lw	t6,0(sp)
20015592:	6121                	addi	sp,sp,64
20015594:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:215
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
20015598:	21802783          	lw	a5,536(zero) # 218 <__metal_chicken_bit+0x217>
2001559c:	9002                	ebreak

2001559e <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:219
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler(void) {
2001559e:	7139                	addi	sp,sp,-64
200155a0:	de06                	sw	ra,60(sp)
200155a2:	dc16                	sw	t0,56(sp)
200155a4:	da1a                	sw	t1,52(sp)
200155a6:	d81e                	sw	t2,48(sp)
200155a8:	d62a                	sw	a0,44(sp)
200155aa:	d42e                	sw	a1,40(sp)
200155ac:	d232                	sw	a2,36(sp)
200155ae:	d036                	sw	a3,32(sp)
200155b0:	ce3a                	sw	a4,28(sp)
200155b2:	cc3e                	sw	a5,24(sp)
200155b4:	ca42                	sw	a6,20(sp)
200155b6:	c846                	sw	a7,16(sp)
200155b8:	c672                	sw	t3,12(sp)
200155ba:	c476                	sw	t4,8(sp)
200155bc:	c27a                	sw	t5,4(sp)
200155be:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200155c0:	f14027f3          	csrr	a5,mhartid
metal_lc1_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:220
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
200155c4:	00279713          	slli	a4,a5,0x2
200155c8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200155cc:	97ba                	add	a5,a5,a4
200155ce:	4398                	lw	a4,0(a5)
200155d0:	c30d                	beqz	a4,200155f2 <metal_lc1_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200155d2:	800017b7          	lui	a5,0x80001
200155d6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200155da:	02f71f63          	bne	a4,a5,20015618 <metal_lc1_interrupt_vector_handler+0x7a>
metal_lc1_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:220
200155de:	800007b7          	lui	a5,0x80000
200155e2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
200155e6:	2287a703          	lw	a4,552(a5)
200155ea:	2307a583          	lw	a1,560(a5)
200155ee:	4545                	li	a0,17
200155f0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:221
}
200155f2:	50f2                	lw	ra,60(sp)
200155f4:	52e2                	lw	t0,56(sp)
200155f6:	5352                	lw	t1,52(sp)
200155f8:	53c2                	lw	t2,48(sp)
200155fa:	5532                	lw	a0,44(sp)
200155fc:	55a2                	lw	a1,40(sp)
200155fe:	5612                	lw	a2,36(sp)
20015600:	5682                	lw	a3,32(sp)
20015602:	4772                	lw	a4,28(sp)
20015604:	47e2                	lw	a5,24(sp)
20015606:	4852                	lw	a6,20(sp)
20015608:	48c2                	lw	a7,16(sp)
2001560a:	4e32                	lw	t3,12(sp)
2001560c:	4ea2                	lw	t4,8(sp)
2001560e:	4f12                	lw	t5,4(sp)
20015610:	4f82                	lw	t6,0(sp)
20015612:	6121                	addi	sp,sp,64
20015614:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:220
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
20015618:	23002783          	lw	a5,560(zero) # 230 <__metal_chicken_bit+0x22f>
2001561c:	9002                	ebreak

2001561e <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:224
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler(void) {
2001561e:	7139                	addi	sp,sp,-64
20015620:	de06                	sw	ra,60(sp)
20015622:	dc16                	sw	t0,56(sp)
20015624:	da1a                	sw	t1,52(sp)
20015626:	d81e                	sw	t2,48(sp)
20015628:	d62a                	sw	a0,44(sp)
2001562a:	d42e                	sw	a1,40(sp)
2001562c:	d232                	sw	a2,36(sp)
2001562e:	d036                	sw	a3,32(sp)
20015630:	ce3a                	sw	a4,28(sp)
20015632:	cc3e                	sw	a5,24(sp)
20015634:	ca42                	sw	a6,20(sp)
20015636:	c846                	sw	a7,16(sp)
20015638:	c672                	sw	t3,12(sp)
2001563a:	c476                	sw	t4,8(sp)
2001563c:	c27a                	sw	t5,4(sp)
2001563e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015640:	f14027f3          	csrr	a5,mhartid
metal_lc2_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:225
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
20015644:	00279713          	slli	a4,a5,0x2
20015648:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
2001564c:	97ba                	add	a5,a5,a4
2001564e:	4398                	lw	a4,0(a5)
20015650:	c30d                	beqz	a4,20015672 <metal_lc2_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015652:	800017b7          	lui	a5,0x80001
20015656:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
2001565a:	02f71f63          	bne	a4,a5,20015698 <metal_lc2_interrupt_vector_handler+0x7a>
metal_lc2_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:225
2001565e:	800007b7          	lui	a5,0x80000
20015662:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015666:	2407a703          	lw	a4,576(a5)
2001566a:	2487a583          	lw	a1,584(a5)
2001566e:	4549                	li	a0,18
20015670:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:226
}
20015672:	50f2                	lw	ra,60(sp)
20015674:	52e2                	lw	t0,56(sp)
20015676:	5352                	lw	t1,52(sp)
20015678:	53c2                	lw	t2,48(sp)
2001567a:	5532                	lw	a0,44(sp)
2001567c:	55a2                	lw	a1,40(sp)
2001567e:	5612                	lw	a2,36(sp)
20015680:	5682                	lw	a3,32(sp)
20015682:	4772                	lw	a4,28(sp)
20015684:	47e2                	lw	a5,24(sp)
20015686:	4852                	lw	a6,20(sp)
20015688:	48c2                	lw	a7,16(sp)
2001568a:	4e32                	lw	t3,12(sp)
2001568c:	4ea2                	lw	t4,8(sp)
2001568e:	4f12                	lw	t5,4(sp)
20015690:	4f82                	lw	t6,0(sp)
20015692:	6121                	addi	sp,sp,64
20015694:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:225
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
20015698:	24802783          	lw	a5,584(zero) # 248 <__metal_chicken_bit+0x247>
2001569c:	9002                	ebreak

2001569e <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:229
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler(void) {
2001569e:	7139                	addi	sp,sp,-64
200156a0:	de06                	sw	ra,60(sp)
200156a2:	dc16                	sw	t0,56(sp)
200156a4:	da1a                	sw	t1,52(sp)
200156a6:	d81e                	sw	t2,48(sp)
200156a8:	d62a                	sw	a0,44(sp)
200156aa:	d42e                	sw	a1,40(sp)
200156ac:	d232                	sw	a2,36(sp)
200156ae:	d036                	sw	a3,32(sp)
200156b0:	ce3a                	sw	a4,28(sp)
200156b2:	cc3e                	sw	a5,24(sp)
200156b4:	ca42                	sw	a6,20(sp)
200156b6:	c846                	sw	a7,16(sp)
200156b8:	c672                	sw	t3,12(sp)
200156ba:	c476                	sw	t4,8(sp)
200156bc:	c27a                	sw	t5,4(sp)
200156be:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200156c0:	f14027f3          	csrr	a5,mhartid
metal_lc3_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:230
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
200156c4:	00279713          	slli	a4,a5,0x2
200156c8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200156cc:	97ba                	add	a5,a5,a4
200156ce:	4398                	lw	a4,0(a5)
200156d0:	c30d                	beqz	a4,200156f2 <metal_lc3_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200156d2:	800017b7          	lui	a5,0x80001
200156d6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200156da:	02f71f63          	bne	a4,a5,20015718 <metal_lc3_interrupt_vector_handler+0x7a>
metal_lc3_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:230
200156de:	800007b7          	lui	a5,0x80000
200156e2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
200156e6:	2587a703          	lw	a4,600(a5)
200156ea:	2607a583          	lw	a1,608(a5)
200156ee:	454d                	li	a0,19
200156f0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:231
}
200156f2:	50f2                	lw	ra,60(sp)
200156f4:	52e2                	lw	t0,56(sp)
200156f6:	5352                	lw	t1,52(sp)
200156f8:	53c2                	lw	t2,48(sp)
200156fa:	5532                	lw	a0,44(sp)
200156fc:	55a2                	lw	a1,40(sp)
200156fe:	5612                	lw	a2,36(sp)
20015700:	5682                	lw	a3,32(sp)
20015702:	4772                	lw	a4,28(sp)
20015704:	47e2                	lw	a5,24(sp)
20015706:	4852                	lw	a6,20(sp)
20015708:	48c2                	lw	a7,16(sp)
2001570a:	4e32                	lw	t3,12(sp)
2001570c:	4ea2                	lw	t4,8(sp)
2001570e:	4f12                	lw	t5,4(sp)
20015710:	4f82                	lw	t6,0(sp)
20015712:	6121                	addi	sp,sp,64
20015714:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:230
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
20015718:	26002783          	lw	a5,608(zero) # 260 <__metal_chicken_bit+0x25f>
2001571c:	9002                	ebreak

2001571e <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:234
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler(void) {
2001571e:	7139                	addi	sp,sp,-64
20015720:	de06                	sw	ra,60(sp)
20015722:	dc16                	sw	t0,56(sp)
20015724:	da1a                	sw	t1,52(sp)
20015726:	d81e                	sw	t2,48(sp)
20015728:	d62a                	sw	a0,44(sp)
2001572a:	d42e                	sw	a1,40(sp)
2001572c:	d232                	sw	a2,36(sp)
2001572e:	d036                	sw	a3,32(sp)
20015730:	ce3a                	sw	a4,28(sp)
20015732:	cc3e                	sw	a5,24(sp)
20015734:	ca42                	sw	a6,20(sp)
20015736:	c846                	sw	a7,16(sp)
20015738:	c672                	sw	t3,12(sp)
2001573a:	c476                	sw	t4,8(sp)
2001573c:	c27a                	sw	t5,4(sp)
2001573e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015740:	f14027f3          	csrr	a5,mhartid
metal_lc4_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:235
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
20015744:	00279713          	slli	a4,a5,0x2
20015748:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
2001574c:	97ba                	add	a5,a5,a4
2001574e:	4398                	lw	a4,0(a5)
20015750:	c30d                	beqz	a4,20015772 <metal_lc4_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015752:	800017b7          	lui	a5,0x80001
20015756:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
2001575a:	02f71f63          	bne	a4,a5,20015798 <metal_lc4_interrupt_vector_handler+0x7a>
metal_lc4_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:235
2001575e:	800007b7          	lui	a5,0x80000
20015762:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015766:	2707a703          	lw	a4,624(a5)
2001576a:	2787a583          	lw	a1,632(a5)
2001576e:	4551                	li	a0,20
20015770:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:236
}
20015772:	50f2                	lw	ra,60(sp)
20015774:	52e2                	lw	t0,56(sp)
20015776:	5352                	lw	t1,52(sp)
20015778:	53c2                	lw	t2,48(sp)
2001577a:	5532                	lw	a0,44(sp)
2001577c:	55a2                	lw	a1,40(sp)
2001577e:	5612                	lw	a2,36(sp)
20015780:	5682                	lw	a3,32(sp)
20015782:	4772                	lw	a4,28(sp)
20015784:	47e2                	lw	a5,24(sp)
20015786:	4852                	lw	a6,20(sp)
20015788:	48c2                	lw	a7,16(sp)
2001578a:	4e32                	lw	t3,12(sp)
2001578c:	4ea2                	lw	t4,8(sp)
2001578e:	4f12                	lw	t5,4(sp)
20015790:	4f82                	lw	t6,0(sp)
20015792:	6121                	addi	sp,sp,64
20015794:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:235
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
20015798:	27802783          	lw	a5,632(zero) # 278 <__metal_chicken_bit+0x277>
2001579c:	9002                	ebreak

2001579e <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:239
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler(void) {
2001579e:	7139                	addi	sp,sp,-64
200157a0:	de06                	sw	ra,60(sp)
200157a2:	dc16                	sw	t0,56(sp)
200157a4:	da1a                	sw	t1,52(sp)
200157a6:	d81e                	sw	t2,48(sp)
200157a8:	d62a                	sw	a0,44(sp)
200157aa:	d42e                	sw	a1,40(sp)
200157ac:	d232                	sw	a2,36(sp)
200157ae:	d036                	sw	a3,32(sp)
200157b0:	ce3a                	sw	a4,28(sp)
200157b2:	cc3e                	sw	a5,24(sp)
200157b4:	ca42                	sw	a6,20(sp)
200157b6:	c846                	sw	a7,16(sp)
200157b8:	c672                	sw	t3,12(sp)
200157ba:	c476                	sw	t4,8(sp)
200157bc:	c27a                	sw	t5,4(sp)
200157be:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200157c0:	f14027f3          	csrr	a5,mhartid
metal_lc5_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:240
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
200157c4:	00279713          	slli	a4,a5,0x2
200157c8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200157cc:	97ba                	add	a5,a5,a4
200157ce:	4398                	lw	a4,0(a5)
200157d0:	c30d                	beqz	a4,200157f2 <metal_lc5_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200157d2:	800017b7          	lui	a5,0x80001
200157d6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200157da:	02f71f63          	bne	a4,a5,20015818 <metal_lc5_interrupt_vector_handler+0x7a>
metal_lc5_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:240
200157de:	800007b7          	lui	a5,0x80000
200157e2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
200157e6:	2887a703          	lw	a4,648(a5)
200157ea:	2907a583          	lw	a1,656(a5)
200157ee:	4555                	li	a0,21
200157f0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:241
}
200157f2:	50f2                	lw	ra,60(sp)
200157f4:	52e2                	lw	t0,56(sp)
200157f6:	5352                	lw	t1,52(sp)
200157f8:	53c2                	lw	t2,48(sp)
200157fa:	5532                	lw	a0,44(sp)
200157fc:	55a2                	lw	a1,40(sp)
200157fe:	5612                	lw	a2,36(sp)
20015800:	5682                	lw	a3,32(sp)
20015802:	4772                	lw	a4,28(sp)
20015804:	47e2                	lw	a5,24(sp)
20015806:	4852                	lw	a6,20(sp)
20015808:	48c2                	lw	a7,16(sp)
2001580a:	4e32                	lw	t3,12(sp)
2001580c:	4ea2                	lw	t4,8(sp)
2001580e:	4f12                	lw	t5,4(sp)
20015810:	4f82                	lw	t6,0(sp)
20015812:	6121                	addi	sp,sp,64
20015814:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:240
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
20015818:	29002783          	lw	a5,656(zero) # 290 <__metal_chicken_bit+0x28f>
2001581c:	9002                	ebreak

2001581e <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:244
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler(void) {
2001581e:	7139                	addi	sp,sp,-64
20015820:	de06                	sw	ra,60(sp)
20015822:	dc16                	sw	t0,56(sp)
20015824:	da1a                	sw	t1,52(sp)
20015826:	d81e                	sw	t2,48(sp)
20015828:	d62a                	sw	a0,44(sp)
2001582a:	d42e                	sw	a1,40(sp)
2001582c:	d232                	sw	a2,36(sp)
2001582e:	d036                	sw	a3,32(sp)
20015830:	ce3a                	sw	a4,28(sp)
20015832:	cc3e                	sw	a5,24(sp)
20015834:	ca42                	sw	a6,20(sp)
20015836:	c846                	sw	a7,16(sp)
20015838:	c672                	sw	t3,12(sp)
2001583a:	c476                	sw	t4,8(sp)
2001583c:	c27a                	sw	t5,4(sp)
2001583e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015840:	f14027f3          	csrr	a5,mhartid
metal_lc6_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:245
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
20015844:	00279713          	slli	a4,a5,0x2
20015848:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
2001584c:	97ba                	add	a5,a5,a4
2001584e:	4398                	lw	a4,0(a5)
20015850:	c30d                	beqz	a4,20015872 <metal_lc6_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015852:	800017b7          	lui	a5,0x80001
20015856:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
2001585a:	02f71f63          	bne	a4,a5,20015898 <metal_lc6_interrupt_vector_handler+0x7a>
metal_lc6_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:245
2001585e:	800007b7          	lui	a5,0x80000
20015862:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015866:	2a07a703          	lw	a4,672(a5)
2001586a:	2a87a583          	lw	a1,680(a5)
2001586e:	4559                	li	a0,22
20015870:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:246
}
20015872:	50f2                	lw	ra,60(sp)
20015874:	52e2                	lw	t0,56(sp)
20015876:	5352                	lw	t1,52(sp)
20015878:	53c2                	lw	t2,48(sp)
2001587a:	5532                	lw	a0,44(sp)
2001587c:	55a2                	lw	a1,40(sp)
2001587e:	5612                	lw	a2,36(sp)
20015880:	5682                	lw	a3,32(sp)
20015882:	4772                	lw	a4,28(sp)
20015884:	47e2                	lw	a5,24(sp)
20015886:	4852                	lw	a6,20(sp)
20015888:	48c2                	lw	a7,16(sp)
2001588a:	4e32                	lw	t3,12(sp)
2001588c:	4ea2                	lw	t4,8(sp)
2001588e:	4f12                	lw	t5,4(sp)
20015890:	4f82                	lw	t6,0(sp)
20015892:	6121                	addi	sp,sp,64
20015894:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:245
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
20015898:	2a802783          	lw	a5,680(zero) # 2a8 <__metal_chicken_bit+0x2a7>
2001589c:	9002                	ebreak

2001589e <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:249
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler(void) {
2001589e:	7139                	addi	sp,sp,-64
200158a0:	de06                	sw	ra,60(sp)
200158a2:	dc16                	sw	t0,56(sp)
200158a4:	da1a                	sw	t1,52(sp)
200158a6:	d81e                	sw	t2,48(sp)
200158a8:	d62a                	sw	a0,44(sp)
200158aa:	d42e                	sw	a1,40(sp)
200158ac:	d232                	sw	a2,36(sp)
200158ae:	d036                	sw	a3,32(sp)
200158b0:	ce3a                	sw	a4,28(sp)
200158b2:	cc3e                	sw	a5,24(sp)
200158b4:	ca42                	sw	a6,20(sp)
200158b6:	c846                	sw	a7,16(sp)
200158b8:	c672                	sw	t3,12(sp)
200158ba:	c476                	sw	t4,8(sp)
200158bc:	c27a                	sw	t5,4(sp)
200158be:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200158c0:	f14027f3          	csrr	a5,mhartid
metal_lc7_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:250
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
200158c4:	00279713          	slli	a4,a5,0x2
200158c8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200158cc:	97ba                	add	a5,a5,a4
200158ce:	4398                	lw	a4,0(a5)
200158d0:	c30d                	beqz	a4,200158f2 <metal_lc7_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200158d2:	800017b7          	lui	a5,0x80001
200158d6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200158da:	02f71f63          	bne	a4,a5,20015918 <metal_lc7_interrupt_vector_handler+0x7a>
metal_lc7_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:250
200158de:	800007b7          	lui	a5,0x80000
200158e2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
200158e6:	2b87a703          	lw	a4,696(a5)
200158ea:	2c07a583          	lw	a1,704(a5)
200158ee:	455d                	li	a0,23
200158f0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:251
}
200158f2:	50f2                	lw	ra,60(sp)
200158f4:	52e2                	lw	t0,56(sp)
200158f6:	5352                	lw	t1,52(sp)
200158f8:	53c2                	lw	t2,48(sp)
200158fa:	5532                	lw	a0,44(sp)
200158fc:	55a2                	lw	a1,40(sp)
200158fe:	5612                	lw	a2,36(sp)
20015900:	5682                	lw	a3,32(sp)
20015902:	4772                	lw	a4,28(sp)
20015904:	47e2                	lw	a5,24(sp)
20015906:	4852                	lw	a6,20(sp)
20015908:	48c2                	lw	a7,16(sp)
2001590a:	4e32                	lw	t3,12(sp)
2001590c:	4ea2                	lw	t4,8(sp)
2001590e:	4f12                	lw	t5,4(sp)
20015910:	4f82                	lw	t6,0(sp)
20015912:	6121                	addi	sp,sp,64
20015914:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:250
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
20015918:	2c002783          	lw	a5,704(zero) # 2c0 <__metal_chicken_bit+0x2bf>
2001591c:	9002                	ebreak

2001591e <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:254
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler(void) {
2001591e:	7139                	addi	sp,sp,-64
20015920:	de06                	sw	ra,60(sp)
20015922:	dc16                	sw	t0,56(sp)
20015924:	da1a                	sw	t1,52(sp)
20015926:	d81e                	sw	t2,48(sp)
20015928:	d62a                	sw	a0,44(sp)
2001592a:	d42e                	sw	a1,40(sp)
2001592c:	d232                	sw	a2,36(sp)
2001592e:	d036                	sw	a3,32(sp)
20015930:	ce3a                	sw	a4,28(sp)
20015932:	cc3e                	sw	a5,24(sp)
20015934:	ca42                	sw	a6,20(sp)
20015936:	c846                	sw	a7,16(sp)
20015938:	c672                	sw	t3,12(sp)
2001593a:	c476                	sw	t4,8(sp)
2001593c:	c27a                	sw	t5,4(sp)
2001593e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015940:	f14027f3          	csrr	a5,mhartid
metal_lc8_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:255
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
20015944:	00279713          	slli	a4,a5,0x2
20015948:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
2001594c:	97ba                	add	a5,a5,a4
2001594e:	4398                	lw	a4,0(a5)
20015950:	c30d                	beqz	a4,20015972 <metal_lc8_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015952:	800017b7          	lui	a5,0x80001
20015956:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
2001595a:	02f71f63          	bne	a4,a5,20015998 <metal_lc8_interrupt_vector_handler+0x7a>
metal_lc8_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:255
2001595e:	800007b7          	lui	a5,0x80000
20015962:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015966:	2d07a703          	lw	a4,720(a5)
2001596a:	2d87a583          	lw	a1,728(a5)
2001596e:	4561                	li	a0,24
20015970:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:256
}
20015972:	50f2                	lw	ra,60(sp)
20015974:	52e2                	lw	t0,56(sp)
20015976:	5352                	lw	t1,52(sp)
20015978:	53c2                	lw	t2,48(sp)
2001597a:	5532                	lw	a0,44(sp)
2001597c:	55a2                	lw	a1,40(sp)
2001597e:	5612                	lw	a2,36(sp)
20015980:	5682                	lw	a3,32(sp)
20015982:	4772                	lw	a4,28(sp)
20015984:	47e2                	lw	a5,24(sp)
20015986:	4852                	lw	a6,20(sp)
20015988:	48c2                	lw	a7,16(sp)
2001598a:	4e32                	lw	t3,12(sp)
2001598c:	4ea2                	lw	t4,8(sp)
2001598e:	4f12                	lw	t5,4(sp)
20015990:	4f82                	lw	t6,0(sp)
20015992:	6121                	addi	sp,sp,64
20015994:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:255
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
20015998:	2d802783          	lw	a5,728(zero) # 2d8 <__metal_chicken_bit+0x2d7>
2001599c:	9002                	ebreak

2001599e <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:259
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler(void) {
2001599e:	7139                	addi	sp,sp,-64
200159a0:	de06                	sw	ra,60(sp)
200159a2:	dc16                	sw	t0,56(sp)
200159a4:	da1a                	sw	t1,52(sp)
200159a6:	d81e                	sw	t2,48(sp)
200159a8:	d62a                	sw	a0,44(sp)
200159aa:	d42e                	sw	a1,40(sp)
200159ac:	d232                	sw	a2,36(sp)
200159ae:	d036                	sw	a3,32(sp)
200159b0:	ce3a                	sw	a4,28(sp)
200159b2:	cc3e                	sw	a5,24(sp)
200159b4:	ca42                	sw	a6,20(sp)
200159b6:	c846                	sw	a7,16(sp)
200159b8:	c672                	sw	t3,12(sp)
200159ba:	c476                	sw	t4,8(sp)
200159bc:	c27a                	sw	t5,4(sp)
200159be:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
200159c0:	f14027f3          	csrr	a5,mhartid
metal_lc9_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:260
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
200159c4:	00279713          	slli	a4,a5,0x2
200159c8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
200159cc:	97ba                	add	a5,a5,a4
200159ce:	4398                	lw	a4,0(a5)
200159d0:	c30d                	beqz	a4,200159f2 <metal_lc9_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
200159d2:	800017b7          	lui	a5,0x80001
200159d6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
200159da:	02f71f63          	bne	a4,a5,20015a18 <metal_lc9_interrupt_vector_handler+0x7a>
metal_lc9_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:260
200159de:	800007b7          	lui	a5,0x80000
200159e2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
200159e6:	2e87a703          	lw	a4,744(a5)
200159ea:	2f07a583          	lw	a1,752(a5)
200159ee:	4565                	li	a0,25
200159f0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:261
}
200159f2:	50f2                	lw	ra,60(sp)
200159f4:	52e2                	lw	t0,56(sp)
200159f6:	5352                	lw	t1,52(sp)
200159f8:	53c2                	lw	t2,48(sp)
200159fa:	5532                	lw	a0,44(sp)
200159fc:	55a2                	lw	a1,40(sp)
200159fe:	5612                	lw	a2,36(sp)
20015a00:	5682                	lw	a3,32(sp)
20015a02:	4772                	lw	a4,28(sp)
20015a04:	47e2                	lw	a5,24(sp)
20015a06:	4852                	lw	a6,20(sp)
20015a08:	48c2                	lw	a7,16(sp)
20015a0a:	4e32                	lw	t3,12(sp)
20015a0c:	4ea2                	lw	t4,8(sp)
20015a0e:	4f12                	lw	t5,4(sp)
20015a10:	4f82                	lw	t6,0(sp)
20015a12:	6121                	addi	sp,sp,64
20015a14:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:260
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
20015a18:	2f002783          	lw	a5,752(zero) # 2f0 <__metal_chicken_bit+0x2ef>
20015a1c:	9002                	ebreak

20015a1e <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:265
metal_lc10_interrupt_vector_handler(void) {
20015a1e:	7139                	addi	sp,sp,-64
20015a20:	de06                	sw	ra,60(sp)
20015a22:	dc16                	sw	t0,56(sp)
20015a24:	da1a                	sw	t1,52(sp)
20015a26:	d81e                	sw	t2,48(sp)
20015a28:	d62a                	sw	a0,44(sp)
20015a2a:	d42e                	sw	a1,40(sp)
20015a2c:	d232                	sw	a2,36(sp)
20015a2e:	d036                	sw	a3,32(sp)
20015a30:	ce3a                	sw	a4,28(sp)
20015a32:	cc3e                	sw	a5,24(sp)
20015a34:	ca42                	sw	a6,20(sp)
20015a36:	c846                	sw	a7,16(sp)
20015a38:	c672                	sw	t3,12(sp)
20015a3a:	c476                	sw	t4,8(sp)
20015a3c:	c27a                	sw	t5,4(sp)
20015a3e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015a40:	f14027f3          	csrr	a5,mhartid
metal_lc10_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:266
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
20015a44:	00279713          	slli	a4,a5,0x2
20015a48:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
20015a4c:	97ba                	add	a5,a5,a4
20015a4e:	4398                	lw	a4,0(a5)
20015a50:	c30d                	beqz	a4,20015a72 <metal_lc10_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015a52:	800017b7          	lui	a5,0x80001
20015a56:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015a5a:	02f71f63          	bne	a4,a5,20015a98 <metal_lc10_interrupt_vector_handler+0x7a>
metal_lc10_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:266
20015a5e:	800007b7          	lui	a5,0x80000
20015a62:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015a66:	3007a703          	lw	a4,768(a5)
20015a6a:	3087a583          	lw	a1,776(a5)
20015a6e:	4569                	li	a0,26
20015a70:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:267
}
20015a72:	50f2                	lw	ra,60(sp)
20015a74:	52e2                	lw	t0,56(sp)
20015a76:	5352                	lw	t1,52(sp)
20015a78:	53c2                	lw	t2,48(sp)
20015a7a:	5532                	lw	a0,44(sp)
20015a7c:	55a2                	lw	a1,40(sp)
20015a7e:	5612                	lw	a2,36(sp)
20015a80:	5682                	lw	a3,32(sp)
20015a82:	4772                	lw	a4,28(sp)
20015a84:	47e2                	lw	a5,24(sp)
20015a86:	4852                	lw	a6,20(sp)
20015a88:	48c2                	lw	a7,16(sp)
20015a8a:	4e32                	lw	t3,12(sp)
20015a8c:	4ea2                	lw	t4,8(sp)
20015a8e:	4f12                	lw	t5,4(sp)
20015a90:	4f82                	lw	t6,0(sp)
20015a92:	6121                	addi	sp,sp,64
20015a94:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:266
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
20015a98:	30802783          	lw	a5,776(zero) # 308 <__metal_chicken_bit+0x307>
20015a9c:	9002                	ebreak

20015a9e <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:271
metal_lc11_interrupt_vector_handler(void) {
20015a9e:	7139                	addi	sp,sp,-64
20015aa0:	de06                	sw	ra,60(sp)
20015aa2:	dc16                	sw	t0,56(sp)
20015aa4:	da1a                	sw	t1,52(sp)
20015aa6:	d81e                	sw	t2,48(sp)
20015aa8:	d62a                	sw	a0,44(sp)
20015aaa:	d42e                	sw	a1,40(sp)
20015aac:	d232                	sw	a2,36(sp)
20015aae:	d036                	sw	a3,32(sp)
20015ab0:	ce3a                	sw	a4,28(sp)
20015ab2:	cc3e                	sw	a5,24(sp)
20015ab4:	ca42                	sw	a6,20(sp)
20015ab6:	c846                	sw	a7,16(sp)
20015ab8:	c672                	sw	t3,12(sp)
20015aba:	c476                	sw	t4,8(sp)
20015abc:	c27a                	sw	t5,4(sp)
20015abe:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015ac0:	f14027f3          	csrr	a5,mhartid
metal_lc11_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:272
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
20015ac4:	00279713          	slli	a4,a5,0x2
20015ac8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
20015acc:	97ba                	add	a5,a5,a4
20015ace:	4398                	lw	a4,0(a5)
20015ad0:	c30d                	beqz	a4,20015af2 <metal_lc11_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015ad2:	800017b7          	lui	a5,0x80001
20015ad6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015ada:	02f71f63          	bne	a4,a5,20015b18 <metal_lc11_interrupt_vector_handler+0x7a>
metal_lc11_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:272
20015ade:	800007b7          	lui	a5,0x80000
20015ae2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015ae6:	3187a703          	lw	a4,792(a5)
20015aea:	3207a583          	lw	a1,800(a5)
20015aee:	456d                	li	a0,27
20015af0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:273
}
20015af2:	50f2                	lw	ra,60(sp)
20015af4:	52e2                	lw	t0,56(sp)
20015af6:	5352                	lw	t1,52(sp)
20015af8:	53c2                	lw	t2,48(sp)
20015afa:	5532                	lw	a0,44(sp)
20015afc:	55a2                	lw	a1,40(sp)
20015afe:	5612                	lw	a2,36(sp)
20015b00:	5682                	lw	a3,32(sp)
20015b02:	4772                	lw	a4,28(sp)
20015b04:	47e2                	lw	a5,24(sp)
20015b06:	4852                	lw	a6,20(sp)
20015b08:	48c2                	lw	a7,16(sp)
20015b0a:	4e32                	lw	t3,12(sp)
20015b0c:	4ea2                	lw	t4,8(sp)
20015b0e:	4f12                	lw	t5,4(sp)
20015b10:	4f82                	lw	t6,0(sp)
20015b12:	6121                	addi	sp,sp,64
20015b14:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:272
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
20015b18:	32002783          	lw	a5,800(zero) # 320 <__metal_chicken_bit+0x31f>
20015b1c:	9002                	ebreak

20015b1e <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:277
metal_lc12_interrupt_vector_handler(void) {
20015b1e:	7139                	addi	sp,sp,-64
20015b20:	de06                	sw	ra,60(sp)
20015b22:	dc16                	sw	t0,56(sp)
20015b24:	da1a                	sw	t1,52(sp)
20015b26:	d81e                	sw	t2,48(sp)
20015b28:	d62a                	sw	a0,44(sp)
20015b2a:	d42e                	sw	a1,40(sp)
20015b2c:	d232                	sw	a2,36(sp)
20015b2e:	d036                	sw	a3,32(sp)
20015b30:	ce3a                	sw	a4,28(sp)
20015b32:	cc3e                	sw	a5,24(sp)
20015b34:	ca42                	sw	a6,20(sp)
20015b36:	c846                	sw	a7,16(sp)
20015b38:	c672                	sw	t3,12(sp)
20015b3a:	c476                	sw	t4,8(sp)
20015b3c:	c27a                	sw	t5,4(sp)
20015b3e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015b40:	f14027f3          	csrr	a5,mhartid
metal_lc12_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:278
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
20015b44:	00279713          	slli	a4,a5,0x2
20015b48:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
20015b4c:	97ba                	add	a5,a5,a4
20015b4e:	4398                	lw	a4,0(a5)
20015b50:	c30d                	beqz	a4,20015b72 <metal_lc12_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015b52:	800017b7          	lui	a5,0x80001
20015b56:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015b5a:	02f71f63          	bne	a4,a5,20015b98 <metal_lc12_interrupt_vector_handler+0x7a>
metal_lc12_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:278
20015b5e:	800007b7          	lui	a5,0x80000
20015b62:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015b66:	3307a703          	lw	a4,816(a5)
20015b6a:	3387a583          	lw	a1,824(a5)
20015b6e:	4571                	li	a0,28
20015b70:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:279
}
20015b72:	50f2                	lw	ra,60(sp)
20015b74:	52e2                	lw	t0,56(sp)
20015b76:	5352                	lw	t1,52(sp)
20015b78:	53c2                	lw	t2,48(sp)
20015b7a:	5532                	lw	a0,44(sp)
20015b7c:	55a2                	lw	a1,40(sp)
20015b7e:	5612                	lw	a2,36(sp)
20015b80:	5682                	lw	a3,32(sp)
20015b82:	4772                	lw	a4,28(sp)
20015b84:	47e2                	lw	a5,24(sp)
20015b86:	4852                	lw	a6,20(sp)
20015b88:	48c2                	lw	a7,16(sp)
20015b8a:	4e32                	lw	t3,12(sp)
20015b8c:	4ea2                	lw	t4,8(sp)
20015b8e:	4f12                	lw	t5,4(sp)
20015b90:	4f82                	lw	t6,0(sp)
20015b92:	6121                	addi	sp,sp,64
20015b94:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:278
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
20015b98:	33802783          	lw	a5,824(zero) # 338 <__metal_chicken_bit+0x337>
20015b9c:	9002                	ebreak

20015b9e <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:283
metal_lc13_interrupt_vector_handler(void) {
20015b9e:	7139                	addi	sp,sp,-64
20015ba0:	de06                	sw	ra,60(sp)
20015ba2:	dc16                	sw	t0,56(sp)
20015ba4:	da1a                	sw	t1,52(sp)
20015ba6:	d81e                	sw	t2,48(sp)
20015ba8:	d62a                	sw	a0,44(sp)
20015baa:	d42e                	sw	a1,40(sp)
20015bac:	d232                	sw	a2,36(sp)
20015bae:	d036                	sw	a3,32(sp)
20015bb0:	ce3a                	sw	a4,28(sp)
20015bb2:	cc3e                	sw	a5,24(sp)
20015bb4:	ca42                	sw	a6,20(sp)
20015bb6:	c846                	sw	a7,16(sp)
20015bb8:	c672                	sw	t3,12(sp)
20015bba:	c476                	sw	t4,8(sp)
20015bbc:	c27a                	sw	t5,4(sp)
20015bbe:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015bc0:	f14027f3          	csrr	a5,mhartid
metal_lc13_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:284
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
20015bc4:	00279713          	slli	a4,a5,0x2
20015bc8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
20015bcc:	97ba                	add	a5,a5,a4
20015bce:	4398                	lw	a4,0(a5)
20015bd0:	c30d                	beqz	a4,20015bf2 <metal_lc13_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015bd2:	800017b7          	lui	a5,0x80001
20015bd6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015bda:	02f71f63          	bne	a4,a5,20015c18 <metal_lc13_interrupt_vector_handler+0x7a>
metal_lc13_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:284
20015bde:	800007b7          	lui	a5,0x80000
20015be2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015be6:	3487a703          	lw	a4,840(a5)
20015bea:	3507a583          	lw	a1,848(a5)
20015bee:	4575                	li	a0,29
20015bf0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:285
}
20015bf2:	50f2                	lw	ra,60(sp)
20015bf4:	52e2                	lw	t0,56(sp)
20015bf6:	5352                	lw	t1,52(sp)
20015bf8:	53c2                	lw	t2,48(sp)
20015bfa:	5532                	lw	a0,44(sp)
20015bfc:	55a2                	lw	a1,40(sp)
20015bfe:	5612                	lw	a2,36(sp)
20015c00:	5682                	lw	a3,32(sp)
20015c02:	4772                	lw	a4,28(sp)
20015c04:	47e2                	lw	a5,24(sp)
20015c06:	4852                	lw	a6,20(sp)
20015c08:	48c2                	lw	a7,16(sp)
20015c0a:	4e32                	lw	t3,12(sp)
20015c0c:	4ea2                	lw	t4,8(sp)
20015c0e:	4f12                	lw	t5,4(sp)
20015c10:	4f82                	lw	t6,0(sp)
20015c12:	6121                	addi	sp,sp,64
20015c14:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:284
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
20015c18:	35002783          	lw	a5,848(zero) # 350 <__metal_chicken_bit+0x34f>
20015c1c:	9002                	ebreak

20015c1e <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:289
metal_lc14_interrupt_vector_handler(void) {
20015c1e:	7139                	addi	sp,sp,-64
20015c20:	de06                	sw	ra,60(sp)
20015c22:	dc16                	sw	t0,56(sp)
20015c24:	da1a                	sw	t1,52(sp)
20015c26:	d81e                	sw	t2,48(sp)
20015c28:	d62a                	sw	a0,44(sp)
20015c2a:	d42e                	sw	a1,40(sp)
20015c2c:	d232                	sw	a2,36(sp)
20015c2e:	d036                	sw	a3,32(sp)
20015c30:	ce3a                	sw	a4,28(sp)
20015c32:	cc3e                	sw	a5,24(sp)
20015c34:	ca42                	sw	a6,20(sp)
20015c36:	c846                	sw	a7,16(sp)
20015c38:	c672                	sw	t3,12(sp)
20015c3a:	c476                	sw	t4,8(sp)
20015c3c:	c27a                	sw	t5,4(sp)
20015c3e:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015c40:	f14027f3          	csrr	a5,mhartid
metal_lc14_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:290
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
20015c44:	00279713          	slli	a4,a5,0x2
20015c48:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
20015c4c:	97ba                	add	a5,a5,a4
20015c4e:	4398                	lw	a4,0(a5)
20015c50:	c30d                	beqz	a4,20015c72 <metal_lc14_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015c52:	800017b7          	lui	a5,0x80001
20015c56:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015c5a:	02f71f63          	bne	a4,a5,20015c98 <metal_lc14_interrupt_vector_handler+0x7a>
metal_lc14_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:290
20015c5e:	800007b7          	lui	a5,0x80000
20015c62:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015c66:	3607a703          	lw	a4,864(a5)
20015c6a:	3687a583          	lw	a1,872(a5)
20015c6e:	4579                	li	a0,30
20015c70:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:291
}
20015c72:	50f2                	lw	ra,60(sp)
20015c74:	52e2                	lw	t0,56(sp)
20015c76:	5352                	lw	t1,52(sp)
20015c78:	53c2                	lw	t2,48(sp)
20015c7a:	5532                	lw	a0,44(sp)
20015c7c:	55a2                	lw	a1,40(sp)
20015c7e:	5612                	lw	a2,36(sp)
20015c80:	5682                	lw	a3,32(sp)
20015c82:	4772                	lw	a4,28(sp)
20015c84:	47e2                	lw	a5,24(sp)
20015c86:	4852                	lw	a6,20(sp)
20015c88:	48c2                	lw	a7,16(sp)
20015c8a:	4e32                	lw	t3,12(sp)
20015c8c:	4ea2                	lw	t4,8(sp)
20015c8e:	4f12                	lw	t5,4(sp)
20015c90:	4f82                	lw	t6,0(sp)
20015c92:	6121                	addi	sp,sp,64
20015c94:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:290
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
20015c98:	36802783          	lw	a5,872(zero) # 368 <__metal_chicken_bit+0x367>
20015c9c:	9002                	ebreak

20015c9e <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:295
metal_lc15_interrupt_vector_handler(void) {
20015c9e:	7139                	addi	sp,sp,-64
20015ca0:	de06                	sw	ra,60(sp)
20015ca2:	dc16                	sw	t0,56(sp)
20015ca4:	da1a                	sw	t1,52(sp)
20015ca6:	d81e                	sw	t2,48(sp)
20015ca8:	d62a                	sw	a0,44(sp)
20015caa:	d42e                	sw	a1,40(sp)
20015cac:	d232                	sw	a2,36(sp)
20015cae:	d036                	sw	a3,32(sp)
20015cb0:	ce3a                	sw	a4,28(sp)
20015cb2:	cc3e                	sw	a5,24(sp)
20015cb4:	ca42                	sw	a6,20(sp)
20015cb6:	c846                	sw	a7,16(sp)
20015cb8:	c672                	sw	t3,12(sp)
20015cba:	c476                	sw	t4,8(sp)
20015cbc:	c27a                	sw	t5,4(sp)
20015cbe:	c07e                	sw	t6,0(sp)
__metal_myhart_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:34
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20015cc0:	f14027f3          	csrr	a5,mhartid
metal_lc15_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:296
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
20015cc4:	00279713          	slli	a4,a5,0x2
20015cc8:	81c18793          	addi	a5,gp,-2020 # 80000abc <__metal_dt_prci_10008000+0x4>
20015ccc:	97ba                	add	a5,a5,a4
20015cce:	4398                	lw	a4,0(a5)
20015cd0:	c30d                	beqz	a4,20015cf2 <metal_lc15_interrupt_vector_handler+0x54>
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015cd2:	800017b7          	lui	a5,0x80001
20015cd6:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015cda:	02f71f63          	bne	a4,a5,20015d18 <metal_lc15_interrupt_vector_handler+0x7a>
metal_lc15_interrupt_vector_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:296
20015cde:	800007b7          	lui	a5,0x80000
20015ce2:	0b878793          	addi	a5,a5,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015ce6:	3787a703          	lw	a4,888(a5)
20015cea:	3807a583          	lw	a1,896(a5)
20015cee:	457d                	li	a0,31
20015cf0:	9702                	jalr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:297
}
20015cf2:	50f2                	lw	ra,60(sp)
20015cf4:	52e2                	lw	t0,56(sp)
20015cf6:	5352                	lw	t1,52(sp)
20015cf8:	53c2                	lw	t2,48(sp)
20015cfa:	5532                	lw	a0,44(sp)
20015cfc:	55a2                	lw	a1,40(sp)
20015cfe:	5612                	lw	a2,36(sp)
20015d00:	5682                	lw	a3,32(sp)
20015d02:	4772                	lw	a4,28(sp)
20015d04:	47e2                	lw	a5,24(sp)
20015d06:	4852                	lw	a6,20(sp)
20015d08:	48c2                	lw	a7,16(sp)
20015d0a:	4e32                	lw	t3,12(sp)
20015d0c:	4ea2                	lw	t4,8(sp)
20015d0e:	4f12                	lw	t5,4(sp)
20015d10:	4f82                	lw	t6,0(sp)
20015d12:	6121                	addi	sp,sp,64
20015d14:	30200073          	mret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:296
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
20015d18:	38002783          	lw	a5,896(zero) # 380 <__metal_chicken_bit+0x37f>
20015d1c:	9002                	ebreak

20015d1e <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:302
    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
20015d1e:	305027f3          	csrr	a5,mtvec
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:303
    val &= METAL_MTVEC_MASK;
20015d22:	03f7f793          	andi	a5,a5,63
20015d26:	17fd                	addi	a5,a5,-1
20015d28:	4709                	li	a4,2
20015d2a:	4501                	li	a0,0
20015d2c:	00f76963          	bltu	a4,a5,20015d3e <__metal_controller_interrupt_vector_mode+0x20>
20015d30:	20011737          	lui	a4,0x20011
20015d34:	65470713          	addi	a4,a4,1620 # 20011654 <CSWTCH.79>
20015d38:	97ba                	add	a5,a5,a4
20015d3a:	0007c503          	lbu	a0,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:314
}
20015d3e:	8082                	ret

20015d40 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:592
    return __metal_controller_interrupt_vector_mode();
20015d40:	bff9                	j	20015d1e <__metal_controller_interrupt_vector_mode>

20015d42 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
20015d42:	47fd                	li	a5,31
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:346
int __metal_valid_interrupt_id(int id) {
20015d44:	872a                	mv	a4,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
20015d46:	02a7c063          	blt	a5,a0,20015d66 <__metal_valid_interrupt_id+0x24>
20015d4a:	4789                	li	a5,2
20015d4c:	4501                	li	a0,0
20015d4e:	02e7d063          	bge	a5,a4,20015d6e <__metal_valid_interrupt_id+0x2c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:368
        return 1;
20015d52:	4785                	li	a5,1
20015d54:	00e79533          	sll	a0,a5,a4
20015d58:	77c5                	lui	a5,0xffff1
20015d5a:	88878793          	addi	a5,a5,-1912 # ffff0888 <metal_segment_heap_target_end+0x7ffee898>
20015d5e:	8d7d                	and	a0,a0,a5
20015d60:	00a03533          	snez	a0,a0
20015d64:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
20015d66:	f8050513          	addi	a0,a0,-128
20015d6a:	00153513          	seqz	a0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:374
}
20015d6e:	8082                	ret

20015d70 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:487
    void *priv) {
20015d70:	1101                	addi	sp,sp,-32
20015d72:	ca26                	sw	s1,20(sp)
20015d74:	84aa                	mv	s1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:491
    if (!__metal_valid_interrupt_id(id)) {
20015d76:	852e                	mv	a0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:487
    void *priv) {
20015d78:	cc22                	sw	s0,24(sp)
20015d7a:	c84a                	sw	s2,16(sp)
20015d7c:	c64e                	sw	s3,12(sp)
20015d7e:	ce06                	sw	ra,28(sp)
20015d80:	842e                	mv	s0,a1
20015d82:	89b2                	mv	s3,a2
20015d84:	8936                	mv	s2,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:491
    if (!__metal_valid_interrupt_id(id)) {
20015d86:	3f75                	jal	20015d42 <__metal_valid_interrupt_id>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:492
        return -11;
20015d88:	57d5                	li	a5,-11
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:491
    if (!__metal_valid_interrupt_id(id)) {
20015d8a:	c901                	beqz	a0,20015d9a <__metal_driver_riscv_cpu_controller_interrupt_register+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:494
    if ((id == METAL_INTERRUPT_ID_BEU) &&
20015d8c:	08000793          	li	a5,128
20015d90:	08f41b63          	bne	s0,a5,20015e26 <__metal_driver_riscv_cpu_controller_interrupt_register+0xb6>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:495 (discriminator 1)
        (__metal_controller_interrupt_vector_mode() != METAL_DIRECT_MODE)) {
20015d94:	3769                	jal	20015d1e <__metal_controller_interrupt_vector_mode>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:498 (discriminator 1)
        return -13;
20015d96:	57cd                	li	a5,-13
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:494 (discriminator 1)
    if ((id == METAL_INTERRUPT_ID_BEU) &&
20015d98:	cd35                	beqz	a0,20015e14 <__metal_driver_riscv_cpu_controller_interrupt_register+0xa4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:549
}
20015d9a:	40f2                	lw	ra,28(sp)
20015d9c:	4462                	lw	s0,24(sp)
20015d9e:	44d2                	lw	s1,20(sp)
20015da0:	4942                	lw	s2,16(sp)
20015da2:	49b2                	lw	s3,12(sp)
20015da4:	853e                	mv	a0,a5
20015da6:	6105                	addi	sp,sp,32
20015da8:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:503
            intc->metal_int_beu.handler = isr;
20015daa:	3934a823          	sw	s3,912(s1) # 80390 <__heap_size+0x7fb90>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:521
            intc->metal_int_beu.exint_data = priv;
20015dae:	3924ac23          	sw	s2,920(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:522
            break;
20015db2:	a809                	j	20015dc4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x54>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:506
            intc->metal_int_table[id].handler = isr;
20015db4:	45e1                	li	a1,24
20015db6:	02b40433          	mul	s0,s0,a1
20015dba:	9426                	add	s0,s0,s1
20015dbc:	09342823          	sw	s3,144(s0) # 80090 <__heap_size+0x7f890>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:507
            intc->metal_int_table[id].exint_data = priv;
20015dc0:	09242c23          	sw	s2,152(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:488
    int rc = 0;
20015dc4:	4781                	li	a5,0
20015dc6:	bfd1                	j	20015d9a <__metal_driver_riscv_cpu_controller_interrupt_register+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:510
        switch (id) {
20015dc8:	477d                	li	a4,31
20015dca:	57d1                	li	a5,-12
20015dcc:	fc8747e3          	blt	a4,s0,20015d9a <__metal_driver_riscv_cpu_controller_interrupt_register+0x2a>
20015dd0:	473d                	li	a4,15
20015dd2:	fc8754e3          	bge	a4,s0,20015d9a <__metal_driver_riscv_cpu_controller_interrupt_register+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:540
            intc->metal_int_table[id].handler =
20015dd6:	45e1                	li	a1,24
20015dd8:	02b40433          	mul	s0,s0,a1
20015ddc:	200157b7          	lui	a5,0x20015
20015de0:	2e878793          	addi	a5,a5,744 # 200152e8 <__metal_default_interrupt_handler>
20015de4:	9426                	add	s0,s0,s1
20015de6:	08f42823          	sw	a5,144(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:542
            intc->metal_int_table[id].sub_int = priv;
20015dea:	09242a23          	sw	s2,148(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:543
            break;
20015dee:	bfd9                	j	20015dc4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x54>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:512
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20015df0:	200157b7          	lui	a5,0x20015
20015df4:	fce78793          	addi	a5,a5,-50 # 20014fce <__metal_default_sw_handler>
20015df8:	0cf4ac23          	sw	a5,216(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:513
            intc->metal_int_table[id].sub_int = priv;
20015dfc:	0d24ae23          	sw	s2,220(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:514
            break;
20015e00:	b7d1                	j	20015dc4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x54>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:516
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20015e02:	200157b7          	lui	a5,0x20015
20015e06:	3c878793          	addi	a5,a5,968 # 200153c8 <__metal_default_timer_handler>
20015e0a:	12f4ac23          	sw	a5,312(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:517
            intc->metal_int_table[id].sub_int = priv;
20015e0e:	1324ae23          	sw	s2,316(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:518
            break;
20015e12:	bf4d                	j	20015dc4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x54>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:501
    if (isr) {
20015e14:	f8099be3          	bnez	s3,20015daa <__metal_driver_riscv_cpu_controller_interrupt_register+0x3a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:520
            intc->metal_int_beu.handler = __metal_default_beu_handler;
20015e18:	200157b7          	lui	a5,0x20015
20015e1c:	01278793          	addi	a5,a5,18 # 20015012 <__metal_default_beu_handler>
20015e20:	38f4a823          	sw	a5,912(s1)
20015e24:	b769                	j	20015dae <__metal_driver_riscv_cpu_controller_interrupt_register+0x3e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:501
    if (isr) {
20015e26:	f80997e3          	bnez	s3,20015db4 <__metal_driver_riscv_cpu_controller_interrupt_register+0x44>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:510
        switch (id) {
20015e2a:	47ad                	li	a5,11
20015e2c:	faf405e3          	beq	s0,a5,20015dd6 <__metal_driver_riscv_cpu_controller_interrupt_register+0x66>
20015e30:	f887cce3          	blt	a5,s0,20015dc8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x58>
20015e34:	478d                	li	a5,3
20015e36:	faf40de3          	beq	s0,a5,20015df0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x80>
20015e3a:	479d                	li	a5,7
20015e3c:	fcf403e3          	beq	s0,a5,20015e02 <__metal_driver_riscv_cpu_controller_interrupt_register+0x92>
20015e40:	57d1                	li	a5,-12
20015e42:	bfa1                	j	20015d9a <__metal_driver_riscv_cpu_controller_interrupt_register+0x2a>

20015e44 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:380
    if (!controller) {
20015e44:	c911                	beqz	a0,20015e58 <__metal_local_interrupt_enable+0x14>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:384
    switch (id) {
20015e46:	479d                	li	a5,7
20015e48:	04f58863          	beq	a1,a5,20015e98 <__metal_local_interrupt_enable+0x54>
20015e4c:	00b7e863          	bltu	a5,a1,20015e5c <__metal_local_interrupt_enable+0x18>
20015e50:	c58d                	beqz	a1,20015e7a <__metal_local_interrupt_enable+0x36>
20015e52:	478d                	li	a5,3
20015e54:	02f58d63          	beq	a1,a5,20015e8e <__metal_local_interrupt_enable+0x4a>
20015e58:	567d                	li	a2,-1
20015e5a:	a805                	j	20015e8a <__metal_local_interrupt_enable+0x46>
20015e5c:	47ad                	li	a5,11
20015e5e:	04f58063          	beq	a1,a5,20015e9e <__metal_local_interrupt_enable+0x5a>
20015e62:	ff058793          	addi	a5,a1,-16
20015e66:	473d                	li	a4,15
20015e68:	fef768e3          	bltu	a4,a5,20015e58 <__metal_local_interrupt_enable+0x14>
__metal_interrupt_local_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:102
    uintptr_t b = 1 << id;
20015e6c:	4785                	li	a5,1
20015e6e:	00b795b3          	sll	a1,a5,a1
__metal_local_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:429
        if (enable) {
20015e72:	ee0d                	bnez	a2,20015eac <__metal_local_interrupt_enable+0x68>
__metal_interrupt_local_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:110
    __asm__ volatile("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20015e74:	3045b5f3          	csrrc	a1,mie,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:111
}
20015e78:	a809                	j	20015e8a <__metal_local_interrupt_enable+0x46>
__metal_interrupt_global_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:47
    __asm__ volatile("csrrs %0, mstatus, %1"
20015e7a:	47a1                	li	a5,8
__metal_local_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:386
        if (enable) {
20015e7c:	c609                	beqz	a2,20015e86 <__metal_local_interrupt_enable+0x42>
__metal_interrupt_global_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:47
    __asm__ volatile("csrrs %0, mstatus, %1"
20015e7e:	3007a7f3          	csrrs	a5,mstatus,a5
__metal_local_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:378
    int rc = 0;
20015e82:	4601                	li	a2,0
__metal_interrupt_local_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:105
}
20015e84:	a019                	j	20015e8a <__metal_local_interrupt_enable+0x46>
__metal_interrupt_global_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:54
    __asm__ volatile("csrrc %0, mstatus, %1"
20015e86:	3007b7f3          	csrrc	a5,mstatus,a5
__metal_local_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:439
}
20015e8a:	8532                	mv	a0,a2
20015e8c:	8082                	ret
__metal_interrupt_software_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:61
    __asm__ volatile("csrrs %0, mie, %1"
20015e8e:	47a1                	li	a5,8
__metal_local_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:407
        if (enable) {
20015e90:	ca19                	beqz	a2,20015ea6 <__metal_local_interrupt_enable+0x62>
__metal_interrupt_external_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:89
    __asm__ volatile("csrrs %0, mie, %1"
20015e92:	3047a7f3          	csrrs	a5,mie,a5
20015e96:	b7f5                	j	20015e82 <__metal_local_interrupt_enable+0x3e>
__metal_interrupt_timer_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:75
    __asm__ volatile("csrrs %0, mie, %1"
20015e98:	08000793          	li	a5,128
20015e9c:	bfd5                	j	20015e90 <__metal_local_interrupt_enable+0x4c>
__metal_local_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:407
        if (enable) {
20015e9e:	6785                	lui	a5,0x1
20015ea0:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
20015ea4:	b7f5                	j	20015e90 <__metal_local_interrupt_enable+0x4c>
__metal_interrupt_external_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:96
    __asm__ volatile("csrrc %0, mie, %1"
20015ea6:	3047b7f3          	csrrc	a5,mie,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:99
}
20015eaa:	b7c5                	j	20015e8a <__metal_local_interrupt_enable+0x46>
__metal_interrupt_local_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:104
    __asm__ volatile("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20015eac:	3045a5f3          	csrrs	a1,mie,a1
20015eb0:	bfc9                	j	20015e82 <__metal_local_interrupt_enable+0x3e>

20015eb2 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:553
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20015eb2:	4605                	li	a2,1
20015eb4:	bf41                	j	20015e44 <__metal_local_interrupt_enable>

20015eb6 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:558
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20015eb6:	4601                	li	a2,0
20015eb8:	b771                	j	20015e44 <__metal_local_interrupt_enable>

20015eba <__metal_exception_register>:
__metal_exception_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:445
    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20015eba:	472d                	li	a4,11
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:442
                               metal_exception_handler_t isr) {
20015ebc:	87aa                	mv	a5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:449
    return -1;
20015ebe:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:445
    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20015ec0:	00b74a63          	blt	a4,a1,20015ed4 <__metal_exception_register+0x1a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:445 (discriminator 1)
20015ec4:	ca01                	beqz	a2,20015ed4 <__metal_exception_register+0x1a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:446
        intc->metal_exception_table[ecode] = isr;
20015ec6:	0e858593          	addi	a1,a1,232
20015eca:	058a                	slli	a1,a1,0x2
20015ecc:	95be                	add	a1,a1,a5
20015ece:	c190                	sw	a2,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:447
        return 0;
20015ed0:	4501                	li	a0,0
20015ed2:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:450
}
20015ed4:	8082                	ret

20015ed6 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:313
20015ed6:	800017b7          	lui	a5,0x80001
20015eda:	aac78793          	addi	a5,a5,-1364 # 80000aac <metal_segment_heap_target_end+0xffffeabc>
20015ede:	00a79763          	bne	a5,a0,20015eec <__metal_driver_cpu_exception_register+0x16>
__metal_driver_cpu_exception_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:804
        return __metal_exception_register((struct metal_interrupt *)intc, ecode,
20015ee2:	80000537          	lui	a0,0x80000
20015ee6:	0b850513          	addi	a0,a0,184 # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
20015eea:	bfc1                	j	20015eba <__metal_exception_register>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_cpu.c:808
}
20015eec:	557d                	li	a0,-1
20015eee:	8082                	ret

20015ef0 <__metal_driver_riscv_plic0_set_priority>:
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346


/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20015ef0:	800007b7          	lui	a5,0x80000
20015ef4:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
20015ef8:	00a79d63          	bne	a5,a0,20015f12 <__metal_driver_riscv_plic0_set_priority+0x22>
__metal_driver_riscv_plic0_set_priority():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:64
                                            int id, unsigned int priority) {
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
        (struct metal_interrupt *)controller);
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority(
        (struct metal_interrupt *)controller);
    if ((max_priority) && (priority < max_priority)) {
20015efc:	4799                	li	a5,6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:71
            (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                               (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) =
            priority;
        return 0;
    }
    return -1;
20015efe:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:64
    if ((max_priority) && (priority < max_priority)) {
20015f00:	00c7ea63          	bltu	a5,a2,20015f14 <__metal_driver_riscv_plic0_set_priority+0x24>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:65
        __METAL_ACCESS_ONCE(
20015f04:	0c0007b7          	lui	a5,0xc000
20015f08:	058a                	slli	a1,a1,0x2
20015f0a:	95be                	add	a1,a1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:67
                               (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) =
20015f0c:	c190                	sw	a2,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:69
        return 0;
20015f0e:	4501                	li	a0,0
20015f10:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:71
    return -1;
20015f12:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:72
}
20015f14:	8082                	ret

20015f16 <__metal_driver_riscv_plic0_get_priority>:
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
20015f16:	800007b7          	lui	a5,0x80000
20015f1a:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
20015f1e:	00a78763          	beq	a5,a0,20015f2c <__metal_driver_riscv_plic0_get_priority+0x16>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:350
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
	}
	else {
		return 0;
20015f22:	4781                	li	a5,0
__metal_driver_riscv_plic0_get_priority():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:80
__metal_driver_riscv_plic0_get_priority(struct metal_interrupt *controller,
                                        int id) {
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);

    return __METAL_ACCESS_ONCE(
20015f24:	058a                	slli	a1,a1,0x2
20015f26:	95be                	add	a1,a1,a5
20015f28:	4188                	lw	a0,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:83
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                           (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
20015f2a:	8082                	ret
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:347
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20015f2c:	0c0007b7          	lui	a5,0xc000
20015f30:	bfd5                	j	20015f24 <__metal_driver_riscv_plic0_get_priority+0xe>

20015f32 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:105
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));

    return 0;
}

void __metal_plic0_default_handler(int id, void *priv) { metal_shutdown(300); }
20015f32:	1141                	addi	sp,sp,-16
20015f34:	12c00513          	li	a0,300
20015f38:	c606                	sw	ra,12(sp)
20015f3a:	683000ef          	jal	ra,20016dbc <metal_shutdown>

20015f3e <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:167
    }
}

int __metal_driver_riscv_plic0_register(struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv) {
20015f3e:	1101                	addi	sp,sp,-32
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20015f40:	800007b7          	lui	a5,0x80000
__metal_driver_riscv_plic0_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:167
20015f44:	cc22                	sw	s0,24(sp)
20015f46:	ca26                	sw	s1,20(sp)
20015f48:	c64e                	sw	s3,12(sp)
20015f4a:	c452                	sw	s4,8(sp)
20015f4c:	ce06                	sw	ra,28(sp)
20015f4e:	c84a                	sw	s2,16(sp)
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
20015f50:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_driver_riscv_plic0_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:167
20015f54:	842a                	mv	s0,a0
20015f56:	84ae                	mv	s1,a1
20015f58:	8a32                	mv	s4,a2
20015f5a:	89b6                	mv	s3,a3
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:370
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
	}
	else {
		return 0;
20015f5c:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20015f5e:	00f51463          	bne	a0,a5,20015f66 <__metal_driver_riscv_plic0_register+0x28>
20015f62:	03500713          	li	a4,53
__metal_driver_riscv_plic0_register():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:171
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
        return -1;
20015f66:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:170
    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20015f68:	02e4d463          	bge	s1,a4,20015f90 <__metal_driver_riscv_plic0_register+0x52>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:174
    }

    if (isr) {
20015f6c:	00249913          	slli	s2,s1,0x2
20015f70:	020a0863          	beqz	s4,20015fa0 <__metal_driver_riscv_plic0_register+0x62>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:175
        __metal_driver_riscv_plic0_set_priority(controller, id, 2);
20015f74:	85a6                	mv	a1,s1
20015f76:	8522                	mv	a0,s0
20015f78:	4609                	li	a2,2
20015f7a:	3f9d                	jal	20015ef0 <__metal_driver_riscv_plic0_set_priority>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:177
        plic->metal_exint_table[id] = isr;
        plic->metal_exdata_table[id].exint_data = priv;
20015f7c:	45e1                	li	a1,24
20015f7e:	02b484b3          	mul	s1,s1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:176
        plic->metal_exint_table[id] = isr;
20015f82:	9922                	add	s2,s2,s0
20015f84:	01492423          	sw	s4,8(s2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:177
        plic->metal_exdata_table[id].exint_data = priv;
20015f88:	9426                	add	s0,s0,s1
20015f8a:	0f342823          	sw	s3,240(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:181
    } else {
        __metal_driver_riscv_plic0_set_priority(controller, id, 1);
        plic->metal_exint_table[id] = __metal_plic0_default_handler;
        plic->metal_exdata_table[id].sub_int = priv;
20015f8e:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:185
    }

    return 0;
}
20015f90:	40f2                	lw	ra,28(sp)
20015f92:	4462                	lw	s0,24(sp)
20015f94:	44d2                	lw	s1,20(sp)
20015f96:	4942                	lw	s2,16(sp)
20015f98:	49b2                	lw	s3,12(sp)
20015f9a:	4a22                	lw	s4,8(sp)
20015f9c:	6105                	addi	sp,sp,32
20015f9e:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:179
        __metal_driver_riscv_plic0_set_priority(controller, id, 1);
20015fa0:	85a6                	mv	a1,s1
20015fa2:	8522                	mv	a0,s0
20015fa4:	4605                	li	a2,1
20015fa6:	37a9                	jal	20015ef0 <__metal_driver_riscv_plic0_set_priority>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:181
        plic->metal_exdata_table[id].sub_int = priv;
20015fa8:	45e1                	li	a1,24
20015faa:	02b484b3          	mul	s1,s1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:180
        plic->metal_exint_table[id] = __metal_plic0_default_handler;
20015fae:	200167b7          	lui	a5,0x20016
20015fb2:	9922                	add	s2,s2,s0
20015fb4:	f3278793          	addi	a5,a5,-206 # 20015f32 <__metal_plic0_default_handler>
20015fb8:	00f92423          	sw	a5,8(s2)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:181
        plic->metal_exdata_table[id].sub_int = priv;
20015fbc:	9426                	add	s0,s0,s1
20015fbe:	0f342623          	sw	s3,236(s0)
20015fc2:	b7f1                	j	20015f8e <__metal_driver_riscv_plic0_register+0x50>

20015fc4 <__metal_plic0_claim_interrupt>:
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20015fc4:	800007b7          	lui	a5,0x80000
20015fc8:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:350
		return 0;
20015fcc:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20015fce:	00a79463          	bne	a5,a0,20015fd6 <__metal_plic0_claim_interrupt+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:347
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20015fd2:	0c000737          	lui	a4,0xc000
__metal_plic0_claim_interrupt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:21
    return __METAL_ACCESS_ONCE(
20015fd6:	002007b7          	lui	a5,0x200
20015fda:	0791                	addi	a5,a5,4
20015fdc:	05b2                	slli	a1,a1,0xc
20015fde:	95be                	add	a1,a1,a5
20015fe0:	95ba                	add	a1,a1,a4
20015fe2:	4188                	lw	a0,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:25
}
20015fe4:	8082                	ret

20015fe6 <__metal_plic0_complete_interrupt>:
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20015fe6:	800007b7          	lui	a5,0x80000
20015fea:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:347
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20015fee:	0c000737          	lui	a4,0xc000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20015ff2:	00a78363          	beq	a5,a0,20015ff8 <__metal_plic0_complete_interrupt+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:350
		return 0;
20015ff6:	4701                	li	a4,0
__metal_plic0_complete_interrupt():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:31
    __METAL_ACCESS_ONCE(
20015ff8:	002007b7          	lui	a5,0x200
20015ffc:	05b2                	slli	a1,a1,0xc
20015ffe:	0791                	addi	a5,a5,4
20016000:	95be                	add	a1,a1,a5
20016002:	95ba                	add	a1,a1,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:34
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM)) = id;
20016004:	c190                	sw	a2,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:35
}
20016006:	8082                	ret

20016008 <__metal_plic0_handler>:
__metal_plic0_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:107
void __metal_plic0_handler(int id, void *priv) {
20016008:	1101                	addi	sp,sp,-32
2001600a:	ce06                	sw	ra,28(sp)
2001600c:	cc22                	sw	s0,24(sp)
2001600e:	ca26                	sw	s1,20(sp)
20016010:	842e                	mv	s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:110
        __metal_driver_sifive_plic0_context_ids(__metal_myhart_id());
20016012:	bdcff0ef          	jal	ra,200153ee <__metal_myhart_id>
__metal_driver_sifive_plic0_context_ids():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:406
	}
}

static __inline__ int __metal_driver_sifive_plic0_context_ids(int hartid)
{
	if (hartid == 0) {
20016016:	00a034b3          	snez	s1,a0
2001601a:	409004b3          	neg	s1,s1
__metal_plic0_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:111
    unsigned int idx = __metal_plic0_claim_interrupt(plic, contextid);
2001601e:	85a6                	mv	a1,s1
20016020:	8522                	mv	a0,s0
20016022:	374d                	jal	20015fc4 <__metal_plic0_claim_interrupt>
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20016024:	800007b7          	lui	a5,0x80000
20016028:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_plic0_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:111
2001602c:	862a                	mv	a2,a0
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
2001602e:	02f41463          	bne	s0,a5,20016056 <__metal_plic0_handler+0x4e>
__metal_plic0_handler():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:115
    if ((idx < num_interrupts) && (plic->metal_exint_table[idx])) {
20016032:	03400793          	li	a5,52
20016036:	02a7e063          	bltu	a5,a0,20016056 <__metal_plic0_handler+0x4e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
2001603a:	00251793          	slli	a5,a0,0x2
2001603e:	97a2                	add	a5,a5,s0
20016040:	4798                	lw	a4,8(a5)
20016042:	cb11                	beqz	a4,20016056 <__metal_plic0_handler+0x4e>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:116
        plic->metal_exint_table[idx](idx,
20016044:	47e1                	li	a5,24
20016046:	02f507b3          	mul	a5,a0,a5
2001604a:	c62a                	sw	a0,12(sp)
2001604c:	97a2                	add	a5,a5,s0
2001604e:	0f07a583          	lw	a1,240(a5)
20016052:	9702                	jalr	a4
20016054:	4632                	lw	a2,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:120
    __metal_plic0_complete_interrupt(plic, contextid, idx);
20016056:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:121
}
20016058:	4462                	lw	s0,24(sp)
2001605a:	40f2                	lw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:120
    __metal_plic0_complete_interrupt(plic, contextid, idx);
2001605c:	85a6                	mv	a1,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:121
}
2001605e:	44d2                	lw	s1,20(sp)
20016060:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:120
    __metal_plic0_complete_interrupt(plic, contextid, idx);
20016062:	b751                	j	20015fe6 <__metal_plic0_complete_interrupt>

20016064 <__metal_plic0_set_threshold>:
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20016064:	800007b7          	lui	a5,0x80000
20016068:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:347
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
2001606c:	0c000737          	lui	a4,0xc000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20016070:	00a78363          	beq	a5,a0,20016076 <__metal_plic0_set_threshold+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:350
		return 0;
20016074:	4701                	li	a4,0
__metal_plic0_set_threshold():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:41
    __METAL_ACCESS_ONCE(
20016076:	002007b7          	lui	a5,0x200
2001607a:	05b2                	slli	a1,a1,0xc
2001607c:	95be                	add	a1,a1,a5
2001607e:	95ba                	add	a1,a1,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:44
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD)) = threshold;
20016080:	c190                	sw	a2,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:46
}
20016082:	4501                	li	a0,0
20016084:	8082                	ret

20016086 <__metal_driver_riscv_plic0_set_threshold>:
__metal_driver_riscv_plic0_set_threshold():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:211
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_DISABLE);
    return 0;
}

int __metal_driver_riscv_plic0_set_threshold(struct metal_interrupt *controller,
                                             unsigned int threshold) {
20016086:	1101                	addi	sp,sp,-32
20016088:	cc22                	sw	s0,24(sp)
2001608a:	ce06                	sw	ra,28(sp)
2001608c:	842a                	mv	s0,a0
2001608e:	c62e                	sw	a1,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:212
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
20016090:	b5eff0ef          	jal	ra,200153ee <__metal_myhart_id>
20016094:	85aa                	mv	a1,a0
20016096:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:214
                                       threshold);
}
20016098:	4462                	lw	s0,24(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:212
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
2001609a:	4632                	lw	a2,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:214
}
2001609c:	40f2                	lw	ra,28(sp)
2001609e:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:212
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
200160a0:	b7d1                	j	20016064 <__metal_plic0_set_threshold>

200160a2 <__metal_driver_riscv_plic0_affinity_set_threshold>:
__metal_driver_riscv_plic0_affinity_set_threshold():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:269
    return ret;
}

metal_affinity __metal_driver_riscv_plic0_affinity_set_threshold(
    struct metal_interrupt *controller, metal_affinity bitmask,
    unsigned int threshold) {
200160a2:	1101                	addi	sp,sp,-32
200160a4:	cc22                	sw	s0,24(sp)
200160a6:	ca26                	sw	s1,20(sp)
200160a8:	c84a                	sw	s2,16(sp)
200160aa:	c64e                	sw	s3,12(sp)
200160ac:	c452                	sw	s4,8(sp)
200160ae:	ce06                	sw	ra,28(sp)
200160b0:	89aa                	mv	s3,a0
200160b2:	8a32                	mv	s4,a2
200160b4:	842e                	mv	s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:270
    metal_affinity ret = {0};
200160b6:	4901                	li	s2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:273
    int context;

    for_each_metal_affinity(context, bitmask) {
200160b8:	4481                	li	s1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 1)
200160ba:	e811                	bnez	s0,200160ce <__metal_driver_riscv_plic0_affinity_set_threshold+0x2c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:281
                ret, context,
                __metal_plic0_set_threshold(controller, context, threshold));
    }

    return ret;
}
200160bc:	40f2                	lw	ra,28(sp)
200160be:	4462                	lw	s0,24(sp)
200160c0:	44d2                	lw	s1,20(sp)
200160c2:	49b2                	lw	s3,12(sp)
200160c4:	4a22                	lw	s4,8(sp)
200160c6:	854a                	mv	a0,s2
200160c8:	4942                	lw	s2,16(sp)
200160ca:	6105                	addi	sp,sp,32
200160cc:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:274
        if (context != 0)
200160ce:	c899                	beqz	s1,200160e4 <__metal_driver_riscv_plic0_affinity_set_threshold+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:275
            metal_affinity_set_bit(
200160d0:	8652                	mv	a2,s4
200160d2:	85a6                	mv	a1,s1
200160d4:	854e                	mv	a0,s3
200160d6:	3779                	jal	20016064 <__metal_plic0_set_threshold>
200160d8:	00157793          	andi	a5,a0,1
200160dc:	009797b3          	sll	a5,a5,s1
200160e0:	00f96933          	or	s2,s2,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
200160e4:	0485                	addi	s1,s1,1
200160e6:	8005                	srli	s0,s0,0x1
200160e8:	bfc9                	j	200160ba <__metal_driver_riscv_plic0_affinity_set_threshold+0x18>

200160ea <__metal_plic0_get_threshold>:
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200160ea:	800007b7          	lui	a5,0x80000
200160ee:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
200160f2:	00a78a63          	beq	a5,a0,20016106 <__metal_plic0_get_threshold+0x1c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:350
		return 0;
200160f6:	4781                	li	a5,0
__metal_plic0_get_threshold():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:52
    return __METAL_ACCESS_ONCE(
200160f8:	00200737          	lui	a4,0x200
200160fc:	05b2                	slli	a1,a1,0xc
200160fe:	95ba                	add	a1,a1,a4
20016100:	95be                	add	a1,a1,a5
20016102:	4188                	lw	a0,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:56
}
20016104:	8082                	ret
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:347
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20016106:	0c0007b7          	lui	a5,0xc000
2001610a:	b7fd                	j	200160f8 <__metal_plic0_get_threshold+0xe>

2001610c <__metal_driver_riscv_plic0_get_threshold>:
__metal_driver_riscv_plic0_get_threshold():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:217
__metal_driver_riscv_plic0_get_threshold(struct metal_interrupt *controller) {
2001610c:	1141                	addi	sp,sp,-16
2001610e:	c422                	sw	s0,8(sp)
20016110:	c606                	sw	ra,12(sp)
20016112:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:218
    return __metal_plic0_get_threshold(controller, __metal_myhart_id());
20016114:	adaff0ef          	jal	ra,200153ee <__metal_myhart_id>
20016118:	85aa                	mv	a1,a0
2001611a:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:219
}
2001611c:	4422                	lw	s0,8(sp)
2001611e:	40b2                	lw	ra,12(sp)
20016120:	0141                	addi	sp,sp,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:218
    return __metal_plic0_get_threshold(controller, __metal_myhart_id());
20016122:	b7e1                	j	200160ea <__metal_plic0_get_threshold>

20016124 <__metal_driver_riscv_plic0_affinity_get_threshold>:
__metal_driver_riscv_plic0_affinity_get_threshold():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:284

unsigned int __metal_driver_riscv_plic0_affinity_get_threshold(
    struct metal_interrupt *controller, int context_id) {
20016124:	1141                	addi	sp,sp,-16
20016126:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:285
    __metal_plic0_get_threshold(controller, context_id);
20016128:	37c9                	jal	200160ea <__metal_plic0_get_threshold>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:287
    return 0;
}
2001612a:	40b2                	lw	ra,12(sp)
2001612c:	4501                	li	a0,0
2001612e:	0141                	addi	sp,sp,16
20016130:	8082                	ret

20016132 <__metal_plic0_enable>:
__metal_driver_sifive_plic0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20016132:	80000737          	lui	a4,0x80000
20016136:	48870713          	addi	a4,a4,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:347
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
2001613a:	0c000837          	lui	a6,0xc000
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:346
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2001613e:	00a70363          	beq	a4,a0,20016144 <__metal_plic0_enable+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:350
		return 0;
20016142:	4801                	li	a6,0
__metal_plic0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:91
    current = __METAL_ACCESS_ONCE(
20016144:	40565793          	srai	a5,a2,0x5
20016148:	059e                	slli	a1,a1,0x7
2001614a:	078a                	slli	a5,a5,0x2
2001614c:	97ae                	add	a5,a5,a1
2001614e:	6709                	lui	a4,0x2
20016150:	97ba                	add	a5,a5,a4
20016152:	97c2                	add	a5,a5,a6
20016154:	438c                	lw	a1,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:99
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20016156:	4705                	li	a4,1
20016158:	00c71633          	sll	a2,a4,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:100
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2001615c:	c689                	beqz	a3,20016166 <__metal_plic0_enable+0x34>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 1)
2001615e:	8e4d                	or	a2,a2,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:98
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20016160:	c390                	sw	a2,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:103
}
20016162:	4501                	li	a0,0
20016164:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 2)
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20016166:	fff64613          	not	a2,a2
2001616a:	8e6d                	and	a2,a2,a1
2001616c:	bfd5                	j	20016160 <__metal_plic0_enable+0x2e>

2001616e <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:123
void __metal_driver_riscv_plic0_init(struct metal_interrupt *controller) {
2001616e:	7179                	addi	sp,sp,-48
20016170:	d04a                	sw	s2,32(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:126
    if (!plic->init_done) {
20016172:	00452903          	lw	s2,4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:123
void __metal_driver_riscv_plic0_init(struct metal_interrupt *controller) {
20016176:	d606                	sw	ra,44(sp)
20016178:	d422                	sw	s0,40(sp)
2001617a:	d226                	sw	s1,36(sp)
2001617c:	ce4e                	sw	s3,28(sp)
2001617e:	cc52                	sw	s4,24(sp)
20016180:	ca56                	sw	s5,20(sp)
20016182:	c85a                	sw	s6,16(sp)
20016184:	c65e                	sw	s7,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:126
    if (!plic->init_done) {
20016186:	00090d63          	beqz	s2,200161a0 <__metal_driver_riscv_plic0_init+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:163
}
2001618a:	50b2                	lw	ra,44(sp)
2001618c:	5422                	lw	s0,40(sp)
2001618e:	5492                	lw	s1,36(sp)
20016190:	5902                	lw	s2,32(sp)
20016192:	49f2                	lw	s3,28(sp)
20016194:	4a62                	lw	s4,24(sp)
20016196:	4ad2                	lw	s5,20(sp)
20016198:	4b42                	lw	s6,16(sp)
2001619a:	4bb2                	lw	s7,12(sp)
2001619c:	6145                	addi	sp,sp,48
2001619e:	8082                	ret
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200161a0:	800007b7          	lui	a5,0x80000
200161a4:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
200161a8:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:367
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
200161aa:	03500b13          	li	s6,53
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200161ae:	00f50363          	beq	a0,a5,200161b4 <__metal_driver_riscv_plic0_init+0x46>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:370
		return 0;
200161b2:	4b01                	li	s6,0
__metal_driver_riscv_plic0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:139
            intc->vtable->interrupt_init(intc);
200161b4:	800004b7          	lui	s1,0x80000
200161b8:	0b84a783          	lw	a5,184(s1) # 800000b8 <metal_segment_heap_target_end+0xffffe0c8>
200161bc:	0b848513          	addi	a0,s1,184
200161c0:	00840a93          	addi	s5,s0,8
200161c4:	439c                	lw	a5,0(a5)
200161c6:	0ec40993          	addi	s3,s0,236
200161ca:	0b848a13          	addi	s4,s1,184
200161ce:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:141
            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
200161d0:	40000b93          	li	s7,1024
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:142
                __metal_plic0_enable(plic, parent, i, METAL_DISABLE);
200161d4:	4681                	li	a3,0
200161d6:	864a                	mv	a2,s2
200161d8:	4581                	li	a1,0
200161da:	8522                	mv	a0,s0
200161dc:	3f99                	jal	20016132 <__metal_plic0_enable>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:143
                if (i < num_interrupts) {
200161de:	01695c63          	bge	s2,s6,200161f6 <__metal_driver_riscv_plic0_init+0x88>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:144
                    __metal_driver_riscv_plic0_set_priority(controller, i, 0);
200161e2:	4601                	li	a2,0
200161e4:	85ca                	mv	a1,s2
200161e6:	8522                	mv	a0,s0
200161e8:	3321                	jal	20015ef0 <__metal_driver_riscv_plic0_set_priority>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:145
                    plic->metal_exint_table[i] = NULL;
200161ea:	000aa023          	sw	zero,0(s5) # 800000 <__heap_size+0x7ff800>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:146
                    plic->metal_exdata_table[i].sub_int = NULL;
200161ee:	0009a023          	sw	zero,0(s3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:147
                    plic->metal_exdata_table[i].exint_data = NULL;
200161f2:	0009a223          	sw	zero,4(s3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:141
            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
200161f6:	0905                	addi	s2,s2,1
200161f8:	0a91                	addi	s5,s5,4
200161fa:	09e1                	addi	s3,s3,24
200161fc:	fd791ce3          	bne	s2,s7,200161d4 <__metal_driver_riscv_plic0_init+0x66>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:151
            __metal_plic0_set_threshold(controller, parent, 0);
20016200:	4601                	li	a2,0
20016202:	4581                	li	a1,0
20016204:	8522                	mv	a0,s0
20016206:	3db9                	jal	20016064 <__metal_plic0_set_threshold>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:154
            intc->vtable->interrupt_register(intc, line, NULL, plic);
20016208:	000a2783          	lw	a5,0(s4)
2001620c:	86a2                	mv	a3,s0
2001620e:	4601                	li	a2,0
20016210:	4fdc                	lw	a5,28(a5)
20016212:	45ad                	li	a1,11
20016214:	0b848513          	addi	a0,s1,184
20016218:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:156
            intc->vtable->interrupt_register(intc, line, __metal_plic0_handler,
2001621a:	000a2783          	lw	a5,0(s4)
2001621e:	20016637          	lui	a2,0x20016
20016222:	86a2                	mv	a3,s0
20016224:	4fdc                	lw	a5,28(a5)
20016226:	00860613          	addi	a2,a2,8 # 20016008 <__metal_plic0_handler>
2001622a:	45ad                	li	a1,11
2001622c:	0b848513          	addi	a0,s1,184
20016230:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:159
            intc->vtable->interrupt_enable(intc, line);
20016232:	000a2783          	lw	a5,0(s4)
20016236:	45ad                	li	a1,11
20016238:	0b848513          	addi	a0,s1,184
2001623c:	53dc                	lw	a5,36(a5)
2001623e:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:161
        plic->init_done = 1;
20016240:	4785                	li	a5,1
20016242:	c05c                	sw	a5,4(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:163
}
20016244:	b799                	j	2001618a <__metal_driver_riscv_plic0_init+0x1c>

20016246 <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:188
                                      int id) {
20016246:	1101                	addi	sp,sp,-32
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20016248:	800007b7          	lui	a5,0x80000
__metal_driver_riscv_plic0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:188
2001624c:	cc22                	sw	s0,24(sp)
2001624e:	ce06                	sw	ra,28(sp)
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
20016250:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_driver_riscv_plic0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:188
20016254:	842a                	mv	s0,a0
20016256:	862e                	mv	a2,a1
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:370
		return 0;
20016258:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2001625a:	00f51463          	bne	a0,a5,20016262 <__metal_driver_riscv_plic0_enable+0x1c>
2001625e:	03500713          	li	a4,53
__metal_driver_riscv_plic0_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:191
    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20016262:	c632                	sw	a2,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:192
        return -1;
20016264:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:191
    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20016266:	00e65a63          	bge	a2,a4,2001627a <__metal_driver_riscv_plic0_enable+0x34>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:195
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_ENABLE);
2001626a:	984ff0ef          	jal	ra,200153ee <__metal_myhart_id>
2001626e:	4632                	lw	a2,12(sp)
20016270:	85aa                	mv	a1,a0
20016272:	4685                	li	a3,1
20016274:	8522                	mv	a0,s0
20016276:	3d75                	jal	20016132 <__metal_plic0_enable>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:196
    return 0;
20016278:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:197
}
2001627a:	40f2                	lw	ra,28(sp)
2001627c:	4462                	lw	s0,24(sp)
2001627e:	6105                	addi	sp,sp,32
20016280:	8082                	ret

20016282 <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:200
                                       int id) {
20016282:	1101                	addi	sp,sp,-32
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
20016284:	800007b7          	lui	a5,0x80000
__metal_driver_riscv_plic0_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:200
20016288:	cc22                	sw	s0,24(sp)
2001628a:	ce06                	sw	ra,28(sp)
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
2001628c:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_driver_riscv_plic0_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:200
20016290:	842a                	mv	s0,a0
20016292:	862e                	mv	a2,a1
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:370
		return 0;
20016294:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20016296:	00f51463          	bne	a0,a5,2001629e <__metal_driver_riscv_plic0_disable+0x1c>
2001629a:	03500713          	li	a4,53
__metal_driver_riscv_plic0_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:203
    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2001629e:	c632                	sw	a2,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:204
        return -1;
200162a0:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:203
    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
200162a2:	00e65a63          	bge	a2,a4,200162b6 <__metal_driver_riscv_plic0_disable+0x34>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:206
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_DISABLE);
200162a6:	948ff0ef          	jal	ra,200153ee <__metal_myhart_id>
200162aa:	4632                	lw	a2,12(sp)
200162ac:	85aa                	mv	a1,a0
200162ae:	4681                	li	a3,0
200162b0:	8522                	mv	a0,s0
200162b2:	3541                	jal	20016132 <__metal_plic0_enable>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:207
    return 0;
200162b4:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:208
}
200162b6:	40f2                	lw	ra,28(sp)
200162b8:	4462                	lw	s0,24(sp)
200162ba:	6105                	addi	sp,sp,32
200162bc:	8082                	ret

200162be <__metal_driver_riscv_plic0_affinity_enable>:
__metal_driver_riscv_plic0_affinity_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:223
                                           metal_affinity bitmask, int id) {
200162be:	1101                	addi	sp,sp,-32
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
200162c0:	800007b7          	lui	a5,0x80000
__metal_driver_riscv_plic0_affinity_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:223
200162c4:	cc22                	sw	s0,24(sp)
200162c6:	c64e                	sw	s3,12(sp)
200162c8:	c452                	sw	s4,8(sp)
200162ca:	ce06                	sw	ra,28(sp)
200162cc:	ca26                	sw	s1,20(sp)
200162ce:	c84a                	sw	s2,16(sp)
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
200162d0:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_driver_riscv_plic0_affinity_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:223
200162d4:	89aa                	mv	s3,a0
200162d6:	842e                	mv	s0,a1
200162d8:	8a32                	mv	s4,a2
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:370
		return 0;
200162da:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
200162dc:	00f51463          	bne	a0,a5,200162e4 <__metal_driver_riscv_plic0_affinity_enable+0x26>
200162e0:	03500713          	li	a4,53
__metal_driver_riscv_plic0_affinity_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:231
        return ret;
200162e4:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:229
    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
200162e6:	00ea5663          	bge	s4,a4,200162f2 <__metal_driver_riscv_plic0_affinity_enable+0x34>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:224
    metal_affinity ret = {0};
200162ea:	4481                	li	s1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:234
    for_each_metal_affinity(context, bitmask) {
200162ec:	4901                	li	s2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 1)
200162ee:	e811                	bnez	s0,20016302 <__metal_driver_riscv_plic0_affinity_enable+0x44>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:241
    return ret;
200162f0:	8526                	mv	a0,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:242
}
200162f2:	40f2                	lw	ra,28(sp)
200162f4:	4462                	lw	s0,24(sp)
200162f6:	44d2                	lw	s1,20(sp)
200162f8:	4942                	lw	s2,16(sp)
200162fa:	49b2                	lw	s3,12(sp)
200162fc:	4a22                	lw	s4,8(sp)
200162fe:	6105                	addi	sp,sp,32
20016300:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:235
        if (context != 0)
20016302:	00090c63          	beqz	s2,2001631a <__metal_driver_riscv_plic0_affinity_enable+0x5c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:236
            metal_affinity_set_bit(
20016306:	4685                	li	a3,1
20016308:	8652                	mv	a2,s4
2001630a:	85ca                	mv	a1,s2
2001630c:	854e                	mv	a0,s3
2001630e:	3515                	jal	20016132 <__metal_plic0_enable>
20016310:	00157793          	andi	a5,a0,1
20016314:	012797b3          	sll	a5,a5,s2
20016318:	8cdd                	or	s1,s1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
2001631a:	0905                	addi	s2,s2,1
2001631c:	8005                	srli	s0,s0,0x1
2001631e:	bfc1                	j	200162ee <__metal_driver_riscv_plic0_affinity_enable+0x30>

20016320 <__metal_driver_riscv_plic0_affinity_disable>:
__metal_driver_riscv_plic0_affinity_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:246
                                            metal_affinity bitmask, int id) {
20016320:	1101                	addi	sp,sp,-32
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
20016322:	800007b7          	lui	a5,0x80000
__metal_driver_riscv_plic0_affinity_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:246
20016326:	cc22                	sw	s0,24(sp)
20016328:	c64e                	sw	s3,12(sp)
2001632a:	c452                	sw	s4,8(sp)
2001632c:	ce06                	sw	ra,28(sp)
2001632e:	ca26                	sw	s1,20(sp)
20016330:	c84a                	sw	s2,16(sp)
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
20016332:	48878793          	addi	a5,a5,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_driver_riscv_plic0_affinity_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:246
20016336:	89aa                	mv	s3,a0
20016338:	842e                	mv	s0,a1
2001633a:	8a32                	mv	s4,a2
__metal_driver_sifive_plic0_num_interrupts():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:370
		return 0;
2001633c:	4701                	li	a4,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:366
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
2001633e:	00f51463          	bne	a0,a5,20016346 <__metal_driver_riscv_plic0_affinity_disable+0x26>
20016342:	03500713          	li	a4,53
__metal_driver_riscv_plic0_affinity_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:254
        return ret;
20016346:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:252
    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20016348:	00ea5663          	bge	s4,a4,20016354 <__metal_driver_riscv_plic0_affinity_disable+0x34>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:247
    metal_affinity ret = {0};
2001634c:	4481                	li	s1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:257
    for_each_metal_affinity(context, bitmask) {
2001634e:	4901                	li	s2,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 1)
20016350:	e811                	bnez	s0,20016364 <__metal_driver_riscv_plic0_affinity_disable+0x44>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:264
    return ret;
20016352:	8526                	mv	a0,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:265
}
20016354:	40f2                	lw	ra,28(sp)
20016356:	4462                	lw	s0,24(sp)
20016358:	44d2                	lw	s1,20(sp)
2001635a:	4942                	lw	s2,16(sp)
2001635c:	49b2                	lw	s3,12(sp)
2001635e:	4a22                	lw	s4,8(sp)
20016360:	6105                	addi	sp,sp,32
20016362:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:258
        if (context != 0)
20016364:	00090c63          	beqz	s2,2001637c <__metal_driver_riscv_plic0_affinity_disable+0x5c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:259
            metal_affinity_set_bit(
20016368:	4681                	li	a3,0
2001636a:	8652                	mv	a2,s4
2001636c:	85ca                	mv	a1,s2
2001636e:	854e                	mv	a0,s3
20016370:	33c9                	jal	20016132 <__metal_plic0_enable>
20016372:	00157793          	andi	a5,a0,1
20016376:	012797b3          	sll	a5,a5,s2
2001637a:	8cdd                	or	s1,s1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
2001637c:	0905                	addi	s2,s2,1
2001637e:	8005                	srli	s0,s0,0x1
20016380:	bfc1                	j	20016350 <__metal_driver_riscv_plic0_affinity_disable+0x30>

20016382 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26
        __metal_driver_sifive_fe310_g000_hfrosc_config_offset(clock);
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
        __metal_driver_sifive_fe310_g000_hfrosc_config_base(clock);
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
        __metal_driver_sifive_fe310_g000_prci_vtable();
    long cfg = vtable->get_reg(config_base, config_offset);
20016382:	200117b7          	lui	a5,0x20011
20016386:	6687a783          	lw	a5,1640(a5) # 20011668 <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:17
    const struct metal_clock *clock) {
2001638a:	1141                	addi	sp,sp,-16
2001638c:	c422                	sw	s0,8(sp)
2001638e:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26
    long cfg = vtable->get_reg(config_base, config_offset);
20016390:	4581                	li	a1,0
20016392:	81818513          	addi	a0,gp,-2024 # 80000ab8 <__metal_dt_prci_10008000>
20016396:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28

    if ((cfg & CONFIG_ENABLE) == 0)
20016398:	400007b7          	lui	a5,0x40000
2001639c:	8fe9                	and	a5,a5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:26
    long cfg = vtable->get_reg(config_base, config_offset);
2001639e:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:29
        return -1;
200163a0:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:28
    if ((cfg & CONFIG_ENABLE) == 0)
200163a2:	cf91                	beqz	a5,200163be <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x3c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:30
    if ((cfg & CONFIG_READY) == 0)
200163a4:	00045d63          	bgez	s0,200163be <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz+0x3c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:32
        return -1;
    return metal_clock_get_rate_hz(ref) / ((cfg & CONFIG_DIVIDER) + 1);
200163a8:	80000537          	lui	a0,0x80000
200163ac:	07850513          	addi	a0,a0,120 # 80000078 <metal_segment_heap_target_end+0xffffe088>
200163b0:	03f47413          	andi	s0,s0,63
200163b4:	1b9000ef          	jal	ra,20016d6c <metal_clock_get_rate_hz>
200163b8:	0405                	addi	s0,s0,1
200163ba:	02855533          	divu	a0,a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:33
}
200163be:	40b2                	lw	ra,12(sp)
200163c0:	4422                	lw	s0,8(sp)
200163c2:	0141                	addi	sp,sp,16
200163c4:	8082                	ret

200163c6 <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfrosc.c:37

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(
    struct metal_clock *clock, long rate) {
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
200163c6:	bf75                	j	20016382 <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>

200163c8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24
        __metal_driver_sifive_fe310_g000_hfxosc_config_offset(clock);
    struct __metal_driver_sifive_fe310_g000_prci *config_base =
        __metal_driver_sifive_fe310_g000_hfxosc_config_base(clock);
    const struct __metal_driver_vtable_sifive_fe310_g000_prci *vtable =
        __metal_driver_sifive_fe310_g000_prci_vtable();
    long cfg = vtable->get_reg(config_base, config_offset);
200163c8:	200117b7          	lui	a5,0x20011
200163cc:	6687a783          	lw	a5,1640(a5) # 20011668 <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:15
    const struct metal_clock *clock) {
200163d0:	1141                	addi	sp,sp,-16
200163d2:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:24
    long cfg = vtable->get_reg(config_base, config_offset);
200163d4:	4591                	li	a1,4
200163d6:	81818513          	addi	a0,gp,-2024 # 80000ab8 <__metal_dt_prci_10008000>
200163da:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:26

    if ((cfg & CONFIG_ENABLE) == 0)
200163dc:	400007b7          	lui	a5,0x40000
200163e0:	8fe9                	and	a5,a5,a0
200163e2:	cb99                	beqz	a5,200163f8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x30>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:28
        return -1;
    if ((cfg & CONFIG_READY) == 0)
200163e4:	00055a63          	bgez	a0,200163f8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz+0x30>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:31
        return -1;
    return metal_clock_get_rate_hz(ref);
}
200163e8:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:30
    return metal_clock_get_rate_hz(ref);
200163ea:	80000537          	lui	a0,0x80000
200163ee:	06050513          	addi	a0,a0,96 # 80000060 <metal_segment_heap_target_end+0xffffe070>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:31
}
200163f2:	0141                	addi	sp,sp,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:30
    return metal_clock_get_rate_hz(ref);
200163f4:	1790006f          	j	20016d6c <metal_clock_get_rate_hz>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:31
}
200163f8:	40b2                	lw	ra,12(sp)
200163fa:	557d                	li	a0,-1
200163fc:	0141                	addi	sp,sp,16
200163fe:	8082                	ret

20016400 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_hfxosc.c:35

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(
    struct metal_clock *clock, long rate) {
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20016400:	b7e1                	j	200163c8 <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>

20016402 <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162
    struct __metal_driver_sifive_fe310_g000_pll *pll) {
20016402:	1141                	addi	sp,sp,-16
20016404:	c422                	sw	s0,8(sp)
20016406:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
20016408:	4148                	lw	a0,4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:162
    struct __metal_driver_sifive_fe310_g000_pll *pll) {
2001640a:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:173
    _metal_clock_call_all_callbacks(pll->clock._pre_rate_change_callback);
2001640c:	12d000ef          	jal	ra,20016d38 <_metal_clock_call_all_callbacks>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:177
    if ((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) != 0)
20016410:	100087b7          	lui	a5,0x10008
20016414:	4798                	lw	a4,8(a5)
20016416:	66c1                	lui	a3,0x10
20016418:	8f75                	and	a4,a4,a3
2001641a:	c711                	beqz	a4,20016426 <__metal_driver_sifive_fe310_g000_pll_init+0x24>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:178
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
2001641c:	4798                	lw	a4,8(a5)
2001641e:	76c1                	lui	a3,0xffff0
20016420:	16fd                	addi	a3,a3,-1
20016422:	8f75                	and	a4,a4,a3
20016424:	c798                	sw	a4,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20016426:	10008737          	lui	a4,0x10008
2001642a:	471c                	lw	a5,8(a4)
2001642c:	000206b7          	lui	a3,0x20
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20016430:	00f425b7          	lui	a1,0xf42
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:182
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
20016434:	8fd5                	or	a5,a5,a3
20016436:	c71c                	sw	a5,8(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:187
    pll->clock.vtable->set_rate_hz(&(pll->clock), init_rate);
20016438:	401c                	lw	a5,0(s0)
2001643a:	8522                	mv	a0,s0
2001643c:	40058593          	addi	a1,a1,1024 # f42400 <__heap_size+0xf41c00>
20016440:	43dc                	lw	a5,4(a5)
20016442:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
20016444:	4408                	lw	a0,8(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:191
}
20016446:	4422                	lw	s0,8(sp)
20016448:	40b2                	lw	ra,12(sp)
2001644a:	0141                	addi	sp,sp,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:190
    _metal_clock_call_all_callbacks(pll->clock._post_rate_change_callback);
2001644c:	0ed0006f          	j	20016d38 <_metal_clock_call_all_callbacks>

20016450 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:194
    const struct metal_clock *clock) {
20016450:	1141                	addi	sp,sp,-16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:210
    long cfg = vtable->get_reg(config_base, config_offset);
20016452:	200117b7          	lui	a5,0x20011
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:194
    const struct metal_clock *clock) {
20016456:	c226                	sw	s1,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:210
    long cfg = vtable->get_reg(config_base, config_offset);
20016458:	6687a483          	lw	s1,1640(a5) # 20011668 <__metal_driver_vtable_sifive_fe310_g000_prci>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:194
    const struct metal_clock *clock) {
2001645c:	c04a                	sw	s2,0(sp)
2001645e:	c606                	sw	ra,12(sp)
20016460:	c422                	sw	s0,8(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:210
    long cfg = vtable->get_reg(config_base, config_offset);
20016462:	45a1                	li	a1,8
20016464:	81818513          	addi	a0,gp,-2024 # 80000ab8 <__metal_dt_prci_10008000>
20016468:	9482                	jalr	s1
2001646a:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:211
    long div = vtable->get_reg(divider_base, divider_offset);
2001646c:	45b1                	li	a1,12
2001646e:	81818513          	addi	a0,gp,-2024 # 80000ab8 <__metal_dt_prci_10008000>
20016472:	9482                	jalr	s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:215
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
20016474:	67c1                	lui	a5,0x10
20016476:	8fe1                	and	a5,a5,s0
20016478:	ef81                	bnez	a5,20016490 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x40>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:243
}
2001647a:	4422                	lw	s0,8(sp)
2001647c:	40b2                	lw	ra,12(sp)
2001647e:	4492                	lw	s1,4(sp)
20016480:	4902                	lw	s2,0(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
        return metal_clock_get_rate_hz(pllsel0);
20016482:	80000537          	lui	a0,0x80000
20016486:	08450513          	addi	a0,a0,132 # 80000084 <metal_segment_heap_target_end+0xffffe094>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:243
}
2001648a:	0141                	addi	sp,sp,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:216
        return metal_clock_get_rate_hz(pllsel0);
2001648c:	0e10006f          	j	20016d6c <metal_clock_get_rate_hz>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:221
        __METAL_GET_FIELD(cfg, PLL_REFSEL) ? pllref : pllsel0);
20016490:	000207b7          	lui	a5,0x20
20016494:	8fe1                	and	a5,a5,s0
20016496:	84aa                	mv	s1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220
    long ref_hz = metal_clock_get_rate_hz(
20016498:	e7ad                	bnez	a5,20016502 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xb2>
2001649a:	80000537          	lui	a0,0x80000
2001649e:	08450513          	addi	a0,a0,132 # 80000084 <metal_segment_heap_target_end+0xffffe094>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220 (discriminator 4)
200164a2:	0cb000ef          	jal	ra,20016d6c <metal_clock_get_rate_hz>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:225 (discriminator 4)
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
200164a6:	000407b7          	lui	a5,0x40
200164aa:	8fe1                	and	a5,a5,s0
200164ac:	e7a9                	bnez	a5,200164f6 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa6>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:230
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
200164ae:	00445793          	srli	a5,s0,0x4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:231
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
200164b2:	6685                	lui	a3,0x1
200164b4:	c0068693          	addi	a3,a3,-1024 # c00 <__heap_size+0x400>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:230
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
200164b8:	03f7f793          	andi	a5,a5,63
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
200164bc:	00747713          	andi	a4,s0,7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:230
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
200164c0:	0785                	addi	a5,a5,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:231
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
200164c2:	8c75                	and	s0,s0,a3
200164c4:	3ff00693          	li	a3,1023
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:229
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
200164c8:	0705                	addi	a4,a4,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:230
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
200164ca:	0786                	slli	a5,a5,0x1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:231
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
200164cc:	0486f063          	bgeu	a3,s0,2001650c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xbc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:238
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
200164d0:	02e54533          	div	a0,a0,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:233
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
200164d4:	8029                	srli	s0,s0,0xa
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:238
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
200164d6:	02f507b3          	mul	a5,a0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:233
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
200164da:	4505                	li	a0,1
200164dc:	00851433          	sll	s0,a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:238
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
200164e0:	0287c533          	div	a0,a5,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:239
    if (__METAL_GET_FIELD(div, DIV_1))
200164e4:	1004f793          	andi	a5,s1,256
200164e8:	e799                	bnez	a5,200164f6 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa6>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:242
    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
200164ea:	03f4f493          	andi	s1,s1,63
200164ee:	0485                	addi	s1,s1,1
200164f0:	0486                	slli	s1,s1,0x1
200164f2:	02955533          	divu	a0,a0,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:243
}
200164f6:	40b2                	lw	ra,12(sp)
200164f8:	4422                	lw	s0,8(sp)
200164fa:	4492                	lw	s1,4(sp)
200164fc:	4902                	lw	s2,0(sp)
200164fe:	0141                	addi	sp,sp,16
20016500:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:220
    long ref_hz = metal_clock_get_rate_hz(
20016502:	80000537          	lui	a0,0x80000
20016506:	06c50513          	addi	a0,a0,108 # 8000006c <metal_segment_heap_target_end+0xffffe07c>
2001650a:	bf61                	j	200164a2 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x52>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:232
        return -1;
2001650c:	557d                	li	a0,-1
2001650e:	b7e5                	j	200164f6 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xa6>

20016510 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:360
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20016510:	100087b7          	lui	a5,0x10008
20016514:	4798                	lw	a4,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
                                                      long rate) {
20016516:	7179                	addi	sp,sp,-48
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:360
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20016518:	66c1                	lui	a3,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
                                                      long rate) {
2001651a:	d422                	sw	s0,40(sp)
2001651c:	d226                	sw	s1,36(sp)
2001651e:	d606                	sw	ra,44(sp)
20016520:	d04a                	sw	s2,32(sp)
20016522:	ce4e                	sw	s3,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:360
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20016524:	8f75                	and	a4,a4,a3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:345
                                                      long rate) {
20016526:	842a                	mv	s0,a0
20016528:	84ae                	mv	s1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:360
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
2001652a:	c711                	beqz	a4,20016536 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x26>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:361
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
2001652c:	4798                	lw	a4,8(a5)
2001652e:	76c1                	lui	a3,0xffff0
20016530:	16fd                	addi	a3,a3,-1
20016532:	8f75                	and	a4,a4,a3
20016534:	c798                	sw	a4,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:366
        __METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? pllref : pllsel0);
20016536:	100087b7          	lui	a5,0x10008
2001653a:	479c                	lw	a5,8(a5)
2001653c:	00020737          	lui	a4,0x20
20016540:	8ff9                	and	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:365
    long ref_hz = metal_clock_get_rate_hz(
20016542:	ef95                	bnez	a5,2001657e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x6e>
20016544:	80000537          	lui	a0,0x80000
20016548:	08450513          	addi	a0,a0,132 # 80000084 <metal_segment_heap_target_end+0xffffe094>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:365 (discriminator 4)
2001654c:	021000ef          	jal	ra,20016d6c <metal_clock_get_rate_hz>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:370 (discriminator 4)
    if ((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate) {
20016550:	470d                	li	a4,3
20016552:	02e50733          	mul	a4,a0,a4
20016556:	4691                	li	a3,4
20016558:	02d74733          	div	a4,a4,a3
2001655c:	02e4c663          	blt	s1,a4,20016588 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x78>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:370 (discriminator 1)
20016560:	4795                	li	a5,5
20016562:	02f507b3          	mul	a5,a0,a5
20016566:	02d7c7b3          	div	a5,a5,a3
2001656a:	0097cf63          	blt	a5,s1,20016588 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x78>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:378
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
2001656e:	10008737          	lui	a4,0x10008
20016572:	471c                	lw	a5,8(a4)
20016574:	000406b7          	lui	a3,0x40
20016578:	8fd5                	or	a5,a5,a3
2001657a:	c71c                	sw	a5,8(a4)
2001657c:	aa39                	j	2001669a <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x18a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:365
    long ref_hz = metal_clock_get_rate_hz(
2001657e:	80000537          	lui	a0,0x80000
20016582:	06c50513          	addi	a0,a0,108 # 8000006c <metal_segment_heap_target_end+0xffffe07c>
20016586:	b7d9                	j	2001654c <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x3c>
20016588:	200116b7          	lui	a3,0x20011
2001658c:	800005b7          	lui	a1,0x80000
20016590:	55068693          	addi	a3,a3,1360 # 20011550 <pll_configs+0x860>
20016594:	567d                	li	a2,-1
20016596:	fff5c593          	not	a1,a1
2001659a:	04300713          	li	a4,67
find_closest_config():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:262
        if (config_freq != PLL_CONFIG_NOT_VALID) {
2001659e:	587d                	li	a6,-1
get_pll_config_freq():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:142
    if (pll_input_rate < config->min_input_rate ||
200165a0:	469c                	lw	a5,8(a3)
200165a2:	02f56963          	bltu	a0,a5,200165d4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xc4>
200165a6:	46dc                	lw	a5,12(a3)
200165a8:	02a7e663          	bltu	a5,a0,200165d4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xc4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:146
    return pll_input_rate * config->multiplier / config->divisor;
200165ac:	429c                	lw	a5,0(a3)
200165ae:	0046a883          	lw	a7,4(a3)
200165b2:	02f507b3          	mul	a5,a0,a5
200165b6:	0317d7b3          	divu	a5,a5,a7
find_closest_config():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:262
        if (config_freq != PLL_CONFIG_NOT_VALID) {
200165ba:	01078d63          	beq	a5,a6,200165d4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xc4>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:263
            long freq_diff = labs(config_freq - rate);
200165be:	8f85                	sub	a5,a5,s1
200165c0:	41f7d893          	srai	a7,a5,0x1f
200165c4:	00f8c7b3          	xor	a5,a7,a5
200165c8:	411787b3          	sub	a5,a5,a7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:265
            if (freq_diff < closest_diff) {
200165cc:	00b7d463          	bge	a5,a1,200165d4 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xc4>
200165d0:	85be                	mv	a1,a5
200165d2:	863a                	mv	a2,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:260
         i--) {
200165d4:	177d                	addi	a4,a4,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:259
    for (int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0;
200165d6:	1681                	addi	a3,a3,-32
200165d8:	fd0714e3          	bne	a4,a6,200165a0 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x90>
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:374
        if (config_index != -1) {
200165dc:	f8e609e3          	beq	a2,a4,2001656e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x5e>
configure_pll():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
200165e0:	100087b7          	lui	a5,0x10008
200165e4:	4798                	lw	a4,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:292
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
200165e6:	0616                	slli	a2,a2,0x5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:291
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
200165e8:	9b61                	andi	a4,a4,-8
200165ea:	c798                	sw	a4,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:292
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
200165ec:	20011737          	lui	a4,0x20011
200165f0:	cf070713          	addi	a4,a4,-784 # 20010cf0 <pll_configs>
200165f4:	9732                	add	a4,a4,a2
200165f6:	4b14                	lw	a3,16(a4)
200165f8:	478c                	lw	a1,8(a5)
200165fa:	8a9d                	andi	a3,a3,7
200165fc:	8ecd                	or	a3,a3,a1
200165fe:	c794                	sw	a3,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:294
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20016600:	4794                	lw	a3,8(a5)
20016602:	c0f6f693          	andi	a3,a3,-1009
20016606:	c794                	sw	a3,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:295
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20016608:	4b54                	lw	a3,20(a4)
2001660a:	4790                	lw	a2,8(a5)
2001660c:	0692                	slli	a3,a3,0x4
2001660e:	3f06f693          	andi	a3,a3,1008
20016612:	8ed1                	or	a3,a3,a2
20016614:	c794                	sw	a3,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:297
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
20016616:	4794                	lw	a3,8(a5)
20016618:	767d                	lui	a2,0xfffff
2001661a:	3ff60613          	addi	a2,a2,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffd40f>
2001661e:	8ef1                	and	a3,a3,a2
20016620:	c794                	sw	a3,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
20016622:	4f14                	lw	a3,24(a4)
20016624:	478c                	lw	a1,8(a5)
20016626:	6605                	lui	a2,0x1
20016628:	06aa                	slli	a3,a3,0xa
2001662a:	c0060613          	addi	a2,a2,-1024 # c00 <__heap_size+0x400>
2001662e:	8ef1                	and	a3,a3,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    if (config->d < 0) {
20016630:	4f58                	lw	a4,28(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:298
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
20016632:	8ecd                	or	a3,a3,a1
20016634:	c794                	sw	a3,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:300
    if (config->d < 0) {
20016636:	08075063          	bgez	a4,200166b6 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x1a6>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:302
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
2001663a:	47d8                	lw	a4,12(a5)
2001663c:	10076713          	ori	a4,a4,256
20016640:	c7d8                	sw	a4,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:304
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20016642:	47d8                	lw	a4,12(a5)
20016644:	fc077713          	andi	a4,a4,-64
20016648:	c7d8                	sw	a4,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:305
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
2001664a:	47d8                	lw	a4,12(a5)
2001664c:	00176713          	ori	a4,a4,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
20016650:	c7d8                	sw	a4,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:313
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20016652:	100086b7          	lui	a3,0x10008
20016656:	469c                	lw	a5,8(a3)
20016658:	fffc0737          	lui	a4,0xfffc0
2001665c:	177d                	addi	a4,a4,-1
2001665e:	8ff9                	and	a5,a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:318
    __metal_driver_riscv_clint0_command_request(__METAL_DT_RISCV_CLINT0_HANDLE,
20016660:	80001937          	lui	s2,0x80001
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:313
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
20016664:	c69c                	sw	a5,8(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:318
    __metal_driver_riscv_clint0_command_request(__METAL_DT_RISCV_CLINT0_HANDLE,
20016666:	0030                	addi	a2,sp,8
20016668:	4585                	li	a1,1
2001666a:	aa490513          	addi	a0,s2,-1372 # 80000aa4 <metal_segment_heap_target_end+0xffffeab4>
2001666e:	8a1fe0ef          	jal	ra,20014f0e <__metal_driver_riscv_clint0_command_request>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:320
    mtime_end = mtime + PLL_LOCK_WAIT_TICKS;
20016672:	44a2                	lw	s1,8(sp)
20016674:	47b2                	lw	a5,12(sp)
20016676:	00448993          	addi	s3,s1,4
2001667a:	0099b4b3          	sltu	s1,s3,s1
2001667e:	94be                	add	s1,s1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:321
    while (mtime <= mtime_end) {
20016680:	47b2                	lw	a5,12(sp)
20016682:	00f4e763          	bltu	s1,a5,20016690 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x180>
20016686:	04979563          	bne	a5,s1,200166d0 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x1c0>
2001668a:	47a2                	lw	a5,8(sp)
2001668c:	04f9f263          	bgeu	s3,a5,200166d0 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x1c0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:340
    while ((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0)
20016690:	10008737          	lui	a4,0x10008
20016694:	471c                	lw	a5,8(a4)
20016696:	fe07dfe3          	bgez	a5,20016694 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x184>
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:383
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
2001669a:	10008737          	lui	a4,0x10008
2001669e:	471c                	lw	a5,8(a4)
200166a0:	66c1                	lui	a3,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:385
    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
200166a2:	8522                	mv	a0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:386
}
200166a4:	5422                	lw	s0,40(sp)
200166a6:	50b2                	lw	ra,44(sp)
200166a8:	5492                	lw	s1,36(sp)
200166aa:	5902                	lw	s2,32(sp)
200166ac:	49f2                	lw	s3,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:383
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
200166ae:	8fd5                	or	a5,a5,a3
200166b0:	c71c                	sw	a5,8(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:386
}
200166b2:	6145                	addi	sp,sp,48
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:385
    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
200166b4:	bb71                	j	20016450 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
configure_pll():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:307
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
200166b6:	47d4                	lw	a3,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
200166b8:	03f77713          	andi	a4,a4,63
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:307
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
200166bc:	eff6f693          	andi	a3,a3,-257
200166c0:	c7d4                	sw	a3,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:309
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
200166c2:	47d4                	lw	a3,12(a5)
200166c4:	fc06f693          	andi	a3,a3,-64
200166c8:	c7d4                	sw	a3,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:310
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
200166ca:	47d4                	lw	a3,12(a5)
200166cc:	8f55                	or	a4,a4,a3
200166ce:	b749                	j	20016650 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x140>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_pll.c:322
        __metal_driver_riscv_clint0_command_request(
200166d0:	0030                	addi	a2,sp,8
200166d2:	4585                	li	a1,1
200166d4:	aa490513          	addi	a0,s2,-1372
200166d8:	837fe0ef          	jal	ra,20014f0e <__metal_driver_riscv_clint0_command_request>
200166dc:	b755                	j	20016680 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x170>

200166de <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:14
#include <metal/machine.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(
    const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset));
200166de:	100087b7          	lui	a5,0x10008
200166e2:	95be                	add	a1,a1,a5
200166e4:	4188                	lw	a0,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:15
}
200166e6:	8082                	ret

200166e8 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:21

long __metal_driver_sifive_fe310_g000_prci_set_reg(
    const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset,
    long value) {
    unsigned long base = __metal_driver_sifive_fe310_g000_prci_base();
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
200166e8:	100087b7          	lui	a5,0x10008
200166ec:	95be                	add	a1,a1,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:19
    long value) {
200166ee:	8532                	mv	a0,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:21
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + offset)) = value;
200166f0:	c190                	sw	a2,0(a1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_fe310-g000_prci.c:22
}
200166f2:	8082                	ret

200166f4 <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200166f4:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
200166f8:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200166fc:	00a70363          	beq	a4,a0,20016702 <__metal_driver_sifive_gpio0_enable_input+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
	}
	else {
		return 0;
20016700:	4781                	li	a5,0
__metal_driver_sifive_gpio0_enable_input():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:17
int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio,
                                             long source) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) |= source;
20016702:	43d8                	lw	a4,4(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:20

    return 0;
}
20016704:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:17
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) |= source;
20016706:	8dd9                	or	a1,a1,a4
20016708:	c3cc                	sw	a1,4(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:20
}
2001670a:	8082                	ret

2001670c <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001670c:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20016710:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016714:	00a70363          	beq	a4,a0,2001671a <__metal_driver_sifive_gpio0_disable_input+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
20016718:	4781                	li	a5,0
__metal_driver_sifive_gpio0_disable_input():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:27
int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio,
                                              long source) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) &= ~source;
2001671a:	43d8                	lw	a4,4(a5)
2001671c:	fff5c593          	not	a1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:30

    return 0;
}
20016720:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:27
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) &= ~source;
20016722:	8df9                	and	a1,a1,a4
20016724:	c3cc                	sw	a1,4(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:30
}
20016726:	8082                	ret

20016728 <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016728:	81418793          	addi	a5,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
2001672c:	00a78563          	beq	a5,a0,20016736 <__metal_driver_sifive_gpio0_input+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
20016730:	4781                	li	a5,0
__metal_driver_sifive_gpio0_input():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:35

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    return __METAL_ACCESS_ONCE(
20016732:	4388                	lw	a0,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:37
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
}
20016734:	8082                	ret
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20016736:	100127b7          	lui	a5,0x10012
2001673a:	bfe5                	j	20016732 <__metal_driver_sifive_gpio0_input+0xa>

2001673c <__metal_driver_sifive_gpio0_output>:
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001673c:	81418793          	addi	a5,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
20016740:	00a78563          	beq	a5,a0,2001674a <__metal_driver_sifive_gpio0_output+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
20016744:	4781                	li	a5,0
__metal_driver_sifive_gpio0_output():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:42

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    return __METAL_ACCESS_ONCE(
20016746:	47c8                	lw	a0,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:44
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
}
20016748:	8082                	ret
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2001674a:	100127b7          	lui	a5,0x10012
2001674e:	bfe5                	j	20016746 <__metal_driver_sifive_gpio0_output+0xa>

20016750 <__metal_driver_sifive_gpio0_disable_output>:
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016750:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20016754:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016758:	00a70363          	beq	a4,a0,2001675e <__metal_driver_sifive_gpio0_disable_output+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
2001675c:	4781                	li	a5,0
__metal_driver_sifive_gpio0_disable_output():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:51
int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio,
                                               long source) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) &= ~source;
2001675e:	4798                	lw	a4,8(a5)
20016760:	fff5c593          	not	a1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:54

    return 0;
}
20016764:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:51
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) &= ~source;
20016766:	8df9                	and	a1,a1,a4
20016768:	c78c                	sw	a1,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:54
}
2001676a:	8082                	ret

2001676c <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001676c:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20016770:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016774:	00a70363          	beq	a4,a0,2001677a <__metal_driver_sifive_gpio0_enable_output+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
20016778:	4781                	li	a5,0
__metal_driver_sifive_gpio0_enable_output():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:61
int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio,
                                              long source) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) |= source;
2001677a:	4798                	lw	a4,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:64

    return 0;
}
2001677c:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:61
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) |= source;
2001677e:	8dd9                	or	a1,a1,a4
20016780:	c78c                	sw	a1,8(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:64
}
20016782:	8082                	ret

20016784 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016784:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20016788:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001678c:	00a70363          	beq	a4,a0,20016792 <__metal_driver_sifive_gpio0_output_set+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
20016790:	4781                	li	a5,0
__metal_driver_sifive_gpio0_output_set():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:70

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio,
                                           long value) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |=
20016792:	47d8                	lw	a4,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:74
        value;

    return 0;
}
20016794:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:70
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |=
20016796:	8dd9                	or	a1,a1,a4
20016798:	c7cc                	sw	a1,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:74
}
2001679a:	8082                	ret

2001679c <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001679c:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
200167a0:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200167a4:	00a70363          	beq	a4,a0,200167aa <__metal_driver_sifive_gpio0_output_clear+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
200167a8:	4781                	li	a5,0
__metal_driver_sifive_gpio0_output_clear():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:80

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio,
                                             long value) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
200167aa:	47d8                	lw	a4,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:81
        ~value;
200167ac:	fff5c593          	not	a1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:84

    return 0;
}
200167b0:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:80
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
200167b2:	8df9                	and	a1,a1,a4
200167b4:	c7cc                	sw	a1,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:84
}
200167b6:	8082                	ret

200167b8 <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200167b8:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
200167bc:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200167c0:	00a70363          	beq	a4,a0,200167c6 <__metal_driver_sifive_gpio0_output_toggle+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
200167c4:	4781                	li	a5,0
__metal_driver_sifive_gpio0_output_toggle():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:91
int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio,
                                              long value) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
        __METAL_ACCESS_ONCE(
200167c6:	47d8                	lw	a4,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:96
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
        value;

    return 0;
}
200167c8:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:92
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
200167ca:	8db9                	xor	a1,a1,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:90
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
200167cc:	c7cc                	sw	a1,12(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:96
}
200167ce:	8082                	ret

200167d0 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200167d0:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
200167d4:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200167d8:	00a70363          	beq	a4,a0,200167de <__metal_driver_sifive_gpio0_enable_io+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
200167dc:	4781                	li	a5,0
__metal_driver_sifive_gpio0_enable_io():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:103
int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source,
                                          long dest) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) |= source;
200167de:	5fd8                	lw	a4,60(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:108
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) |=
        dest;

    return 0;
}
200167e0:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:103
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) |= source;
200167e2:	8dd9                	or	a1,a1,a4
200167e4:	dfcc                	sw	a1,60(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:104
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) |=
200167e6:	5f98                	lw	a4,56(a5)
200167e8:	8e59                	or	a2,a2,a4
200167ea:	df90                	sw	a2,56(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:108
}
200167ec:	8082                	ret

200167ee <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200167ee:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
200167f2:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200167f6:	00a70363          	beq	a4,a0,200167fc <__metal_driver_sifive_gpio0_disable_io+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
200167fa:	4781                	li	a5,0
__metal_driver_sifive_gpio0_disable_io():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:114

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio,
                                           long source) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
200167fc:	5f98                	lw	a4,56(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:115
        ~source;
200167fe:	fff5c593          	not	a1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:118

    return 0;
}
20016802:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:114
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
20016804:	8df9                	and	a1,a1,a4
20016806:	df8c                	sw	a1,56(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:118
}
20016808:	8082                	ret

2001680a <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001680a:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2001680e:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016812:	00a70363          	beq	a4,a0,20016818 <__metal_driver_sifive_gpio0_config_int+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
20016816:	4781                	li	a5,0
__metal_driver_sifive_gpio0_config_int():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:124

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio,
                                           long source, int intr_type) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    switch (intr_type) {
20016818:	471d                	li	a4,7
2001681a:	02c76c63          	bltu	a4,a2,20016852 <__metal_driver_sifive_gpio0_config_int+0x48>
2001681e:	20011737          	lui	a4,0x20011
20016822:	57070713          	addi	a4,a4,1392 # 20011570 <pll_configs+0x880>
20016826:	060a                	slli	a2,a2,0x2
20016828:	963a                	add	a2,a2,a4
2001682a:	4218                	lw	a4,0(a2)
2001682c:	8702                	jr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:127
    case METAL_GPIO_INT_DISABLE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) &= ~source;
2001682e:	4f98                	lw	a4,24(a5)
20016830:	fff5c593          	not	a1,a1
20016834:	8f6d                	and	a4,a4,a1
20016836:	cf98                	sw	a4,24(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:129
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) &= ~source;
20016838:	5398                	lw	a4,32(a5)
2001683a:	8f6d                	and	a4,a4,a1
2001683c:	d398                	sw	a4,32(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:131
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) &= ~source;
2001683e:	5798                	lw	a4,40(a5)
20016840:	8f6d                	and	a4,a4,a1
20016842:	d798                	sw	a4,40(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:133
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) &= ~source;
20016844:	5b98                	lw	a4,48(a5)
20016846:	8df9                	and	a1,a1,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:171
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20016848:	db8c                	sw	a1,48(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:172
        break;
2001684a:	a021                	j	20016852 <__metal_driver_sifive_gpio0_config_int+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:137
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
2001684c:	4f98                	lw	a4,24(a5)
2001684e:	8dd9                	or	a1,a1,a4
20016850:	cf8c                	sw	a1,24(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:175
    }
    return 0;
}
20016852:	4501                	li	a0,0
20016854:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:145
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20016856:	4f98                	lw	a4,24(a5)
20016858:	8f4d                	or	a4,a4,a1
2001685a:	cf98                	sw	a4,24(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:147
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
2001685c:	5398                	lw	a4,32(a5)
2001685e:	8dd9                	or	a1,a1,a4
20016860:	d38c                	sw	a1,32(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:148
        break;
20016862:	bfc5                	j	20016852 <__metal_driver_sifive_gpio0_config_int+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:151
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20016864:	5798                	lw	a4,40(a5)
20016866:	8dd9                	or	a1,a1,a4
20016868:	d78c                	sw	a1,40(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:152
        break;
2001686a:	b7e5                	j	20016852 <__metal_driver_sifive_gpio0_config_int+0x48>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:165
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
2001686c:	4f98                	lw	a4,24(a5)
2001686e:	8f4d                	or	a4,a4,a1
20016870:	cf98                	sw	a4,24(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:167
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20016872:	5398                	lw	a4,32(a5)
20016874:	8f4d                	or	a4,a4,a1
20016876:	d398                	sw	a4,32(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:169
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20016878:	5798                	lw	a4,40(a5)
2001687a:	8f4d                	or	a4,a4,a1
2001687c:	d798                	sw	a4,40(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:171
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
2001687e:	5b98                	lw	a4,48(a5)
20016880:	8dd9                	or	a1,a1,a4
20016882:	b7d9                	j	20016848 <__metal_driver_sifive_gpio0_config_int+0x3e>

20016884 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20016884:	81418713          	addi	a4,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:432
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
20016888:	100127b7          	lui	a5,0x10012
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:431
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
2001688c:	00a70363          	beq	a4,a0,20016892 <__metal_driver_sifive_gpio0_clear_int+0xe>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:435
		return 0;
20016890:	4781                	li	a5,0
__metal_driver_sifive_gpio0_clear_int():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:181

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source,
                                          int intr_type) {
    long base = __metal_driver_sifive_gpio0_base(ggpio);

    switch (intr_type) {
20016892:	167d                	addi	a2,a2,-1
20016894:	4719                	li	a4,6
20016896:	00c76d63          	bltu	a4,a2,200168b0 <__metal_driver_sifive_gpio0_clear_int+0x2c>
2001689a:	20011737          	lui	a4,0x20011
2001689e:	59070713          	addi	a4,a4,1424 # 20011590 <pll_configs+0x8a0>
200168a2:	060a                	slli	a2,a2,0x2
200168a4:	963a                	add	a2,a2,a4
200168a6:	4218                	lw	a4,0(a2)
200168a8:	8702                	jr	a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:184
    case METAL_GPIO_INT_RISING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
200168aa:	4fd8                	lw	a4,28(a5)
200168ac:	8dd9                	or	a1,a1,a4
200168ae:	cfcc                	sw	a1,28(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:222
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
        break;
    }
    return 0;
}
200168b0:	4501                	li	a0,0
200168b2:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:192
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
200168b4:	4fd8                	lw	a4,28(a5)
200168b6:	8f4d                	or	a4,a4,a1
200168b8:	cfd8                	sw	a4,28(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:194
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
200168ba:	53d8                	lw	a4,36(a5)
200168bc:	8dd9                	or	a1,a1,a4
200168be:	d3cc                	sw	a1,36(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:195
        break;
200168c0:	bfc5                	j	200168b0 <__metal_driver_sifive_gpio0_clear_int+0x2c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:198
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
200168c2:	57d8                	lw	a4,44(a5)
200168c4:	8dd9                	or	a1,a1,a4
200168c6:	d7cc                	sw	a1,44(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:199
        break;
200168c8:	b7e5                	j	200168b0 <__metal_driver_sifive_gpio0_clear_int+0x2c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:212
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
200168ca:	4fd8                	lw	a4,28(a5)
200168cc:	8f4d                	or	a4,a4,a1
200168ce:	cfd8                	sw	a4,28(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:214
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
200168d0:	53d8                	lw	a4,36(a5)
200168d2:	8f4d                	or	a4,a4,a1
200168d4:	d3d8                	sw	a4,36(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:216
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
200168d6:	57d8                	lw	a4,44(a5)
200168d8:	8f4d                	or	a4,a4,a1
200168da:	d7d8                	sw	a4,44(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:218
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
200168dc:	5bd8                	lw	a4,52(a5)
200168de:	8dd9                	or	a1,a1,a4
200168e0:	dbcc                	sw	a1,52(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:219
        break;
200168e2:	b7f9                	j	200168b0 <__metal_driver_sifive_gpio0_clear_int+0x2c>

200168e4 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_sifive_gpio0_interrupt_parent():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:461
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
200168e4:	81418793          	addi	a5,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
200168e8:	00a78463          	beq	a5,a0,200168f0 <__metal_driver_gpio_interrupt_controller+0xc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:465
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
	}
	else {
		return 0;
200168ec:	4501                	li	a0,0
200168ee:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:462
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
200168f0:	80000537          	lui	a0,0x80000
200168f4:	48850513          	addi	a0,a0,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_driver_gpio_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:227

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio) {
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
}
200168f8:	8082                	ret

200168fa <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_sifive_gpio0_interrupt_lines():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:471
	}
}

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
200168fa:	81418793          	addi	a5,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
200168fe:	10a79863          	bne	a5,a0,20016a0e <__metal_driver_gpio_get_interrupt_id+0x114>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:472
		return 8;
20016902:	4521                	li	a0,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:471
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20016904:	10058663          	beqz	a1,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:474
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
20016908:	4785                	li	a5,1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:475
		return 9;
2001690a:	4525                	li	a0,9
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:474
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
2001690c:	10f58263          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:477
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20016910:	4789                	li	a5,2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:478
		return 10;
20016912:	4529                	li	a0,10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:477
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
20016914:	0ef58e63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:480
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
20016918:	478d                	li	a5,3
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:481
		return 11;
2001691a:	452d                	li	a0,11
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:480
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
2001691c:	0ef58a63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:483
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20016920:	4791                	li	a5,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:484
		return 12;
20016922:	4531                	li	a0,12
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:483
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
20016924:	0ef58663          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:486
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20016928:	4795                	li	a5,5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:487
		return 13;
2001692a:	4535                	li	a0,13
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:486
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
2001692c:	0ef58263          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:489
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20016930:	4799                	li	a5,6
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:490
		return 14;
20016932:	4539                	li	a0,14
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:489
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
20016934:	0cf58e63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:492
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20016938:	479d                	li	a5,7
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:493
		return 15;
2001693a:	453d                	li	a0,15
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:492
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
2001693c:	0cf58a63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:495
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20016940:	47a1                	li	a5,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:496
		return 16;
20016942:	4541                	li	a0,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:495
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20016944:	0cf58663          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:498
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
20016948:	47a5                	li	a5,9
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:499
		return 17;
2001694a:	4545                	li	a0,17
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:498
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
2001694c:	0cf58263          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:501
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20016950:	47a9                	li	a5,10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:502
		return 18;
20016952:	4549                	li	a0,18
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:501
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20016954:	0af58e63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:504
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
20016958:	47ad                	li	a5,11
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:505
		return 19;
2001695a:	454d                	li	a0,19
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:504
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2001695c:	0af58a63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:507
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20016960:	47b1                	li	a5,12
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:508
		return 20;
20016962:	4551                	li	a0,20
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:507
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
20016964:	0af58663          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:510
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
20016968:	47b5                	li	a5,13
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:511
		return 21;
2001696a:	4555                	li	a0,21
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:510
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
2001696c:	0af58263          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:513
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20016970:	47b9                	li	a5,14
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:514
		return 22;
20016972:	4559                	li	a0,22
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:513
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
20016974:	08f58e63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:516
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20016978:	47bd                	li	a5,15
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:517
		return 23;
2001697a:	455d                	li	a0,23
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:516
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
2001697c:	08f58a63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:519
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 16))) {
20016980:	47c1                	li	a5,16
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:520
		return 24;
20016982:	4561                	li	a0,24
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:519
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 16))) {
20016984:	08f58663          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:522
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 17))) {
20016988:	47c5                	li	a5,17
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:523
		return 25;
2001698a:	4565                	li	a0,25
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:522
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 17))) {
2001698c:	08f58263          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:525
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 18))) {
20016990:	47c9                	li	a5,18
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:526
		return 26;
20016992:	4569                	li	a0,26
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:525
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 18))) {
20016994:	06f58e63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:528
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 19))) {
20016998:	47cd                	li	a5,19
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:529
		return 27;
2001699a:	456d                	li	a0,27
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:528
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 19))) {
2001699c:	06f58a63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:531
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 20))) {
200169a0:	47d1                	li	a5,20
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:532
		return 28;
200169a2:	4571                	li	a0,28
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:531
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 20))) {
200169a4:	06f58663          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:534
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 21))) {
200169a8:	47d5                	li	a5,21
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:535
		return 29;
200169aa:	4575                	li	a0,29
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:534
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 21))) {
200169ac:	06f58263          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:537
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 22))) {
200169b0:	47d9                	li	a5,22
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:538
		return 30;
200169b2:	4579                	li	a0,30
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:537
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 22))) {
200169b4:	04f58e63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:540
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 23))) {
200169b8:	47dd                	li	a5,23
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:541
		return 31;
200169ba:	457d                	li	a0,31
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:540
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 23))) {
200169bc:	04f58a63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:543
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 24))) {
200169c0:	47e1                	li	a5,24
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:544
		return 32;
200169c2:	02000513          	li	a0,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:543
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 24))) {
200169c6:	04f58563          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:546
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 25))) {
200169ca:	47e5                	li	a5,25
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:547
		return 33;
200169cc:	02100513          	li	a0,33
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:546
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 25))) {
200169d0:	04f58063          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:549
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 26))) {
200169d4:	47e9                	li	a5,26
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:550
		return 34;
200169d6:	02200513          	li	a0,34
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:549
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 26))) {
200169da:	02f58b63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:552
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 27))) {
200169de:	47ed                	li	a5,27
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:553
		return 35;
200169e0:	02300513          	li	a0,35
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:552
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 27))) {
200169e4:	02f58663          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:555
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 28))) {
200169e8:	47f1                	li	a5,28
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:556
		return 36;
200169ea:	02400513          	li	a0,36
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:555
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 28))) {
200169ee:	02f58163          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:558
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 29))) {
200169f2:	47f5                	li	a5,29
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:529
		return 27;
200169f4:	456d                	li	a0,27
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:558
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 29))) {
200169f6:	00f58d63          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:561
		return 27;
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 30))) {
200169fa:	47f9                	li	a5,30
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:532
		return 28;
200169fc:	4571                	li	a0,28
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:561
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 30))) {
200169fe:	00f58963          	beq	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:564
		return 28;
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 31))) {
20016a02:	47fd                	li	a5,31
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:568
		return 29;
	}
	else {
		return 0;
20016a04:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:564
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 31))) {
20016a06:	00f59563          	bne	a1,a5,20016a10 <__metal_driver_gpio_get_interrupt_id+0x116>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:535
		return 29;
20016a0a:	4575                	li	a0,29
20016a0c:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:568
		return 0;
20016a0e:	4501                	li	a0,0
__metal_driver_gpio_get_interrupt_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_gpio0.c:233

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin) {
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
    return irq;
}
20016a10:	8082                	ret

20016a12 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1067
/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016a12:	80001737          	lui	a4,0x80001
20016a16:	a6070713          	addi	a4,a4,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1066
{
20016a1a:	87aa                	mv	a5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1067
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016a1c:	00e50c63          	beq	a0,a4,20016a34 <__metal_driver_sifive_uart0_control_base+0x22>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1070
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
	}
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016a20:	80001737          	lui	a4,0x80001
20016a24:	a8070713          	addi	a4,a4,-1408 # 80000a80 <metal_segment_heap_target_end+0xffffea90>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1071
		return METAL_SIFIVE_UART0_10023000_BASE_ADDRESS;
20016a28:	10023537          	lui	a0,0x10023
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1070
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016a2c:	00e78663          	beq	a5,a4,20016a38 <__metal_driver_sifive_uart0_control_base+0x26>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1074
	}
	else {
		return 0;
20016a30:	4501                	li	a0,0
20016a32:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1068
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
20016a34:	10013537          	lui	a0,0x10013
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1076
	}
}
20016a38:	8082                	ret

20016a3a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_parent():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1106
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016a3a:	800017b7          	lui	a5,0x80001
20016a3e:	a6078793          	addi	a5,a5,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
20016a42:	00f50a63          	beq	a0,a5,20016a56 <__metal_driver_sifive_uart0_interrupt_controller+0x1c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1109
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
	}
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016a46:	800017b7          	lui	a5,0x80001
20016a4a:	a8078793          	addi	a5,a5,-1408 # 80000a80 <metal_segment_heap_target_end+0xffffea90>
20016a4e:	00f50463          	beq	a0,a5,20016a56 <__metal_driver_sifive_uart0_interrupt_controller+0x1c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1113
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
	}
	else {
		return 0;
20016a52:	4501                	li	a0,0
20016a54:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1107
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20016a56:	80000537          	lui	a0,0x80000
20016a5a:	48850513          	addi	a0,a0,1160 # 80000488 <metal_segment_heap_target_end+0xffffe498>
__metal_driver_sifive_uart0_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:39
    (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart) {
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
}
20016a5e:	8082                	ret

20016a60 <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_interrupt_line():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1119
	}
}

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016a60:	80001737          	lui	a4,0x80001
20016a64:	a6070713          	addi	a4,a4,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
__metal_driver_sifive_uart0_get_interrupt_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:41

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart) {
20016a68:	87aa                	mv	a5,a0
__metal_driver_sifive_uart0_interrupt_line():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1119
20016a6a:	00e50b63          	beq	a0,a4,20016a80 <__metal_driver_sifive_uart0_get_interrupt_id+0x20>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1122
		return 3;
	}
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016a6e:	80001737          	lui	a4,0x80001
20016a72:	a8070713          	addi	a4,a4,-1408 # 80000a80 <metal_segment_heap_target_end+0xffffea90>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1123
		return 4;
20016a76:	4511                	li	a0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1122
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016a78:	00e78563          	beq	a5,a4,20016a82 <__metal_driver_sifive_uart0_get_interrupt_id+0x22>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1126
	}
	else {
		return 0;
20016a7c:	4501                	li	a0,0
20016a7e:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1120
		return 3;
20016a80:	450d                	li	a0,3
__metal_driver_sifive_uart0_get_interrupt_id():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:43
    return __metal_driver_sifive_uart0_interrupt_line(uart);
}
20016a82:	8082                	ret

20016a84 <__metal_driver_sifive_uart0_tx_interrupt_enable>:
__metal_driver_sifive_uart0_tx_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:45

int __metal_driver_sifive_uart0_tx_interrupt_enable(struct metal_uart *uart) {
20016a84:	1141                	addi	sp,sp,-16
20016a86:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:46
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016a88:	3769                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:48

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_TXWM;
20016a8a:	491c                	lw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:50
    return 0;
}
20016a8c:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:48
    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_TXWM;
20016a8e:	0017e793          	ori	a5,a5,1
20016a92:	c91c                	sw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:50
}
20016a94:	4501                	li	a0,0
20016a96:	0141                	addi	sp,sp,16
20016a98:	8082                	ret

20016a9a <__metal_driver_sifive_uart0_tx_interrupt_disable>:
__metal_driver_sifive_uart0_tx_interrupt_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:52

int __metal_driver_sifive_uart0_tx_interrupt_disable(struct metal_uart *uart) {
20016a9a:	1141                	addi	sp,sp,-16
20016a9c:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:53
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016a9e:	3f95                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:55

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_TXWM;
20016aa0:	491c                	lw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:57
    return 0;
}
20016aa2:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:55
    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_TXWM;
20016aa4:	9bf9                	andi	a5,a5,-2
20016aa6:	c91c                	sw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:57
}
20016aa8:	4501                	li	a0,0
20016aaa:	0141                	addi	sp,sp,16
20016aac:	8082                	ret

20016aae <__metal_driver_sifive_uart0_rx_interrupt_enable>:
__metal_driver_sifive_uart0_rx_interrupt_enable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:59

int __metal_driver_sifive_uart0_rx_interrupt_enable(struct metal_uart *uart) {
20016aae:	1141                	addi	sp,sp,-16
20016ab0:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:60
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016ab2:	3785                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:62

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_RXWM;
20016ab4:	491c                	lw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:64
    return 0;
}
20016ab6:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:62
    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_RXWM;
20016ab8:	0027e793          	ori	a5,a5,2
20016abc:	c91c                	sw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:64
}
20016abe:	4501                	li	a0,0
20016ac0:	0141                	addi	sp,sp,16
20016ac2:	8082                	ret

20016ac4 <__metal_driver_sifive_uart0_rx_interrupt_disable>:
__metal_driver_sifive_uart0_rx_interrupt_disable():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:66

int __metal_driver_sifive_uart0_rx_interrupt_disable(struct metal_uart *uart) {
20016ac4:	1141                	addi	sp,sp,-16
20016ac6:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:67
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016ac8:	37a9                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:69

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_RXWM;
20016aca:	491c                	lw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:71
    return 0;
}
20016acc:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:69
    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_RXWM;
20016ace:	9bf5                	andi	a5,a5,-3
20016ad0:	c91c                	sw	a5,16(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:71
}
20016ad2:	4501                	li	a0,0
20016ad4:	0141                	addi	sp,sp,16
20016ad6:	8082                	ret

20016ad8 <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:73

int __metal_driver_sifive_uart0_txready(struct metal_uart *uart) {
20016ad8:	1141                	addi	sp,sp,-16
20016ada:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:74
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016adc:	3f1d                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:76

    return !!((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20016ade:	4108                	lw	a0,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:77
}
20016ae0:	40b2                	lw	ra,12(sp)
20016ae2:	817d                	srli	a0,a0,0x1f
20016ae4:	0141                	addi	sp,sp,16
20016ae6:	8082                	ret

20016ae8 <__metal_driver_sifive_uart0_set_tx_watermark>:
__metal_driver_sifive_uart0_set_tx_watermark():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:80

int __metal_driver_sifive_uart0_set_tx_watermark(struct metal_uart *uart,
                                                 size_t level) {
20016ae8:	1141                	addi	sp,sp,-16
20016aea:	c422                	sw	s0,8(sp)
20016aec:	c606                	sw	ra,12(sp)
20016aee:	842e                	mv	s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:81
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016af0:	370d                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:83

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(level);
20016af2:	451c                	lw	a5,8(a0)
20016af4:	0442                	slli	s0,s0,0x10
20016af6:	000705b7          	lui	a1,0x70
20016afa:	8c6d                	and	s0,s0,a1
20016afc:	8c5d                	or	s0,s0,a5
20016afe:	c500                	sw	s0,8(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:85
    return 0;
}
20016b00:	40b2                	lw	ra,12(sp)
20016b02:	4422                	lw	s0,8(sp)
20016b04:	4501                	li	a0,0
20016b06:	0141                	addi	sp,sp,16
20016b08:	8082                	ret

20016b0a <__metal_driver_sifive_uart0_get_tx_watermark>:
__metal_driver_sifive_uart0_get_tx_watermark():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:87

size_t __metal_driver_sifive_uart0_get_tx_watermark(struct metal_uart *uart) {
20016b0a:	1141                	addi	sp,sp,-16
20016b0c:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:88
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016b0e:	3711                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:90

    return ((UART_REGW(METAL_SIFIVE_UART0_TXCTRL) >> 16) & 0x7);
20016b10:	4508                	lw	a0,8(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:91
}
20016b12:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:90
    return ((UART_REGW(METAL_SIFIVE_UART0_TXCTRL) >> 16) & 0x7);
20016b14:	8141                	srli	a0,a0,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:91
}
20016b16:	891d                	andi	a0,a0,7
20016b18:	0141                	addi	sp,sp,16
20016b1a:	8082                	ret

20016b1c <__metal_driver_sifive_uart0_set_rx_watermark>:
__metal_driver_sifive_uart0_set_rx_watermark():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:94

int __metal_driver_sifive_uart0_set_rx_watermark(struct metal_uart *uart,
                                                 size_t level) {
20016b1c:	1141                	addi	sp,sp,-16
20016b1e:	c422                	sw	s0,8(sp)
20016b20:	c606                	sw	ra,12(sp)
20016b22:	842e                	mv	s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:95
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016b24:	35fd                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:97

    UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXCNT(level);
20016b26:	455c                	lw	a5,12(a0)
20016b28:	0442                	slli	s0,s0,0x10
20016b2a:	000705b7          	lui	a1,0x70
20016b2e:	8c6d                	and	s0,s0,a1
20016b30:	8c5d                	or	s0,s0,a5
20016b32:	c540                	sw	s0,12(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:99
    return 0;
}
20016b34:	40b2                	lw	ra,12(sp)
20016b36:	4422                	lw	s0,8(sp)
20016b38:	4501                	li	a0,0
20016b3a:	0141                	addi	sp,sp,16
20016b3c:	8082                	ret

20016b3e <__metal_driver_sifive_uart0_get_rx_watermark>:
__metal_driver_sifive_uart0_get_rx_watermark():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:101

size_t __metal_driver_sifive_uart0_get_rx_watermark(struct metal_uart *uart) {
20016b3e:	1141                	addi	sp,sp,-16
20016b40:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:102
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016b42:	3dc1                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:104

    return ((UART_REGW(METAL_SIFIVE_UART0_RXCTRL) >> 16) & 0x7);
20016b44:	4548                	lw	a0,12(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:105
}
20016b46:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:104
    return ((UART_REGW(METAL_SIFIVE_UART0_RXCTRL) >> 16) & 0x7);
20016b48:	8141                	srli	a0,a0,0x10
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:105
}
20016b4a:	891d                	andi	a0,a0,7
20016b4c:	0141                	addi	sp,sp,16
20016b4e:	8082                	ret

20016b50 <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:107

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c) {
20016b50:	1141                	addi	sp,sp,-16
20016b52:	c422                	sw	s0,8(sp)
20016b54:	c226                	sw	s1,4(sp)
20016b56:	c04a                	sw	s2,0(sp)
20016b58:	c606                	sw	ra,12(sp)
20016b5a:	892a                	mv	s2,a0
20016b5c:	84ae                	mv	s1,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:108
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016b5e:	3d55                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
20016b60:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:110 (discriminator 1)

    while (__metal_driver_sifive_uart0_txready(uart) != 0) {
20016b62:	854a                	mv	a0,s2
20016b64:	3f95                	jal	20016ad8 <__metal_driver_sifive_uart0_txready>
20016b66:	fd75                	bnez	a0,20016b62 <__metal_driver_sifive_uart0_putc+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:113
        /* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20016b68:	c004                	sw	s1,0(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:115
    return 0;
}
20016b6a:	40b2                	lw	ra,12(sp)
20016b6c:	4422                	lw	s0,8(sp)
20016b6e:	4492                	lw	s1,4(sp)
20016b70:	4902                	lw	s2,0(sp)
20016b72:	0141                	addi	sp,sp,16
20016b74:	8082                	ret

20016b76 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:117

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c) {
20016b76:	1141                	addi	sp,sp,-16
20016b78:	c422                	sw	s0,8(sp)
20016b7a:	c606                	sw	ra,12(sp)
20016b7c:	842e                	mv	s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:119
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20016b7e:	3d51                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:121
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);
20016b80:	4158                	lw	a4,4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:126
    ;
    if (ch & UART_RXEMPTY) {
        *c = -1; /* aka: EOF in most of the world */
    } else {
        *c = ch & 0x0ff;
20016b82:	0ff77793          	zext.b	a5,a4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:123
    if (ch & UART_RXEMPTY) {
20016b86:	00075363          	bgez	a4,20016b8c <__metal_driver_sifive_uart0_getc+0x16>
20016b8a:	57fd                	li	a5,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:129
    }
    return 0;
}
20016b8c:	40b2                	lw	ra,12(sp)
20016b8e:	c01c                	sw	a5,0(s0)
20016b90:	4422                	lw	s0,8(sp)
20016b92:	4501                	li	a0,0
20016b94:	0141                	addi	sp,sp,16
20016b96:	8082                	ret

20016b98 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:134

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart) {
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    return uart->baud_rate;
}
20016b98:	4148                	lw	a0,4(a0)
20016b9a:	8082                	ret

20016b9c <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:137

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart,
                                              int baud_rate) {
20016b9c:	1141                	addi	sp,sp,-16
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
	}
}

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016b9e:	800017b7          	lui	a5,0x80001
__metal_driver_sifive_uart0_set_baud_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:137
20016ba2:	c226                	sw	s1,4(sp)
20016ba4:	c04a                	sw	s2,0(sp)
20016ba6:	c606                	sw	ra,12(sp)
20016ba8:	c422                	sw	s0,8(sp)
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
20016baa:	a6078793          	addi	a5,a5,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
__metal_driver_sifive_uart0_set_baud_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:137
20016bae:	84aa                	mv	s1,a0
20016bb0:	892e                	mv	s2,a1
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
20016bb2:	02f50063          	beq	a0,a5,20016bd2 <__metal_driver_sifive_uart0_set_baud_rate+0x36>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1135
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
	}
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016bb6:	800017b7          	lui	a5,0x80001
20016bba:	a8078793          	addi	a5,a5,-1408 # 80000a80 <metal_segment_heap_target_end+0xffffea90>
20016bbe:	00f50a63          	beq	a0,a5,20016bd2 <__metal_driver_sifive_uart0_set_baud_rate+0x36>
__metal_driver_sifive_uart0_set_baud_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:142
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);

    uart->baud_rate = baud_rate;
20016bc2:	c0cc                	sw	a1,4(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:151
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
    }
    return 0;
}
20016bc4:	40b2                	lw	ra,12(sp)
20016bc6:	4422                	lw	s0,8(sp)
20016bc8:	4492                	lw	s1,4(sp)
20016bca:	4902                	lw	s2,0(sp)
20016bcc:	4501                	li	a0,0
20016bce:	0141                	addi	sp,sp,16
20016bd0:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:139
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
20016bd2:	8526                	mv	a0,s1
20016bd4:	3d3d                	jal	20016a12 <__metal_driver_sifive_uart0_control_base>
20016bd6:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:145
        long clock_rate = clock->vtable->get_rate_hz(clock);
20016bd8:	80000537          	lui	a0,0x80000
20016bdc:	09052783          	lw	a5,144(a0) # 80000090 <metal_segment_heap_target_end+0xffffe0a0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:142
    uart->baud_rate = baud_rate;
20016be0:	0124a223          	sw	s2,4(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:145
        long clock_rate = clock->vtable->get_rate_hz(clock);
20016be4:	09050513          	addi	a0,a0,144
20016be8:	439c                	lw	a5,0(a5)
20016bea:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:146
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20016bec:	03254533          	div	a0,a0,s2
20016bf0:	157d                	addi	a0,a0,-1
20016bf2:	cc08                	sw	a0,24(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:147
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20016bf4:	441c                	lw	a5,8(s0)
20016bf6:	0017e793          	ori	a5,a5,1
20016bfa:	c41c                	sw	a5,8(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:148
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20016bfc:	445c                	lw	a5,12(s0)
20016bfe:	0017e793          	ori	a5,a5,1
20016c02:	c45c                	sw	a5,12(s0)
20016c04:	b7c1                	j	20016bc4 <__metal_driver_sifive_uart0_set_baud_rate+0x28>

20016c06 <post_rate_change_callback_func>:
metal_uart_set_baud_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/uart.h:112
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart,
                                        int baud_rate) {
    return uart->vtable->set_baud_rate(uart, baud_rate);
20016c06:	4118                	lw	a4,0(a0)
20016c08:	414c                	lw	a1,4(a0)
20016c0a:	4b58                	lw	a4,20(a4)
20016c0c:	8702                	jr	a4

20016c0e <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:187
static void post_rate_change_callback_func(void *priv) {
    struct __metal_driver_sifive_uart0 *uart = priv;
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
}

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate) {
20016c0e:	1101                	addi	sp,sp,-32
20016c10:	c84a                	sw	s2,16(sp)
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016c12:	80001937          	lui	s2,0x80001
__metal_driver_sifive_uart0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:187
20016c16:	cc22                	sw	s0,24(sp)
20016c18:	c64e                	sw	s3,12(sp)
20016c1a:	ce06                	sw	ra,28(sp)
20016c1c:	ca26                	sw	s1,20(sp)
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
20016c1e:	a6090913          	addi	s2,s2,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
__metal_driver_sifive_uart0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:187
20016c22:	842a                	mv	s0,a0
20016c24:	89ae                	mv	s3,a1
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
20016c26:	01250963          	beq	a0,s2,20016c38 <__metal_driver_sifive_uart0_init+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1135
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016c2a:	800017b7          	lui	a5,0x80001
20016c2e:	a8078793          	addi	a5,a5,-1408 # 80000a80 <metal_segment_heap_target_end+0xffffea90>
__metal_driver_sifive_uart0_pinmux():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1152
	}
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
	}
	else {
		return 0;
20016c32:	4481                	li	s1,0
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1135
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016c34:	02f51c63          	bne	a0,a5,20016c6c <__metal_driver_sifive_uart0_init+0x5e>
__metal_driver_sifive_uart0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:194
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
    struct __metal_driver_sifive_gpio0 *pinmux =
        __metal_driver_sifive_uart0_pinmux(guart);

    if (clock != NULL) {
        uart->pre_rate_change_callback.callback =
20016c38:	200177b7          	lui	a5,0x20017
20016c3c:	cb678793          	addi	a5,a5,-842 # 20016cb6 <pre_rate_change_callback_func>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:197
            &pre_rate_change_callback_func;
        uart->pre_rate_change_callback.priv = guart;
        metal_clock_register_pre_rate_change_callback(
20016c40:	800004b7          	lui	s1,0x80000
20016c44:	09048513          	addi	a0,s1,144 # 80000090 <metal_segment_heap_target_end+0xffffe0a0>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:194
        uart->pre_rate_change_callback.callback =
20016c48:	c41c                	sw	a5,8(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:197
        metal_clock_register_pre_rate_change_callback(
20016c4a:	00840593          	addi	a1,s0,8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:196
        uart->pre_rate_change_callback.priv = guart;
20016c4e:	c440                	sw	s0,12(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:197
        metal_clock_register_pre_rate_change_callback(
20016c50:	220d                	jal	20016d72 <metal_clock_register_pre_rate_change_callback>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:200
            clock, &(uart->pre_rate_change_callback));

        uart->post_rate_change_callback.callback =
20016c52:	200177b7          	lui	a5,0x20017
20016c56:	c0678793          	addi	a5,a5,-1018 # 20016c06 <post_rate_change_callback_func>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:203
            &post_rate_change_callback_func;
        uart->post_rate_change_callback.priv = guart;
        metal_clock_register_post_rate_change_callback(
20016c5a:	09048513          	addi	a0,s1,144
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:200
        uart->post_rate_change_callback.callback =
20016c5e:	c85c                	sw	a5,20(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:202
        uart->post_rate_change_callback.priv = guart;
20016c60:	cc00                	sw	s0,24(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:203
        metal_clock_register_post_rate_change_callback(
20016c62:	01440593          	addi	a1,s0,20
20016c66:	220d                	jal	20016d88 <metal_clock_register_post_rate_change_callback>
20016c68:	81418493          	addi	s1,gp,-2028 # 80000ab4 <__metal_dt_gpio_10012000>
metal_uart_set_baud_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/uart.h:112
20016c6c:	401c                	lw	a5,0(s0)
20016c6e:	85ce                	mv	a1,s3
20016c70:	8522                	mv	a0,s0
20016c72:	4bdc                	lw	a5,20(a5)
20016c74:	9782                	jalr	a5
__metal_driver_sifive_uart0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:209
            clock, &(uart->post_rate_change_callback));
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);

    if (pinmux != NULL) {
20016c76:	c88d                	beqz	s1,20016ca8 <__metal_driver_sifive_uart0_init+0x9a>
__metal_driver_sifive_uart0_pinmux_source_selector():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1172
}

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
		return 196608;
20016c78:	00030637          	lui	a2,0x30
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1171
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016c7c:	01240b63          	beq	s0,s2,20016c92 <__metal_driver_sifive_uart0_init+0x84>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1174
	}
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016c80:	800017b7          	lui	a5,0x80001
20016c84:	a8078793          	addi	a5,a5,-1408 # 80000a80 <metal_segment_heap_target_end+0xffffea90>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1175
		return 8650752;
20016c88:	00840637          	lui	a2,0x840
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1174
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016c8c:	00f40363          	beq	s0,a5,20016c92 <__metal_driver_sifive_uart0_init+0x84>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1178
	}
	else {
		return 0;
20016c90:	4601                	li	a2,0
__metal_driver_sifive_uart0_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:214
        long pinmux_output_selector =
            __metal_driver_sifive_uart0_pinmux_output_selector(guart);
        long pinmux_source_selector =
            __metal_driver_sifive_uart0_pinmux_source_selector(guart);
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
20016c92:	409c                	lw	a5,0(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:218
                                       pinmux_output_selector,
                                       pinmux_source_selector);
    }
}
20016c94:	4462                	lw	s0,24(sp)
20016c96:	40f2                	lw	ra,28(sp)
20016c98:	4942                	lw	s2,16(sp)
20016c9a:	49b2                	lw	s3,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
20016c9c:	53dc                	lw	a5,36(a5)
20016c9e:	8526                	mv	a0,s1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:218
}
20016ca0:	44d2                	lw	s1,20(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
20016ca2:	4581                	li	a1,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:218
}
20016ca4:	6105                	addi	sp,sp,32
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
20016ca6:	8782                	jr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:218
}
20016ca8:	40f2                	lw	ra,28(sp)
20016caa:	4462                	lw	s0,24(sp)
20016cac:	44d2                	lw	s1,20(sp)
20016cae:	4942                	lw	s2,16(sp)
20016cb0:	49b2                	lw	s3,12(sp)
20016cb2:	6105                	addi	sp,sp,32
20016cb4:	8082                	ret

20016cb6 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:153
static void pre_rate_change_callback_func(void *priv) {
20016cb6:	1101                	addi	sp,sp,-32
20016cb8:	ca26                	sw	s1,20(sp)
20016cba:	ce06                	sw	ra,28(sp)
20016cbc:	cc22                	sw	s0,24(sp)
20016cbe:	84aa                	mv	s1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:156
        __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
20016cc0:	d53ff0ef          	jal	ra,20016a12 <__metal_driver_sifive_uart0_control_base>
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20016cc4:	800017b7          	lui	a5,0x80001
20016cc8:	a6078793          	addi	a5,a5,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
pre_rate_change_callback_func():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:156
20016ccc:	872a                	mv	a4,a0
__metal_driver_sifive_uart0_clock():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1132
20016cce:	00f48963          	beq	s1,a5,20016ce0 <pre_rate_change_callback_func+0x2a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1135
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016cd2:	800017b7          	lui	a5,0x80001
20016cd6:	a8078793          	addi	a5,a5,-1408 # 80000a80 <metal_segment_heap_target_end+0xffffea90>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1139
		return 0;
20016cda:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1135
	else if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10023000) {
20016cdc:	00f49663          	bne	s1,a5,20016ce8 <pre_rate_change_callback_func+0x32>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:1133
		return (struct metal_clock *)&__metal_dt_clock_4.clock;
20016ce0:	800007b7          	lui	a5,0x80000
20016ce4:	09078513          	addi	a0,a5,144 # 80000090 <metal_segment_heap_target_end+0xffffe0a0>
pre_rate_change_callback_func():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:163
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
20016ce8:	471c                	lw	a5,8(a4)
20016cea:	fff906b7          	lui	a3,0xfff90
20016cee:	16fd                	addi	a3,a3,-1
20016cf0:	8ff5                	and	a5,a5,a3
20016cf2:	c71c                	sw	a5,8(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:164
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
20016cf4:	471c                	lw	a5,8(a4)
20016cf6:	66c1                	lui	a3,0x10
20016cf8:	8fd5                	or	a5,a5,a3
20016cfa:	c71c                	sw	a5,8(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:166 (discriminator 1)
    while ((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0)
20016cfc:	4b5c                	lw	a5,20(a4)
20016cfe:	8b85                	andi	a5,a5,1
20016d00:	dff5                	beqz	a5,20016cfc <pre_rate_change_callback_func+0x46>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
20016d02:	411c                	lw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:174
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20016d04:	4700                	lw	s0,8(a4)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
20016d06:	439c                	lw	a5,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:174
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20016d08:	8809                	andi	s0,s0,2
20016d0a:	00143413          	seqz	s0,s0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
20016d0e:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:174
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20016d10:	0425                	addi	s0,s0,9
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:176
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20016d12:	02a40433          	mul	s0,s0,a0
20016d16:	40c8                	lw	a0,4(s1)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:178
    for (volatile long x = 0; x < cycles_to_wait; x++)
20016d18:	c602                	sw	zero,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:176
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20016d1a:	02a45433          	divu	s0,s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 1)
    for (volatile long x = 0; x < cycles_to_wait; x++)
20016d1e:	47b2                	lw	a5,12(sp)
20016d20:	0087c763          	blt	a5,s0,20016d2e <pre_rate_change_callback_func+0x78>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:180
}
20016d24:	40f2                	lw	ra,28(sp)
20016d26:	4462                	lw	s0,24(sp)
20016d28:	44d2                	lw	s1,20(sp)
20016d2a:	6105                	addi	sp,sp,32
20016d2c:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:179 (discriminator 3)
        __asm__("nop");
20016d2e:	0001                	nop
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 3)
    for (volatile long x = 0; x < cycles_to_wait; x++)
20016d30:	47b2                	lw	a5,12(sp)
20016d32:	0785                	addi	a5,a5,1
20016d34:	c63e                	sw	a5,12(sp)
20016d36:	b7e5                	j	20016d1e <pre_rate_change_callback_func+0x68>

20016d38 <_metal_clock_call_all_callbacks>:
_metal_clock_call_all_callbacks():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:50
_metal_clock_call_all_callbacks(const metal_clock_callback *const list) {
20016d38:	1141                	addi	sp,sp,-16
20016d3a:	c422                	sw	s0,8(sp)
20016d3c:	c606                	sw	ra,12(sp)
20016d3e:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:52
    while (current) {
20016d40:	e409                	bnez	s0,20016d4a <_metal_clock_call_all_callbacks+0x12>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:56
}
20016d42:	40b2                	lw	ra,12(sp)
20016d44:	4422                	lw	s0,8(sp)
20016d46:	0141                	addi	sp,sp,16
20016d48:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:53
        current->callback(current->priv);
20016d4a:	401c                	lw	a5,0(s0)
20016d4c:	4048                	lw	a0,4(s0)
20016d4e:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:54
        current = current->_next;
20016d50:	4400                	lw	s0,8(s0)
20016d52:	b7fd                	j	20016d40 <_metal_clock_call_all_callbacks+0x8>

20016d54 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:63
                                 metal_clock_callback *const cb) {
20016d54:	87aa                	mv	a5,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:64
    cb->_next = NULL;
20016d56:	0005a423          	sw	zero,8(a1) # 70008 <__heap_size+0x6f808>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:63
                                 metal_clock_callback *const cb) {
20016d5a:	852e                	mv	a0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:66
    if (!list) {
20016d5c:	c799                	beqz	a5,20016d6a <_metal_clock_append_to_callbacks+0x16>
20016d5e:	873e                	mv	a4,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:72
    while ((current->_next) != NULL) {
20016d60:	86ba                	mv	a3,a4
20016d62:	4718                	lw	a4,8(a4)
20016d64:	ff75                	bnez	a4,20016d60 <_metal_clock_append_to_callbacks+0xc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:76
    current->_next = cb;
20016d66:	c688                	sw	a0,8(a3)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:78
    return list;
20016d68:	853e                	mv	a0,a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:79
}
20016d6a:	8082                	ret

20016d6c <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:111
    return clk->vtable->get_rate_hz(clk);
20016d6c:	411c                	lw	a5,0(a0)
20016d6e:	439c                	lw	a5,0(a5)
20016d70:	8782                	jr	a5

20016d72 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:146
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_pre_rate_change_callback(struct metal_clock *clk,
                                              metal_clock_callback *cb) {
20016d72:	1141                	addi	sp,sp,-16
20016d74:	c422                	sw	s0,8(sp)
20016d76:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:148
    clk->_pre_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20016d78:	4148                	lw	a0,4(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:146
                                              metal_clock_callback *cb) {
20016d7a:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:148
        _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
20016d7c:	3fe1                	jal	20016d54 <_metal_clock_append_to_callbacks>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:149
}
20016d7e:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:147
    clk->_pre_rate_change_callback =
20016d80:	c048                	sw	a0,4(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:149
}
20016d82:	4422                	lw	s0,8(sp)
20016d84:	0141                	addi	sp,sp,16
20016d86:	8082                	ret

20016d88 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:159
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_post_rate_change_callback(struct metal_clock *clk,
                                               metal_clock_callback *cb) {
20016d88:	1141                	addi	sp,sp,-16
20016d8a:	c422                	sw	s0,8(sp)
20016d8c:	842a                	mv	s0,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:161
    clk->_post_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20016d8e:	4508                	lw	a0,8(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:159
                                               metal_clock_callback *cb) {
20016d90:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:161
        _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20016d92:	37c9                	jal	20016d54 <_metal_clock_append_to_callbacks>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:162
}
20016d94:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:160
    clk->_post_rate_change_callback =
20016d96:	c408                	sw	a0,8(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/clock.h:162
}
20016d98:	4422                	lw	s0,8(sp)
20016d9a:	0141                	addi	sp,sp,16
20016d9c:	8082                	ret

20016d9e <metal_cpu_get_timer>:
metal_cpu_get_timer():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/cpu.h:74
 *
 * @param cpu The CPU device handle
 * @return The value of the CPU cycle count timer
 */
__inline__ unsigned long long metal_cpu_get_timer(struct metal_cpu *cpu) {
    return cpu->vtable->mcycle_get(cpu);
20016d9e:	411c                	lw	a5,0(a0)
20016da0:	439c                	lw	a5,0(a5)
20016da2:	8782                	jr	a5

20016da4 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/cpu.h:225
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt *
metal_cpu_interrupt_controller(struct metal_cpu *cpu) {
    return cpu->vtable->controller_interrupt(cpu);
20016da4:	411c                	lw	a5,0(a0)
20016da6:	57dc                	lw	a5,44(a5)
20016da8:	8782                	jr	a5

20016daa <metal_cpu_get>:
metal_cpu_get():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/cpu.c:8

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu *metal_cpu_get(unsigned int hartid) {
    if (hartid < __METAL_DT_MAX_HARTS) {
20016daa:	e501                	bnez	a0,20016db2 <metal_cpu_get+0x8>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/cpu.c:9
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20016dac:	8201a503          	lw	a0,-2016(gp) # 80000ac0 <__metal_dt_prci_10008000+0x8>
20016db0:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/cpu.c:11
    }
    return NULL;
20016db2:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/cpu.c:12
}
20016db4:	8082                	ret

20016db6 <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/cpu.c:17

int metal_cpu_get_current_hartid() {
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r"(mhartid));
20016db6:	f1402573          	csrr	a0,mhartid
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/cpu.c:20
    return mhartid;
#endif
}
20016dba:	8082                	ret

20016dbc <metal_shutdown>:
metal_shutdown():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/shutdown.c:19 (discriminator 1)
#else
#pragma message(                                                               \
    "There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code) {
    while (1) {
        __asm__ volatile("nop");
20016dbc:	0001                	nop
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/shutdown.c:18 (discriminator 1)
    while (1) {
20016dbe:	bffd                	j	20016dbc <metal_shutdown>

20016dc0 <metal_timer_get_cyclecount>:
metal_timer_get_cyclecount():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/timer.c:15
#endif

#if defined(__METAL_DT_MAX_HARTS)
/* This implementation serves as a small shim that interfaces with the first
 * timer on a system. */
int metal_timer_get_cyclecount(int hartid, unsigned long long *mcc) {
20016dc0:	1141                	addi	sp,sp,-16
20016dc2:	c422                	sw	s0,8(sp)
20016dc4:	c606                	sw	ra,12(sp)
20016dc6:	842e                	mv	s0,a1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/timer.c:16
    struct metal_cpu *cpu = metal_cpu_get(hartid);
20016dc8:	37cd                	jal	20016daa <metal_cpu_get>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/timer.c:18

    if (cpu) {
20016dca:	c909                	beqz	a0,20016ddc <metal_timer_get_cyclecount+0x1c>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/timer.c:19
        *mcc = metal_cpu_get_timer(cpu);
20016dcc:	3fc9                	jal	20016d9e <metal_cpu_get_timer>
20016dce:	c008                	sw	a0,0(s0)
20016dd0:	c04c                	sw	a1,4(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/timer.c:20
        return 0;
20016dd2:	4501                	li	a0,0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/timer.c:23
    }
    return -1;
}
20016dd4:	40b2                	lw	ra,12(sp)
20016dd6:	4422                	lw	s0,8(sp)
20016dd8:	0141                	addi	sp,sp,16
20016dda:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/timer.c:22
    return -1;
20016ddc:	557d                	li	a0,-1
20016dde:	bfdd                	j	20016dd4 <metal_timer_get_cyclecount+0x14>
	...

20016e00 <__metal_vector_table>:
IRQ_0():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20016e00:	df4fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e04 <IRQ_1>:
IRQ_1():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20016e04:	df0fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e08 <IRQ_2>:
IRQ_2():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20016e08:	decfe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e0c <IRQ_3>:
IRQ_3():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
20016e0c:	e12fe06f          	j	2001541e <metal_software_interrupt_vector_handler>

20016e10 <IRQ_4>:
IRQ_4():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20016e10:	de4fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e14 <IRQ_5>:
IRQ_5():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20016e14:	de0fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e18 <IRQ_6>:
IRQ_6():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20016e18:	ddcfe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e1c <IRQ_7>:
IRQ_7():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
20016e1c:	e82fe06f          	j	2001549e <metal_timer_interrupt_vector_handler>

20016e20 <IRQ_8>:
IRQ_8():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
20016e20:	dd4fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e24 <IRQ_9>:
IRQ_9():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
20016e24:	dd0fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e28 <IRQ_10>:
IRQ_10():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
20016e28:	dccfe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e2c <IRQ_11>:
IRQ_11():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
20016e2c:	dc8fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e30 <IRQ_12>:
IRQ_12():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
20016e30:	dc4fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e34 <IRQ_13>:
IRQ_13():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
20016e34:	dc0fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e38 <IRQ_14>:
IRQ_14():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
20016e38:	dbcfe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e3c <IRQ_15>:
IRQ_15():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
20016e3c:	db8fe06f          	j	200153f4 <metal_interrupt_vector_handler>

20016e40 <IRQ_LC0>:
IRQ_LC0():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
20016e40:	edefe06f          	j	2001551e <metal_lc0_interrupt_vector_handler>

20016e44 <IRQ_LC1>:
IRQ_LC1():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
20016e44:	f5afe06f          	j	2001559e <metal_lc1_interrupt_vector_handler>

20016e48 <IRQ_LC2>:
IRQ_LC2():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
20016e48:	fd6fe06f          	j	2001561e <metal_lc2_interrupt_vector_handler>

20016e4c <IRQ_LC3>:
IRQ_LC3():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
20016e4c:	853fe06f          	j	2001569e <metal_lc3_interrupt_vector_handler>

20016e50 <IRQ_LC4>:
IRQ_LC4():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
20016e50:	8cffe06f          	j	2001571e <metal_lc4_interrupt_vector_handler>

20016e54 <IRQ_LC5>:
IRQ_LC5():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
20016e54:	94bfe06f          	j	2001579e <metal_lc5_interrupt_vector_handler>

20016e58 <IRQ_LC6>:
IRQ_LC6():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
20016e58:	9c7fe06f          	j	2001581e <metal_lc6_interrupt_vector_handler>

20016e5c <IRQ_LC7>:
IRQ_LC7():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
20016e5c:	a43fe06f          	j	2001589e <metal_lc7_interrupt_vector_handler>

20016e60 <IRQ_LC8>:
IRQ_LC8():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
20016e60:	abffe06f          	j	2001591e <metal_lc8_interrupt_vector_handler>

20016e64 <IRQ_LC9>:
IRQ_LC9():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
20016e64:	b3bfe06f          	j	2001599e <metal_lc9_interrupt_vector_handler>

20016e68 <IRQ_LC10>:
IRQ_LC10():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
20016e68:	bb7fe06f          	j	20015a1e <metal_lc10_interrupt_vector_handler>

20016e6c <IRQ_LC11>:
IRQ_LC11():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
20016e6c:	c33fe06f          	j	20015a9e <metal_lc11_interrupt_vector_handler>

20016e70 <IRQ_LC12>:
IRQ_LC12():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
20016e70:	caffe06f          	j	20015b1e <metal_lc12_interrupt_vector_handler>

20016e74 <IRQ_LC13>:
IRQ_LC13():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
20016e74:	d2bfe06f          	j	20015b9e <metal_lc13_interrupt_vector_handler>

20016e78 <IRQ_LC14>:
IRQ_LC14():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
20016e78:	da7fe06f          	j	20015c1e <metal_lc14_interrupt_vector_handler>

20016e7c <IRQ_LC15>:
IRQ_LC15():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
20016e7c:	e23fe06f          	j	20015c9e <metal_lc15_interrupt_vector_handler>

20016e80 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:209
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20016e80:	80000737          	lui	a4,0x80000
20016e84:	06070713          	addi	a4,a4,96 # 80000060 <metal_segment_heap_target_end+0xffffe070>
__metal_driver_fixed_clock_get_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/fixed-clock.c:12

#include <metal/drivers/fixed-clock.h>
#include <metal/machine.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk) {
20016e88:	87aa                	mv	a5,a0
__metal_driver_fixed_clock_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:209
20016e8a:	02e50763          	beq	a0,a4,20016eb8 <__metal_driver_fixed_clock_get_rate_hz+0x38>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:212
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20016e8e:	80000737          	lui	a4,0x80000
20016e92:	07870713          	addi	a4,a4,120 # 80000078 <metal_segment_heap_target_end+0xffffe088>
20016e96:	02e50663          	beq	a0,a4,20016ec2 <__metal_driver_fixed_clock_get_rate_hz+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:215
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
20016e9a:	80000737          	lui	a4,0x80000
20016e9e:	09c70713          	addi	a4,a4,156 # 8000009c <metal_segment_heap_target_end+0xffffe0ac>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:216
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
20016ea2:	6521                	lui	a0,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:215
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
20016ea4:	02e78363          	beq	a5,a4,20016eca <__metal_driver_fixed_clock_get_rate_hz+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:218
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_6) {
20016ea8:	80000737          	lui	a4,0x80000
20016eac:	0a870713          	addi	a4,a4,168 # 800000a8 <metal_segment_heap_target_end+0xffffe0b8>
20016eb0:	00e78d63          	beq	a5,a4,20016eca <__metal_driver_fixed_clock_get_rate_hz+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:222
		return 0;
20016eb4:	4501                	li	a0,0
20016eb6:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:210
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20016eb8:	00f42537          	lui	a0,0xf42
20016ebc:	40050513          	addi	a0,a0,1024 # f42400 <__heap_size+0xf41c00>
20016ec0:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:213
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20016ec2:	044aa537          	lui	a0,0x44aa
20016ec6:	20050513          	addi	a0,a0,512 # 44aa200 <__heap_size+0x44a9a00>
__metal_driver_fixed_clock_get_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/fixed-clock.c:14
    return __metal_driver_fixed_clock_rate(gclk);
}
20016eca:	8082                	ret

20016ecc <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:209
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
20016ecc:	80000737          	lui	a4,0x80000
20016ed0:	06070713          	addi	a4,a4,96 # 80000060 <metal_segment_heap_target_end+0xffffe070>
__metal_driver_fixed_clock_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/fixed-clock.c:17

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk,
                                            long target_hz) {
20016ed4:	87aa                	mv	a5,a0
__metal_driver_fixed_clock_rate():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:209
20016ed6:	02e50763          	beq	a0,a4,20016f04 <__metal_driver_fixed_clock_set_rate_hz+0x38>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:212
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_2) {
20016eda:	80000737          	lui	a4,0x80000
20016ede:	07870713          	addi	a4,a4,120 # 80000078 <metal_segment_heap_target_end+0xffffe088>
20016ee2:	02e50663          	beq	a0,a4,20016f0e <__metal_driver_fixed_clock_set_rate_hz+0x42>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:215
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
20016ee6:	80000737          	lui	a4,0x80000
20016eea:	09c70713          	addi	a4,a4,156 # 8000009c <metal_segment_heap_target_end+0xffffe0ac>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:216
		return METAL_FIXED_CLOCK_5_CLOCK_FREQUENCY;
20016eee:	6521                	lui	a0,0x8
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:215
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_5) {
20016ef0:	02e78363          	beq	a5,a4,20016f16 <__metal_driver_fixed_clock_set_rate_hz+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:218
	else if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_6) {
20016ef4:	80000737          	lui	a4,0x80000
20016ef8:	0a870713          	addi	a4,a4,168 # 800000a8 <metal_segment_heap_target_end+0xffffe0b8>
20016efc:	00e78d63          	beq	a5,a4,20016f16 <__metal_driver_fixed_clock_set_rate_hz+0x4a>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:222
		return 0;
20016f00:	4501                	li	a0,0
20016f02:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:210
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
20016f04:	00f42537          	lui	a0,0xf42
20016f08:	40050513          	addi	a0,a0,1024 # f42400 <__heap_size+0xf41c00>
20016f0c:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/bsp/build/debug/./metal/machine.h:213
		return METAL_FIXED_CLOCK_2_CLOCK_FREQUENCY;
20016f0e:	044aa537          	lui	a0,0x44aa
20016f12:	20050513          	addi	a0,a0,512 # 44aa200 <__heap_size+0x44a9a00>
__metal_driver_fixed_clock_set_rate_hz():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/drivers/fixed-clock.c:19
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
}
20016f16:	8082                	ret

20016f18 <_close>:
_close():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_close.c:3
#include <errno.h>

int _close(int file) {
20016f18:	1141                	addi	sp,sp,-16
20016f1a:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_close.c:4
    errno = ENOSYS;
20016f1c:	28e1                	jal	20016ff4 <__errno>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_close.c:6
    return -1;
}
20016f1e:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_close.c:4
    errno = ENOSYS;
20016f20:	05800793          	li	a5,88
20016f24:	c11c                	sw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_close.c:6
}
20016f26:	557d                	li	a0,-1
20016f28:	0141                	addi	sp,sp,16
20016f2a:	8082                	ret

20016f2c <_exit>:
_exit():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_exit.c:3
#include <metal/shutdown.h>

void _exit(int exit_status) {
20016f2c:	1141                	addi	sp,sp,-16
20016f2e:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_exit.c:4
    metal_shutdown(exit_status);
20016f30:	3571                	jal	20016dbc <metal_shutdown>

20016f32 <_fstat>:
_fstat():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_fstat.c:4
#include <errno.h>
#include <sys/stat.h>

int _fstat(int file, struct stat *st) {
20016f32:	1141                	addi	sp,sp,-16
20016f34:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_fstat.c:5
    errno = -ENOSYS;
20016f36:	287d                	jal	20016ff4 <__errno>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_fstat.c:7
    return -1;
}
20016f38:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_fstat.c:5
    errno = -ENOSYS;
20016f3a:	fa800793          	li	a5,-88
20016f3e:	c11c                	sw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_fstat.c:7
}
20016f40:	557d                	li	a0,-1
20016f42:	0141                	addi	sp,sp,16
20016f44:	8082                	ret

20016f46 <_isatty>:
_isatty():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_isatty.c:3
#include <unistd.h>

int _isatty(int file) { return (file == STDOUT_FILENO); }
20016f46:	157d                	addi	a0,a0,-1
20016f48:	00153513          	seqz	a0,a0
20016f4c:	8082                	ret

20016f4e <_lseek>:
_lseek():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_lseek.c:4
#include <errno.h>
#include <sys/types.h>

off_t _lseek(int file, off_t ptr, int dir) {
20016f4e:	1141                	addi	sp,sp,-16
20016f50:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_lseek.c:5
    errno = ENOSYS;
20016f52:	204d                	jal	20016ff4 <__errno>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_lseek.c:7
    return -1;
}
20016f54:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_lseek.c:5
    errno = ENOSYS;
20016f56:	05800793          	li	a5,88
20016f5a:	c11c                	sw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_lseek.c:7
}
20016f5c:	557d                	li	a0,-1
20016f5e:	0141                	addi	sp,sp,16
20016f60:	8082                	ret

20016f62 <_read>:
_read():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_read.c:4
#include <errno.h>
#include <sys/types.h>

ssize_t _read(int file, void *ptr, size_t len) {
20016f62:	1141                	addi	sp,sp,-16
20016f64:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_read.c:5
    errno = ENOSYS;
20016f66:	2079                	jal	20016ff4 <__errno>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_read.c:7
    return -1;
}
20016f68:	40b2                	lw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_read.c:5
    errno = ENOSYS;
20016f6a:	05800793          	li	a5,88
20016f6e:	c11c                	sw	a5,0(a0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_read.c:7
}
20016f70:	557d                	li	a0,-1
20016f72:	0141                	addi	sp,sp,16
20016f74:	8082                	ret

20016f76 <_sbrk>:
_sbrk():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:28

char *_sbrk(ptrdiff_t incr) {
    char *old = __brk;

    /* If __heap_size == 0, we can't allocate memory on the heap */
    if (&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20016f76:	80002737          	lui	a4,0x80002
20016f7a:	55018793          	addi	a5,gp,1360 # 800017f0 <_sp>
20016f7e:	ff070713          	addi	a4,a4,-16 # 80001ff0 <metal_segment_heap_target_end+0x0>
20016f82:	02e78563          	beq	a5,a4,20016fac <_sbrk+0x36>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:25
    char *old = __brk;
20016f86:	82418793          	addi	a5,gp,-2012 # 80000ac4 <__brk>
20016f8a:	85aa                	mv	a1,a0
20016f8c:	4388                	lw	a0,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:33
        return (void *)-1;
    }

    /* Don't move the break past the end of the heap */
    if ((__brk + incr) < &metal_segment_heap_target_end) {
20016f8e:	00b506b3          	add	a3,a0,a1
20016f92:	00e6fc63          	bgeu	a3,a4,20016faa <_sbrk+0x34>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:24
char *_sbrk(ptrdiff_t incr) {
20016f96:	1101                	addi	sp,sp,-32
20016f98:	ce06                	sw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:40
    } else {
        __brk = &metal_segment_heap_target_end;
        return (void *)-1;
    }
    /* Scrub out allocated memory to avoid spurious ECC errors */
    metal_mem_scrub(old, incr);
20016f9a:	c62a                	sw	a0,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:34
        __brk += incr;
20016f9c:	c394                	sw	a3,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:40
    metal_mem_scrub(old, incr);
20016f9e:	8ecf90ef          	jal	ra,2001008a <metal_mem_scrub>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:43

    return old;
}
20016fa2:	40f2                	lw	ra,28(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:42
    return old;
20016fa4:	4532                	lw	a0,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:43
}
20016fa6:	6105                	addi	sp,sp,32
20016fa8:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:36
        __brk = &metal_segment_heap_target_end;
20016faa:	c398                	sw	a4,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:29
        return (void *)-1;
20016fac:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_sbrk.c:43
}
20016fae:	8082                	ret

20016fb0 <_write>:
_write():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:7
#include <metal/tty.h>
#include <sys/types.h>
#include <unistd.h>

/* Write to a file.  */
ssize_t _write(int file, const void *ptr, size_t len) {
20016fb0:	1141                	addi	sp,sp,-16
20016fb2:	c606                	sw	ra,12(sp)
20016fb4:	c422                	sw	s0,8(sp)
20016fb6:	c226                	sw	s1,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:8
    if (file != STDOUT_FILENO) {
20016fb8:	4785                	li	a5,1
20016fba:	00f51963          	bne	a0,a5,20016fcc <_write+0x1c>
20016fbe:	842e                	mv	s0,a1
20016fc0:	00c584b3          	add	s1,a1,a2
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:14 (discriminator 1)
        errno = ENOSYS;
        return -1;
    }

    const char *bptr = ptr;
    for (size_t i = 0; i < len; ++i)
20016fc4:	00941e63          	bne	s0,s1,20016fe0 <_write+0x30>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:16
        metal_tty_putc(bptr[i]);
    return 0;
20016fc8:	4501                	li	a0,0
20016fca:	a031                	j	20016fd6 <_write+0x26>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:9
        errno = ENOSYS;
20016fcc:	2025                	jal	20016ff4 <__errno>
20016fce:	05800793          	li	a5,88
20016fd2:	c11c                	sw	a5,0(a0)
20016fd4:	557d                	li	a0,-1
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:17
}
20016fd6:	40b2                	lw	ra,12(sp)
20016fd8:	4422                	lw	s0,8(sp)
20016fda:	4492                	lw	s1,4(sp)
20016fdc:	0141                	addi	sp,sp,16
20016fde:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:15 (discriminator 3)
        metal_tty_putc(bptr[i]);
20016fe0:	00044503          	lbu	a0,0(s0)
20016fe4:	0405                	addi	s0,s0,1
20016fe6:	2451                	jal	2001726a <metal_tty_putc>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/gloss/sys_write.c:14 (discriminator 3)
    for (size_t i = 0; i < len; ++i)
20016fe8:	bff1                	j	20016fc4 <_write+0x14>

20016fea <atexit>:
atexit():
20016fea:	85aa                	mv	a1,a0
20016fec:	4681                	li	a3,0
20016fee:	4601                	li	a2,0
20016ff0:	4501                	li	a0,0
20016ff2:	a045                	j	20017092 <__register_exitproc>

20016ff4 <__errno>:
__errno():
20016ff4:	5ffea517          	auipc	a0,0x5ffea
20016ff8:	aac52503          	lw	a0,-1364(a0) # 80000aa0 <_impure_ptr>
20016ffc:	8082                	ret

20016ffe <__libc_fini_array>:
__libc_fini_array():
20016ffe:	1141                	addi	sp,sp,-16
20017000:	c422                	sw	s0,8(sp)
20017002:	c226                	sw	s1,4(sp)
20017004:	ffff9417          	auipc	s0,0xffff9
20017008:	2dc40413          	addi	s0,s0,732 # 200102e0 <__fini_array_end>
2001700c:	ffff9497          	auipc	s1,0xffff9
20017010:	2d448493          	addi	s1,s1,724 # 200102e0 <__fini_array_end>
20017014:	8c05                	sub	s0,s0,s1
20017016:	c606                	sw	ra,12(sp)
20017018:	8409                	srai	s0,s0,0x2
2001701a:	e411                	bnez	s0,20017026 <__libc_fini_array+0x28>
2001701c:	40b2                	lw	ra,12(sp)
2001701e:	4422                	lw	s0,8(sp)
20017020:	4492                	lw	s1,4(sp)
20017022:	0141                	addi	sp,sp,16
20017024:	8082                	ret
20017026:	147d                	addi	s0,s0,-1
20017028:	00241793          	slli	a5,s0,0x2
2001702c:	97a6                	add	a5,a5,s1
2001702e:	439c                	lw	a5,0(a5)
20017030:	9782                	jalr	a5
20017032:	b7e5                	j	2001701a <__libc_fini_array+0x1c>

20017034 <__libc_init_array>:
__libc_init_array():
20017034:	1141                	addi	sp,sp,-16
20017036:	c422                	sw	s0,8(sp)
20017038:	c226                	sw	s1,4(sp)
2001703a:	ffff9417          	auipc	s0,0xffff9
2001703e:	29640413          	addi	s0,s0,662 # 200102d0 <_use_hfxosc_ptr>
20017042:	ffff9497          	auipc	s1,0xffff9
20017046:	28e48493          	addi	s1,s1,654 # 200102d0 <_use_hfxosc_ptr>
2001704a:	8c81                	sub	s1,s1,s0
2001704c:	c04a                	sw	s2,0(sp)
2001704e:	c606                	sw	ra,12(sp)
20017050:	8489                	srai	s1,s1,0x2
20017052:	4901                	li	s2,0
20017054:	02991563          	bne	s2,s1,2001707e <__libc_init_array+0x4a>
20017058:	ffff9417          	auipc	s0,0xffff9
2001705c:	27840413          	addi	s0,s0,632 # 200102d0 <_use_hfxosc_ptr>
20017060:	ffff9497          	auipc	s1,0xffff9
20017064:	27048493          	addi	s1,s1,624 # 200102d0 <_use_hfxosc_ptr>
20017068:	8c81                	sub	s1,s1,s0
2001706a:	8489                	srai	s1,s1,0x2
2001706c:	4901                	li	s2,0
2001706e:	00991d63          	bne	s2,s1,20017088 <__libc_init_array+0x54>
20017072:	40b2                	lw	ra,12(sp)
20017074:	4422                	lw	s0,8(sp)
20017076:	4492                	lw	s1,4(sp)
20017078:	4902                	lw	s2,0(sp)
2001707a:	0141                	addi	sp,sp,16
2001707c:	8082                	ret
2001707e:	401c                	lw	a5,0(s0)
20017080:	0905                	addi	s2,s2,1
20017082:	0411                	addi	s0,s0,4
20017084:	9782                	jalr	a5
20017086:	b7f9                	j	20017054 <__libc_init_array+0x20>
20017088:	401c                	lw	a5,0(s0)
2001708a:	0905                	addi	s2,s2,1
2001708c:	0411                	addi	s0,s0,4
2001708e:	9782                	jalr	a5
20017090:	bff9                	j	2001706e <__libc_init_array+0x3a>

20017092 <__register_exitproc>:
__register_exitproc():
20017092:	88aa                	mv	a7,a0
20017094:	5ffea517          	auipc	a0,0x5ffea
20017098:	a4050513          	addi	a0,a0,-1472 # 80000ad4 <_global_atexit>
2001709c:	411c                	lw	a5,0(a0)
2001709e:	ef91                	bnez	a5,200170ba <__register_exitproc+0x28>
200170a0:	5ffea717          	auipc	a4,0x5ffea
200170a4:	a4070713          	addi	a4,a4,-1472 # 80000ae0 <_global_atexit0>
200170a8:	c118                	sw	a4,0(a0)
200170aa:	00000513          	li	a0,0
200170ae:	87ba                	mv	a5,a4
200170b0:	c509                	beqz	a0,200170ba <__register_exitproc+0x28>
200170b2:	411c                	lw	a5,0(a0)
200170b4:	08f72423          	sw	a5,136(a4)
200170b8:	87ba                	mv	a5,a4
200170ba:	43d8                	lw	a4,4(a5)
200170bc:	487d                	li	a6,31
200170be:	557d                	li	a0,-1
200170c0:	04e84663          	blt	a6,a4,2001710c <__register_exitproc+0x7a>
200170c4:	02088d63          	beqz	a7,200170fe <__register_exitproc+0x6c>
200170c8:	0887a803          	lw	a6,136(a5)
200170cc:	04080063          	beqz	a6,2001710c <__register_exitproc+0x7a>
200170d0:	00271513          	slli	a0,a4,0x2
200170d4:	9542                	add	a0,a0,a6
200170d6:	c110                	sw	a2,0(a0)
200170d8:	10082303          	lw	t1,256(a6) # c000100 <metal_segment_itim_target_end+0x4000100>
200170dc:	4605                	li	a2,1
200170de:	00e61633          	sll	a2,a2,a4
200170e2:	00c36333          	or	t1,t1,a2
200170e6:	10682023          	sw	t1,256(a6)
200170ea:	08d52023          	sw	a3,128(a0)
200170ee:	4689                	li	a3,2
200170f0:	00d89763          	bne	a7,a3,200170fe <__register_exitproc+0x6c>
200170f4:	10482683          	lw	a3,260(a6)
200170f8:	8e55                	or	a2,a2,a3
200170fa:	10c82223          	sw	a2,260(a6)
200170fe:	00170693          	addi	a3,a4,1
20017102:	070a                	slli	a4,a4,0x2
20017104:	c3d4                	sw	a3,4(a5)
20017106:	97ba                	add	a5,a5,a4
20017108:	c78c                	sw	a1,8(a5)
2001710a:	4501                	li	a0,0
2001710c:	8082                	ret

2001710e <__call_exitprocs>:
__call_exitprocs():
2001710e:	7179                	addi	sp,sp,-48
20017110:	ca56                	sw	s5,20(sp)
20017112:	c85a                	sw	s6,16(sp)
20017114:	c65e                	sw	s7,12(sp)
20017116:	c462                	sw	s8,8(sp)
20017118:	d606                	sw	ra,44(sp)
2001711a:	d422                	sw	s0,40(sp)
2001711c:	d226                	sw	s1,36(sp)
2001711e:	d04a                	sw	s2,32(sp)
20017120:	ce4e                	sw	s3,28(sp)
20017122:	cc52                	sw	s4,24(sp)
20017124:	c266                	sw	s9,4(sp)
20017126:	8b2a                	mv	s6,a0
20017128:	8aae                	mv	s5,a1
2001712a:	5ffeab97          	auipc	s7,0x5ffea
2001712e:	9aab8b93          	addi	s7,s7,-1622 # 80000ad4 <_global_atexit>
20017132:	4c05                	li	s8,1
20017134:	000ba483          	lw	s1,0(s7)
20017138:	cc81                	beqz	s1,20017150 <__call_exitprocs+0x42>
2001713a:	40c0                	lw	s0,4(s1)
2001713c:	0884a983          	lw	s3,136(s1)
20017140:	fff40913          	addi	s2,s0,-1
20017144:	040a                	slli	s0,s0,0x2
20017146:	00898a33          	add	s4,s3,s0
2001714a:	9426                	add	s0,s0,s1
2001714c:	00095f63          	bgez	s2,2001716a <__call_exitprocs+0x5c>
20017150:	50b2                	lw	ra,44(sp)
20017152:	5422                	lw	s0,40(sp)
20017154:	5492                	lw	s1,36(sp)
20017156:	5902                	lw	s2,32(sp)
20017158:	49f2                	lw	s3,28(sp)
2001715a:	4a62                	lw	s4,24(sp)
2001715c:	4ad2                	lw	s5,20(sp)
2001715e:	4b42                	lw	s6,16(sp)
20017160:	4bb2                	lw	s7,12(sp)
20017162:	4c22                	lw	s8,8(sp)
20017164:	4c92                	lw	s9,4(sp)
20017166:	6145                	addi	sp,sp,48
20017168:	8082                	ret
2001716a:	000a8c63          	beqz	s5,20017182 <__call_exitprocs+0x74>
2001716e:	00099663          	bnez	s3,2001717a <__call_exitprocs+0x6c>
20017172:	197d                	addi	s2,s2,-1
20017174:	1a71                	addi	s4,s4,-4
20017176:	1471                	addi	s0,s0,-4
20017178:	bfd1                	j	2001714c <__call_exitprocs+0x3e>
2001717a:	07ca2783          	lw	a5,124(s4)
2001717e:	ff579ae3          	bne	a5,s5,20017172 <__call_exitprocs+0x64>
20017182:	40d8                	lw	a4,4(s1)
20017184:	405c                	lw	a5,4(s0)
20017186:	177d                	addi	a4,a4,-1
20017188:	03271863          	bne	a4,s2,200171b8 <__call_exitprocs+0xaa>
2001718c:	0124a223          	sw	s2,4(s1)
20017190:	d3ed                	beqz	a5,20017172 <__call_exitprocs+0x64>
20017192:	0044ac83          	lw	s9,4(s1)
20017196:	00098863          	beqz	s3,200171a6 <__call_exitprocs+0x98>
2001719a:	1009a683          	lw	a3,256(s3)
2001719e:	012c1733          	sll	a4,s8,s2
200171a2:	8ef9                	and	a3,a3,a4
200171a4:	ee89                	bnez	a3,200171be <__call_exitprocs+0xb0>
200171a6:	9782                	jalr	a5
200171a8:	40d8                	lw	a4,4(s1)
200171aa:	000ba783          	lw	a5,0(s7)
200171ae:	f99713e3          	bne	a4,s9,20017134 <__call_exitprocs+0x26>
200171b2:	fcf480e3          	beq	s1,a5,20017172 <__call_exitprocs+0x64>
200171b6:	bfbd                	j	20017134 <__call_exitprocs+0x26>
200171b8:	00042223          	sw	zero,4(s0)
200171bc:	bfd1                	j	20017190 <__call_exitprocs+0x82>
200171be:	1049a683          	lw	a3,260(s3)
200171c2:	ffca2583          	lw	a1,-4(s4)
200171c6:	8f75                	and	a4,a4,a3
200171c8:	e701                	bnez	a4,200171d0 <__call_exitprocs+0xc2>
200171ca:	855a                	mv	a0,s6
200171cc:	9782                	jalr	a5
200171ce:	bfe9                	j	200171a8 <__call_exitprocs+0x9a>
200171d0:	852e                	mv	a0,a1
200171d2:	9782                	jalr	a5
200171d4:	bfd1                	j	200171a8 <__call_exitprocs+0x9a>

200171d6 <metal_init>:
metal_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:20
extern metal_destructor_t metal_destructors_end;

void metal_init(void) {
    /* Make sure the constructors only run once */
    static int init_done = 0;
    if (init_done) {
200171d6:	800017b7          	lui	a5,0x80001
200171da:	adc78793          	addi	a5,a5,-1316 # 80000adc <metal_segment_heap_target_end+0xffffeaec>
200171de:	4398                	lw	a4,0(a5)
200171e0:	ef15                	bnez	a4,2001721c <metal_init+0x46>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:17
void metal_init(void) {
200171e2:	1141                	addi	sp,sp,-16
200171e4:	c422                	sw	s0,8(sp)
200171e6:	c226                	sw	s1,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:25
        return;
    }
    init_done = 1;

    if (&metal_constructors_end <= &metal_constructors_start) {
200171e8:	20010437          	lui	s0,0x20010
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:17
void metal_init(void) {
200171ec:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:23
    init_done = 1;
200171ee:	4705                	li	a4,1
200171f0:	200104b7          	lui	s1,0x20010
200171f4:	c398                	sw	a4,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:25
    if (&metal_constructors_end <= &metal_constructors_start) {
200171f6:	2dc48493          	addi	s1,s1,732 # 200102dc <metal_sifive_fe310_g000_pll_init>
200171fa:	2d040793          	addi	a5,s0,720 # 200102d0 <_use_hfxosc_ptr>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:29
        return;
    }

    metal_constructor_t *funcptr = &metal_constructors_start;
200171fe:	2d040413          	addi	s0,s0,720
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:25
    if (&metal_constructors_end <= &metal_constructors_start) {
20017202:	0097ea63          	bltu	a5,s1,20017216 <metal_init+0x40>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:37

        func();

        funcptr += 1;
    }
}
20017206:	40b2                	lw	ra,12(sp)
20017208:	4422                	lw	s0,8(sp)
2001720a:	4492                	lw	s1,4(sp)
2001720c:	0141                	addi	sp,sp,16
2001720e:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:33
        func();
20017210:	401c                	lw	a5,0(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:35
        funcptr += 1;
20017212:	0411                	addi	s0,s0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:33
        func();
20017214:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
20017216:	fe941de3          	bne	s0,s1,20017210 <metal_init+0x3a>
2001721a:	b7f5                	j	20017206 <metal_init+0x30>
2001721c:	8082                	ret

2001721e <metal_fini>:
metal_fini():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:42

void metal_fini(void) {
    /* Make sure the destructors only run once */
    static int fini_done = 0;
    if (fini_done) {
2001721e:	800017b7          	lui	a5,0x80001
20017222:	ad878793          	addi	a5,a5,-1320 # 80000ad8 <metal_segment_heap_target_end+0xffffeae8>
20017226:	4398                	lw	a4,0(a5)
20017228:	ef15                	bnez	a4,20017264 <metal_fini+0x46>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:39
void metal_fini(void) {
2001722a:	1141                	addi	sp,sp,-16
2001722c:	c422                	sw	s0,8(sp)
2001722e:	c226                	sw	s1,4(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:47
        return;
    }
    fini_done = 1;

    if (&metal_destructors_end <= &metal_destructors_start) {
20017230:	20010437          	lui	s0,0x20010
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:39
void metal_fini(void) {
20017234:	c606                	sw	ra,12(sp)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:45
    fini_done = 1;
20017236:	4705                	li	a4,1
20017238:	200104b7          	lui	s1,0x20010
2001723c:	c398                	sw	a4,0(a5)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:47
    if (&metal_destructors_end <= &metal_destructors_start) {
2001723e:	2e048493          	addi	s1,s1,736 # 200102e0 <__fini_array_end>
20017242:	2e040793          	addi	a5,s0,736 # 200102e0 <__fini_array_end>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:51
        return;
    }

    metal_destructor_t *funcptr = &metal_destructors_start;
20017246:	2e040413          	addi	s0,s0,736
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:47
    if (&metal_destructors_end <= &metal_destructors_start) {
2001724a:	0097ea63          	bltu	a5,s1,2001725e <metal_fini+0x40>
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:59

        func();

        funcptr += 1;
    }
}
2001724e:	40b2                	lw	ra,12(sp)
20017250:	4422                	lw	s0,8(sp)
20017252:	4492                	lw	s1,4(sp)
20017254:	0141                	addi	sp,sp,16
20017256:	8082                	ret
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:55
        func();
20017258:	401c                	lw	a5,0(s0)
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:57
        funcptr += 1;
2001725a:	0411                	addi	s0,s0,4
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:55
        func();
2001725c:	9782                	jalr	a5
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
2001725e:	fe941de3          	bne	s0,s1,20017258 <metal_fini+0x3a>
20017262:	b7f5                	j	2001724e <metal_fini+0x30>
20017264:	8082                	ret

20017266 <metal_init_run>:
metal_init_run():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:69
 * in the case that users don't want the metal constructors or
 * destructors to run.
 */

void metal_init_run(void) __attribute__((weak));
void metal_init_run(void) { metal_init(); }
20017266:	bf85                	j	200171d6 <metal_init>

20017268 <metal_fini_run>:
metal_fini_run():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/init.c:72

void metal_fini_run(void) __attribute__((weak));
void metal_fini_run(void) { metal_fini(); }
20017268:	bf5d                	j	2001721e <metal_fini>

2001726a <metal_tty_putc>:
metal_tty_putc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/tty.c:12
int metal_tty_putc(int c) {
2001726a:	85aa                	mv	a1,a0
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/src/tty.c:13
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
2001726c:	80001537          	lui	a0,0x80001
20017270:	a6050513          	addi	a0,a0,-1440 # 80000a60 <metal_segment_heap_target_end+0xffffea70>
20017274:	a021                	j	2001727c <metal_uart_putc>

20017276 <metal_uart_init>:
metal_uart_init():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/uart.h:60
    uart->vtable->init(uart, baud_rate);
20017276:	411c                	lw	a5,0(a0)
20017278:	439c                	lw	a5,0(a5)
2001727a:	8782                	jr	a5

2001727c <metal_uart_putc>:
metal_uart_putc():
/Users/zeezooryu/wsFreedomStudio/EmbeddedCrypto/freedom-metal/metal/uart.h:70
    return uart->vtable->putc(uart, c);
2001727c:	411c                	lw	a5,0(a0)
2001727e:	43dc                	lw	a5,4(a5)
20017280:	8782                	jr	a5
